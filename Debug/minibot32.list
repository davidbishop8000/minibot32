
minibot32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800ae88  0800ae88  0001ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b080  0800b080  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800b080  0800b080  0001b080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b088  0800b088  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b088  0800b088  0001b088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800b098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          000068d4  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006904  20006904  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002492f  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056ee  00000000  00000000  0004498f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  0004a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001778  00000000  00000000  0004ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268bc  00000000  00000000  0004d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002105e  00000000  00000000  00073a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db39f  00000000  00000000  00094aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016fe49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006794  00000000  00000000  0016fe9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000030 	.word	0x20000030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae70 	.word	0x0800ae70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000034 	.word	0x20000034
 80001cc:	0800ae70 	.word	0x0800ae70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_CAN1_Init+0xc8>)
 80004dc:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <MX_CAN1_Init+0xcc>)
 80004de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e2:	2206      	movs	r2, #6
 80004e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_CAN1_Init+0xc8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_CAN1_Init+0xc8>)
 80004f4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80004f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_CAN1_Init+0xc8>)
 80004fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000500:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_CAN1_Init+0xc8>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_CAN1_Init+0xc8>)
 800050a:	2201      	movs	r2, #1
 800050c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_CAN1_Init+0xc8>)
 8000510:	2200      	movs	r2, #0
 8000512:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_CAN1_Init+0xc8>)
 8000516:	2200      	movs	r2, #0
 8000518:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_CAN1_Init+0xc8>)
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_CAN1_Init+0xc8>)
 8000522:	2201      	movs	r2, #1
 8000524:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <MX_CAN1_Init+0xc8>)
 8000528:	f003 f878 	bl	800361c <HAL_CAN_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000532:	f000 fb5f 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_CAN1_Init+0xc8>)
 8000560:	f003 f958 	bl	8003814 <HAL_CAN_ConfigFilter>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_CAN1_Init+0x9a>
  {
  	Error_Handler();
 800056a:	f000 fb43 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_CAN1_Init+0xc8>)
 8000570:	f003 fa30 	bl	80039d4 <HAL_CAN_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_CAN1_Init+0xaa>
	Error_Handler();
 800057a:	f000 fb3b 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1,
 800057e:	f648 4102 	movw	r1, #35842	; 0x8c02
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_CAN1_Init+0xc8>)
 8000584:	f003 fc8c 	bl	8003ea0 <HAL_CAN_ActivateNotification>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0xbe>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
	Error_Handler();
 800058e:	f000 fb31 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000004c 	.word	0x2000004c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <HAL_CAN_MspInit+0xa4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d13c      	bne.n	8000640 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a1f      	ldr	r2, [pc, #124]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000610:	2309      	movs	r3, #9
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <HAL_CAN_MspInit+0xac>)
 800061c:	f004 fb70 	bl	8004d00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2105      	movs	r1, #5
 8000624:	2014      	movs	r0, #20
 8000626:	f003 ff3f 	bl	80044a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800062a:	2014      	movs	r0, #20
 800062c:	f003 ff58 	bl	80044e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	2016      	movs	r0, #22
 8000636:	f003 ff37 	bl	80044a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800063a:	2016      	movs	r0, #22
 800063c:	f003 ff50 	bl	80044e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40006400 	.word	0x40006400
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400

08000654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_DMA_Init+0x78>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <MX_DMA_Init+0x78>)
 8000664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_DMA_Init+0x78>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_DMA_Init+0x78>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_DMA_Init+0x78>)
 8000680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_DMA_Init+0x78>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	200c      	movs	r0, #12
 8000698:	f003 ff06 	bl	80044a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800069c:	200c      	movs	r0, #12
 800069e:	f003 ff1f 	bl	80044e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2010      	movs	r0, #16
 80006a8:	f003 fefe 	bl	80044a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006ac:	2010      	movs	r0, #16
 80006ae:	f003 ff17 	bl	80044e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	203a      	movs	r0, #58	; 0x3a
 80006b8:	f003 fef6 	bl	80044a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006bc:	203a      	movs	r0, #58	; 0x3a
 80006be:	f003 ff0f 	bl	80044e0 <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <MX_FREERTOS_Init+0x88>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <MX_FREERTOS_Init+0x8c>)
 80006da:	f007 fe87 	bl	80083ec <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <MX_FREERTOS_Init+0x90>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of OutputsTask */
  OutputsTaskHandle = osThreadNew(StartOutputsTask, NULL, &OutputsTask_attributes);
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <MX_FREERTOS_Init+0x94>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	481f      	ldr	r0, [pc, #124]	; (8000768 <MX_FREERTOS_Init+0x98>)
 80006ea:	f007 fe7f 	bl	80083ec <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a1e      	ldr	r2, [pc, #120]	; (800076c <MX_FREERTOS_Init+0x9c>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of InputsTask */
  InputsTaskHandle = osThreadNew(StartInputsTask, NULL, &InputsTask_attributes);
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_FREERTOS_Init+0xa0>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <MX_FREERTOS_Init+0xa4>)
 80006fa:	f007 fe77 	bl	80083ec <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <MX_FREERTOS_Init+0xa8>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartServoTask, NULL, &ServoTask_attributes);
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <MX_FREERTOS_Init+0xac>)
 8000706:	2100      	movs	r1, #0
 8000708:	481d      	ldr	r0, [pc, #116]	; (8000780 <MX_FREERTOS_Init+0xb0>)
 800070a:	f007 fe6f 	bl	80083ec <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_FREERTOS_Init+0xb4>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of UartWiFiTask */
  UartWiFiTaskHandle = osThreadNew(StartUartWiFiTask, NULL, &UartWiFiTask_attributes);
 8000714:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_FREERTOS_Init+0xb8>)
 8000716:	2100      	movs	r1, #0
 8000718:	481c      	ldr	r0, [pc, #112]	; (800078c <MX_FREERTOS_Init+0xbc>)
 800071a:	f007 fe67 	bl	80083ec <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_FREERTOS_Init+0xc0>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of CanDriversTask */
  CanDriversTaskHandle = osThreadNew(StartCanDriversTask, NULL, &CanDriversTask_attributes);
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_FREERTOS_Init+0xc4>)
 8000726:	2100      	movs	r1, #0
 8000728:	481b      	ldr	r0, [pc, #108]	; (8000798 <MX_FREERTOS_Init+0xc8>)
 800072a:	f007 fe5f 	bl	80083ec <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <MX_FREERTOS_Init+0xcc>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 8000734:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <MX_FREERTOS_Init+0xd0>)
 8000736:	2100      	movs	r1, #0
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_FREERTOS_Init+0xd4>)
 800073a:	f007 fe57 	bl	80083ec <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <MX_FREERTOS_Init+0xd8>)
 8000742:	6013      	str	r3, [r2, #0]

  /* creation of MissionsTask */
  MissionsTaskHandle = osThreadNew(StartMissionsTask, NULL, &MissionsTask_attributes);
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <MX_FREERTOS_Init+0xdc>)
 8000746:	2100      	movs	r1, #0
 8000748:	4819      	ldr	r0, [pc, #100]	; (80007b0 <MX_FREERTOS_Init+0xe0>)
 800074a:	f007 fe4f 	bl	80083ec <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_FREERTOS_Init+0xe4>)
 8000752:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	0800af10 	.word	0x0800af10
 800075c:	080007b9 	.word	0x080007b9
 8000760:	200000d4 	.word	0x200000d4
 8000764:	0800af34 	.word	0x0800af34
 8000768:	080025d1 	.word	0x080025d1
 800076c:	20000334 	.word	0x20000334
 8000770:	0800af58 	.word	0x0800af58
 8000774:	08002385 	.word	0x08002385
 8000778:	20000594 	.word	0x20000594
 800077c:	0800af7c 	.word	0x0800af7c
 8000780:	0800289d 	.word	0x0800289d
 8000784:	200007f4 	.word	0x200007f4
 8000788:	0800afa0 	.word	0x0800afa0
 800078c:	08002961 	.word	0x08002961
 8000790:	20000a54 	.word	0x20000a54
 8000794:	0800afc4 	.word	0x0800afc4
 8000798:	08002065 	.word	0x08002065
 800079c:	20000eb4 	.word	0x20000eb4
 80007a0:	0800afe8 	.word	0x0800afe8
 80007a4:	08001e35 	.word	0x08001e35
 80007a8:	20001114 	.word	0x20001114
 80007ac:	0800b00c 	.word	0x0800b00c
 80007b0:	080025bf 	.word	0x080025bf
 80007b4:	20001574 	.word	0x20001574

080007b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f007 fea4 	bl	8008510 <osDelay>
 80007c8:	e7fa      	b.n	80007c0 <StartDefaultTask+0x8>
	...

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <MX_GPIO_Init+0x210>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a7c      	ldr	r2, [pc, #496]	; (80009dc <MX_GPIO_Init+0x210>)
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <MX_GPIO_Init+0x210>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b76      	ldr	r3, [pc, #472]	; (80009dc <MX_GPIO_Init+0x210>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a75      	ldr	r2, [pc, #468]	; (80009dc <MX_GPIO_Init+0x210>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <MX_GPIO_Init+0x210>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <MX_GPIO_Init+0x210>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a6e      	ldr	r2, [pc, #440]	; (80009dc <MX_GPIO_Init+0x210>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <MX_GPIO_Init+0x210>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b68      	ldr	r3, [pc, #416]	; (80009dc <MX_GPIO_Init+0x210>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a67      	ldr	r2, [pc, #412]	; (80009dc <MX_GPIO_Init+0x210>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <MX_GPIO_Init+0x210>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b61      	ldr	r3, [pc, #388]	; (80009dc <MX_GPIO_Init+0x210>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a60      	ldr	r2, [pc, #384]	; (80009dc <MX_GPIO_Init+0x210>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <MX_GPIO_Init+0x210>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <MX_GPIO_Init+0x210>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a59      	ldr	r2, [pc, #356]	; (80009dc <MX_GPIO_Init+0x210>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <MX_GPIO_Init+0x210>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2132      	movs	r1, #50	; 0x32
 800088e:	4854      	ldr	r0, [pc, #336]	; (80009e0 <MX_GPIO_Init+0x214>)
 8000890:	f004 fbd2 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800089a:	4852      	ldr	r0, [pc, #328]	; (80009e4 <MX_GPIO_Init+0x218>)
 800089c:	f004 fbcc 	bl	8005038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f24c 0103 	movw	r1, #49155	; 0xc003
 80008a6:	4850      	ldr	r0, [pc, #320]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80008a8:	f004 fbc6 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008ac:	2201      	movs	r2, #1
 80008ae:	f64f 7180 	movw	r1, #65408	; 0xff80
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <MX_GPIO_Init+0x220>)
 80008b4:	f004 fbc0 	bl	8005038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008be:	484c      	ldr	r0, [pc, #304]	; (80009f0 <MX_GPIO_Init+0x224>)
 80008c0:	f004 fbba 	bl	8005038 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008c4:	237e      	movs	r3, #126	; 0x7e
 80008c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4845      	ldr	r0, [pc, #276]	; (80009ec <MX_GPIO_Init+0x220>)
 80008d8:	f004 fa12 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008dc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	483b      	ldr	r0, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x214>)
 80008f2:	f004 fa05 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008f6:	2332      	movs	r3, #50	; 0x32
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4834      	ldr	r0, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x214>)
 800090e:	f004 f9f7 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000912:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8000916:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	482e      	ldr	r0, [pc, #184]	; (80009e4 <MX_GPIO_Init+0x218>)
 800092c:	f004 f9e8 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8000930:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x21c>)
 800094a:	f004 f9d9 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800094e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000952:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_GPIO_Init+0x220>)
 8000968:	f004 f9ca 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800096c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000970:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	; (80009f0 <MX_GPIO_Init+0x224>)
 8000986:	f004 f9bb 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800098a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x218>)
 80009a0:	f004 f9ae 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_GPIO_Init+0x224>)
 80009b8:	f004 f9a2 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009bc:	2338      	movs	r3, #56	; 0x38
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80009d0:	f004 f996 	bl	8004d00 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_IWDG_Init+0x2c>)
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <MX_IWDG_Init+0x30>)
 80009fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a06:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a0a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a0e:	f004 fb2c 	bl	800506a <HAL_IWDG_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 f8ec 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200019d4 	.word	0x200019d4
 8000a24:	40003000 	.word	0x40003000

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f002 fd90 	bl	8003550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f862 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff feca 	bl	80007cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a38:	f7ff fe0c 	bl	8000654 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a3c:	f000 fb9a 	bl	8001174 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a40:	f000 fbc2 	bl	80011c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a44:	f000 fbea 	bl	800121c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000a48:	f000 fa04 	bl	8000e54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a4c:	f000 fa9a 	bl	8000f84 <MX_TIM4_Init>
  MX_IWDG_Init();
 8000a50:	f7ff ffd0 	bl	80009f4 <MX_IWDG_Init>
  MX_CAN1_Init();
 8000a54:	f7ff fd3e 	bl	80004d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2500);
 8000a58:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000a5c:	f002 fdba 	bl	80035d4 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	491a      	ldr	r1, [pc, #104]	; (8000acc <main+0xa4>)
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <main+0xa8>)
 8000a66:	f006 fadc 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 8000a6a:	2264      	movs	r2, #100	; 0x64
 8000a6c:	4919      	ldr	r1, [pc, #100]	; (8000ad4 <main+0xac>)
 8000a6e:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <main+0xb0>)
 8000a70:	f006 fad7 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 8000a74:	2264      	movs	r2, #100	; 0x64
 8000a76:	4919      	ldr	r1, [pc, #100]	; (8000adc <main+0xb4>)
 8000a78:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <main+0xb8>)
 8000a7a:	f006 fad2 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>

  __HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <main+0xbc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <main+0xbc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0208 	bic.w	r2, r2, #8
 8000a8c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <main+0xc0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <main+0xc0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0208 	bic.w	r2, r2, #8
 8000a9c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <main+0xc4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <main+0xc4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 0208 	bic.w	r2, r2, #8
 8000aac:	601a      	str	r2, [r3, #0]

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000aae:	213c      	movs	r1, #60	; 0x3c
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <main+0xc8>)
 8000ab2:	f005 faef 	bl	8006094 <HAL_TIM_Encoder_Start>
  HAL_IWDG_Refresh(&hiwdg);
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <main+0xcc>)
 8000ab8:	f004 fb19 	bl	80050ee <HAL_IWDG_Refresh>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000abc:	f007 fc4c 	bl	8008358 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ac4:	f007 fc6c 	bl	80083a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0xa0>
 8000aca:	bf00      	nop
 8000acc:	20001f44 	.word	0x20001f44
 8000ad0:	20001ab8 	.word	0x20001ab8
 8000ad4:	20001ee0 	.word	0x20001ee0
 8000ad8:	20001afc 	.word	0x20001afc
 8000adc:	20001e7c 	.word	0x20001e7c
 8000ae0:	20001b40 	.word	0x20001b40
 8000ae4:	20001b84 	.word	0x20001b84
 8000ae8:	20001be4 	.word	0x20001be4
 8000aec:	20001c44 	.word	0x20001c44
 8000af0:	20001a70 	.word	0x20001a70
 8000af4:	200019d4 	.word	0x200019d4

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00a f9aa 	bl	800ae60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b54:	2309      	movs	r3, #9
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b70:	23a8      	movs	r3, #168	; 0xa8
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 fac5 	bl	8005110 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b8c:	f000 f832 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2105      	movs	r1, #5
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 fd26 	bl	8005600 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bba:	f000 f81b 	bl	8000bf4 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	; 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f002 fcd7 	bl	8003594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x54>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_MspInit+0x54>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x54>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_MspInit+0x54>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_MspInit+0x54>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x54>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	210f      	movs	r1, #15
 8000c42:	f06f 0001 	mvn.w	r0, #1
 8000c46:	f003 fc2f 	bl	80044a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a32      	ldr	r2, [pc, #200]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c84:	f107 0210 	add.w	r2, r7, #16
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fed6 	bl	8005a40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c9e:	f004 fea7 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ca4:	e004      	b.n	8000cb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ca6:	f004 fea3 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8000caa:	4603      	mov	r3, r0
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <HAL_InitTick+0xe8>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9b      	lsrs	r3, r3, #18
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_InitTick+0xec>)
 8000cc0:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <HAL_InitTick+0xf0>)
 8000cc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_InitTick+0xec>)
 8000cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ccc:	4a1d      	ldr	r2, [pc, #116]	; (8000d44 <HAL_InitTick+0xec>)
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_InitTick+0xec>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_InitTick+0xec>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_InitTick+0xec>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ce4:	4817      	ldr	r0, [pc, #92]	; (8000d44 <HAL_InitTick+0xec>)
 8000ce6:	f004 fedd 	bl	8005aa4 <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11b      	bne.n	8000d30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <HAL_InitTick+0xec>)
 8000cfa:	f004 ff23 	bl	8005b44 <HAL_TIM_Base_Start_IT>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d111      	bne.n	8000d30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d0c:	2036      	movs	r0, #54	; 0x36
 8000d0e:	f003 fbe7 	bl	80044e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d808      	bhi.n	8000d2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2036      	movs	r0, #54	; 0x36
 8000d1e:	f003 fbc3 	bl	80044a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_InitTick+0xf4>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e002      	b.n	8000d30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	431bde83 	.word	0x431bde83
 8000d44:	200019e0 	.word	0x200019e0
 8000d48:	40001000 	.word	0x40001000
 8000d4c:	20000024 	.word	0x20000024

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA1_Stream1_IRQHandler+0x10>)
 8000d82:	f003 fd53 	bl	800482c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20001c44 	.word	0x20001c44

08000d90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Stream5_IRQHandler+0x10>)
 8000d96:	f003 fd49 	bl	800482c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20001be4 	.word	0x20001be4

08000da4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <CAN1_RX0_IRQHandler+0x10>)
 8000daa:	f003 f89f 	bl	8003eec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000004c 	.word	0x2000004c

08000db8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <CAN1_SCE_IRQHandler+0x10>)
 8000dbe:	f003 f895 	bl	8003eec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000004c 	.word	0x2000004c

08000dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <USART1_IRQHandler+0x10>)
 8000dd2:	f006 f98b 	bl	80070ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001ab8 	.word	0x20001ab8

08000de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	f006 f981 	bl	80070ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20001afc 	.word	0x20001afc

08000df4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <USART3_IRQHandler+0x10>)
 8000dfa:	f006 f977 	bl	80070ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20001b40 	.word	0x20001b40

08000e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM6_DAC_IRQHandler+0x10>)
 8000e0e:	f005 f9cf 	bl	80061b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200019e0 	.word	0x200019e0

08000e1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <DMA2_Stream2_IRQHandler+0x10>)
 8000e22:	f003 fd03 	bl	800482c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20001b84 	.word	0x20001b84

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e86:	4a3e      	ldr	r2, [pc, #248]	; (8000f80 <MX_TIM3_Init+0x12c>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e8c:	f240 3247 	movw	r2, #839	; 0x347
 8000e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e9a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eac:	4833      	ldr	r0, [pc, #204]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eae:	f004 fdf9 	bl	8005aa4 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000eb8:	f7ff fe9c 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482c      	ldr	r0, [pc, #176]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eca:	f005 fb3b 	bl	8006544 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ed4:	f7ff fe8e 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed8:	4828      	ldr	r0, [pc, #160]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eda:	f004 fea3 	bl	8005c24 <HAL_TIM_PWM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ee4:	f7ff fe86 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ef8:	f005 ff24 	bl	8006d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f02:	f7ff fe77 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2360      	movs	r3, #96	; 0x60
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f1e:	f005 fa4f 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f28:	f7ff fe64 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f34:	f005 fa44 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f3e:	f7ff fe59 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2208      	movs	r2, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f4a:	f005 fa39 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f54:	f7ff fe4e 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f60:	f005 fa2e 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000f6a:	f7ff fe43 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f70:	f000 f8c6 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20001a28 	.word	0x20001a28
 8000f80:	40000400 	.word	0x40000400

08000f84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f009 ff64 	bl	800ae60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <MX_TIM4_Init+0xa4>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000ff2:	f004 ffa9 	bl	8005f48 <HAL_TIM_Encoder_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ffc:	f7ff fdfa 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_TIM4_Init+0xa0>)
 800100e:	f005 fe99 	bl	8006d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001018:	f7ff fdec 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	; 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20001a70 	.word	0x20001a70
 8001028:	40000800 	.word	0x40000800

0800102c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_TIM_Encoder_MspInit+0x84>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12b      	bne.n	80010ea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ca:	23c0      	movs	r3, #192	; 0xc0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010da:	2302      	movs	r3, #2
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80010e6:	f003 fe0b 	bl	8004d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40000800 	.word	0x40000800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020400 	.word	0x40020400

08001100 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_TIM_MspPostInit+0x68>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d11e      	bne.n	8001160 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800113e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_TIM_MspPostInit+0x70>)
 800115c:	f003 fdd0 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40000400 	.word	0x40000400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800

08001174 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_USART1_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011ac:	f005 fe5a 	bl	8006e64 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f7ff fd1d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20001ab8 	.word	0x20001ab8
 80011c4:	40011000 	.word	0x40011000

080011c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 8001200:	f005 fe30 	bl	8006e64 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f7ff fcf3 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20001afc 	.word	0x20001afc
 8001218:	40004400 	.word	0x40004400

0800121c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART3_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800122c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001254:	f005 fe06 	bl	8006e64 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f7ff fcc9 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001b40 	.word	0x20001b40
 800126c:	40004800 	.word	0x40004800

08001270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a9d      	ldr	r2, [pc, #628]	; (8001504 <HAL_UART_MspInit+0x294>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d163      	bne.n	800135a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a9b      	ldr	r2, [pc, #620]	; (8001508 <HAL_UART_MspInit+0x298>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b99      	ldr	r3, [pc, #612]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	4b95      	ldr	r3, [pc, #596]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a94      	ldr	r2, [pc, #592]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b92      	ldr	r3, [pc, #584]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012dc:	2307      	movs	r3, #7
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4889      	ldr	r0, [pc, #548]	; (800150c <HAL_UART_MspInit+0x29c>)
 80012e8:	f003 fd0a 	bl	8004d00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012ec:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <HAL_UART_MspInit+0x2a4>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012f2:	4b87      	ldr	r3, [pc, #540]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b83      	ldr	r3, [pc, #524]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800130e:	4b80      	ldr	r3, [pc, #512]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001320:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800132c:	4878      	ldr	r0, [pc, #480]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 800132e:	f003 f8e5 	bl	80044fc <HAL_DMA_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001338:	f7ff fc5c 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a74      	ldr	r2, [pc, #464]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001340:	639a      	str	r2, [r3, #56]	; 0x38
 8001342:	4a73      	ldr	r2, [pc, #460]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2105      	movs	r1, #5
 800134c:	2025      	movs	r0, #37	; 0x25
 800134e:	f003 f8ab 	bl	80044a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001352:	2025      	movs	r0, #37	; 0x25
 8001354:	f003 f8c4 	bl	80044e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001358:	e0cf      	b.n	80014fa <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_UART_MspInit+0x2a8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d162      	bne.n	800142a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_UART_MspInit+0x298>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_UART_MspInit+0x298>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a5f      	ldr	r2, [pc, #380]	; (8001508 <HAL_UART_MspInit+0x298>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139c:	230c      	movs	r3, #12
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ac:	2307      	movs	r3, #7
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4855      	ldr	r0, [pc, #340]	; (800150c <HAL_UART_MspInit+0x29c>)
 80013b8:	f003 fca2 	bl	8004d00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013bc:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013be:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_UART_MspInit+0x2b0>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b52      	ldr	r3, [pc, #328]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013de:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e4:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013ea:	4b4c      	ldr	r3, [pc, #304]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b49      	ldr	r3, [pc, #292]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013fc:	4847      	ldr	r0, [pc, #284]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013fe:	f003 f87d 	bl	80044fc <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001408:	f7ff fbf4 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_UART_MspInit+0x2ac>)
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <HAL_UART_MspInit+0x2ac>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2105      	movs	r1, #5
 800141c:	2026      	movs	r0, #38	; 0x26
 800141e:	f003 f843 	bl	80044a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001422:	2026      	movs	r0, #38	; 0x26
 8001424:	f003 f85c 	bl	80044e0 <HAL_NVIC_EnableIRQ>
}
 8001428:	e067      	b.n	80014fa <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART3)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <HAL_UART_MspInit+0x2b4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d162      	bne.n	80014fa <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_UART_MspInit+0x298>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_UART_MspInit+0x298>)
 800143e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <HAL_UART_MspInit+0x298>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800146c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800147e:	2307      	movs	r3, #7
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4827      	ldr	r0, [pc, #156]	; (8001528 <HAL_UART_MspInit+0x2b8>)
 800148a:	f003 fc39 	bl	8004d00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_UART_MspInit+0x2bc>)
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_UART_MspInit+0x2c0>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_UART_MspInit+0x2bc>)
 8001496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_UART_MspInit+0x2bc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014d0:	f003 f814 	bl	80044fc <HAL_DMA_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_UART_MspInit+0x26e>
      Error_Handler();
 80014da:	f7ff fb8b 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2105      	movs	r1, #5
 80014ee:	2027      	movs	r0, #39	; 0x27
 80014f0:	f002 ffda 	bl	80044a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014f4:	2027      	movs	r0, #39	; 0x27
 80014f6:	f002 fff3 	bl	80044e0 <HAL_NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3738      	adds	r7, #56	; 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40011000 	.word	0x40011000
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000
 8001510:	20001b84 	.word	0x20001b84
 8001514:	40026440 	.word	0x40026440
 8001518:	40004400 	.word	0x40004400
 800151c:	20001be4 	.word	0x20001be4
 8001520:	40026088 	.word	0x40026088
 8001524:	40004800 	.word	0x40004800
 8001528:	40020400 	.word	0x40020400
 800152c:	20001c44 	.word	0x20001c44
 8001530:	40026028 	.word	0x40026028

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153a:	490e      	ldr	r1, [pc, #56]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001550:	4c0b      	ldr	r4, [pc, #44]	; (8001580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155e:	f7ff fc67 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f009 fc4b 	bl	800adfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fa5f 	bl	8000a28 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800156c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001578:	0800b098 	.word	0x0800b098
  ldr r2, =_sbss
 800157c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001580:	20006904 	.word	0x20006904

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>

08001586 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef>:
 *      Author: user
 */

#include <KeyaLKTechDriver.h>

KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, uint32_t stdId, GlobDataTypeDef &globData) : _globData{globData}
 8001586:	b4b0      	push	{r4, r5, r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a3a      	ldr	r2, [r7, #32]
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c
{
	_axis = axis;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
	_canTxHeader.ExtId = extId;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	609a      	str	r2, [r3, #8]
	_canTxHeader.StdId = stdId;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	605a      	str	r2, [r3, #4]
	_canTxHeader.RTR = CAN_RTR_DATA;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
	_canTxHeader.DLC = 8;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2208      	movs	r2, #8
 80015fa:	615a      	str	r2, [r3, #20]
	_canTxHeader.TransmitGlobalTime = DISABLE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	761a      	strb	r2, [r3, #24]
	if (extId)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef+0x8a>
	{
		_canTxHeader.IDE = CAN_ID_EXT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2204      	movs	r2, #4
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	e002      	b.n	8001616 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef+0x90>
	}
	else
	{
		_canTxHeader.IDE = CAN_ID_STD;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
	}
	_globData = globData;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	4614      	mov	r4, r2
 800161e:	461d      	mov	r5, r3
 8001620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001624:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001628:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bcb0      	pop	{r4, r5, r7}
 8001636:	4770      	bx	lr

08001638 <_ZN16KeyaLKTechDriverC1EmmR15GlobDataTypeDef>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, GlobDataTypeDef &globData) : KeyaLKTechDriver::KeyaLKTechDriver(extId, axis, 0, globData){}
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ff98 	bl	8001586 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZN16KeyaLKTechDriverC1EmR15GlobDataTypeDef>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t stdId, GlobDataTypeDef &globData) : KeyaLKTechDriver::KeyaLKTechDriver(0, 0, stdId, globData){}
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff ff85 	bl	8001586 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZN16KeyaLKTechDriver8setSpeedEl>:

uint8_t KeyaLKTechDriver::setSpeed(int32_t speed)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	if (!_enabled) KeyaLKTechDriver::enable();
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f993 303a 	ldrsb.w	r3, [r3, #58]	; 0x3a
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <_ZN16KeyaLKTechDriver8setSpeedEl+0x1a>
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8a6 	bl	80017ec <_ZN16KeyaLKTechDriver6enableEv>
	osDelay(2);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f006 ff35 	bl	8008510 <osDelay>
	if (_axis)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d025      	beq.n	80016fa <_ZN16KeyaLKTechDriver8setSpeedEl+0x74>
	{
		_canData[0] = 0x23;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2223      	movs	r2, #35	; 0x23
 80016b2:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2220      	movs	r2, #32
 80016be:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	77da      	strb	r2, [r3, #31]
		_canData[4] = speed >> 24;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	161b      	asrs	r3, r3, #24
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = speed >> 16;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	141b      	asrs	r3, r3, #16
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = speed >> 8;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	121b      	asrs	r3, r3, #8
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = speed;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80016f8:	e022      	b.n	8001740 <_ZN16KeyaLKTechDriver8setSpeedEl+0xba>
	}
	else
	{
		_canData[0] = 0xA2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	22a2      	movs	r2, #162	; 0xa2
 80016fe:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	77da      	strb	r2, [r3, #31]
		_canData[4] = speed;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = speed >> 8;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	121b      	asrs	r3, r3, #8
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = speed >> 16;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	141b      	asrs	r3, r3, #16
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = speed >> 24;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	161b      	asrs	r3, r3, #24
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		_canData[5] = *((uint8_t *)(&speed)+1);
		_canData[6] = *((uint8_t *)(&speed)+2);
		_canData[7] = *((uint8_t *)(&speed)+3);*/
	}

	return KeyaLKTechDriver::sendData();
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fa8e 	bl	8001c62 <_ZN16KeyaLKTechDriver8sendDataEv>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZN16KeyaLKTechDriver4stopEv>:

uint8_t KeyaLKTechDriver::stop()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	if (_axis) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01e      	beq.n	800179e <_ZN16KeyaLKTechDriver4stopEv+0x4e>
		_canData[0] = 0x23;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2223      	movs	r2, #35	; 0x23
 8001764:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2220      	movs	r2, #32
 8001770:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800179c:	e01b      	b.n	80017d6 <_ZN16KeyaLKTechDriver4stopEv+0x86>
	} else {
		_canData[0] = 0x81;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2281      	movs	r2, #129	; 0x81
 80017a2:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	_speed = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
	return KeyaLKTechDriver::sendData();
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fa40 	bl	8001c62 <_ZN16KeyaLKTechDriver8sendDataEv>
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZN16KeyaLKTechDriver6enableEv>:
	KeyaLKTechDriver::setSpeed(_speed);
	return 0;
}

uint8_t KeyaLKTechDriver::enable()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01e      	beq.n	800183a <_ZN16KeyaLKTechDriver6enableEv+0x4e>
		_canData[0] = 0x23;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2223      	movs	r2, #35	; 0x23
 8001800:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x0D;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	220d      	movs	r2, #13
 8001806:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2220      	movs	r2, #32
 800180c:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001838:	e01b      	b.n	8001872 <_ZN16KeyaLKTechDriver6enableEv+0x86>
	} else {
		_canData[0] = 0x88;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2288      	movs	r2, #136	; 0x88
 800183e:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	_enabled = 1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	return KeyaLKTechDriver::sendData();
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f9f1 	bl	8001c62 <_ZN16KeyaLKTechDriver8sendDataEv>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZN16KeyaLKTechDriver5getIdEv>:
	_enabled = 0;
	return KeyaLKTechDriver::sendData();
}

uint32_t KeyaLKTechDriver::getId()
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]

	if (_canTxHeader.ExtId)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <_ZN16KeyaLKTechDriver5getIdEv+0x16>
	{
		return  _canTxHeader.ExtId;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	e001      	b.n	80018a4 <_ZN16KeyaLKTechDriver5getIdEv+0x1a>
	}
	return  _canTxHeader.StdId;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZN16KeyaLKTechDriver7readEncEv>:

uint8_t KeyaLKTechDriver::readEnc()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01e      	beq.n	80018fe <_ZN16KeyaLKTechDriver7readEncEv+0x4e>
		_canData[0] = 0x23;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2223      	movs	r2, #35	; 0x23
 80018c4:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x0C;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	220c      	movs	r2, #12
 80018ca:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80018fc:	e01b      	b.n	8001936 <_ZN16KeyaLKTechDriver7readEncEv+0x86>
	} else {
		_canData[0] = 0x9C;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	229c      	movs	r2, #156	; 0x9c
 8001902:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	return CanMsgSend(&_canTxHeader, _canData);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	331c      	adds	r3, #28
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f000 fb2b 	bl	8001f9c <CanMsgSend>
 8001946:	4603      	mov	r3, r0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN16KeyaLKTechDriver9readErrorEv>:

uint8_t KeyaLKTechDriver::readError()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if (_axis) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11b      	bne.n	8001998 <_ZN16KeyaLKTechDriver9readErrorEv+0x48>
//		_canData[4] = 0x00;
//		_canData[5] = 0x00;
//		_canData[6] = 0x00;
//		_canData[7] = 0x00;
	} else {
		_canData[0] = 0x9A;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	229a      	movs	r2, #154	; 0x9a
 8001964:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	return CanMsgSend(&_canTxHeader, _canData);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	1d1a      	adds	r2, r3, #4
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	331c      	adds	r3, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f000 fafa 	bl	8001f9c <CanMsgSend>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>:

uint8_t KeyaLKTechDriver::resetError()
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11b      	bne.n	80019fa <_ZN16KeyaLKTechDriver10resetErrorEv+0x48>
//		_canData[4] = 0x00;
//		_canData[5] = 0x00;
//		_canData[6] = 0x00;
//		_canData[7] = 0x00;
	} else {
		_canData[0] = 0x9B;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	229b      	movs	r2, #155	; 0x9b
 80019c6:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	return CanMsgSend(&_canTxHeader, _canData);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	1d1a      	adds	r2, r3, #4
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	331c      	adds	r3, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f000 fac9 	bl	8001f9c <CanMsgSend>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZN16KeyaLKTechDriver6getPosEv>:

int32_t KeyaLKTechDriver::getPos()
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	return _enc;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>:

int32_t KeyaLKTechDriver::getSpeed()
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return _speed;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_ZN16KeyaLKTechDriver8getErrorEv>:
{
	return _temp;
}

int8_t KeyaLKTechDriver::getError()
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return _error;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f993 303b 	ldrsb.w	r3, [r3, #59]	; 0x3b
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_ZN16KeyaLKTechDriver7setTempEa>:
{
	return _holding;
}

void KeyaLKTechDriver::setTemp(int8_t temp)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	70fb      	strb	r3, [r7, #3]
	_temp = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_ZN16KeyaLKTechDriver8setErrorEa>:

void KeyaLKTechDriver::setError(int8_t error)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70fb      	strb	r3, [r7, #3]
	_error = error;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <_ZN16KeyaLKTechDriver6setPosEl>:
{
	_enc_offset = _enc;
}

uint8_t KeyaLKTechDriver::setPos(int32_t pos)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	if (!_canTxHeader.ExtId)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d152      	bne.n	8001b58 <_ZN16KeyaLKTechDriver6setPosEl+0xb8>
	{
		//KeyaLKTechDriver::readEnc();
		//osDelay(5);
		//KeyaLKTechDriver::enable();
		if (pos < _enc - POS_TOLERANCE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	3b32      	subs	r3, #50	; 0x32
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	da1f      	bge.n	8001afe <_ZN16KeyaLKTechDriver6setPosEl+0x5e>
		{
			int32_t diff = _enc - pos;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	60bb      	str	r3, [r7, #8]
			if (diff > LK_MAX_SPEED)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4a39      	ldr	r2, [pc, #228]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	dd03      	ble.n	8001ad8 <_ZN16KeyaLKTechDriver6setPosEl+0x38>
			{
				_speed = -LK_MAX_SPEED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <_ZN16KeyaLKTechDriver6setPosEl+0x114>)
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ad6:	e00b      	b.n	8001af0 <_ZN16KeyaLKTechDriver6setPosEl+0x50>
			}
			else
			{
				_speed = -diff;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	425a      	negs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
				if (_speed > -LK_MIN_SPEED) _speed = -LK_MIN_SPEED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8001ae8:	dd02      	ble.n	8001af0 <_ZN16KeyaLKTechDriver6setPosEl+0x50>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a32      	ldr	r2, [pc, #200]	; (8001bb8 <_ZN16KeyaLKTechDriver6setPosEl+0x118>)
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
			}
			KeyaLKTechDriver::setSpeed(_speed);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fdc5 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001afc:	e028      	b.n	8001b50 <_ZN16KeyaLKTechDriver6setPosEl+0xb0>
		}
		else if (pos > _enc + POS_TOLERANCE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	3332      	adds	r3, #50	; 0x32
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dd1f      	ble.n	8001b4a <_ZN16KeyaLKTechDriver6setPosEl+0xaa>
		{
			int32_t diff = pos - _enc;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	60fb      	str	r3, [r7, #12]
			if (diff > LK_MAX_SPEED)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	dd03      	ble.n	8001b24 <_ZN16KeyaLKTechDriver6setPosEl+0x84>
			{
				_speed = LK_MAX_SPEED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
 8001b22:	e00b      	b.n	8001b3c <_ZN16KeyaLKTechDriver6setPosEl+0x9c>
			}
			else
			{
				_speed = diff;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
				if (_speed < LK_MIN_SPEED) _speed = LK_MIN_SPEED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b32:	da03      	bge.n	8001b3c <_ZN16KeyaLKTechDriver6setPosEl+0x9c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			KeyaLKTechDriver::setSpeed(_speed);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd9f 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001b48:	e002      	b.n	8001b50 <_ZN16KeyaLKTechDriver6setPosEl+0xb0>
		}
		else
		{
			KeyaLKTechDriver::stop();
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe00 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
		}
		osDelay(2);
 8001b50:	2002      	movs	r0, #2
 8001b52:	f006 fcdd 	bl	8008510 <osDelay>
 8001b56:	e025      	b.n	8001ba4 <_ZN16KeyaLKTechDriver6setPosEl+0x104>
	}
	else
	{
		if (pos < _enc - POS_TOLERANCE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	3b32      	subs	r3, #50	; 0x32
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	da09      	bge.n	8001b78 <_ZN16KeyaLKTechDriver6setPosEl+0xd8>
		{
			_speed = -LK_MAX_SPEED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <_ZN16KeyaLKTechDriver6setPosEl+0x114>)
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
			KeyaLKTechDriver::setSpeed(_speed);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fd88 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001b76:	e012      	b.n	8001b9e <_ZN16KeyaLKTechDriver6setPosEl+0xfe>
		}
		else if (pos > _enc + POS_TOLERANCE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	3332      	adds	r3, #50	; 0x32
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dd09      	ble.n	8001b98 <_ZN16KeyaLKTechDriver6setPosEl+0xf8>
		{
			_speed = LK_MAX_SPEED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
			KeyaLKTechDriver::setSpeed(_speed);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fd78 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001b96:	e002      	b.n	8001b9e <_ZN16KeyaLKTechDriver6setPosEl+0xfe>
		}
		else
		{
			KeyaLKTechDriver::stop();
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fdd9 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
		}
		osDelay(2);
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f006 fcb6 	bl	8008510 <osDelay>
	}
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	000186a0 	.word	0x000186a0
 8001bb4:	fffe7960 	.word	0xfffe7960
 8001bb8:	fffff830 	.word	0xfffff830

08001bbc <_ZN16KeyaLKTechDriver6setEncEl>:

void KeyaLKTechDriver::setEnc(int32_t enc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	if (!_canTxHeader.ExtId)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <_ZN16KeyaLKTechDriver6setEncEl+0x30>
	{
		_enc = KeyaLKTechDriver::UnwrapEncoder(enc, &_prevEnc) - _enc_offset;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3334      	adds	r3, #52	; 0x34
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f80e 	bl	8001bfa <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl>
 8001bde:	4602      	mov	r2, r0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	1ad2      	subs	r2, r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	else _enc = enc;
}
 8001bea:	e002      	b.n	8001bf2 <_ZN16KeyaLKTechDriver6setEncEl+0x36>
	else _enc = enc;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl>:

int32_t KeyaLKTechDriver::UnwrapEncoder(uint16_t in, int32_t *prev)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b089      	sub	sp, #36	; 0x24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	460b      	mov	r3, r1
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	817b      	strh	r3, [r7, #10]
    int32_t c32 = (int32_t)in - LK_ENC_HALF_PERIOD;
 8001c08:	897b      	ldrh	r3, [r7, #10]
 8001c0a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001c0e:	61bb      	str	r3, [r7, #24]
    int32_t dif = (c32-*prev);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]

    int32_t mod_dif = ((dif + LK_ENC_HALF_PERIOD) % LK_ENC_ONE_PERIOD) - LK_ENC_HALF_PERIOD;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c20:	425a      	negs	r2, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b292      	uxth	r2, r2
 8001c26:	bf58      	it	pl
 8001c28:	4253      	negpl	r3, r2
 8001c2a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001c2e:	61fb      	str	r3, [r7, #28]
    if(dif < -LK_ENC_HALF_PERIOD) {
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001c36:	da03      	bge.n	8001c40 <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl+0x46>
        mod_dif += LK_ENC_ONE_PERIOD;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c3e:	61fb      	str	r3, [r7, #28]
    }
    int32_t unwrapped = *prev + mod_dif;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
    *prev = unwrapped;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	601a      	str	r2, [r3, #0]

    return unwrapped + LK_ENC_HALF_PERIOD;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_ZN16KeyaLKTechDriver8sendDataEv>:

uint8_t KeyaLKTechDriver::sendData()
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	return CanMsgSend(&_canTxHeader, _canData);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1d1a      	adds	r2, r3, #4
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	331c      	adds	r3, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f000 f991 	bl	8001f9c <CanMsgSend>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN5ServoC1EP17TIM_HandleTypeDefm>:
 *      Author: user
 */

#include "Servo.h"

Servo::Servo(TIM_HandleTypeDef *htim, uint32_t timChannel)
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
{
	_htim = htim;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	601a      	str	r2, [r3, #0]
	_timChannel = timChannel;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	605a      	str	r2, [r3, #4]
}
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_ZN5Servo8setAngleEl>:
uint8_t Servo::setAngle(int32_t angle)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af02      	add	r7, sp, #8
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(_htim, _timChannel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f004 f80a 	bl	8005cd8 <HAL_TIM_PWM_Start>
	uint32_t angl = Servo::map(angle, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_W, SERVO_MAX_W);
 8001cc4:	f240 7399 	movw	r3, #1945	; 0x799
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f84d 	bl	8001d78 <_ZN5Servo3mapEiiiii>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]
//	if (_timChannel == TIM_CHANNEL_1) _htim->CCR1 = angl;
//	else if (_timChannel == TIM_CHANNEL_2) _htim->CCR2 = angl;
//	else if (_timChannel == TIM_CHANNEL_3) _htim->CCR3 = angl;
//	else if (_timChannel == TIM_CHANNEL_4) _htim->CCR4 = angl;
	__HAL_TIM_SET_COMPARE(_htim, _timChannel, angl);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <_ZN5Servo8setAngleEl+0x4c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf4:	e018      	b.n	8001d28 <_ZN5Servo8setAngleEl+0x7e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d105      	bne.n	8001d0a <_ZN5Servo8setAngleEl+0x60>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	639a      	str	r2, [r3, #56]	; 0x38
 8001d08:	e00e      	b.n	8001d28 <_ZN5Servo8setAngleEl+0x7e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d105      	bne.n	8001d1e <_ZN5Servo8setAngleEl+0x74>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d1c:	e004      	b.n	8001d28 <_ZN5Servo8setAngleEl+0x7e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
	_angle = angle;
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
	//osDelay(800);
	//HAL_TIM_PWM_Stop(_htim, _timChannel);
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN5Servo8getAngleEv>:
	return 0;

}

uint32_t Servo::getAngle()
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	return _angle;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN5Servo7disableEv>:
	_enabled = 1;
	HAL_TIM_PWM_Start(_htim, _timChannel);
	return 1;
}
uint8_t Servo::disable()
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	_enabled = 0;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Stop(_htim, _timChannel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f004 f87d 	bl	8005e68 <HAL_TIM_PWM_Stop>
	return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_ZN5Servo3mapEiiiii>:

int Servo::map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	69f9      	ldr	r1, [r7, #28]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	1a8a      	subs	r2, r1, r2
 8001d92:	fb03 f202 	mul.w	r2, r3, r2
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1acb      	subs	r3, r1, r3
 8001d9c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	4413      	add	r3, r2
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db12      	blt.n	8001e24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	490a      	ldr	r1, [pc, #40]	; (8001e30 <__NVIC_DisableIRQ+0x44>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	3320      	adds	r3, #32
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e18:	f3bf 8f4f 	dsb	sy
}
 8001e1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e1e:	f3bf 8f6f 	isb	sy
}
 8001e22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <StartCanTask>:
extern KeyaLKTechDriver DriverLR;

extern KeyaLKTechDriver *mdrivers[DRIVERS_QUANT];


void StartCanTask(void *argument) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		if (NewCanMsg == CAN_GET_MSG_OK) {
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <StartCanTask+0x4c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <StartCanTask+0x2a>
			NewCanMsg = CAN_GET_MSG_WAIT;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <StartCanTask+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
			CanMsgRead(&canDataRecv);
 8001e56:	480b      	ldr	r0, [pc, #44]	; (8001e84 <StartCanTask+0x50>)
 8001e58:	f000 f816 	bl	8001e88 <CanMsgRead>
 8001e5c:	e00c      	b.n	8001e78 <StartCanTask+0x44>
		}
		else if (NewCanMsg == CAN_GET_MSG_ERROR) {
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <StartCanTask+0x4c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <StartCanTask+0x44>
			NewCanMsg = CAN_GET_MSG_WAIT;
 8001e72:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <StartCanTask+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f006 fb49 	bl	8008510 <osDelay>
		if (NewCanMsg == CAN_GET_MSG_OK) {
 8001e7e:	e7dd      	b.n	8001e3c <StartCanTask+0x8>
 8001e80:	20001ca4 	.word	0x20001ca4
 8001e84:	20001cd0 	.word	0x20001cd0

08001e88 <CanMsgRead>:
	}
}

uint8_t CanMsgRead(CanDataRecvTypeDef *canDataRecv) {
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

	NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001e90:	2014      	movs	r0, #20
 8001e92:	f7ff ffab 	bl	8001dec <__NVIC_DisableIRQ>
	if (RxHeader.IDE == CAN_STD_ID)
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <CanMsgRead+0x100>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d148      	bne.n	8001f30 <CanMsgRead+0xa8>
	{
		for (int i=0; i<2; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	dc66      	bgt.n	8001f76 <CanMsgRead+0xee>
		{
			if (RxHeader.StdId == mdrivers[i]->getId()) {
 8001ea8:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <CanMsgRead+0x100>)
 8001eaa:	681c      	ldr	r4, [r3, #0]
 8001eac:	4a37      	ldr	r2, [pc, #220]	; (8001f8c <CanMsgRead+0x104>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fce8 	bl	800188a <_ZN16KeyaLKTechDriver5getIdEv>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	429c      	cmp	r4, r3
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d02e      	beq.n	8001f28 <CanMsgRead+0xa0>
				if (RxData[0] == 0x9C)
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <CanMsgRead+0x108>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b9c      	cmp	r3, #156	; 0x9c
 8001ed0:	d11b      	bne.n	8001f0a <CanMsgRead+0x82>
				{
					mdrivers[i]->setEnc(*(uint16_t*) &RxData[6]);
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <CanMsgRead+0x104>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <CanMsgRead+0x10c>)
 8001edc:	8812      	ldrh	r2, [r2, #0]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe6b 	bl	8001bbc <_ZN16KeyaLKTechDriver6setEncEl>
					mdrivers[i]->setTemp(RxData[1]);
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <CanMsgRead+0x104>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <CanMsgRead+0x108>)
 8001ef0:	7852      	ldrb	r2, [r2, #1]
 8001ef2:	b252      	sxtb	r2, r2
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fdb1 	bl	8001a5e <_ZN16KeyaLKTechDriver7setTempEa>
					mdrivers[i]->error_count = 0;
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <CanMsgRead+0x104>)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e00e      	b.n	8001f28 <CanMsgRead+0xa0>
				}
				else if (RxData[0] == 0x9A)
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <CanMsgRead+0x108>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b9a      	cmp	r3, #154	; 0x9a
 8001f10:	d10a      	bne.n	8001f28 <CanMsgRead+0xa0>
				{
					mdrivers[i]->setError(RxData[7]);
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <CanMsgRead+0x104>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <CanMsgRead+0x108>)
 8001f1c:	79d2      	ldrb	r2, [r2, #7]
 8001f1e:	b252      	sxtb	r2, r2
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fdab 	bl	8001a7e <_ZN16KeyaLKTechDriver8setErrorEa>
		for (int i=0; i<2; i++)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e7b8      	b.n	8001ea2 <CanMsgRead+0x1a>
			}
		}
	}
	else
	{
		if (RxHeader.ExtId == 0x05800001) {
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <CanMsgRead+0x100>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <CanMsgRead+0x110>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11d      	bne.n	8001f76 <CanMsgRead+0xee>
			if (RxData[0] == 0x60)
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <CanMsgRead+0x108>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b60      	cmp	r3, #96	; 0x60
 8001f40:	d116      	bne.n	8001f70 <CanMsgRead+0xe8>
			{
				mdrivers[2]->setTemp(RxData[6]);
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <CanMsgRead+0x104>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <CanMsgRead+0x108>)
 8001f48:	7992      	ldrb	r2, [r2, #6]
 8001f4a:	b252      	sxtb	r2, r2
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fd85 	bl	8001a5e <_ZN16KeyaLKTechDriver7setTempEa>
				mdrivers[3]->setTemp(RxData[7]);
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <CanMsgRead+0x104>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <CanMsgRead+0x108>)
 8001f5a:	79d2      	ldrb	r2, [r2, #7]
 8001f5c:	b252      	sxtb	r2, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fd7c 	bl	8001a5e <_ZN16KeyaLKTechDriver7setTempEa>
				mdrivers[2]->error_count = 0;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <CanMsgRead+0x104>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e002      	b.n	8001f76 <CanMsgRead+0xee>
			}
			else if (RxData[1] == 0x0D) {
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <CanMsgRead+0x108>)
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	2b0d      	cmp	r3, #13
				//diagMsg.motor1 = *(DriverErrMsgTypeDef*)&RxData[4];
				//diagMsg.motor2 = *(DriverErrMsgTypeDef*)&RxData[6];
			}
		}
	}
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f76:	2014      	movs	r0, #20
 8001f78:	f7ff ff1a 	bl	8001db0 <__NVIC_EnableIRQ>
	return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20001ca8 	.word	0x20001ca8
 8001f8c:	20001dd8 	.word	0x20001dd8
 8001f90:	20001cc4 	.word	0x20001cc4
 8001f94:	20001cca 	.word	0x20001cca
 8001f98:	05800001 	.word	0x05800001

08001f9c <CanMsgSend>:


uint8_t CanMsgSend(CAN_TxHeaderTypeDef *TxHeader, uint8_t canData[]) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]

	if (TxHeader->ExtId != 0 || TxHeader->StdId != 0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <CanMsgSend+0x1a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01b      	beq.n	8001fee <CanMsgSend+0x52>
	{
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8001fb6:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <CanMsgSend+0x5c>)
 8001fb8:	f001 fe2b 	bl	8003c12 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d000      	beq.n	8001fce <CanMsgSend+0x32>
 8001fcc:	e7f3      	b.n	8001fb6 <CanMsgSend+0x1a>
		if (HAL_CAN_AddTxMessage(&hcan1, TxHeader, canData, &TxMailbox) != HAL_OK) {
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <CanMsgSend+0x60>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <CanMsgSend+0x5c>)
 8001fd6:	f001 fd41 	bl	8003a5c <HAL_CAN_AddTxMessage>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <CanMsgSend+0x52>
			return 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <CanMsgSend+0x54>
		}
	}
	return 1;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000004c 	.word	0x2000004c
 8001ffc:	20001ccc 	.word	0x20001ccc

08002000 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800200c:	2100      	movs	r1, #0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f001 fe34 	bl	8003c7c <HAL_CAN_GetRxMessage>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		Error_Handler();
 8002024:	f7fe fde6 	bl	8000bf4 <Error_Handler>
	}
	NewCanMsg = CAN_GET_MSG_OK;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20001cc4 	.word	0x20001cc4
 800203c:	20001ca8 	.word	0x20001ca8
 8002040:	20001ca4 	.word	0x20001ca4

08002044 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	NewCanMsg = CAN_GET_MSG_ERROR;
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <HAL_CAN_ErrorCallback+0x1c>)
 800204e:	2202      	movs	r2, #2
 8002050:	701a      	strb	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20001ca4 	.word	0x20001ca4

08002064 <StartCanDriversTask>:
KeyaLKTechDriver driverY1(DRIVER_KEYA_ID + 0x600, 0x01, globData);
KeyaLKTechDriver driverY2(DRIVER_KEYA_ID + 0x600, 0x02, globData);
KeyaLKTechDriver *mdrivers[DRIVERS_QUANT];

void StartCanDriversTask(void *argument)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	driversInit();
 800206c:	f000 f8f6 	bl	800225c <driversInit>
	uint32_t err_check_timer = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
	enum MOVE_COMM command;
	for(;;)
	{
		driverX1.readEnc();
 8002074:	4873      	ldr	r0, [pc, #460]	; (8002244 <StartCanDriversTask+0x1e0>)
 8002076:	f7ff fc1b 	bl	80018b0 <_ZN16KeyaLKTechDriver7readEncEv>
		osDelay(2);
 800207a:	2002      	movs	r0, #2
 800207c:	f006 fa48 	bl	8008510 <osDelay>
		driverX2.readEnc();
 8002080:	4871      	ldr	r0, [pc, #452]	; (8002248 <StartCanDriversTask+0x1e4>)
 8002082:	f7ff fc15 	bl	80018b0 <_ZN16KeyaLKTechDriver7readEncEv>
		osDelay(2);
 8002086:	2002      	movs	r0, #2
 8002088:	f006 fa42 	bl	8008510 <osDelay>
		driverY1.setEnc(globData.enc_idle);
 800208c:	4b6f      	ldr	r3, [pc, #444]	; (800224c <StartCanDriversTask+0x1e8>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4619      	mov	r1, r3
 8002092:	486f      	ldr	r0, [pc, #444]	; (8002250 <StartCanDriversTask+0x1ec>)
 8002094:	f7ff fd92 	bl	8001bbc <_ZN16KeyaLKTechDriver6setEncEl>
		command = (MOVE_COMM)globData.current_comm;
 8002098:	4b6c      	ldr	r3, [pc, #432]	; (800224c <StartCanDriversTask+0x1e8>)
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	72fb      	strb	r3, [r7, #11]
		if (command != MOVE_NONE)
 800209e:	7afb      	ldrb	r3, [r7, #11]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d059      	beq.n	8002158 <StartCanDriversTask+0xf4>
		{
			if (command == MOVE_POS_X)
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d121      	bne.n	80020ee <StartCanDriversTask+0x8a>
			{
				driverX1.setPos(contrlMsg.pos_x);
 80020aa:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <StartCanDriversTask+0x1f0>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4619      	mov	r1, r3
 80020b0:	4864      	ldr	r0, [pc, #400]	; (8002244 <StartCanDriversTask+0x1e0>)
 80020b2:	f7ff fcf5 	bl	8001aa0 <_ZN16KeyaLKTechDriver6setPosEl>
				if (driverX1.getSpeed() == 0)
 80020b6:	4863      	ldr	r0, [pc, #396]	; (8002244 <StartCanDriversTask+0x1e0>)
 80020b8:	f7ff fcb8 	bl	8001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <StartCanDriversTask+0x76>
				{
					driverX2.stop();
 80020cc:	485e      	ldr	r0, [pc, #376]	; (8002248 <StartCanDriversTask+0x1e4>)
 80020ce:	f7ff fb3f 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
					globData.current_comm = MOVE_NONE;
 80020d2:	4b5e      	ldr	r3, [pc, #376]	; (800224c <StartCanDriversTask+0x1e8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	70da      	strb	r2, [r3, #3]
 80020d8:	e038      	b.n	800214c <StartCanDriversTask+0xe8>
				}
				else
				{
					driverX2.setSpeed(-driverX1.getSpeed());
 80020da:	485a      	ldr	r0, [pc, #360]	; (8002244 <StartCanDriversTask+0x1e0>)
 80020dc:	f7ff fca6 	bl	8001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>
 80020e0:	4603      	mov	r3, r0
 80020e2:	425b      	negs	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	4858      	ldr	r0, [pc, #352]	; (8002248 <StartCanDriversTask+0x1e4>)
 80020e8:	f7ff facd 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 80020ec:	e02e      	b.n	800214c <StartCanDriversTask+0xe8>
				}
			}
			else if (command == MOVE_POS_Y)
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d114      	bne.n	800211e <StartCanDriversTask+0xba>
			{
				driverY1.setPos(contrlMsg.pos_y);
 80020f4:	4b57      	ldr	r3, [pc, #348]	; (8002254 <StartCanDriversTask+0x1f0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4619      	mov	r1, r3
 80020fa:	4855      	ldr	r0, [pc, #340]	; (8002250 <StartCanDriversTask+0x1ec>)
 80020fc:	f7ff fcd0 	bl	8001aa0 <_ZN16KeyaLKTechDriver6setPosEl>
				if (driverY1.getSpeed() == 0)
 8002100:	4853      	ldr	r0, [pc, #332]	; (8002250 <StartCanDriversTask+0x1ec>)
 8002102:	f7ff fc93 	bl	8001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01a      	beq.n	800214c <StartCanDriversTask+0xe8>
				{
					globData.current_comm = MOVE_NONE;
 8002116:	4b4d      	ldr	r3, [pc, #308]	; (800224c <StartCanDriversTask+0x1e8>)
 8002118:	2200      	movs	r2, #0
 800211a:	70da      	strb	r2, [r3, #3]
 800211c:	e016      	b.n	800214c <StartCanDriversTask+0xe8>
				}
			}
			else if (command == MOVE_POS_FORK)
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d113      	bne.n	800214c <StartCanDriversTask+0xe8>
			{
				driverY2.setPos(contrlMsg.pos_fork);
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <StartCanDriversTask+0x1f0>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4619      	mov	r1, r3
 800212a:	484b      	ldr	r0, [pc, #300]	; (8002258 <StartCanDriversTask+0x1f4>)
 800212c:	f7ff fcb8 	bl	8001aa0 <_ZN16KeyaLKTechDriver6setPosEl>
				if (driverY2.getSpeed() == 0)
 8002130:	4849      	ldr	r0, [pc, #292]	; (8002258 <StartCanDriversTask+0x1f4>)
 8002132:	f7ff fc7b 	bl	8001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <StartCanDriversTask+0xe8>
				{
					globData.current_comm = MOVE_NONE;
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <StartCanDriversTask+0x1e8>)
 8002148:	2200      	movs	r2, #0
 800214a:	70da      	strb	r2, [r3, #3]
				}
			}
			if (command == MOVE_EMERGY_STOP)
 800214c:	7afb      	ldrb	r3, [r7, #11]
 800214e:	2b07      	cmp	r3, #7
 8002150:	d132      	bne.n	80021b8 <StartCanDriversTask+0x154>
			{
				driversStop();
 8002152:	f000 f8b9 	bl	80022c8 <driversStop>
 8002156:	e02f      	b.n	80021b8 <StartCanDriversTask+0x154>
			}
		}
		else
		{
			driverX1.readError();
 8002158:	483a      	ldr	r0, [pc, #232]	; (8002244 <StartCanDriversTask+0x1e0>)
 800215a:	f7ff fbf9 	bl	8001950 <_ZN16KeyaLKTechDriver9readErrorEv>
			osDelay(2);
 800215e:	2002      	movs	r0, #2
 8002160:	f006 f9d6 	bl	8008510 <osDelay>
			driverX2.readError();
 8002164:	4838      	ldr	r0, [pc, #224]	; (8002248 <StartCanDriversTask+0x1e4>)
 8002166:	f7ff fbf3 	bl	8001950 <_ZN16KeyaLKTechDriver9readErrorEv>
			osDelay(2);
 800216a:	2002      	movs	r0, #2
 800216c:	f006 f9d0 	bl	8008510 <osDelay>
			if (driverX1.getError())
 8002170:	4834      	ldr	r0, [pc, #208]	; (8002244 <StartCanDriversTask+0x1e0>)
 8002172:	f7ff fc67 	bl	8001a44 <_ZN16KeyaLKTechDriver8getErrorEv>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <StartCanDriversTask+0x12e>
			{
				driverX1.resetError();
 8002186:	482f      	ldr	r0, [pc, #188]	; (8002244 <StartCanDriversTask+0x1e0>)
 8002188:	f7ff fc13 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
				osDelay(2);
 800218c:	2002      	movs	r0, #2
 800218e:	f006 f9bf 	bl	8008510 <osDelay>
			}
			if (driverX2.getError())
 8002192:	482d      	ldr	r0, [pc, #180]	; (8002248 <StartCanDriversTask+0x1e4>)
 8002194:	f7ff fc56 	bl	8001a44 <_ZN16KeyaLKTechDriver8getErrorEv>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <StartCanDriversTask+0x150>
			{
				driverX2.resetError();
 80021a8:	4827      	ldr	r0, [pc, #156]	; (8002248 <StartCanDriversTask+0x1e4>)
 80021aa:	f7ff fc02 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
				osDelay(2);
 80021ae:	2002      	movs	r0, #2
 80021b0:	f006 f9ae 	bl	8008510 <osDelay>
			}
			driversStop();
 80021b4:	f000 f888 	bl	80022c8 <driversStop>
		}
		if (HAL_GetTick() - err_check_timer > 1000) {
 80021b8:	f001 fa00 	bl	80035bc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c6:	bf8c      	ite	hi
 80021c8:	2301      	movhi	r3, #1
 80021ca:	2300      	movls	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d034      	beq.n	800223c <StartCanDriversTask+0x1d8>
			driverX1.error_count++;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <StartCanDriversTask+0x1e0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <StartCanDriversTask+0x1e0>)
 80021da:	6013      	str	r3, [r2, #0]
			if (driverX1.error_count > 3) globData.error.driverX_err = 1;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <StartCanDriversTask+0x1e0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	dd05      	ble.n	80021f0 <StartCanDriversTask+0x18c>
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <StartCanDriversTask+0x1e8>)
 80021e6:	7a13      	ldrb	r3, [r2, #8]
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	7213      	strb	r3, [r2, #8]
 80021ee:	e004      	b.n	80021fa <StartCanDriversTask+0x196>
			else globData.error.driverX_err = 0;
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <StartCanDriversTask+0x1e8>)
 80021f2:	7a13      	ldrb	r3, [r2, #8]
 80021f4:	f36f 0300 	bfc	r3, #0, #1
 80021f8:	7213      	strb	r3, [r2, #8]
			driverY1.error_count++;
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <StartCanDriversTask+0x1ec>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	4a13      	ldr	r2, [pc, #76]	; (8002250 <StartCanDriversTask+0x1ec>)
 8002202:	6013      	str	r3, [r2, #0]
			if (driverY1.error_count > 3)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <StartCanDriversTask+0x1ec>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b03      	cmp	r3, #3
 800220a:	dd0a      	ble.n	8002222 <StartCanDriversTask+0x1be>
			{
				globData.error.driverY_err = 1;
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <StartCanDriversTask+0x1e8>)
 800220e:	7a13      	ldrb	r3, [r2, #8]
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	7213      	strb	r3, [r2, #8]
				globData.error.driverF_err = 1;
 8002216:	4a0d      	ldr	r2, [pc, #52]	; (800224c <StartCanDriversTask+0x1e8>)
 8002218:	7a13      	ldrb	r3, [r2, #8]
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	7213      	strb	r3, [r2, #8]
 8002220:	e009      	b.n	8002236 <StartCanDriversTask+0x1d2>
			}
			else
			{
				globData.error.driverY_err = 0;
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <StartCanDriversTask+0x1e8>)
 8002224:	7a13      	ldrb	r3, [r2, #8]
 8002226:	f36f 0341 	bfc	r3, #1, #1
 800222a:	7213      	strb	r3, [r2, #8]
				globData.error.driverF_err = 0;
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <StartCanDriversTask+0x1e8>)
 800222e:	7a13      	ldrb	r3, [r2, #8]
 8002230:	f36f 0382 	bfc	r3, #2, #1
 8002234:	7213      	strb	r3, [r2, #8]
			}
			err_check_timer = HAL_GetTick();
 8002236:	f001 f9c1 	bl	80035bc <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]
		}
		osDelay(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f006 f967 	bl	8008510 <osDelay>
		driverX1.readEnc();
 8002242:	e717      	b.n	8002074 <StartCanDriversTask+0x10>
 8002244:	20001cd8 	.word	0x20001cd8
 8002248:	20001d18 	.word	0x20001d18
 800224c:	20000074 	.word	0x20000074
 8002250:	20001d58 	.word	0x20001d58
 8002254:	2000008c 	.word	0x2000008c
 8002258:	20001d98 	.word	0x20001d98

0800225c <driversInit>:
	}
}

void driversInit()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	mdrivers[0] = &driverX1;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <driversInit+0x58>)
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <driversInit+0x5c>)
 8002264:	601a      	str	r2, [r3, #0]
	mdrivers[1] = &driverX2;
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <driversInit+0x58>)
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <driversInit+0x60>)
 800226a:	605a      	str	r2, [r3, #4]
	mdrivers[2] = &driverY1;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <driversInit+0x58>)
 800226e:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <driversInit+0x64>)
 8002270:	609a      	str	r2, [r3, #8]
	mdrivers[3] = &driverY2;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <driversInit+0x58>)
 8002274:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <driversInit+0x68>)
 8002276:	60da      	str	r2, [r3, #12]
	osDelay(1000);
 8002278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800227c:	f006 f948 	bl	8008510 <osDelay>
	driverX1.resetError();
 8002280:	480d      	ldr	r0, [pc, #52]	; (80022b8 <driversInit+0x5c>)
 8002282:	f7ff fb96 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
	osDelay(5);
 8002286:	2005      	movs	r0, #5
 8002288:	f006 f942 	bl	8008510 <osDelay>
	driverX2.resetError();
 800228c:	480b      	ldr	r0, [pc, #44]	; (80022bc <driversInit+0x60>)
 800228e:	f7ff fb90 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
	osDelay(5);
 8002292:	2005      	movs	r0, #5
 8002294:	f006 f93c 	bl	8008510 <osDelay>
	driverX1.enable();
 8002298:	4807      	ldr	r0, [pc, #28]	; (80022b8 <driversInit+0x5c>)
 800229a:	f7ff faa7 	bl	80017ec <_ZN16KeyaLKTechDriver6enableEv>
	osDelay(5);
 800229e:	2005      	movs	r0, #5
 80022a0:	f006 f936 	bl	8008510 <osDelay>
	driverX2.enable();
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <driversInit+0x60>)
 80022a6:	f7ff faa1 	bl	80017ec <_ZN16KeyaLKTechDriver6enableEv>
	osDelay(5);
 80022aa:	2005      	movs	r0, #5
 80022ac:	f006 f930 	bl	8008510 <osDelay>
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20001dd8 	.word	0x20001dd8
 80022b8:	20001cd8 	.word	0x20001cd8
 80022bc:	20001d18 	.word	0x20001d18
 80022c0:	20001d58 	.word	0x20001d58
 80022c4:	20001d98 	.word	0x20001d98

080022c8 <driversStop>:

void driversStop() {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	osDelay(2);
 80022cc:	2002      	movs	r0, #2
 80022ce:	f006 f91f 	bl	8008510 <osDelay>
	driverX1.stop();
 80022d2:	480a      	ldr	r0, [pc, #40]	; (80022fc <driversStop+0x34>)
 80022d4:	f7ff fa3c 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
	osDelay(2);
 80022d8:	2002      	movs	r0, #2
 80022da:	f006 f919 	bl	8008510 <osDelay>
	driverX2.stop();
 80022de:	4808      	ldr	r0, [pc, #32]	; (8002300 <driversStop+0x38>)
 80022e0:	f7ff fa36 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
	osDelay(2);
 80022e4:	2002      	movs	r0, #2
 80022e6:	f006 f913 	bl	8008510 <osDelay>
	driverY1.stop();
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <driversStop+0x3c>)
 80022ec:	f7ff fa30 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
	osDelay(2);
 80022f0:	2002      	movs	r0, #2
 80022f2:	f006 f90d 	bl	8008510 <osDelay>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20001cd8 	.word	0x20001cd8
 8002300:	20001d18 	.word	0x20001d18
 8002304:	20001d58 	.word	0x20001d58

08002308 <_Z41__static_initialization_and_destruction_0ii>:
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d11e      	bne.n	8002356 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231e:	4293      	cmp	r3, r2
 8002320:	d119      	bne.n	8002356 <_Z41__static_initialization_and_destruction_0ii+0x4e>
KeyaLKTechDriver driverX1(0x140 + DRIVER1_LKTECH_ID, globData);
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002324:	f240 1141 	movw	r1, #321	; 0x141
 8002328:	480e      	ldr	r0, [pc, #56]	; (8002364 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800232a:	f7ff f999 	bl	8001660 <_ZN16KeyaLKTechDriverC1EmR15GlobDataTypeDef>
KeyaLKTechDriver driverX2(0x140 + DRIVER2_LKTECH_ID, globData);
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002330:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002336:	f7ff f993 	bl	8001660 <_ZN16KeyaLKTechDriverC1EmR15GlobDataTypeDef>
KeyaLKTechDriver driverY1(DRIVER_KEYA_ID + 0x600, 0x01, globData);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800233c:	2201      	movs	r2, #1
 800233e:	f240 6101 	movw	r1, #1537	; 0x601
 8002342:	480a      	ldr	r0, [pc, #40]	; (800236c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002344:	f7ff f978 	bl	8001638 <_ZN16KeyaLKTechDriverC1EmmR15GlobDataTypeDef>
KeyaLKTechDriver driverY2(DRIVER_KEYA_ID + 0x600, 0x02, globData);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800234a:	2202      	movs	r2, #2
 800234c:	f240 6101 	movw	r1, #1537	; 0x601
 8002350:	4807      	ldr	r0, [pc, #28]	; (8002370 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002352:	f7ff f971 	bl	8001638 <_ZN16KeyaLKTechDriverC1EmmR15GlobDataTypeDef>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000074 	.word	0x20000074
 8002364:	20001cd8 	.word	0x20001cd8
 8002368:	20001d18 	.word	0x20001d18
 800236c:	20001d58 	.word	0x20001d58
 8002370:	20001d98 	.word	0x20001d98

08002374 <_GLOBAL__sub_I_driverX1>:
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
 8002378:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff ffc3 	bl	8002308 <_Z41__static_initialization_and_destruction_0ii>
 8002382:	bd80      	pop	{r7, pc}

08002384 <StartInputsTask>:
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;
int32_t enc_prev = 0;

void StartInputsTask(void *argument)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		static int32_t currCounter = 0;
		currCounter = __HAL_TIM_GET_COUNTER(&htim4);
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <StartInputsTask+0x1b0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	461a      	mov	r2, r3
 8002394:	4b68      	ldr	r3, [pc, #416]	; (8002538 <StartInputsTask+0x1b4>)
 8002396:	601a      	str	r2, [r3, #0]
		static int32_t enc_idle_tick = 0;
		enc_idle_tick = unwrap_encoder(currCounter, &enc_prev);
 8002398:	4b67      	ldr	r3, [pc, #412]	; (8002538 <StartInputsTask+0x1b4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4967      	ldr	r1, [pc, #412]	; (800253c <StartInputsTask+0x1b8>)
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f8d9 	bl	8002558 <unwrap_encoder>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a65      	ldr	r2, [pc, #404]	; (8002540 <StartInputsTask+0x1bc>)
 80023aa:	6013      	str	r3, [r2, #0]
		globData.enc_idle = enc_idle_tick*Y_WHEEL_RATIO;
 80023ac:	4b64      	ldr	r3, [pc, #400]	; (8002540 <StartInputsTask+0x1bc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a64      	ldr	r2, [pc, #400]	; (8002544 <StartInputsTask+0x1c0>)
 80023b2:	6113      	str	r3, [r2, #16]
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 80023b4:	4b64      	ldr	r3, [pc, #400]	; (8002548 <StartInputsTask+0x1c4>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <StartInputsTask+0x48>
 80023c0:	4a60      	ldr	r2, [pc, #384]	; (8002544 <StartInputsTask+0x1c0>)
 80023c2:	7993      	ldrb	r3, [r2, #6]
 80023c4:	f36f 0300 	bfc	r3, #0, #1
 80023c8:	7193      	strb	r3, [r2, #6]
 80023ca:	e004      	b.n	80023d6 <StartInputsTask+0x52>
 80023cc:	4a5d      	ldr	r2, [pc, #372]	; (8002544 <StartInputsTask+0x1c0>)
 80023ce:	7993      	ldrb	r3, [r2, #6]
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	7193      	strb	r3, [r2, #6]
		IN_X03 ? (globData.sens.limit_sw2 = 0) : (globData.sens.limit_sw2 = 1);
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <StartInputsTask+0x1c8>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <StartInputsTask+0x6a>
 80023e2:	4a58      	ldr	r2, [pc, #352]	; (8002544 <StartInputsTask+0x1c0>)
 80023e4:	7993      	ldrb	r3, [r2, #6]
 80023e6:	f36f 0341 	bfc	r3, #1, #1
 80023ea:	7193      	strb	r3, [r2, #6]
 80023ec:	e004      	b.n	80023f8 <StartInputsTask+0x74>
 80023ee:	4a55      	ldr	r2, [pc, #340]	; (8002544 <StartInputsTask+0x1c0>)
 80023f0:	7993      	ldrb	r3, [r2, #6]
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	7193      	strb	r3, [r2, #6]
		IN_X04 ? (globData.sens.limit_platform_up = 0) : (globData.sens.limit_platform_up = 1);
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <StartInputsTask+0x1c8>)
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <StartInputsTask+0x8c>
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <StartInputsTask+0x1c0>)
 8002406:	7993      	ldrb	r3, [r2, #6]
 8002408:	f36f 0382 	bfc	r3, #2, #1
 800240c:	7193      	strb	r3, [r2, #6]
 800240e:	e004      	b.n	800241a <StartInputsTask+0x96>
 8002410:	4a4c      	ldr	r2, [pc, #304]	; (8002544 <StartInputsTask+0x1c0>)
 8002412:	7993      	ldrb	r3, [r2, #6]
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	7193      	strb	r3, [r2, #6]
		IN_X05 ? (globData.sens.limit_platform_down = 0) : (globData.sens.limit_platform_down= 1);
 800241a:	4b4c      	ldr	r3, [pc, #304]	; (800254c <StartInputsTask+0x1c8>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <StartInputsTask+0xae>
 8002426:	4a47      	ldr	r2, [pc, #284]	; (8002544 <StartInputsTask+0x1c0>)
 8002428:	7993      	ldrb	r3, [r2, #6]
 800242a:	f36f 03c3 	bfc	r3, #3, #1
 800242e:	7193      	strb	r3, [r2, #6]
 8002430:	e004      	b.n	800243c <StartInputsTask+0xb8>
 8002432:	4a44      	ldr	r2, [pc, #272]	; (8002544 <StartInputsTask+0x1c0>)
 8002434:	7993      	ldrb	r3, [r2, #6]
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	7193      	strb	r3, [r2, #6]
		IN_X06 ? (globData.sens.limit_servo_open= 0) : (globData.sens.limit_servo_open = 1);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <StartInputsTask+0x1c8>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <StartInputsTask+0xd0>
 8002448:	4a3e      	ldr	r2, [pc, #248]	; (8002544 <StartInputsTask+0x1c0>)
 800244a:	7993      	ldrb	r3, [r2, #6]
 800244c:	f36f 1304 	bfc	r3, #4, #1
 8002450:	7193      	strb	r3, [r2, #6]
 8002452:	e004      	b.n	800245e <StartInputsTask+0xda>
 8002454:	4a3b      	ldr	r2, [pc, #236]	; (8002544 <StartInputsTask+0x1c0>)
 8002456:	7993      	ldrb	r3, [r2, #6]
 8002458:	f043 0310 	orr.w	r3, r3, #16
 800245c:	7193      	strb	r3, [r2, #6]
		IN_X07 ? (globData.sens.limit_servo_close = 0) : (globData.sens.limit_servo_close = 1);
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <StartInputsTask+0x1c8>)
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <StartInputsTask+0xf2>
 800246a:	4a36      	ldr	r2, [pc, #216]	; (8002544 <StartInputsTask+0x1c0>)
 800246c:	7993      	ldrb	r3, [r2, #6]
 800246e:	f36f 1345 	bfc	r3, #5, #1
 8002472:	7193      	strb	r3, [r2, #6]
 8002474:	e004      	b.n	8002480 <StartInputsTask+0xfc>
 8002476:	4a33      	ldr	r2, [pc, #204]	; (8002544 <StartInputsTask+0x1c0>)
 8002478:	7993      	ldrb	r3, [r2, #6]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	7193      	strb	r3, [r2, #6]
		IN_X08 ? (globData.sens.lim0 = 0) : (globData.sens.lim0 = 1);
 8002480:	4b32      	ldr	r3, [pc, #200]	; (800254c <StartInputsTask+0x1c8>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <StartInputsTask+0x114>
 800248c:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <StartInputsTask+0x1c0>)
 800248e:	7993      	ldrb	r3, [r2, #6]
 8002490:	f36f 1386 	bfc	r3, #6, #1
 8002494:	7193      	strb	r3, [r2, #6]
 8002496:	e004      	b.n	80024a2 <StartInputsTask+0x11e>
 8002498:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <StartInputsTask+0x1c0>)
 800249a:	7993      	ldrb	r3, [r2, #6]
 800249c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a0:	7193      	strb	r3, [r2, #6]
		IN_X09 ? (globData.sens.lim1 = 0) : (globData.sens.lim1 = 1);
 80024a2:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <StartInputsTask+0x1cc>)
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <StartInputsTask+0x136>
 80024ae:	4a25      	ldr	r2, [pc, #148]	; (8002544 <StartInputsTask+0x1c0>)
 80024b0:	7993      	ldrb	r3, [r2, #6]
 80024b2:	f36f 13c7 	bfc	r3, #7, #1
 80024b6:	7193      	strb	r3, [r2, #6]
 80024b8:	e004      	b.n	80024c4 <StartInputsTask+0x140>
 80024ba:	4a22      	ldr	r2, [pc, #136]	; (8002544 <StartInputsTask+0x1c0>)
 80024bc:	7993      	ldrb	r3, [r2, #6]
 80024be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c2:	7193      	strb	r3, [r2, #6]
		IN_X10 ? (globData.sens.lim2 = 0) : (globData.sens.lim2 = 1);
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <StartInputsTask+0x1cc>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <StartInputsTask+0x158>
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <StartInputsTask+0x1c0>)
 80024d2:	79d3      	ldrb	r3, [r2, #7]
 80024d4:	f36f 0300 	bfc	r3, #0, #1
 80024d8:	71d3      	strb	r3, [r2, #7]
 80024da:	e004      	b.n	80024e6 <StartInputsTask+0x162>
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <StartInputsTask+0x1c0>)
 80024de:	79d3      	ldrb	r3, [r2, #7]
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	71d3      	strb	r3, [r2, #7]
		IN_X11 ? (globData.sens.lim3 = 0) : (globData.sens.lim3 = 1);
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <StartInputsTask+0x1cc>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <StartInputsTask+0x17a>
 80024f2:	4a14      	ldr	r2, [pc, #80]	; (8002544 <StartInputsTask+0x1c0>)
 80024f4:	79d3      	ldrb	r3, [r2, #7]
 80024f6:	f36f 0341 	bfc	r3, #1, #1
 80024fa:	71d3      	strb	r3, [r2, #7]
 80024fc:	e004      	b.n	8002508 <StartInputsTask+0x184>
 80024fe:	4a11      	ldr	r2, [pc, #68]	; (8002544 <StartInputsTask+0x1c0>)
 8002500:	79d3      	ldrb	r3, [r2, #7]
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	71d3      	strb	r3, [r2, #7]
		IN_X12 ? (globData.sens.lim4 = 0) : (globData.sens.lim4 = 1);
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <StartInputsTask+0x1d0>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <StartInputsTask+0x19c>
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <StartInputsTask+0x1c0>)
 8002516:	79d3      	ldrb	r3, [r2, #7]
 8002518:	f36f 0382 	bfc	r3, #2, #1
 800251c:	71d3      	strb	r3, [r2, #7]
 800251e:	e004      	b.n	800252a <StartInputsTask+0x1a6>
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <StartInputsTask+0x1c0>)
 8002522:	79d3      	ldrb	r3, [r2, #7]
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	71d3      	strb	r3, [r2, #7]
		osDelay(1);
 800252a:	2001      	movs	r0, #1
 800252c:	f005 fff0 	bl	8008510 <osDelay>
	}
 8002530:	e72c      	b.n	800238c <StartInputsTask+0x8>
 8002532:	bf00      	nop
 8002534:	20001a70 	.word	0x20001a70
 8002538:	20001dec 	.word	0x20001dec
 800253c:	20001de8 	.word	0x20001de8
 8002540:	20001df0 	.word	0x20001df0
 8002544:	20000074 	.word	0x20000074
 8002548:	40020800 	.word	0x40020800
 800254c:	40021000 	.word	0x40021000
 8002550:	40020400 	.word	0x40020400
 8002554:	40020c00 	.word	0x40020c00

08002558 <unwrap_encoder>:
}

int32_t unwrap_encoder(uint16_t in, int32_t *prev)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	80fb      	strh	r3, [r7, #6]
    int32_t c32 = (int32_t)in - ENC_HALF_PERIOD;
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800256a:	613b      	str	r3, [r7, #16]
    int32_t dif = (c32-*prev);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	60fb      	str	r3, [r7, #12]

    int32_t mod_dif = ((dif + ENC_HALF_PERIOD) % ENC_ONE_PERIOD) - ENC_HALF_PERIOD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800257c:	425a      	negs	r2, r3
 800257e:	b29b      	uxth	r3, r3
 8002580:	b292      	uxth	r2, r2
 8002582:	bf58      	it	pl
 8002584:	4253      	negpl	r3, r2
 8002586:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800258a:	617b      	str	r3, [r7, #20]
    if(dif < -ENC_HALF_PERIOD) {
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002592:	da03      	bge.n	800259c <unwrap_encoder+0x44>
        mod_dif += ENC_ONE_PERIOD;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800259a:	617b      	str	r3, [r7, #20]
    }
    int32_t unwrapped = *prev + mod_dif;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4413      	add	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]
    *prev = unwrapped;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	601a      	str	r2, [r3, #0]

    return unwrapped + ENC_HALF_PERIOD;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <StartMissionsTask>:
#include "mission.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartMissionsTask(void *argument)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		osDelay(1000);
 80025c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ca:	f005 ffa1 	bl	8008510 <osDelay>
 80025ce:	e7fa      	b.n	80025c6 <StartMissionsTask+0x8>

080025d0 <StartOutputsTask>:
//extern IWDG_HandleTypeDef hiwdg;

uint32_t lift_check_timer = 0;

void StartOutputsTask(void *argument)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80025d8:	4807      	ldr	r0, [pc, #28]	; (80025f8 <StartOutputsTask+0x28>)
 80025da:	f002 fd88 	bl	80050ee <HAL_IWDG_Refresh>
		SetOutputs();
 80025de:	f000 f80f 	bl	8002600 <SetOutputs>
		if (globData.LEDB) LedBlink();
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <StartOutputsTask+0x2c>)
 80025e4:	795b      	ldrb	r3, [r3, #5]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <StartOutputsTask+0x1e>
 80025ea:	f000 f913 	bl	8002814 <LedBlink>
		osDelay(5);
 80025ee:	2005      	movs	r0, #5
 80025f0:	f005 ff8e 	bl	8008510 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 80025f4:	e7f0      	b.n	80025d8 <StartOutputsTask+0x8>
 80025f6:	bf00      	nop
 80025f8:	200019d4 	.word	0x200019d4
 80025fc:	20000074 	.word	0x20000074

08002600 <SetOutputs>:
	}
}

void SetOutputs()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	if (globData.current_comm == MOVE_LIFT && !globData.error.driverL_err)
 8002606:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <SetOutputs+0x1f4>)
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d15d      	bne.n	80026ca <SetOutputs+0xca>
 800260e:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <SetOutputs+0x1f4>)
 8002610:	7a1b      	ldrb	r3, [r3, #8]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d156      	bne.n	80026ca <SetOutputs+0xca>
	{
		if (contrlMsg.pos_lift == 1 && globData.sens.limit_platform_up == 0)
 800261c:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <SetOutputs+0x1f8>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d113      	bne.n	800264c <SetOutputs+0x4c>
 8002624:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <SetOutputs+0x1f4>)
 8002626:	799b      	ldrb	r3, [r3, #6]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <SetOutputs+0x4c>
		{
			Y01_ON;
 8002632:	4b72      	ldr	r3, [pc, #456]	; (80027fc <SetOutputs+0x1fc>)
 8002634:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002638:	619a      	str	r2, [r3, #24]
			Y02_OFF;
 800263a:	4b70      	ldr	r3, [pc, #448]	; (80027fc <SetOutputs+0x1fc>)
 800263c:	2220      	movs	r2, #32
 800263e:	619a      	str	r2, [r3, #24]
			lift_check_timer = HAL_GetTick();
 8002640:	f000 ffbc 	bl	80035bc <HAL_GetTick>
 8002644:	4603      	mov	r3, r0
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <SetOutputs+0x200>)
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e005      	b.n	8002658 <SetOutputs+0x58>
		}
		else
		{
			Y01_OFF;
 800264c:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <SetOutputs+0x1fc>)
 800264e:	2210      	movs	r2, #16
 8002650:	619a      	str	r2, [r3, #24]
			globData.current_comm = MOVE_NONE;
 8002652:	4b68      	ldr	r3, [pc, #416]	; (80027f4 <SetOutputs+0x1f4>)
 8002654:	2200      	movs	r2, #0
 8002656:	70da      	strb	r2, [r3, #3]
		}
		if (contrlMsg.pos_lift == 2 && globData.sens.limit_platform_down == 0)
 8002658:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <SetOutputs+0x1f8>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d113      	bne.n	8002688 <SetOutputs+0x88>
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <SetOutputs+0x1f4>)
 8002662:	799b      	ldrb	r3, [r3, #6]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <SetOutputs+0x88>
		{
			Y01_OFF;
 800266e:	4b63      	ldr	r3, [pc, #396]	; (80027fc <SetOutputs+0x1fc>)
 8002670:	2210      	movs	r2, #16
 8002672:	619a      	str	r2, [r3, #24]
			Y02_ON;
 8002674:	4b61      	ldr	r3, [pc, #388]	; (80027fc <SetOutputs+0x1fc>)
 8002676:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800267a:	619a      	str	r2, [r3, #24]
			lift_check_timer = HAL_GetTick();
 800267c:	f000 ff9e 	bl	80035bc <HAL_GetTick>
 8002680:	4603      	mov	r3, r0
 8002682:	4a5f      	ldr	r2, [pc, #380]	; (8002800 <SetOutputs+0x200>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e005      	b.n	8002694 <SetOutputs+0x94>
		}
		else
		{
			Y02_OFF;
 8002688:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <SetOutputs+0x1fc>)
 800268a:	2220      	movs	r2, #32
 800268c:	619a      	str	r2, [r3, #24]
			globData.current_comm = MOVE_NONE;
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <SetOutputs+0x1f4>)
 8002690:	2200      	movs	r2, #0
 8002692:	70da      	strb	r2, [r3, #3]
		}
		if (HAL_GetTick() - lift_check_timer > 8000) {
 8002694:	f000 ff92 	bl	80035bc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	4b59      	ldr	r3, [pc, #356]	; (8002800 <SetOutputs+0x200>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80026a4:	bf8c      	ite	hi
 80026a6:	2301      	movhi	r3, #1
 80026a8:	2300      	movls	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 809d 	beq.w	80027ec <SetOutputs+0x1ec>

			globData.error.driverL_err = 1;
 80026b2:	4a50      	ldr	r2, [pc, #320]	; (80027f4 <SetOutputs+0x1f4>)
 80026b4:	7a13      	ldrb	r3, [r2, #8]
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	7213      	strb	r3, [r2, #8]
			Y01_OFF;
 80026bc:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <SetOutputs+0x1fc>)
 80026be:	2210      	movs	r2, #16
 80026c0:	619a      	str	r2, [r3, #24]
			Y02_OFF;
 80026c2:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <SetOutputs+0x1fc>)
 80026c4:	2220      	movs	r2, #32
 80026c6:	619a      	str	r2, [r3, #24]
		if (HAL_GetTick() - lift_check_timer > 8000) {
 80026c8:	e090      	b.n	80027ec <SetOutputs+0x1ec>
		}
	}
	else if (!*(uint16_t*)&globData.error) {
 80026ca:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <SetOutputs+0x204>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d131      	bne.n	8002736 <SetOutputs+0x136>
		Y01_OFF;
 80026d2:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <SetOutputs+0x1fc>)
 80026d4:	2210      	movs	r2, #16
 80026d6:	619a      	str	r2, [r3, #24]
		Y02_OFF;
 80026d8:	4b48      	ldr	r3, [pc, #288]	; (80027fc <SetOutputs+0x1fc>)
 80026da:	2220      	movs	r2, #32
 80026dc:	619a      	str	r2, [r3, #24]

		Y21_ON;
 80026de:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <SetOutputs+0x208>)
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	619a      	str	r2, [r3, #24]
		osDelay(100);
 80026e6:	2064      	movs	r0, #100	; 0x64
 80026e8:	f005 ff12 	bl	8008510 <osDelay>
		Y22_ON;
 80026ec:	4b46      	ldr	r3, [pc, #280]	; (8002808 <SetOutputs+0x208>)
 80026ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026f2:	619a      	str	r2, [r3, #24]
		osDelay(20);
 80026f4:	2014      	movs	r0, #20
 80026f6:	f005 ff0b 	bl	8008510 <osDelay>
		Y21_OFF;
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <SetOutputs+0x208>)
 80026fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002700:	619a      	str	r2, [r3, #24]
		osDelay(100);
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	f005 ff04 	bl	8008510 <osDelay>
		Y23_ON;
 8002708:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <SetOutputs+0x208>)
 800270a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800270e:	619a      	str	r2, [r3, #24]
		osDelay(20);
 8002710:	2014      	movs	r0, #20
 8002712:	f005 fefd 	bl	8008510 <osDelay>
		Y22_OFF;
 8002716:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <SetOutputs+0x208>)
 8002718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800271c:	619a      	str	r2, [r3, #24]
		osDelay(100);
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	f005 fef6 	bl	8008510 <osDelay>
		Y23_OFF;
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <SetOutputs+0x208>)
 8002726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800272a:	619a      	str	r2, [r3, #24]
		osDelay(300);
 800272c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002730:	f005 feee 	bl	8008510 <osDelay>
			osDelay(2*i);
		}
		Y19_OFF;
		osDelay(500);
	}
}
 8002734:	e05a      	b.n	80027ec <SetOutputs+0x1ec>
		Y01_OFF;
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <SetOutputs+0x1fc>)
 8002738:	2210      	movs	r2, #16
 800273a:	619a      	str	r2, [r3, #24]
		Y02_OFF;
 800273c:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <SetOutputs+0x1fc>)
 800273e:	2220      	movs	r2, #32
 8002740:	619a      	str	r2, [r3, #24]
		Y16_ON;
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <SetOutputs+0x20c>)
 8002744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002748:	619a      	str	r2, [r3, #24]
		osDelay(100);
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	f005 fee0 	bl	8008510 <osDelay>
		Y17_ON;
 8002750:	4b2e      	ldr	r3, [pc, #184]	; (800280c <SetOutputs+0x20c>)
 8002752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002756:	619a      	str	r2, [r3, #24]
		osDelay(20);
 8002758:	2014      	movs	r0, #20
 800275a:	f005 fed9 	bl	8008510 <osDelay>
		Y16_OFF;
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <SetOutputs+0x20c>)
 8002760:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002764:	619a      	str	r2, [r3, #24]
		osDelay(100);
 8002766:	2064      	movs	r0, #100	; 0x64
 8002768:	f005 fed2 	bl	8008510 <osDelay>
		Y18_ON;
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <SetOutputs+0x210>)
 800276e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002772:	619a      	str	r2, [r3, #24]
		osDelay(20);
 8002774:	2014      	movs	r0, #20
 8002776:	f005 fecb 	bl	8008510 <osDelay>
		Y17_OFF;
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <SetOutputs+0x20c>)
 800277c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002780:	619a      	str	r2, [r3, #24]
		osDelay(100);
 8002782:	2064      	movs	r0, #100	; 0x64
 8002784:	f005 fec4 	bl	8008510 <osDelay>
		Y18_OFF;
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <SetOutputs+0x210>)
 800278a:	2202      	movs	r2, #2
 800278c:	619a      	str	r2, [r3, #24]
		osDelay(30);
 800278e:	201e      	movs	r0, #30
 8002790:	f005 febe 	bl	8008510 <osDelay>
		for (int32_t i=20; i>0; i--)
 8002794:	2314      	movs	r3, #20
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	dd1d      	ble.n	80027da <SetOutputs+0x1da>
			Y19_OFF;
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <SetOutputs+0x1fc>)
 80027a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a4:	619a      	str	r2, [r3, #24]
			Y20_ON;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <SetOutputs+0x208>)
 80027a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027ac:	619a      	str	r2, [r3, #24]
			osDelay(2*i);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f005 feac 	bl	8008510 <osDelay>
			Y19_ON;
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <SetOutputs+0x1fc>)
 80027ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027be:	619a      	str	r2, [r3, #24]
			Y20_OFF;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <SetOutputs+0x208>)
 80027c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c6:	619a      	str	r2, [r3, #24]
			osDelay(2*i);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f005 fe9f 	bl	8008510 <osDelay>
		for (int32_t i=20; i>0; i--)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	e7de      	b.n	8002798 <SetOutputs+0x198>
		Y19_OFF;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <SetOutputs+0x1fc>)
 80027dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e0:	619a      	str	r2, [r3, #24]
		osDelay(500);
 80027e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027e6:	f005 fe93 	bl	8008510 <osDelay>
}
 80027ea:	e7ff      	b.n	80027ec <SetOutputs+0x1ec>
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000074 	.word	0x20000074
 80027f8:	2000008c 	.word	0x2000008c
 80027fc:	40020000 	.word	0x40020000
 8002800:	20001df4 	.word	0x20001df4
 8002804:	2000007c 	.word	0x2000007c
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40020800 	.word	0x40020800

08002814 <LedBlink>:

void LedBlink() {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
			3   //LEDB_ERROR
	};

	static int32_t ledb_active_time = 0;
	static int32_t ledb_repeats = 0;
	ledb_repeats = ledb_rep[globData.LEDB];
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <LedBlink+0x70>)
 800281c:	795b      	ldrb	r3, [r3, #5]
 800281e:	461a      	mov	r2, r3
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <LedBlink+0x74>)
 8002822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002826:	461a      	mov	r2, r3
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <LedBlink+0x78>)
 800282a:	601a      	str	r2, [r3, #0]
	ledb_active_time = ledb_time[globData.LEDB];
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <LedBlink+0x70>)
 800282e:	795b      	ldrb	r3, [r3, #5]
 8002830:	461a      	mov	r2, r3
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <LedBlink+0x7c>)
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	461a      	mov	r2, r3
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <LedBlink+0x80>)
 800283c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ledb_repeats; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <LedBlink+0x78>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	da14      	bge.n	8002876 <LedBlink+0x62>
	{
		osDelay(ledb_active_time);
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <LedBlink+0x80>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f005 fe5d 	bl	8008510 <osDelay>
		Y05_ON;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <LedBlink+0x84>)
 8002858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800285c:	619a      	str	r2, [r3, #24]
		osDelay(ledb_active_time);
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <LedBlink+0x80>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f005 fe54 	bl	8008510 <osDelay>
		Y05_OFF;
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <LedBlink+0x84>)
 800286a:	2210      	movs	r2, #16
 800286c:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < ledb_repeats; i++)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3301      	adds	r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	e7e5      	b.n	8002842 <LedBlink+0x2e>
	}
	globData.LEDB = 0;
 8002876:	4b03      	ldr	r3, [pc, #12]	; (8002884 <LedBlink+0x70>)
 8002878:	2200      	movs	r2, #0
 800287a:	715a      	strb	r2, [r3, #5]
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000074 	.word	0x20000074
 8002888:	0800b060 	.word	0x0800b060
 800288c:	20001dfc 	.word	0x20001dfc
 8002890:	0800b048 	.word	0x0800b048
 8002894:	20001df8 	.word	0x20001df8
 8002898:	40020800 	.word	0x40020800

0800289c <StartServoTask>:
Servo servo1(&htim3, TIM_CHANNEL_1);
Servo servo2(&htim3, TIM_CHANNEL_2);
Servo *servo[2];

void StartServoTask(void *argument)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	servo[0] = &servo1;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <StartServoTask+0x5c>)
 80028a6:	4a15      	ldr	r2, [pc, #84]	; (80028fc <StartServoTask+0x60>)
 80028a8:	601a      	str	r2, [r3, #0]
	servo[1] = &servo2;
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <StartServoTask+0x5c>)
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <StartServoTask+0x64>)
 80028ae:	605a      	str	r2, [r3, #4]
	enum MOVE_COMM command;
	for (;;) {
		command = (MOVE_COMM)globData.current_comm;
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <StartServoTask+0x68>)
 80028b2:	78db      	ldrb	r3, [r3, #3]
 80028b4:	73fb      	strb	r3, [r7, #15]
		if (command == MOVE_SERVO) {
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d118      	bne.n	80028ee <StartServoTask+0x52>
			servo1.setAngle(contrlMsg.pos_servo);
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <StartServoTask+0x6c>)
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	4619      	mov	r1, r3
 80028c2:	480e      	ldr	r0, [pc, #56]	; (80028fc <StartServoTask+0x60>)
 80028c4:	f7ff f9f1 	bl	8001caa <_ZN5Servo8setAngleEl>
			servo2.setAngle(contrlMsg.pos_servo);
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <StartServoTask+0x6c>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4619      	mov	r1, r3
 80028ce:	480c      	ldr	r0, [pc, #48]	; (8002900 <StartServoTask+0x64>)
 80028d0:	f7ff f9eb 	bl	8001caa <_ZN5Servo8setAngleEl>
			osDelay(800);
 80028d4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028d8:	f005 fe1a 	bl	8008510 <osDelay>
			servo1.disable();
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <StartServoTask+0x60>)
 80028de:	f7ff fa37 	bl	8001d50 <_ZN5Servo7disableEv>
			servo2.disable();
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <StartServoTask+0x64>)
 80028e4:	f7ff fa34 	bl	8001d50 <_ZN5Servo7disableEv>
			globData.current_comm = 0;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <StartServoTask+0x68>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	70da      	strb	r2, [r3, #3]
		}
		osDelay(10);
 80028ee:	200a      	movs	r0, #10
 80028f0:	f005 fe0e 	bl	8008510 <osDelay>
		command = (MOVE_COMM)globData.current_comm;
 80028f4:	e7dc      	b.n	80028b0 <StartServoTask+0x14>
 80028f6:	bf00      	nop
 80028f8:	20001e20 	.word	0x20001e20
 80028fc:	20001e00 	.word	0x20001e00
 8002900:	20001e10 	.word	0x20001e10
 8002904:	20000074 	.word	0x20000074
 8002908:	2000008c 	.word	0x2000008c

0800290c <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10e      	bne.n	800293a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002922:	4293      	cmp	r3, r2
 8002924:	d109      	bne.n	800293a <_Z41__static_initialization_and_destruction_0ii+0x2e>
Servo servo1(&htim3, TIM_CHANNEL_1);
 8002926:	2200      	movs	r2, #0
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800292a:	4807      	ldr	r0, [pc, #28]	; (8002948 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800292c:	f7ff f9aa 	bl	8001c84 <_ZN5ServoC1EP17TIM_HandleTypeDefm>
Servo servo2(&htim3, TIM_CHANNEL_2);
 8002930:	2204      	movs	r2, #4
 8002932:	4904      	ldr	r1, [pc, #16]	; (8002944 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002936:	f7ff f9a5 	bl	8001c84 <_ZN5ServoC1EP17TIM_HandleTypeDefm>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20001a28 	.word	0x20001a28
 8002948:	20001e00 	.word	0x20001e00
 800294c:	20001e10 	.word	0x20001e10

08002950 <_GLOBAL__sub_I_servo1>:
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
 8002954:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002958:	2001      	movs	r0, #1
 800295a:	f7ff ffd7 	bl	800290c <_Z41__static_initialization_and_destruction_0ii>
 800295e:	bd80      	pop	{r7, pc}

08002960 <StartUartWiFiTask>:
uint8_t bms_jbd_request_msg0[] = {0xDD, 0xA5, 0x03, 0x00, 0xFF, 0xFD, 0x77};
uint8_t bms_jbd_request_msg1[] = {0xDD, 0xA5, 0x04, 0x00, 0xFF, 0xFC, 0x77};
uint8_t bms_smart_request_msg[]  = {0xA5, 0x40, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D};

void StartUartWiFiTask(void *argument)
{
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if (new_wifi_data)
 8002968:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <StartUartWiFiTask+0x174>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d05d      	beq.n	8002a2c <StartUartWiFiTask+0xcc>
		{
			if (wifi_uart_buff[0] == START_MSG0 && wifi_uart_buff[1] == START_MSG1)
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <StartUartWiFiTask+0x178>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b84      	cmp	r3, #132	; 0x84
 8002976:	d156      	bne.n	8002a26 <StartUartWiFiTask+0xc6>
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <StartUartWiFiTask+0x178>)
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	2b53      	cmp	r3, #83	; 0x53
 800297e:	d152      	bne.n	8002a26 <StartUartWiFiTask+0xc6>
			{
				enum MSG_ID message_id = (MSG_ID)wifi_uart_buff[2];
 8002980:	4b55      	ldr	r3, [pc, #340]	; (8002ad8 <StartUartWiFiTask+0x178>)
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	73fb      	strb	r3, [r7, #15]
				if (message_id == MSG_STATUS)
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d11e      	bne.n	80029ca <StartUartWiFiTask+0x6a>
				{
					if (wifi_uart_buff[sizeof(StatusMsgTypeDef)-1] != calculateCS(wifi_uart_buff, sizeof(StatusMsgTypeDef)-1))
 800298c:	4b52      	ldr	r3, [pc, #328]	; (8002ad8 <StartUartWiFiTask+0x178>)
 800298e:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8002992:	212b      	movs	r1, #43	; 0x2b
 8002994:	4850      	ldr	r0, [pc, #320]	; (8002ad8 <StartUartWiFiTask+0x178>)
 8002996:	f000 fc7d 	bl	8003294 <calculateCS>
 800299a:	4603      	mov	r3, r0
 800299c:	429c      	cmp	r4, r3
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <StartUartWiFiTask+0x64>
					{
						globData.cs_err++;
 80029aa:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <StartUartWiFiTask+0x17c>)
 80029ac:	791b      	ldrb	r3, [r3, #4]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b4a      	ldr	r3, [pc, #296]	; (8002adc <StartUartWiFiTask+0x17c>)
 80029b4:	711a      	strb	r2, [r3, #4]
						HAL_UART_Transmit(&WIFI_UART, (uint8_t*)"error", 5, 100);
 80029b6:	2364      	movs	r3, #100	; 0x64
 80029b8:	2205      	movs	r2, #5
 80029ba:	4949      	ldr	r1, [pc, #292]	; (8002ae0 <StartUartWiFiTask+0x180>)
 80029bc:	4849      	ldr	r0, [pc, #292]	; (8002ae4 <StartUartWiFiTask+0x184>)
 80029be:	f004 fa9e 	bl	8006efe <HAL_UART_Transmit>
 80029c2:	e028      	b.n	8002a16 <StartUartWiFiTask+0xb6>
					}
					else
					{
						sendStatus();
 80029c4:	f000 f8a4 	bl	8002b10 <sendStatus>
 80029c8:	e025      	b.n	8002a16 <StartUartWiFiTask+0xb6>
					}
				}
				else if (message_id == MSG_CONTROL)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d122      	bne.n	8002a16 <StartUartWiFiTask+0xb6>
				{
					if (wifi_uart_buff[sizeof(ContrlMsgTypeDef)-1] != calculateCS(wifi_uart_buff, sizeof(ContrlMsgTypeDef)-1))
 80029d0:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <StartUartWiFiTask+0x178>)
 80029d2:	7edc      	ldrb	r4, [r3, #27]
 80029d4:	211b      	movs	r1, #27
 80029d6:	4840      	ldr	r0, [pc, #256]	; (8002ad8 <StartUartWiFiTask+0x178>)
 80029d8:	f000 fc5c 	bl	8003294 <calculateCS>
 80029dc:	4603      	mov	r3, r0
 80029de:	429c      	cmp	r4, r3
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <StartUartWiFiTask+0x9a>
					{
						globData.cs_err++;
 80029ec:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <StartUartWiFiTask+0x17c>)
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	3301      	adds	r3, #1
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <StartUartWiFiTask+0x17c>)
 80029f6:	711a      	strb	r2, [r3, #4]
 80029f8:	e00d      	b.n	8002a16 <StartUartWiFiTask+0xb6>
					}
					else
					{
						memcpy(&contrlMsg, wifi_uart_buff, sizeof(ContrlMsgTypeDef));
 80029fa:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <StartUartWiFiTask+0x188>)
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <StartUartWiFiTask+0x178>)
 80029fe:	4614      	mov	r4, r2
 8002a00:	461d      	mov	r5, r3
 8002a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						checkData();
 8002a0e:	f000 f8dd 	bl	8002bcc <checkData>
						sendStatus();
 8002a12:	f000 f87d 	bl	8002b10 <sendStatus>
					}
				}
				new_wifi_data = 0;
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <StartUartWiFiTask+0x174>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
				memset(wifi_uart_buff, 0, 100);
 8002a1c:	2264      	movs	r2, #100	; 0x64
 8002a1e:	2100      	movs	r1, #0
 8002a20:	482d      	ldr	r0, [pc, #180]	; (8002ad8 <StartUartWiFiTask+0x178>)
 8002a22:	f008 fa1d 	bl	800ae60 <memset>
			}
			osDelay(2);
 8002a26:	2002      	movs	r0, #2
 8002a28:	f005 fd72 	bl	8008510 <osDelay>
		}
		if (new_bms_data)
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <StartUartWiFiTask+0x18c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <StartUartWiFiTask+0xe4>
		{
			new_bms_data = 0;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <StartUartWiFiTask+0x18c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			bms_err = 0;
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <StartUartWiFiTask+0x190>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
			rcGetBattery();
 8002a40:	f000 f8e8 	bl	8002c14 <rcGetBattery>
		}

		if (HAL_GetTick() - bms_req_time > 1000) {
 8002a44:	f000 fdba 	bl	80035bc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <StartUartWiFiTask+0x194>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a54:	bf8c      	ite	hi
 8002a56:	2301      	movhi	r3, #1
 8002a58:	2300      	movls	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d083      	beq.n	8002968 <StartUartWiFiTask+0x8>
			if (!bms_detected) {
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <StartUartWiFiTask+0x198>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <StartUartWiFiTask+0x11c>
				HAL_UART_Transmit(&BMS_UART, (uint8_t*) bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 8002a68:	2364      	movs	r3, #100	; 0x64
 8002a6a:	220d      	movs	r2, #13
 8002a6c:	4923      	ldr	r1, [pc, #140]	; (8002afc <StartUartWiFiTask+0x19c>)
 8002a6e:	4824      	ldr	r0, [pc, #144]	; (8002b00 <StartUartWiFiTask+0x1a0>)
 8002a70:	f004 fa45 	bl	8006efe <HAL_UART_Transmit>
				bms_detected = 1;
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <StartUartWiFiTask+0x198>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e010      	b.n	8002a9e <StartUartWiFiTask+0x13e>
			}
			else {
				if (smart_bms) HAL_UART_Transmit(&BMS_UART,	(uint8_t*) bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <StartUartWiFiTask+0x1a4>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <StartUartWiFiTask+0x132>
 8002a84:	2364      	movs	r3, #100	; 0x64
 8002a86:	220d      	movs	r2, #13
 8002a88:	491c      	ldr	r1, [pc, #112]	; (8002afc <StartUartWiFiTask+0x19c>)
 8002a8a:	481d      	ldr	r0, [pc, #116]	; (8002b00 <StartUartWiFiTask+0x1a0>)
 8002a8c:	f004 fa37 	bl	8006efe <HAL_UART_Transmit>
 8002a90:	e005      	b.n	8002a9e <StartUartWiFiTask+0x13e>
				else HAL_UART_Transmit(&BMS_UART, (uint8_t*) bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 8002a92:	2364      	movs	r3, #100	; 0x64
 8002a94:	2207      	movs	r2, #7
 8002a96:	491c      	ldr	r1, [pc, #112]	; (8002b08 <StartUartWiFiTask+0x1a8>)
 8002a98:	4819      	ldr	r0, [pc, #100]	; (8002b00 <StartUartWiFiTask+0x1a0>)
 8002a9a:	f004 fa30 	bl	8006efe <HAL_UART_Transmit>
			}
			bms_req_time = HAL_GetTick();
 8002a9e:	f000 fd8d 	bl	80035bc <HAL_GetTick>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <StartUartWiFiTask+0x194>)
 8002aa6:	6013      	str	r3, [r2, #0]
			bms_err++;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <StartUartWiFiTask+0x190>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <StartUartWiFiTask+0x190>)
 8002ab2:	701a      	strb	r2, [r3, #0]
			if (bms_err > 5) {
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <StartUartWiFiTask+0x190>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	f67f af55 	bls.w	8002968 <StartUartWiFiTask+0x8>
				globData.capacity = 0;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <StartUartWiFiTask+0x17c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	755a      	strb	r2, [r3, #21]
				bms_detected = 0;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <StartUartWiFiTask+0x198>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
				batteryMsg.bms_type = BMS_NONE;
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <StartUartWiFiTask+0x1ac>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
		}
	}
 8002ad2:	e749      	b.n	8002968 <StartUartWiFiTask+0x8>
 8002ad4:	20001e78 	.word	0x20001e78
 8002ad8:	20001f44 	.word	0x20001f44
 8002adc:	20000074 	.word	0x20000074
 8002ae0:	0800aef0 	.word	0x0800aef0
 8002ae4:	20001ab8 	.word	0x20001ab8
 8002ae8:	2000008c 	.word	0x2000008c
 8002aec:	20001e7a 	.word	0x20001e7a
 8002af0:	20001fac 	.word	0x20001fac
 8002af4:	20001fa8 	.word	0x20001fa8
 8002af8:	20001fad 	.word	0x20001fad
 8002afc:	20000014 	.word	0x20000014
 8002b00:	20001afc 	.word	0x20001afc
 8002b04:	20001fae 	.word	0x20001fae
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	20001e28 	.word	0x20001e28

08002b10 <sendStatus>:
}

void sendStatus()
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	statusMsg.start_msg0 = START_MSG0;
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <sendStatus+0xa8>)
 8002b16:	2284      	movs	r2, #132	; 0x84
 8002b18:	701a      	strb	r2, [r3, #0]
	statusMsg.start_msg1 = START_MSG1;
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <sendStatus+0xa8>)
 8002b1c:	2253      	movs	r2, #83	; 0x53
 8002b1e:	705a      	strb	r2, [r3, #1]
	statusMsg.msg_id = MSG_STATUS;
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <sendStatus+0xa8>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	709a      	strb	r2, [r3, #2]
	statusMsg.comm = globData.current_comm;
 8002b26:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <sendStatus+0xac>)
 8002b28:	78da      	ldrb	r2, [r3, #3]
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <sendStatus+0xa8>)
 8002b2c:	70da      	strb	r2, [r3, #3]
	statusMsg.pos_x = mdrivers[0]->getPos();
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <sendStatus+0xb0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe ff6e 	bl	8001a14 <_ZN16KeyaLKTechDriver6getPosEv>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <sendStatus+0xa8>)
 8002b3c:	6053      	str	r3, [r2, #4]
	statusMsg.pos_y = mdrivers[2]->getPos();
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <sendStatus+0xb0>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ff66 	bl	8001a14 <_ZN16KeyaLKTechDriver6getPosEv>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <sendStatus+0xa8>)
 8002b4c:	6093      	str	r3, [r2, #8]
	statusMsg.pos_fork = mdrivers[3]->getPos();;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <sendStatus+0xb0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe ff5e 	bl	8001a14 <_ZN16KeyaLKTechDriver6getPosEv>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <sendStatus+0xa8>)
 8002b5c:	60d3      	str	r3, [r2, #12]
	statusMsg.pos_servo = servo[0]->getAngle();
 8002b5e:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <sendStatus+0xb4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f8e8 	bl	8001d38 <_ZN5Servo8getAngleEv>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <sendStatus+0xa8>)
 8002b6e:	611a      	str	r2, [r3, #16]
	statusMsg.capacity = globData.capacity;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <sendStatus+0xac>)
 8002b72:	7d5a      	ldrb	r2, [r3, #21]
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <sendStatus+0xa8>)
 8002b76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	statusMsg.sens = globData.sens;
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <sendStatus+0xa8>)
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <sendStatus+0xac>)
 8002b7e:	88db      	ldrh	r3, [r3, #6]
 8002b80:	8413      	strh	r3, [r2, #32]
	statusMsg.error = globData.error;
 8002b82:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <sendStatus+0xa8>)
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <sendStatus+0xac>)
 8002b86:	891b      	ldrh	r3, [r3, #8]
 8002b88:	8453      	strh	r3, [r2, #34]	; 0x22
	statusMsg.msg_count++;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <sendStatus+0xa8>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <sendStatus+0xa8>)
 8002b92:	61d3      	str	r3, [r2, #28]
	statusMsg.CS = calculateCS((uint8_t *)&statusMsg, sizeof(statusMsg)-1);
 8002b94:	212b      	movs	r1, #43	; 0x2b
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <sendStatus+0xa8>)
 8002b98:	f000 fb7c 	bl	8003294 <calculateCS>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <sendStatus+0xa8>)
 8002ba2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&statusMsg, sizeof(statusMsg), 100);
 8002ba6:	2364      	movs	r3, #100	; 0x64
 8002ba8:	222c      	movs	r2, #44	; 0x2c
 8002baa:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <sendStatus+0xa8>)
 8002bac:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <sendStatus+0xb8>)
 8002bae:	f004 f9a6 	bl	8006efe <HAL_UART_Transmit>
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200000a8 	.word	0x200000a8
 8002bbc:	20000074 	.word	0x20000074
 8002bc0:	20001dd8 	.word	0x20001dd8
 8002bc4:	20001e20 	.word	0x20001e20
 8002bc8:	20001ab8 	.word	0x20001ab8

08002bcc <checkData>:

void checkData()
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
	if (globData.current_comm == MOVE_NONE || contrlMsg.comm == MOVE_EMERGY_STOP)
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <checkData+0x3c>)
 8002bd2:	78db      	ldrb	r3, [r3, #3]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <checkData+0x14>
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <checkData+0x40>)
 8002bda:	78db      	ldrb	r3, [r3, #3]
 8002bdc:	2b07      	cmp	r3, #7
 8002bde:	d103      	bne.n	8002be8 <checkData+0x1c>
	{
		globData.current_comm = contrlMsg.comm;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <checkData+0x40>)
 8002be2:	78da      	ldrb	r2, [r3, #3]
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <checkData+0x3c>)
 8002be6:	70da      	strb	r2, [r3, #3]
	}
	if (contrlMsg.comm == MOVE_RESET)
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <checkData+0x40>)
 8002bea:	78db      	ldrb	r3, [r3, #3]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d105      	bne.n	8002bfc <checkData+0x30>
	{
		*(uint16_t*)&globData.error = 0;
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <checkData+0x44>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	801a      	strh	r2, [r3, #0]
		globData.current_comm = MOVE_NONE;
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <checkData+0x3c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	70da      	strb	r2, [r3, #3]
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000074 	.word	0x20000074
 8002c0c:	2000008c 	.word	0x2000008c
 8002c10:	2000007c 	.word	0x2000007c

08002c14 <rcGetBattery>:
void SetManual()
{

}

void rcGetBattery() {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
	if (bms_uart_buff[0] == 0xDD) smart_bms = 0;
 8002c1a:	4b87      	ldr	r3, [pc, #540]	; (8002e38 <rcGetBattery+0x224>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2bdd      	cmp	r3, #221	; 0xdd
 8002c20:	d103      	bne.n	8002c2a <rcGetBattery+0x16>
 8002c22:	4b86      	ldr	r3, [pc, #536]	; (8002e3c <rcGetBattery+0x228>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e006      	b.n	8002c38 <rcGetBattery+0x24>
	else if (bms_uart_buff[0] == 0xA5) smart_bms = 1;
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <rcGetBattery+0x224>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2ba5      	cmp	r3, #165	; 0xa5
 8002c30:	d102      	bne.n	8002c38 <rcGetBattery+0x24>
 8002c32:	4b82      	ldr	r3, [pc, #520]	; (8002e3c <rcGetBattery+0x228>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
	if (smart_bms)
 8002c38:	4b80      	ldr	r3, [pc, #512]	; (8002e3c <rcGetBattery+0x228>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 819f 	beq.w	8002f80 <rcGetBattery+0x36c>
	{
		uint8_t battery_comm = bms_uart_buff[2];
 8002c42:	4b7d      	ldr	r3, [pc, #500]	; (8002e38 <rcGetBattery+0x224>)
 8002c44:	789b      	ldrb	r3, [r3, #2]
 8002c46:	71bb      	strb	r3, [r7, #6]
		if (battery_comm == 0x90)
 8002c48:	79bb      	ldrb	r3, [r7, #6]
 8002c4a:	2b90      	cmp	r3, #144	; 0x90
 8002c4c:	d133      	bne.n	8002cb6 <rcGetBattery+0xa2>
		{
			batteryMsg.bms_type = BMS_SMART;
 8002c4e:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <rcGetBattery+0x22c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8002c56:	4b78      	ldr	r3, [pc, #480]	; (8002e38 <rcGetBattery+0x224>)
 8002c58:	791b      	ldrb	r3, [r3, #4]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b75      	ldr	r3, [pc, #468]	; (8002e38 <rcGetBattery+0x224>)
 8002c62:	795b      	ldrb	r3, [r3, #5]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <rcGetBattery+0x22c>)
 8002c6c:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 8002c6e:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <rcGetBattery+0x224>)
 8002c70:	7a1b      	ldrb	r3, [r3, #8]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <rcGetBattery+0x224>)
 8002c7a:	7a5b      	ldrb	r3, [r3, #9]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b21a      	sxth	r2, r3
 8002c84:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <rcGetBattery+0x22c>)
 8002c86:	80da      	strh	r2, [r3, #6]
			batteryMsg.capacity_percent = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8002c88:	4b6b      	ldr	r3, [pc, #428]	; (8002e38 <rcGetBattery+0x224>)
 8002c8a:	7a9b      	ldrb	r3, [r3, #10]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b69      	ldr	r3, [pc, #420]	; (8002e38 <rcGetBattery+0x224>)
 8002c94:	7adb      	ldrb	r3, [r3, #11]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <rcGetBattery+0x22c>)
 8002c9e:	835a      	strh	r2, [r3, #26]
			globData.capacity = batteryMsg.capacity_percent/10;
 8002ca0:	4b67      	ldr	r3, [pc, #412]	; (8002e40 <rcGetBattery+0x22c>)
 8002ca2:	8b5b      	ldrh	r3, [r3, #26]
 8002ca4:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <rcGetBattery+0x230>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <rcGetBattery+0x234>)
 8002cb2:	755a      	strb	r2, [r3, #21]
 8002cb4:	e146      	b.n	8002f44 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x91)
 8002cb6:	79bb      	ldrb	r3, [r7, #6]
 8002cb8:	2b91      	cmp	r3, #145	; 0x91
 8002cba:	d118      	bne.n	8002cee <rcGetBattery+0xda>
		{
			batteryMsg.max_volt = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8002cbc:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <rcGetBattery+0x224>)
 8002cbe:	791b      	ldrb	r3, [r3, #4]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <rcGetBattery+0x224>)
 8002cc8:	795b      	ldrb	r3, [r3, #5]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <rcGetBattery+0x22c>)
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
			batteryMsg.min_volt = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002cd4:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <rcGetBattery+0x224>)
 8002cd6:	79db      	ldrb	r3, [r3, #7]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <rcGetBattery+0x224>)
 8002ce0:	7a1b      	ldrb	r3, [r3, #8]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <rcGetBattery+0x22c>)
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cec:	e12a      	b.n	8002f44 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x92)
 8002cee:	79bb      	ldrb	r3, [r7, #6]
 8002cf0:	2b92      	cmp	r3, #146	; 0x92
 8002cf2:	f000 8127 	beq.w	8002f44 <rcGetBattery+0x330>
		{

		}
		else if (battery_comm == 0x93)
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	2b93      	cmp	r3, #147	; 0x93
 8002cfa:	d111      	bne.n	8002d20 <rcGetBattery+0x10c>
		{
			batteryMsg.remaining_capacity = (bms_uart_buff[8] << 24) +(bms_uart_buff[9] << 16) +(bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8002cfc:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <rcGetBattery+0x224>)
 8002cfe:	7a1b      	ldrb	r3, [r3, #8]
 8002d00:	061a      	lsls	r2, r3, #24
 8002d02:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <rcGetBattery+0x224>)
 8002d04:	7a5b      	ldrb	r3, [r3, #9]
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	441a      	add	r2, r3
 8002d0a:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <rcGetBattery+0x224>)
 8002d0c:	7a9b      	ldrb	r3, [r3, #10]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	4413      	add	r3, r2
 8002d12:	4a49      	ldr	r2, [pc, #292]	; (8002e38 <rcGetBattery+0x224>)
 8002d14:	7ad2      	ldrb	r2, [r2, #11]
 8002d16:	4413      	add	r3, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <rcGetBattery+0x22c>)
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	e111      	b.n	8002f44 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x94)
 8002d20:	79bb      	ldrb	r3, [r7, #6]
 8002d22:	2b94      	cmp	r3, #148	; 0x94
 8002d24:	d108      	bne.n	8002d38 <rcGetBattery+0x124>
		{
			batteryMsg.num_of_battery = bms_uart_buff[4];
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <rcGetBattery+0x224>)
 8002d28:	791a      	ldrb	r2, [r3, #4]
 8002d2a:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <rcGetBattery+0x22c>)
 8002d2c:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[5];
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <rcGetBattery+0x224>)
 8002d30:	795a      	ldrb	r2, [r3, #5]
 8002d32:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <rcGetBattery+0x22c>)
 8002d34:	77da      	strb	r2, [r3, #31]
 8002d36:	e105      	b.n	8002f44 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x95)
 8002d38:	79bb      	ldrb	r3, [r7, #6]
 8002d3a:	2b95      	cmp	r3, #149	; 0x95
 8002d3c:	f040 80f5 	bne.w	8002f2a <rcGetBattery+0x316>
		{
			if (bms_uart_buff[4] == 0x01)
 8002d40:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <rcGetBattery+0x224>)
 8002d42:	791b      	ldrb	r3, [r3, #4]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d124      	bne.n	8002d92 <rcGetBattery+0x17e>
			{
				batteryMsg.cell_0 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <rcGetBattery+0x224>)
 8002d4a:	795b      	ldrb	r3, [r3, #5]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <rcGetBattery+0x224>)
 8002d54:	799b      	ldrb	r3, [r3, #6]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <rcGetBattery+0x22c>)
 8002d5e:	859a      	strh	r2, [r3, #44]	; 0x2c
				batteryMsg.cell_1 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002d60:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <rcGetBattery+0x224>)
 8002d62:	79db      	ldrb	r3, [r3, #7]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <rcGetBattery+0x224>)
 8002d6c:	7a1b      	ldrb	r3, [r3, #8]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <rcGetBattery+0x22c>)
 8002d76:	85da      	strh	r2, [r3, #46]	; 0x2e
				batteryMsg.cell_2 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <rcGetBattery+0x224>)
 8002d7a:	7a5b      	ldrb	r3, [r3, #9]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <rcGetBattery+0x224>)
 8002d84:	7a9b      	ldrb	r3, [r3, #10]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <rcGetBattery+0x22c>)
 8002d8e:	861a      	strh	r2, [r3, #48]	; 0x30
 8002d90:	e0c4      	b.n	8002f1c <rcGetBattery+0x308>
			}
			else if (bms_uart_buff[4] == 0x02)
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <rcGetBattery+0x224>)
 8002d94:	791b      	ldrb	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d124      	bne.n	8002de4 <rcGetBattery+0x1d0>
			{
				batteryMsg.cell_3 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002d9a:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <rcGetBattery+0x224>)
 8002d9c:	795b      	ldrb	r3, [r3, #5]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <rcGetBattery+0x224>)
 8002da6:	799b      	ldrb	r3, [r3, #6]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <rcGetBattery+0x22c>)
 8002db0:	865a      	strh	r2, [r3, #50]	; 0x32
				batteryMsg.cell_4 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <rcGetBattery+0x224>)
 8002db4:	79db      	ldrb	r3, [r3, #7]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <rcGetBattery+0x224>)
 8002dbe:	7a1b      	ldrb	r3, [r3, #8]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <rcGetBattery+0x22c>)
 8002dc8:	869a      	strh	r2, [r3, #52]	; 0x34
				batteryMsg.cell_5 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <rcGetBattery+0x224>)
 8002dcc:	7a5b      	ldrb	r3, [r3, #9]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <rcGetBattery+0x224>)
 8002dd6:	7a9b      	ldrb	r3, [r3, #10]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <rcGetBattery+0x22c>)
 8002de0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de2:	e09b      	b.n	8002f1c <rcGetBattery+0x308>
				//batteryMsg.cell_3 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
				//batteryMsg.cell_4 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
				//batteryMsg.cell_5 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
			}
			else if (bms_uart_buff[4] == 0x03)
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <rcGetBattery+0x224>)
 8002de6:	791b      	ldrb	r3, [r3, #4]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d12f      	bne.n	8002e4c <rcGetBattery+0x238>
			{
				batteryMsg.cell_6 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <rcGetBattery+0x224>)
 8002dee:	795b      	ldrb	r3, [r3, #5]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <rcGetBattery+0x224>)
 8002df8:	799b      	ldrb	r3, [r3, #6]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <rcGetBattery+0x22c>)
 8002e02:	871a      	strh	r2, [r3, #56]	; 0x38
				batteryMsg.cell_7 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <rcGetBattery+0x224>)
 8002e06:	79db      	ldrb	r3, [r3, #7]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <rcGetBattery+0x224>)
 8002e10:	7a1b      	ldrb	r3, [r3, #8]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <rcGetBattery+0x22c>)
 8002e1a:	875a      	strh	r2, [r3, #58]	; 0x3a
				batteryMsg.cell_8 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <rcGetBattery+0x224>)
 8002e1e:	7a5b      	ldrb	r3, [r3, #9]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <rcGetBattery+0x224>)
 8002e28:	7a9b      	ldrb	r3, [r3, #10]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <rcGetBattery+0x22c>)
 8002e32:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002e34:	e072      	b.n	8002f1c <rcGetBattery+0x308>
 8002e36:	bf00      	nop
 8002e38:	20001ee0 	.word	0x20001ee0
 8002e3c:	20001fae 	.word	0x20001fae
 8002e40:	20001e28 	.word	0x20001e28
 8002e44:	cccccccd 	.word	0xcccccccd
 8002e48:	20000074 	.word	0x20000074
				//batteryMsg.cell_6 = (bms_uart_buff[27] << 8) + bms_uart_buff[28];
				//batteryMsg.cell_7 = (bms_uart_buff[29] << 8) + bms_uart_buff[30];
				//batteryMsg.cell_8 = (bms_uart_buff[31] << 8) + bms_uart_buff[32];
			}
			else if (bms_uart_buff[4] == 0x04)
 8002e4c:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <rcGetBattery+0x360>)
 8002e4e:	791b      	ldrb	r3, [r3, #4]
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d126      	bne.n	8002ea2 <rcGetBattery+0x28e>
			{
				batteryMsg.cell_9 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <rcGetBattery+0x360>)
 8002e56:	795b      	ldrb	r3, [r3, #5]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <rcGetBattery+0x360>)
 8002e60:	799b      	ldrb	r3, [r3, #6]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <rcGetBattery+0x364>)
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
				batteryMsg.cell_10 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002e6c:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <rcGetBattery+0x360>)
 8002e6e:	79db      	ldrb	r3, [r3, #7]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <rcGetBattery+0x360>)
 8002e78:	7a1b      	ldrb	r3, [r3, #8]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <rcGetBattery+0x364>)
 8002e82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				batteryMsg.cell_11 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <rcGetBattery+0x360>)
 8002e88:	7a5b      	ldrb	r3, [r3, #9]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <rcGetBattery+0x360>)
 8002e92:	7a9b      	ldrb	r3, [r3, #10]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <rcGetBattery+0x364>)
 8002e9c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002ea0:	e03c      	b.n	8002f1c <rcGetBattery+0x308>
				//batteryMsg.cell_9 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
				//batteryMsg.cell_10 = (bms_uart_buff[36] << 8) + bms_uart_buff[37];
				//batteryMsg.cell_11 = (bms_uart_buff[38] << 8) + bms_uart_buff[39];
			}
			else if (bms_uart_buff[4] == 0x05)
 8002ea2:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <rcGetBattery+0x360>)
 8002ea4:	791b      	ldrb	r3, [r3, #4]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d127      	bne.n	8002efa <rcGetBattery+0x2e6>
			{
				batteryMsg.cell_12 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002eaa:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <rcGetBattery+0x360>)
 8002eac:	795b      	ldrb	r3, [r3, #5]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <rcGetBattery+0x360>)
 8002eb6:	799b      	ldrb	r3, [r3, #6]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b2e      	ldr	r3, [pc, #184]	; (8002f78 <rcGetBattery+0x364>)
 8002ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				batteryMsg.cell_13 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <rcGetBattery+0x360>)
 8002ec6:	79db      	ldrb	r3, [r3, #7]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <rcGetBattery+0x360>)
 8002ed0:	7a1b      	ldrb	r3, [r3, #8]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <rcGetBattery+0x364>)
 8002eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				batteryMsg.cell_14 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <rcGetBattery+0x360>)
 8002ee0:	7a5b      	ldrb	r3, [r3, #9]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <rcGetBattery+0x360>)
 8002eea:	7a9b      	ldrb	r3, [r3, #10]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <rcGetBattery+0x364>)
 8002ef4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8002ef8:	e010      	b.n	8002f1c <rcGetBattery+0x308>
				//batteryMsg.cell_12 = (bms_uart_buff[40] << 8) + bms_uart_buff[41];
				//batteryMsg.cell_13 = (bms_uart_buff[42] << 8) + bms_uart_buff[43];
				//batteryMsg.cell_14 = (bms_uart_buff[44] << 8) + bms_uart_buff[45];
			}
			else if (bms_uart_buff[4] == 0x06)
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <rcGetBattery+0x360>)
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d10c      	bne.n	8002f1c <rcGetBattery+0x308>
			{
				batteryMsg.cell_15 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <rcGetBattery+0x360>)
 8002f04:	795b      	ldrb	r3, [r3, #5]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <rcGetBattery+0x360>)
 8002f0e:	799b      	ldrb	r3, [r3, #6]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <rcGetBattery+0x364>)
 8002f18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				//batteryMsg.cell_15 = (bms_uart_buff[47] << 8) + bms_uart_buff[48];
			}
			bms_smart_request_msg[2] = 0x95;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <rcGetBattery+0x368>)
 8002f1e:	2295      	movs	r2, #149	; 0x95
 8002f20:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x82;
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <rcGetBattery+0x368>)
 8002f24:	2282      	movs	r2, #130	; 0x82
 8002f26:	731a      	strb	r2, [r3, #12]
 8002f28:	e00c      	b.n	8002f44 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x96)
 8002f2a:	79bb      	ldrb	r3, [r7, #6]
 8002f2c:	2b96      	cmp	r3, #150	; 0x96
 8002f2e:	d109      	bne.n	8002f44 <rcGetBattery+0x330>
		{
			batteryMsg.temp1 = bms_uart_buff[5]; //-40 to convert
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <rcGetBattery+0x360>)
 8002f32:	795b      	ldrb	r3, [r3, #5]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <rcGetBattery+0x364>)
 8002f38:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = bms_uart_buff[6];
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <rcGetBattery+0x360>)
 8002f3c:	799b      	ldrb	r3, [r3, #6]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <rcGetBattery+0x364>)
 8002f42:	845a      	strh	r2, [r3, #34]	; 0x22
		}
		bms_smart_request_msg[2]++;
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <rcGetBattery+0x368>)
 8002f46:	789b      	ldrb	r3, [r3, #2]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <rcGetBattery+0x368>)
 8002f4e:	709a      	strb	r2, [r3, #2]
		bms_smart_request_msg[12]++;
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <rcGetBattery+0x368>)
 8002f52:	7b1b      	ldrb	r3, [r3, #12]
 8002f54:	3301      	adds	r3, #1
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <rcGetBattery+0x368>)
 8002f5a:	731a      	strb	r2, [r3, #12]
		if (bms_smart_request_msg[2] > 0x96)
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <rcGetBattery+0x368>)
 8002f5e:	789b      	ldrb	r3, [r3, #2]
 8002f60:	2b96      	cmp	r3, #150	; 0x96
 8002f62:	f240 818e 	bls.w	8003282 <rcGetBattery+0x66e>
		{
			bms_smart_request_msg[2] = 0x90;
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <rcGetBattery+0x368>)
 8002f68:	2290      	movs	r2, #144	; 0x90
 8002f6a:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x7D;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <rcGetBattery+0x368>)
 8002f6e:	227d      	movs	r2, #125	; 0x7d
 8002f70:	731a      	strb	r2, [r3, #12]
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
		}
	}
}
 8002f72:	e186      	b.n	8003282 <rcGetBattery+0x66e>
 8002f74:	20001ee0 	.word	0x20001ee0
 8002f78:	20001e28 	.word	0x20001e28
 8002f7c:	20000014 	.word	0x20000014
		uint8_t battery_comm = bms_uart_buff[1];
 8002f80:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <rcGetBattery+0x4b4>)
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	71fb      	strb	r3, [r7, #7]
		if (battery_comm == 0x03)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	f040 80a7 	bne.w	80030dc <rcGetBattery+0x4c8>
			batteryMsg.bms_type = BMS_JBD;
 8002f8e:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <rcGetBattery+0x4b8>)
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8002f96:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <rcGetBattery+0x4b4>)
 8002f98:	791b      	ldrb	r3, [r3, #4]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b49      	ldr	r3, [pc, #292]	; (80030c8 <rcGetBattery+0x4b4>)
 8002fa2:	795b      	ldrb	r3, [r3, #5]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b48      	ldr	r3, [pc, #288]	; (80030cc <rcGetBattery+0x4b8>)
 8002fac:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = 0;//(bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <rcGetBattery+0x4b8>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	80da      	strh	r2, [r3, #6]
			batteryMsg.remaining_capacity = (uint32_t)((bms_uart_buff[8] << 8) + bms_uart_buff[9]);
 8002fb4:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <rcGetBattery+0x4b4>)
 8002fb6:	7a1b      	ldrb	r3, [r3, #8]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4a43      	ldr	r2, [pc, #268]	; (80030c8 <rcGetBattery+0x4b4>)
 8002fbc:	7a52      	ldrb	r2, [r2, #9]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b42      	ldr	r3, [pc, #264]	; (80030cc <rcGetBattery+0x4b8>)
 8002fc4:	609a      	str	r2, [r3, #8]
			batteryMsg.nominal_capacity = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8002fc6:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <rcGetBattery+0x4b4>)
 8002fc8:	7a9b      	ldrb	r3, [r3, #10]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <rcGetBattery+0x4b4>)
 8002fd2:	7adb      	ldrb	r3, [r3, #11]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <rcGetBattery+0x4b8>)
 8002fdc:	819a      	strh	r2, [r3, #12]
			batteryMsg.cycles = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <rcGetBattery+0x4b4>)
 8002fe0:	7b1b      	ldrb	r3, [r3, #12]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <rcGetBattery+0x4b4>)
 8002fea:	7b5b      	ldrb	r3, [r3, #13]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <rcGetBattery+0x4b8>)
 8002ff4:	821a      	strh	r2, [r3, #16]
			batteryMsg.date = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <rcGetBattery+0x4b4>)
 8002ff8:	7b9b      	ldrb	r3, [r3, #14]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <rcGetBattery+0x4b4>)
 8003002:	7bdb      	ldrb	r3, [r3, #15]
 8003004:	b29b      	uxth	r3, r3
 8003006:	4413      	add	r3, r2
 8003008:	b29a      	uxth	r2, r3
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <rcGetBattery+0x4b8>)
 800300c:	825a      	strh	r2, [r3, #18]
			batteryMsg.balance_low = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <rcGetBattery+0x4b4>)
 8003010:	7c1b      	ldrb	r3, [r3, #16]
 8003012:	b29b      	uxth	r3, r3
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	b29a      	uxth	r2, r3
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <rcGetBattery+0x4b4>)
 800301a:	7c5b      	ldrb	r3, [r3, #17]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4413      	add	r3, r2
 8003020:	b29a      	uxth	r2, r3
 8003022:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <rcGetBattery+0x4b8>)
 8003024:	829a      	strh	r2, [r3, #20]
			batteryMsg.balance_high = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <rcGetBattery+0x4b4>)
 8003028:	7c9b      	ldrb	r3, [r3, #18]
 800302a:	b29b      	uxth	r3, r3
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <rcGetBattery+0x4b4>)
 8003032:	7cdb      	ldrb	r3, [r3, #19]
 8003034:	b29b      	uxth	r3, r3
 8003036:	4413      	add	r3, r2
 8003038:	b29a      	uxth	r2, r3
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <rcGetBattery+0x4b8>)
 800303c:	82da      	strh	r2, [r3, #22]
			batteryMsg.protection = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <rcGetBattery+0x4b4>)
 8003040:	7d1b      	ldrb	r3, [r3, #20]
 8003042:	b29b      	uxth	r3, r3
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	b29a      	uxth	r2, r3
 8003048:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <rcGetBattery+0x4b4>)
 800304a:	7d5b      	ldrb	r3, [r3, #21]
 800304c:	b29b      	uxth	r3, r3
 800304e:	4413      	add	r3, r2
 8003050:	b29a      	uxth	r2, r3
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <rcGetBattery+0x4b8>)
 8003054:	831a      	strh	r2, [r3, #24]
			batteryMsg.version = bms_uart_buff[22];
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <rcGetBattery+0x4b4>)
 8003058:	7d9a      	ldrb	r2, [r3, #22]
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <rcGetBattery+0x4b8>)
 800305c:	771a      	strb	r2, [r3, #28]
			batteryMsg.capacity_percent = (uint16_t)bms_uart_buff[23];
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <rcGetBattery+0x4b4>)
 8003060:	7ddb      	ldrb	r3, [r3, #23]
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <rcGetBattery+0x4b8>)
 8003066:	835a      	strh	r2, [r3, #26]
			batteryMsg.MOS_state = bms_uart_buff[24];
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <rcGetBattery+0x4b4>)
 800306a:	7e1a      	ldrb	r2, [r3, #24]
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <rcGetBattery+0x4b8>)
 800306e:	775a      	strb	r2, [r3, #29]
			batteryMsg.num_of_battery = bms_uart_buff[25];
 8003070:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <rcGetBattery+0x4b4>)
 8003072:	7e5a      	ldrb	r2, [r3, #25]
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <rcGetBattery+0x4b8>)
 8003076:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[26];
 8003078:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <rcGetBattery+0x4b4>)
 800307a:	7e9a      	ldrb	r2, [r3, #26]
 800307c:	4b13      	ldr	r3, [pc, #76]	; (80030cc <rcGetBattery+0x4b8>)
 800307e:	77da      	strb	r2, [r3, #31]
			batteryMsg.temp1 = ((bms_uart_buff[27] << 8) + bms_uart_buff[28]);
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <rcGetBattery+0x4b4>)
 8003082:	7edb      	ldrb	r3, [r3, #27]
 8003084:	b29b      	uxth	r3, r3
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b29a      	uxth	r2, r3
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <rcGetBattery+0x4b4>)
 800308c:	7f1b      	ldrb	r3, [r3, #28]
 800308e:	b29b      	uxth	r3, r3
 8003090:	4413      	add	r3, r2
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <rcGetBattery+0x4b8>)
 8003096:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = ((bms_uart_buff[29] << 8) + bms_uart_buff[30]);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <rcGetBattery+0x4b4>)
 800309a:	7f5b      	ldrb	r3, [r3, #29]
 800309c:	b29b      	uxth	r3, r3
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <rcGetBattery+0x4b4>)
 80030a4:	7f9b      	ldrb	r3, [r3, #30]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <rcGetBattery+0x4b8>)
 80030ae:	845a      	strh	r2, [r3, #34]	; 0x22
			globData.capacity = batteryMsg.capacity_percent;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <rcGetBattery+0x4b8>)
 80030b2:	8b5b      	ldrh	r3, [r3, #26]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <rcGetBattery+0x4bc>)
 80030b8:	755a      	strb	r2, [r3, #21]
			HAL_UART_Transmit(&BMS_UART, (uint8_t*)bms_jbd_request_msg1, sizeof(bms_jbd_request_msg1), 100);
 80030ba:	2364      	movs	r3, #100	; 0x64
 80030bc:	2207      	movs	r2, #7
 80030be:	4905      	ldr	r1, [pc, #20]	; (80030d4 <rcGetBattery+0x4c0>)
 80030c0:	4805      	ldr	r0, [pc, #20]	; (80030d8 <rcGetBattery+0x4c4>)
 80030c2:	f003 ff1c 	bl	8006efe <HAL_UART_Transmit>
}
 80030c6:	e0dc      	b.n	8003282 <rcGetBattery+0x66e>
 80030c8:	20001ee0 	.word	0x20001ee0
 80030cc:	20001e28 	.word	0x20001e28
 80030d0:	20000074 	.word	0x20000074
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	20001afc 	.word	0x20001afc
		else if (battery_comm == 0x04)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	f040 80cf 	bne.w	8003282 <rcGetBattery+0x66e>
			batteryMsg.battery_pack = bms_uart_buff[3];
 80030e4:	4b69      	ldr	r3, [pc, #420]	; (800328c <rcGetBattery+0x678>)
 80030e6:	78da      	ldrb	r2, [r3, #3]
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <rcGetBattery+0x67c>)
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			batteryMsg.cell_0 = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <rcGetBattery+0x678>)
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b64      	ldr	r3, [pc, #400]	; (800328c <rcGetBattery+0x678>)
 80030fa:	795b      	ldrb	r3, [r3, #5]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4413      	add	r3, r2
 8003100:	b29a      	uxth	r2, r3
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <rcGetBattery+0x67c>)
 8003104:	859a      	strh	r2, [r3, #44]	; 0x2c
			batteryMsg.cell_1 = (bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8003106:	4b61      	ldr	r3, [pc, #388]	; (800328c <rcGetBattery+0x678>)
 8003108:	799b      	ldrb	r3, [r3, #6]
 800310a:	b29b      	uxth	r3, r3
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b5e      	ldr	r3, [pc, #376]	; (800328c <rcGetBattery+0x678>)
 8003112:	79db      	ldrb	r3, [r3, #7]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4413      	add	r3, r2
 8003118:	b29a      	uxth	r2, r3
 800311a:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <rcGetBattery+0x67c>)
 800311c:	85da      	strh	r2, [r3, #46]	; 0x2e
			batteryMsg.cell_2 = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 800311e:	4b5b      	ldr	r3, [pc, #364]	; (800328c <rcGetBattery+0x678>)
 8003120:	7a1b      	ldrb	r3, [r3, #8]
 8003122:	b29b      	uxth	r3, r3
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b29a      	uxth	r2, r3
 8003128:	4b58      	ldr	r3, [pc, #352]	; (800328c <rcGetBattery+0x678>)
 800312a:	7a5b      	ldrb	r3, [r3, #9]
 800312c:	b29b      	uxth	r3, r3
 800312e:	4413      	add	r3, r2
 8003130:	b29a      	uxth	r2, r3
 8003132:	4b57      	ldr	r3, [pc, #348]	; (8003290 <rcGetBattery+0x67c>)
 8003134:	861a      	strh	r2, [r3, #48]	; 0x30
			batteryMsg.cell_3 = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8003136:	4b55      	ldr	r3, [pc, #340]	; (800328c <rcGetBattery+0x678>)
 8003138:	7a9b      	ldrb	r3, [r3, #10]
 800313a:	b29b      	uxth	r3, r3
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b52      	ldr	r3, [pc, #328]	; (800328c <rcGetBattery+0x678>)
 8003142:	7adb      	ldrb	r3, [r3, #11]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4413      	add	r3, r2
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <rcGetBattery+0x67c>)
 800314c:	865a      	strh	r2, [r3, #50]	; 0x32
			batteryMsg.cell_4 = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 800314e:	4b4f      	ldr	r3, [pc, #316]	; (800328c <rcGetBattery+0x678>)
 8003150:	7b1b      	ldrb	r3, [r3, #12]
 8003152:	b29b      	uxth	r3, r3
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	b29a      	uxth	r2, r3
 8003158:	4b4c      	ldr	r3, [pc, #304]	; (800328c <rcGetBattery+0x678>)
 800315a:	7b5b      	ldrb	r3, [r3, #13]
 800315c:	b29b      	uxth	r3, r3
 800315e:	4413      	add	r3, r2
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <rcGetBattery+0x67c>)
 8003164:	869a      	strh	r2, [r3, #52]	; 0x34
			batteryMsg.cell_5 = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8003166:	4b49      	ldr	r3, [pc, #292]	; (800328c <rcGetBattery+0x678>)
 8003168:	7b9b      	ldrb	r3, [r3, #14]
 800316a:	b29b      	uxth	r3, r3
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <rcGetBattery+0x678>)
 8003172:	7bdb      	ldrb	r3, [r3, #15]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4413      	add	r3, r2
 8003178:	b29a      	uxth	r2, r3
 800317a:	4b45      	ldr	r3, [pc, #276]	; (8003290 <rcGetBattery+0x67c>)
 800317c:	86da      	strh	r2, [r3, #54]	; 0x36
			batteryMsg.cell_6 = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <rcGetBattery+0x678>)
 8003180:	7c1b      	ldrb	r3, [r3, #16]
 8003182:	b29b      	uxth	r3, r3
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b40      	ldr	r3, [pc, #256]	; (800328c <rcGetBattery+0x678>)
 800318a:	7c5b      	ldrb	r3, [r3, #17]
 800318c:	b29b      	uxth	r3, r3
 800318e:	4413      	add	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <rcGetBattery+0x67c>)
 8003194:	871a      	strh	r2, [r3, #56]	; 0x38
			batteryMsg.cell_7 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8003196:	4b3d      	ldr	r3, [pc, #244]	; (800328c <rcGetBattery+0x678>)
 8003198:	7c9b      	ldrb	r3, [r3, #18]
 800319a:	b29b      	uxth	r3, r3
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	b29a      	uxth	r2, r3
 80031a0:	4b3a      	ldr	r3, [pc, #232]	; (800328c <rcGetBattery+0x678>)
 80031a2:	7cdb      	ldrb	r3, [r3, #19]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <rcGetBattery+0x67c>)
 80031ac:	875a      	strh	r2, [r3, #58]	; 0x3a
			batteryMsg.cell_8 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <rcGetBattery+0x678>)
 80031b0:	7d1b      	ldrb	r3, [r3, #20]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b34      	ldr	r3, [pc, #208]	; (800328c <rcGetBattery+0x678>)
 80031ba:	7d5b      	ldrb	r3, [r3, #21]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4413      	add	r3, r2
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	4b33      	ldr	r3, [pc, #204]	; (8003290 <rcGetBattery+0x67c>)
 80031c4:	879a      	strh	r2, [r3, #60]	; 0x3c
			batteryMsg.cell_9 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <rcGetBattery+0x678>)
 80031c8:	7d9b      	ldrb	r3, [r3, #22]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	4b2e      	ldr	r3, [pc, #184]	; (800328c <rcGetBattery+0x678>)
 80031d2:	7ddb      	ldrb	r3, [r3, #23]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	b29a      	uxth	r2, r3
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <rcGetBattery+0x67c>)
 80031dc:	87da      	strh	r2, [r3, #62]	; 0x3e
			batteryMsg.cell_10 = (bms_uart_buff[24] << 8) + bms_uart_buff[25];
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <rcGetBattery+0x678>)
 80031e0:	7e1b      	ldrb	r3, [r3, #24]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <rcGetBattery+0x678>)
 80031ea:	7e5b      	ldrb	r3, [r3, #25]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <rcGetBattery+0x67c>)
 80031f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			batteryMsg.cell_11 = (bms_uart_buff[26] << 8) + bms_uart_buff[27];
 80031f8:	4b24      	ldr	r3, [pc, #144]	; (800328c <rcGetBattery+0x678>)
 80031fa:	7e9b      	ldrb	r3, [r3, #26]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	b29a      	uxth	r2, r3
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <rcGetBattery+0x678>)
 8003204:	7edb      	ldrb	r3, [r3, #27]
 8003206:	b29b      	uxth	r3, r3
 8003208:	4413      	add	r3, r2
 800320a:	b29a      	uxth	r2, r3
 800320c:	4b20      	ldr	r3, [pc, #128]	; (8003290 <rcGetBattery+0x67c>)
 800320e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			batteryMsg.cell_12 = (bms_uart_buff[28] << 8) + bms_uart_buff[29];
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <rcGetBattery+0x678>)
 8003214:	7f1b      	ldrb	r3, [r3, #28]
 8003216:	b29b      	uxth	r3, r3
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	b29a      	uxth	r2, r3
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <rcGetBattery+0x678>)
 800321e:	7f5b      	ldrb	r3, [r3, #29]
 8003220:	b29b      	uxth	r3, r3
 8003222:	4413      	add	r3, r2
 8003224:	b29a      	uxth	r2, r3
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <rcGetBattery+0x67c>)
 8003228:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <rcGetBattery+0x678>)
 800322e:	7f9b      	ldrb	r3, [r3, #30]
 8003230:	b29b      	uxth	r3, r3
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	b29a      	uxth	r2, r3
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <rcGetBattery+0x678>)
 8003238:	7fdb      	ldrb	r3, [r3, #31]
 800323a:	b29b      	uxth	r3, r3
 800323c:	4413      	add	r3, r2
 800323e:	b29a      	uxth	r2, r3
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <rcGetBattery+0x67c>)
 8003242:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <rcGetBattery+0x678>)
 8003248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324c:	b29b      	uxth	r3, r3
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	b29a      	uxth	r2, r3
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <rcGetBattery+0x678>)
 8003254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003258:	b29b      	uxth	r3, r3
 800325a:	4413      	add	r3, r2
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <rcGetBattery+0x67c>)
 8003260:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <rcGetBattery+0x678>)
 8003266:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800326a:	b29b      	uxth	r3, r3
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	b29a      	uxth	r2, r3
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <rcGetBattery+0x678>)
 8003272:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003276:	b29b      	uxth	r3, r3
 8003278:	4413      	add	r3, r2
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <rcGetBattery+0x67c>)
 800327e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20001ee0 	.word	0x20001ee0
 8003290:	20001e28 	.word	0x20001e28

08003294 <calculateCS>:

uint8_t calculateCS(uint8_t *msg, int msg_size) {
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint8_t cs = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	da0a      	bge.n	80032c4 <calculateCS+0x30>
  {
    cs+=msg[i];
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	4413      	add	r3, r2
 80032ba:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	3301      	adds	r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	e7f0      	b.n	80032a6 <calculateCS+0x12>
  }
  return cs;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(huart);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f004 f9b1 	bl	8007644 <HAL_UART_GetError>
 80032e2:	61f8      	str	r0, [r7, #28]
	switch (er) {
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d863      	bhi.n	80033b4 <HAL_UART_ErrorCallback+0xe0>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_UART_ErrorCallback+0x20>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003335 	.word	0x08003335
 80032f8:	08003353 	.word	0x08003353
 80032fc:	080033b5 	.word	0x080033b5
 8003300:	08003371 	.word	0x08003371
 8003304:	080033b5 	.word	0x080033b5
 8003308:	080033b5 	.word	0x080033b5
 800330c:	080033b5 	.word	0x080033b5
 8003310:	0800338f 	.word	0x0800338f
 8003314:	080033b5 	.word	0x080033b5
 8003318:	080033b5 	.word	0x080033b5
 800331c:	080033b5 	.word	0x080033b5
 8003320:	080033b5 	.word	0x080033b5
 8003324:	080033b5 	.word	0x080033b5
 8003328:	080033b5 	.word	0x080033b5
 800332c:	080033b5 	.word	0x080033b5
 8003330:	080033ad 	.word	0x080033ad
		case HAL_UART_ERROR_PE:
			__HAL_UART_CLEAR_PEFLAG(huart);
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8003350:	e031      	b.n	80033b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:
			__HAL_UART_CLEAR_NEFLAG(huart);
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800336e:	e022      	b.n	80033b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:
			__HAL_UART_CLEAR_FEFLAG(huart);
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800338c:	e013      	b.n	80033b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:
			__HAL_UART_CLEAR_OREFLAG(huart);
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80033aa:	e004      	b.n	80033b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80033b2:	e000      	b.n	80033b6 <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 80033b4:	bf00      	nop
	}
	if (huart->Instance == WIFI_UART_Ins) {
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a21      	ldr	r2, [pc, #132]	; (8003440 <HAL_UART_ErrorCallback+0x16c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d110      	bne.n	80033e2 <HAL_UART_ErrorCallback+0x10e>
		new_wifi_data = 1;
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_UART_ErrorCallback+0x170>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff,
 80033c6:	2264      	movs	r2, #100	; 0x64
 80033c8:	491f      	ldr	r1, [pc, #124]	; (8003448 <HAL_UART_ErrorCallback+0x174>)
 80033ca:	4820      	ldr	r0, [pc, #128]	; (800344c <HAL_UART_ErrorCallback+0x178>)
 80033cc:	f003 fe29 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
				sizeof(wifi_uart_buff));
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <HAL_UART_ErrorCallback+0x17c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_UART_ErrorCallback+0x17c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0208 	bic.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
		new_remote_data = 0;
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff,
				sizeof(rc_uart_buff));
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
	}
}
 80033e0:	e02a      	b.n	8003438 <HAL_UART_ErrorCallback+0x164>
	else if (huart->Instance == BMS_UART_Ins) {
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_UART_ErrorCallback+0x180>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d110      	bne.n	800340e <HAL_UART_ErrorCallback+0x13a>
		new_bms_data = 0;
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_UART_ErrorCallback+0x184>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff,
 80033f2:	2264      	movs	r2, #100	; 0x64
 80033f4:	4919      	ldr	r1, [pc, #100]	; (800345c <HAL_UART_ErrorCallback+0x188>)
 80033f6:	481a      	ldr	r0, [pc, #104]	; (8003460 <HAL_UART_ErrorCallback+0x18c>)
 80033f8:	f003 fe13 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_UART_ErrorCallback+0x190>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_UART_ErrorCallback+0x190>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0208 	bic.w	r2, r2, #8
 800340a:	601a      	str	r2, [r3, #0]
}
 800340c:	e014      	b.n	8003438 <HAL_UART_ErrorCallback+0x164>
	else if (huart->Instance == RC_UART_Ins) {
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_UART_ErrorCallback+0x194>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10f      	bne.n	8003438 <HAL_UART_ErrorCallback+0x164>
		new_remote_data = 0;
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_UART_ErrorCallback+0x198>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff,
 800341e:	2264      	movs	r2, #100	; 0x64
 8003420:	4913      	ldr	r1, [pc, #76]	; (8003470 <HAL_UART_ErrorCallback+0x19c>)
 8003422:	4814      	ldr	r0, [pc, #80]	; (8003474 <HAL_UART_ErrorCallback+0x1a0>)
 8003424:	f003 fdfd 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_UART_ErrorCallback+0x1a4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_UART_ErrorCallback+0x1a4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0208 	bic.w	r2, r2, #8
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40011000 	.word	0x40011000
 8003444:	20001e78 	.word	0x20001e78
 8003448:	20001f44 	.word	0x20001f44
 800344c:	20001ab8 	.word	0x20001ab8
 8003450:	20001b84 	.word	0x20001b84
 8003454:	40004400 	.word	0x40004400
 8003458:	20001e7a 	.word	0x20001e7a
 800345c:	20001ee0 	.word	0x20001ee0
 8003460:	20001afc 	.word	0x20001afc
 8003464:	20001be4 	.word	0x20001be4
 8003468:	40004800 	.word	0x40004800
 800346c:	20001e79 	.word	0x20001e79
 8003470:	20001e7c 	.word	0x20001e7c
 8003474:	20001b40 	.word	0x20001b40
 8003478:	20001c44 	.word	0x20001c44

0800347c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == WIFI_UART_Ins) {
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a21      	ldr	r2, [pc, #132]	; (8003514 <HAL_UARTEx_RxEventCallback+0x98>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d110      	bne.n	80034b4 <HAL_UARTEx_RxEventCallback+0x38>
		new_wifi_data = 1;
 8003492:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_UARTEx_RxEventCallback+0x9c>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8003498:	2264      	movs	r2, #100	; 0x64
 800349a:	4920      	ldr	r1, [pc, #128]	; (800351c <HAL_UARTEx_RxEventCallback+0xa0>)
 800349c:	4820      	ldr	r0, [pc, #128]	; (8003520 <HAL_UARTEx_RxEventCallback+0xa4>)
 800349e:	f003 fdc0 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_UARTEx_RxEventCallback+0xa8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_UARTEx_RxEventCallback+0xa8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0208 	bic.w	r2, r2, #8
 80034b0:	601a      	str	r2, [r3, #0]
	else if (huart->Instance == RC_UART_Ins) {
		new_remote_data = 1;
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
	}
}
 80034b2:	e02a      	b.n	800350a <HAL_UARTEx_RxEventCallback+0x8e>
	else if (huart->Instance == BMS_UART_Ins) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_UARTEx_RxEventCallback+0xac>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d110      	bne.n	80034e0 <HAL_UARTEx_RxEventCallback+0x64>
		new_bms_data = 1;
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_UARTEx_RxEventCallback+0xb0>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 80034c4:	2264      	movs	r2, #100	; 0x64
 80034c6:	491a      	ldr	r1, [pc, #104]	; (8003530 <HAL_UARTEx_RxEventCallback+0xb4>)
 80034c8:	481a      	ldr	r0, [pc, #104]	; (8003534 <HAL_UARTEx_RxEventCallback+0xb8>)
 80034ca:	f003 fdaa 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_UARTEx_RxEventCallback+0xbc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_UARTEx_RxEventCallback+0xbc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0208 	bic.w	r2, r2, #8
 80034dc:	601a      	str	r2, [r3, #0]
}
 80034de:	e014      	b.n	800350a <HAL_UARTEx_RxEventCallback+0x8e>
	else if (huart->Instance == RC_UART_Ins) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a15      	ldr	r2, [pc, #84]	; (800353c <HAL_UARTEx_RxEventCallback+0xc0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10f      	bne.n	800350a <HAL_UARTEx_RxEventCallback+0x8e>
		new_remote_data = 1;
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_UARTEx_RxEventCallback+0xc4>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 80034f0:	2264      	movs	r2, #100	; 0x64
 80034f2:	4914      	ldr	r1, [pc, #80]	; (8003544 <HAL_UARTEx_RxEventCallback+0xc8>)
 80034f4:	4814      	ldr	r0, [pc, #80]	; (8003548 <HAL_UARTEx_RxEventCallback+0xcc>)
 80034f6:	f003 fd94 	bl	8007022 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <HAL_UARTEx_RxEventCallback+0xd0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_UARTEx_RxEventCallback+0xd0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0208 	bic.w	r2, r2, #8
 8003508:	601a      	str	r2, [r3, #0]
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40011000 	.word	0x40011000
 8003518:	20001e78 	.word	0x20001e78
 800351c:	20001f44 	.word	0x20001f44
 8003520:	20001ab8 	.word	0x20001ab8
 8003524:	20001b84 	.word	0x20001b84
 8003528:	40004400 	.word	0x40004400
 800352c:	20001e7a 	.word	0x20001e7a
 8003530:	20001ee0 	.word	0x20001ee0
 8003534:	20001afc 	.word	0x20001afc
 8003538:	20001be4 	.word	0x20001be4
 800353c:	40004800 	.word	0x40004800
 8003540:	20001e79 	.word	0x20001e79
 8003544:	20001e7c 	.word	0x20001e7c
 8003548:	20001b40 	.word	0x20001b40
 800354c:	20001c44 	.word	0x20001c44

08003550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_Init+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <HAL_Init+0x40>)
 800355a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_Init+0x40>)
 8003566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a07      	ldr	r2, [pc, #28]	; (8003590 <HAL_Init+0x40>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003578:	2003      	movs	r0, #3
 800357a:	f000 ff8a 	bl	8004492 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357e:	200f      	movs	r0, #15
 8003580:	f7fd fb6a 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003584:	f7fd fb3c 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00

08003594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_IncTick+0x20>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_IncTick+0x24>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_IncTick+0x24>)
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000028 	.word	0x20000028
 80035b8:	20001fb0 	.word	0x20001fb0

080035bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return uwTick;
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_GetTick+0x14>)
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20001fb0 	.word	0x20001fb0

080035d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7ff ffee 	bl	80035bc <HAL_GetTick>
 80035e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d005      	beq.n	80035fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_Delay+0x44>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035fa:	bf00      	nop
 80035fc:	f7ff ffde 	bl	80035bc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	429a      	cmp	r2, r3
 800360a:	d8f7      	bhi.n	80035fc <HAL_Delay+0x28>
  {
  }
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000028 	.word	0x20000028

0800361c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0ed      	b.n	800380a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fc ffb2 	bl	80005a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003650:	f7ff ffb4 	bl	80035bc <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003656:	e012      	b.n	800367e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003658:	f7ff ffb0 	bl	80035bc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b0a      	cmp	r3, #10
 8003664:	d90b      	bls.n	800367e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2205      	movs	r2, #5
 8003676:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0c5      	b.n	800380a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0e5      	beq.n	8003658 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0202 	bic.w	r2, r2, #2
 800369a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800369c:	f7ff ff8e 	bl	80035bc <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036a2:	e012      	b.n	80036ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a4:	f7ff ff8a 	bl	80035bc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b0a      	cmp	r3, #10
 80036b0:	d90b      	bls.n	80036ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2205      	movs	r2, #5
 80036c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e09f      	b.n	800380a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7e1b      	ldrb	r3, [r3, #24]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d108      	bne.n	80036f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e007      	b.n	8003702 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7e5b      	ldrb	r3, [r3, #25]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e007      	b.n	800372c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7e9b      	ldrb	r3, [r3, #26]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d108      	bne.n	8003746 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0220 	orr.w	r2, r2, #32
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e007      	b.n	8003756 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0220 	bic.w	r2, r2, #32
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7edb      	ldrb	r3, [r3, #27]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0210 	bic.w	r2, r2, #16
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e007      	b.n	8003780 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0210 	orr.w	r2, r2, #16
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7f1b      	ldrb	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d108      	bne.n	800379a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0208 	orr.w	r2, r2, #8
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e007      	b.n	80037aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0208 	bic.w	r2, r2, #8
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7f5b      	ldrb	r3, [r3, #29]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0204 	orr.w	r2, r2, #4
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e007      	b.n	80037d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	ea42 0103 	orr.w	r1, r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d003      	beq.n	800383a <HAL_CAN_ConfigFilter+0x26>
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	2b02      	cmp	r3, #2
 8003836:	f040 80be 	bne.w	80039b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800383a:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800383c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003854:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	431a      	orrs	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2201      	movs	r2, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43db      	mvns	r3, r3
 800388c:	401a      	ands	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d123      	bne.n	80038e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	3248      	adds	r2, #72	; 0x48
 80038c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	3348      	adds	r3, #72	; 0x48
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	440b      	add	r3, r1
 80038e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d122      	bne.n	8003932 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800390c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3248      	adds	r2, #72	; 0x48
 8003912:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003926:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003928:	6979      	ldr	r1, [r7, #20]
 800392a:	3348      	adds	r3, #72	; 0x48
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	43db      	mvns	r3, r3
 8003944:	401a      	ands	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800394c:	e007      	b.n	800395e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	431a      	orrs	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	401a      	ands	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003978:	e007      	b.n	800398a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	431a      	orrs	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	431a      	orrs	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039a8:	f023 0201 	bic.w	r2, r3, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e006      	b.n	80039c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40006400 	.word	0x40006400

080039d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d12e      	bne.n	8003a46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a00:	f7ff fddc 	bl	80035bc <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a06:	e012      	b.n	8003a2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a08:	f7ff fdd8 	bl	80035bc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b0a      	cmp	r3, #10
 8003a14:	d90b      	bls.n	8003a2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2205      	movs	r2, #5
 8003a26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e012      	b.n	8003a54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e5      	bne.n	8003a08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e006      	b.n	8003a54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d003      	beq.n	8003a88 <HAL_CAN_AddTxMessage+0x2c>
 8003a80:	7ffb      	ldrb	r3, [r7, #31]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	f040 80b8 	bne.w	8003bf8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80a0 	beq.w	8003be8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	0e1b      	lsrs	r3, r3, #24
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d907      	bls.n	8003ac8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e09e      	b.n	8003c06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	409a      	lsls	r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ae4:	68f9      	ldr	r1, [r7, #12]
 8003ae6:	6809      	ldr	r1, [r1, #0]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	3318      	adds	r3, #24
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	440b      	add	r3, r1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e00f      	b.n	8003b16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b06:	68f9      	ldr	r1, [r7, #12]
 8003b08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	440b      	add	r3, r1
 8003b14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	3318      	adds	r3, #24
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	440b      	add	r3, r1
 8003b26:	3304      	adds	r3, #4
 8003b28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	7d1b      	ldrb	r3, [r3, #20]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d111      	bne.n	8003b56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3318      	adds	r3, #24
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	6811      	ldr	r1, [r2, #0]
 8003b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3318      	adds	r3, #24
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	440b      	add	r3, r1
 8003b52:	3304      	adds	r3, #4
 8003b54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3307      	adds	r3, #7
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	061a      	lsls	r2, r3, #24
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3306      	adds	r3, #6
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3305      	adds	r3, #5
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	4313      	orrs	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	3204      	adds	r2, #4
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	4610      	mov	r0, r2
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	6811      	ldr	r1, [r2, #0]
 8003b7e:	ea43 0200 	orr.w	r2, r3, r0
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	440b      	add	r3, r1
 8003b88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003b8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3303      	adds	r3, #3
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	061a      	lsls	r2, r3, #24
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3302      	adds	r3, #2
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	4610      	mov	r0, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	6811      	ldr	r1, [r2, #0]
 8003bb4:	ea43 0200 	orr.w	r2, r3, r0
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003bc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	3318      	adds	r3, #24
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4413      	add	r3, r2
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	6811      	ldr	r1, [r2, #0]
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3318      	adds	r3, #24
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	440b      	add	r3, r1
 8003be2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e00e      	b.n	8003c06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e006      	b.n	8003c06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c24:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d002      	beq.n	8003c32 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d11d      	bne.n	8003c6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3301      	adds	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d003      	beq.n	8003ca0 <HAL_CAN_GetRxMessage+0x24>
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	f040 80f3 	bne.w	8003e86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d116      	bne.n	8003ce2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0e7      	b.n	8003e94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0d8      	b.n	8003e94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	331b      	adds	r3, #27
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	4413      	add	r3, r2
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0204 	and.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10c      	bne.n	8003d1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	331b      	adds	r3, #27
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4413      	add	r3, r2
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	0d5b      	lsrs	r3, r3, #21
 8003d10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e00b      	b.n	8003d32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	331b      	adds	r3, #27
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	4413      	add	r3, r2
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	331b      	adds	r3, #27
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	4413      	add	r3, r2
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0202 	and.w	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	331b      	adds	r3, #27
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	4413      	add	r3, r2
 8003d54:	3304      	adds	r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 020f 	and.w	r2, r3, #15
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	331b      	adds	r3, #27
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	331b      	adds	r3, #27
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	4413      	add	r3, r2
 8003d84:	3304      	adds	r3, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0a1a      	lsrs	r2, r3, #8
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	0c1a      	lsrs	r2, r3, #16
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0e1a      	lsrs	r2, r3, #24
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	3303      	adds	r3, #3
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	3304      	adds	r3, #4
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0a1a      	lsrs	r2, r3, #8
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	3305      	adds	r3, #5
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	0c1a      	lsrs	r2, r3, #16
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	3306      	adds	r3, #6
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0e1a      	lsrs	r2, r3, #24
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	3307      	adds	r3, #7
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d108      	bne.n	8003e72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0220 	orr.w	r2, r2, #32
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	e007      	b.n	8003e82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e006      	b.n	8003e94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d002      	beq.n	8003ebe <HAL_CAN_ActivateNotification+0x1e>
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d109      	bne.n	8003ed2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6959      	ldr	r1, [r3, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e006      	b.n	8003ee0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d07c      	beq.n	800402c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d023      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f983 	bl	800425a <HAL_CAN_TxMailbox0CompleteCallback>
 8003f54:	e016      	b.n	8003f84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	e00c      	b.n	8003f84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	e002      	b.n	8003f84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f989 	bl	8004296 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d024      	beq.n	8003fd8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f963 	bl	800426e <HAL_CAN_TxMailbox1CompleteCallback>
 8003fa8:	e016      	b.n	8003fd8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	e00c      	b.n	8003fd8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	e002      	b.n	8003fd8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f969 	bl	80042aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d024      	beq.n	800402c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f943 	bl	8004282 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ffc:	e016      	b.n	800402c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	e00c      	b.n	800402c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	e002      	b.n	800402c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f949 	bl	80042be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004046:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2210      	movs	r2, #16
 800404e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2208      	movs	r2, #8
 800406a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f930 	bl	80042d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd ffb8 	bl	8002000 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2210      	movs	r2, #16
 80040b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d006      	beq.n	80040d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2208      	movs	r2, #8
 80040ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f912 	bl	80042fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8f9 	bl	80042e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b00      	cmp	r3, #0
 8004106:	d006      	beq.n	8004116 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2210      	movs	r2, #16
 800410e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8fc 	bl	800430e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2208      	movs	r2, #8
 8004130:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8f5 	bl	8004322 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d07b      	beq.n	800423a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d072      	beq.n	8004232 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	f043 0302 	orr.w	r3, r3, #2
 8004182:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d043      	beq.n	8004232 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d03e      	beq.n	8004232 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ba:	2b60      	cmp	r3, #96	; 0x60
 80041bc:	d02b      	beq.n	8004216 <HAL_CAN_IRQHandler+0x32a>
 80041be:	2b60      	cmp	r3, #96	; 0x60
 80041c0:	d82e      	bhi.n	8004220 <HAL_CAN_IRQHandler+0x334>
 80041c2:	2b50      	cmp	r3, #80	; 0x50
 80041c4:	d022      	beq.n	800420c <HAL_CAN_IRQHandler+0x320>
 80041c6:	2b50      	cmp	r3, #80	; 0x50
 80041c8:	d82a      	bhi.n	8004220 <HAL_CAN_IRQHandler+0x334>
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d019      	beq.n	8004202 <HAL_CAN_IRQHandler+0x316>
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d826      	bhi.n	8004220 <HAL_CAN_IRQHandler+0x334>
 80041d2:	2b30      	cmp	r3, #48	; 0x30
 80041d4:	d010      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x30c>
 80041d6:	2b30      	cmp	r3, #48	; 0x30
 80041d8:	d822      	bhi.n	8004220 <HAL_CAN_IRQHandler+0x334>
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d002      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x2f8>
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d005      	beq.n	80041ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041e2:	e01d      	b.n	8004220 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	f043 0308 	orr.w	r3, r3, #8
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041ec:	e019      	b.n	8004222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	f043 0310 	orr.w	r3, r3, #16
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041f6:	e014      	b.n	8004222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f043 0320 	orr.w	r3, r3, #32
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004200:	e00f      	b.n	8004222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800420a:	e00a      	b.n	8004222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004214:	e005      	b.n	8004222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800421e:	e000      	b.n	8004222 <HAL_CAN_IRQHandler+0x336>
            break;
 8004220:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004230:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2204      	movs	r2, #4
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fd fef9 	bl	8002044 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004252:	bf00      	nop
 8004254:	3728      	adds	r7, #40	; 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <__NVIC_SetPriorityGrouping>:
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <__NVIC_SetPriorityGrouping+0x44>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004354:	4013      	ands	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800436a:	4a04      	ldr	r2, [pc, #16]	; (800437c <__NVIC_SetPriorityGrouping+0x44>)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	60d3      	str	r3, [r2, #12]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <__NVIC_GetPriorityGrouping>:
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <__NVIC_GetPriorityGrouping+0x18>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	0a1b      	lsrs	r3, r3, #8
 800438a:	f003 0307 	and.w	r3, r3, #7
}
 800438e:	4618      	mov	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <__NVIC_EnableIRQ>:
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	db0b      	blt.n	80043c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	4907      	ldr	r1, [pc, #28]	; (80043d4 <__NVIC_EnableIRQ+0x38>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2001      	movs	r0, #1
 80043be:	fa00 f202 	lsl.w	r2, r0, r2
 80043c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	e000e100 	.word	0xe000e100

080043d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	db0a      	blt.n	8004402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	490c      	ldr	r1, [pc, #48]	; (8004424 <__NVIC_SetPriority+0x4c>)
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	440b      	add	r3, r1
 80043fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004400:	e00a      	b.n	8004418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4908      	ldr	r1, [pc, #32]	; (8004428 <__NVIC_SetPriority+0x50>)
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	3b04      	subs	r3, #4
 8004410:	0112      	lsls	r2, r2, #4
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	440b      	add	r3, r1
 8004416:	761a      	strb	r2, [r3, #24]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	e000e100 	.word	0xe000e100
 8004428:	e000ed00 	.word	0xe000ed00

0800442c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800442c:	b480      	push	{r7}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f1c3 0307 	rsb	r3, r3, #7
 8004446:	2b04      	cmp	r3, #4
 8004448:	bf28      	it	cs
 800444a:	2304      	movcs	r3, #4
 800444c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3304      	adds	r3, #4
 8004452:	2b06      	cmp	r3, #6
 8004454:	d902      	bls.n	800445c <NVIC_EncodePriority+0x30>
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3b03      	subs	r3, #3
 800445a:	e000      	b.n	800445e <NVIC_EncodePriority+0x32>
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43da      	mvns	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	401a      	ands	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004474:	f04f 31ff 	mov.w	r1, #4294967295
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	43d9      	mvns	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004484:	4313      	orrs	r3, r2
         );
}
 8004486:	4618      	mov	r0, r3
 8004488:	3724      	adds	r7, #36	; 0x24
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff ff4c 	bl	8004338 <__NVIC_SetPriorityGrouping>
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ba:	f7ff ff61 	bl	8004380 <__NVIC_GetPriorityGrouping>
 80044be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f7ff ffb1 	bl	800442c <NVIC_EncodePriority>
 80044ca:	4602      	mov	r2, r0
 80044cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ff80 	bl	80043d8 <__NVIC_SetPriority>
}
 80044d8:	bf00      	nop
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ff54 	bl	800439c <__NVIC_EnableIRQ>
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004508:	f7ff f858 	bl	80035bc <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e099      	b.n	800464c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004538:	e00f      	b.n	800455a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800453a:	f7ff f83f 	bl	80035bc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b05      	cmp	r3, #5
 8004546:	d908      	bls.n	800455a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2203      	movs	r2, #3
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e078      	b.n	800464c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e8      	bne.n	800453a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4b38      	ldr	r3, [pc, #224]	; (8004654 <HAL_DMA_Init+0x158>)
 8004574:	4013      	ands	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d107      	bne.n	80045c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4313      	orrs	r3, r2
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d117      	bne.n	800461e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fb01 	bl	8004c08 <DMA_CheckFifoParam>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800461a:	2301      	movs	r3, #1
 800461c:	e016      	b.n	800464c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fab8 	bl	8004b9c <DMA_CalcBaseAndBitshift>
 800462c:	4603      	mov	r3, r0
 800462e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	223f      	movs	r2, #63	; 0x3f
 8004636:	409a      	lsls	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	f010803f 	.word	0xf010803f

08004658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_DMA_Start_IT+0x26>
 800467a:	2302      	movs	r3, #2
 800467c:	e040      	b.n	8004700 <HAL_DMA_Start_IT+0xa8>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d12f      	bne.n	80046f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fa4a 	bl	8004b40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	223f      	movs	r2, #63	; 0x3f
 80046b2:	409a      	lsls	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0216 	orr.w	r2, r2, #22
 80046c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e005      	b.n	80046fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
 80046fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004716:	f7fe ff51 	bl	80035bc <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d008      	beq.n	800473a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e052      	b.n	80047e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0216 	bic.w	r2, r2, #22
 8004748:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004758:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <HAL_DMA_Abort+0x62>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0208 	bic.w	r2, r2, #8
 8004778:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478a:	e013      	b.n	80047b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800478c:	f7fe ff16 	bl	80035bc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b05      	cmp	r3, #5
 8004798:	d90c      	bls.n	80047b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2203      	movs	r2, #3
 80047a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e015      	b.n	80047e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e4      	bne.n	800478c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	223f      	movs	r2, #63	; 0x3f
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e00c      	b.n	8004820 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2205      	movs	r2, #5
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004838:	4b8e      	ldr	r3, [pc, #568]	; (8004a74 <HAL_DMA_IRQHandler+0x248>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a8e      	ldr	r2, [pc, #568]	; (8004a78 <HAL_DMA_IRQHandler+0x24c>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	0a9b      	lsrs	r3, r3, #10
 8004844:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	2208      	movs	r2, #8
 8004858:	409a      	lsls	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01a      	beq.n	8004898 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d013      	beq.n	8004898 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	2208      	movs	r2, #8
 8004886:	409a      	lsls	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489c:	2201      	movs	r2, #1
 800489e:	409a      	lsls	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d012      	beq.n	80048ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f043 0202 	orr.w	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d2:	2204      	movs	r2, #4
 80048d4:	409a      	lsls	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	2204      	movs	r2, #4
 80048f2:	409a      	lsls	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	2210      	movs	r2, #16
 800490a:	409a      	lsls	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d043      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03c      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	2210      	movs	r2, #16
 8004928:	409a      	lsls	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d018      	beq.n	800496e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d108      	bne.n	800495c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d024      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
 800495a:	e01f      	b.n	800499c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4798      	blx	r3
 800496c:	e016      	b.n	800499c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d107      	bne.n	800498c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0208 	bic.w	r2, r2, #8
 800498a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	2220      	movs	r2, #32
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 808f 	beq.w	8004acc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8087 	beq.w	8004acc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c2:	2220      	movs	r2, #32
 80049c4:	409a      	lsls	r2, r3
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d136      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0216 	bic.w	r2, r2, #22
 80049e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_DMA_IRQHandler+0x1da>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0208 	bic.w	r2, r2, #8
 8004a14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	223f      	movs	r2, #63	; 0x3f
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d07e      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
        }
        return;
 8004a42:	e079      	b.n	8004b38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01d      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10d      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
 8004a70:	e02c      	b.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
 8004a72:	bf00      	nop
 8004a74:	20000000 	.word	0x20000000
 8004a78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d023      	beq.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
 8004a8c:	e01e      	b.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10f      	bne.n	8004abc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0210 	bic.w	r2, r2, #16
 8004aaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d032      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d022      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d307      	bcc.n	8004b14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f2      	bne.n	8004af8 <HAL_DMA_IRQHandler+0x2cc>
 8004b12:	e000      	b.n	8004b16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
 8004b36:	e000      	b.n	8004b3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b38:	bf00      	nop
    }
  }
}
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d108      	bne.n	8004b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b7e:	e007      	b.n	8004b90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	3b10      	subs	r3, #16
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <DMA_CalcBaseAndBitshift+0x64>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <DMA_CalcBaseAndBitshift+0x68>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d909      	bls.n	8004bde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	; 0x58
 8004bdc:	e007      	b.n	8004bee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	aaaaaaab 	.word	0xaaaaaaab
 8004c04:	0800b078 	.word	0x0800b078

08004c08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11f      	bne.n	8004c62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d856      	bhi.n	8004cd6 <DMA_CheckFifoParam+0xce>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <DMA_CheckFifoParam+0x28>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c53 	.word	0x08004c53
 8004c38:	08004c41 	.word	0x08004c41
 8004c3c:	08004cd7 	.word	0x08004cd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d046      	beq.n	8004cda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e043      	b.n	8004cda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c5a:	d140      	bne.n	8004cde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e03d      	b.n	8004cde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6a:	d121      	bne.n	8004cb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d837      	bhi.n	8004ce2 <DMA_CheckFifoParam+0xda>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <DMA_CheckFifoParam+0x70>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c8f 	.word	0x08004c8f
 8004c80:	08004c89 	.word	0x08004c89
 8004c84:	08004ca1 	.word	0x08004ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e030      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d025      	beq.n	8004ce6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c9e:	e022      	b.n	8004ce6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca8:	d11f      	bne.n	8004cea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cae:	e01c      	b.n	8004cea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d903      	bls.n	8004cbe <DMA_CheckFifoParam+0xb6>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d003      	beq.n	8004cc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cbc:	e018      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc2:	e015      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e00b      	b.n	8004cee <DMA_CheckFifoParam+0xe6>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e00a      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e008      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e006      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e004      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e002      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
    }
  } 
  
  return status; 
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop

08004d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e16b      	b.n	8004ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f040 815a 	bne.w	8004fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d005      	beq.n	8004d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d130      	bne.n	8004db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 0201 	and.w	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d017      	beq.n	8004df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d123      	bne.n	8004e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	08da      	lsrs	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3208      	adds	r2, #8
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0203 	and.w	r2, r3, #3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80b4 	beq.w	8004fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b60      	ldr	r3, [pc, #384]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	4a5f      	ldr	r2, [pc, #380]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e94:	6453      	str	r3, [r2, #68]	; 0x44
 8004e96:	4b5d      	ldr	r3, [pc, #372]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea2:	4a5b      	ldr	r2, [pc, #364]	; (8005010 <HAL_GPIO_Init+0x310>)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	220f      	movs	r2, #15
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_GPIO_Init+0x314>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d02b      	beq.n	8004f26 <HAL_GPIO_Init+0x226>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a51      	ldr	r2, [pc, #324]	; (8005018 <HAL_GPIO_Init+0x318>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d025      	beq.n	8004f22 <HAL_GPIO_Init+0x222>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a50      	ldr	r2, [pc, #320]	; (800501c <HAL_GPIO_Init+0x31c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <HAL_GPIO_Init+0x21e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4f      	ldr	r2, [pc, #316]	; (8005020 <HAL_GPIO_Init+0x320>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d019      	beq.n	8004f1a <HAL_GPIO_Init+0x21a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a4e      	ldr	r2, [pc, #312]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_GPIO_Init+0x216>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a4d      	ldr	r2, [pc, #308]	; (8005028 <HAL_GPIO_Init+0x328>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00d      	beq.n	8004f12 <HAL_GPIO_Init+0x212>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a4c      	ldr	r2, [pc, #304]	; (800502c <HAL_GPIO_Init+0x32c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <HAL_GPIO_Init+0x20e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4b      	ldr	r2, [pc, #300]	; (8005030 <HAL_GPIO_Init+0x330>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <HAL_GPIO_Init+0x20a>
 8004f06:	2307      	movs	r3, #7
 8004f08:	e00e      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	e00c      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f0e:	2306      	movs	r3, #6
 8004f10:	e00a      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f12:	2305      	movs	r3, #5
 8004f14:	e008      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e006      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e004      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e002      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f26:	2300      	movs	r3, #0
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	f002 0203 	and.w	r2, r2, #3
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	4093      	lsls	r3, r2
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f38:	4935      	ldr	r1, [pc, #212]	; (8005010 <HAL_GPIO_Init+0x310>)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	3302      	adds	r3, #2
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f46:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f6a:	4a32      	ldr	r2, [pc, #200]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f70:	4b30      	ldr	r3, [pc, #192]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fe8:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	f67f ae90 	bls.w	8004d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	40013800 	.word	0x40013800
 8005014:	40020000 	.word	0x40020000
 8005018:	40020400 	.word	0x40020400
 800501c:	40020800 	.word	0x40020800
 8005020:	40020c00 	.word	0x40020c00
 8005024:	40021000 	.word	0x40021000
 8005028:	40021400 	.word	0x40021400
 800502c:	40021800 	.word	0x40021800
 8005030:	40021c00 	.word	0x40021c00
 8005034:	40013c00 	.word	0x40013c00

08005038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
 8005044:	4613      	mov	r3, r2
 8005046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005048:	787b      	ldrb	r3, [r7, #1]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005054:	e003      	b.n	800505e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	041a      	lsls	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e034      	b.n	80050e6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005084:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f245 5255 	movw	r2, #21845	; 0x5555
 800508e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6852      	ldr	r2, [r2, #4]
 8005098:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6892      	ldr	r2, [r2, #8]
 80050a2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80050a4:	f7fe fa8a 	bl	80035bc <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80050aa:	e00f      	b.n	80050cc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80050ac:	f7fe fa86 	bl	80035bc <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b31      	cmp	r3, #49	; 0x31
 80050b8:	d908      	bls.n	80050cc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e00c      	b.n	80050e6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e8      	bne.n	80050ac <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80050e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80050fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e267      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d075      	beq.n	800521a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800512e:	4b88      	ldr	r3, [pc, #544]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d00c      	beq.n	8005154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513a:	4b85      	ldr	r3, [pc, #532]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005142:	2b08      	cmp	r3, #8
 8005144:	d112      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005146:	4b82      	ldr	r3, [pc, #520]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005152:	d10b      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005154:	4b7e      	ldr	r3, [pc, #504]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05b      	beq.n	8005218 <HAL_RCC_OscConfig+0x108>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d157      	bne.n	8005218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e242      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d106      	bne.n	8005184 <HAL_RCC_OscConfig+0x74>
 8005176:	4b76      	ldr	r3, [pc, #472]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a75      	ldr	r2, [pc, #468]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e01d      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0x98>
 800518e:	4b70      	ldr	r3, [pc, #448]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a6f      	ldr	r2, [pc, #444]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b6d      	ldr	r3, [pc, #436]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a6c      	ldr	r2, [pc, #432]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 80051a8:	4b69      	ldr	r3, [pc, #420]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a68      	ldr	r2, [pc, #416]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b66      	ldr	r3, [pc, #408]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a65      	ldr	r2, [pc, #404]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fe f9f8 	bl	80035bc <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fe f9f4 	bl	80035bc <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e207      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b5b      	ldr	r3, [pc, #364]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0xc0>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fe f9e4 	bl	80035bc <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fe f9e0 	bl	80035bc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e1f3      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	4b51      	ldr	r3, [pc, #324]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0xe8>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d063      	beq.n	80052ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005226:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800523a:	2b08      	cmp	r3, #8
 800523c:	d11c      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523e:	4b44      	ldr	r3, [pc, #272]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d116      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524a:	4b41      	ldr	r3, [pc, #260]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d001      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e1c7      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4937      	ldr	r1, [pc, #220]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005276:	e03a      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d020      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005280:	4b34      	ldr	r3, [pc, #208]	; (8005354 <HAL_RCC_OscConfig+0x244>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fe f999 	bl	80035bc <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800528e:	f7fe f995 	bl	80035bc <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1a8      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a0:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ac:	4b28      	ldr	r3, [pc, #160]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4925      	ldr	r1, [pc, #148]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	e015      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <HAL_RCC_OscConfig+0x244>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fe f978 	bl	80035bc <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052d0:	f7fe f974 	bl	80035bc <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e187      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e2:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d036      	beq.n	8005368 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_RCC_OscConfig+0x248>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fe f958 	bl	80035bc <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005310:	f7fe f954 	bl	80035bc <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e167      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_OscConfig+0x240>)
 8005324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x200>
 800532e:	e01b      	b.n	8005368 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_RCC_OscConfig+0x248>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005336:	f7fe f941 	bl	80035bc <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533c:	e00e      	b.n	800535c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800533e:	f7fe f93d 	bl	80035bc <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d907      	bls.n	800535c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e150      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005350:	40023800 	.word	0x40023800
 8005354:	42470000 	.word	0x42470000
 8005358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	4b88      	ldr	r3, [pc, #544]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ea      	bne.n	800533e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8097 	beq.w	80054a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537a:	4b81      	ldr	r3, [pc, #516]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	4a7c      	ldr	r2, [pc, #496]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6413      	str	r3, [r2, #64]	; 0x40
 8005396:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a6:	4b77      	ldr	r3, [pc, #476]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d118      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b2:	4b74      	ldr	r3, [pc, #464]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a73      	ldr	r2, [pc, #460]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053be:	f7fe f8fd 	bl	80035bc <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fe f8f9 	bl	80035bc <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e10c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d8:	4b6a      	ldr	r3, [pc, #424]	; (8005584 <HAL_RCC_OscConfig+0x474>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d106      	bne.n	80053fa <HAL_RCC_OscConfig+0x2ea>
 80053ec:	4b64      	ldr	r3, [pc, #400]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	4a63      	ldr	r2, [pc, #396]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	; 0x70
 80053f8:	e01c      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0x30c>
 8005402:	4b5f      	ldr	r3, [pc, #380]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6713      	str	r3, [r2, #112]	; 0x70
 800540e:	4b5c      	ldr	r3, [pc, #368]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a5b      	ldr	r2, [pc, #364]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	e00b      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 800541c:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	4a57      	ldr	r2, [pc, #348]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	6713      	str	r3, [r2, #112]	; 0x70
 8005428:	4b55      	ldr	r3, [pc, #340]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	4a54      	ldr	r2, [pc, #336]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800542e:	f023 0304 	bic.w	r3, r3, #4
 8005432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fe f8be 	bl	80035bc <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005442:	e00a      	b.n	800545a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fe f8ba 	bl	80035bc <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0cb      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545a:	4b49      	ldr	r3, [pc, #292]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0ee      	beq.n	8005444 <HAL_RCC_OscConfig+0x334>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005468:	f7fe f8a8 	bl	80035bc <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800546e:	e00a      	b.n	8005486 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005470:	f7fe f8a4 	bl	80035bc <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0b5      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005486:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ee      	bne.n	8005470 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	4a38      	ldr	r2, [pc, #224]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800549e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a1 	beq.w	80055f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ae:	4b34      	ldr	r3, [pc, #208]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d05c      	beq.n	8005574 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d141      	bne.n	8005546 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b31      	ldr	r3, [pc, #196]	; (8005588 <HAL_RCC_OscConfig+0x478>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fe f878 	bl	80035bc <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fe f874 	bl	80035bc <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e087      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b27      	ldr	r3, [pc, #156]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	3b01      	subs	r3, #1
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	491b      	ldr	r1, [pc, #108]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <HAL_RCC_OscConfig+0x478>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551e:	f7fe f84d 	bl	80035bc <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005526:	f7fe f849 	bl	80035bc <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e05c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x416>
 8005544:	e054      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <HAL_RCC_OscConfig+0x478>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fe f836 	bl	80035bc <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005554:	f7fe f832 	bl	80035bc <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e045      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCC_OscConfig+0x470>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x444>
 8005572:	e03d      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e038      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005580:	40023800 	.word	0x40023800
 8005584:	40007000 	.word	0x40007000
 8005588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <HAL_RCC_OscConfig+0x4ec>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d028      	beq.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d121      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d11a      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	3b01      	subs	r3, #1
 80055d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0cc      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005614:	4b68      	ldr	r3, [pc, #416]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d90c      	bls.n	800563c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b65      	ldr	r3, [pc, #404]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b63      	ldr	r3, [pc, #396]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0b8      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a58      	ldr	r2, [pc, #352]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800565e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800566c:	4b53      	ldr	r3, [pc, #332]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a52      	ldr	r2, [pc, #328]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b50      	ldr	r3, [pc, #320]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	494d      	ldr	r1, [pc, #308]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d044      	beq.n	8005720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b47      	ldr	r3, [pc, #284]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d119      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d003      	beq.n	80056be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e06f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ce:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e067      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056de:	4b37      	ldr	r3, [pc, #220]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 0203 	bic.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4934      	ldr	r1, [pc, #208]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056f0:	f7fd ff64 	bl	80035bc <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	e00a      	b.n	800570e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f8:	f7fd ff60 	bl	80035bc <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e04f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 020c 	and.w	r2, r3, #12
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	429a      	cmp	r2, r3
 800571e:	d1eb      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005720:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d20c      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e032      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4916      	ldr	r1, [pc, #88]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	490e      	ldr	r1, [pc, #56]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005786:	f000 f821 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490a      	ldr	r1, [pc, #40]	; (80057c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fb fa56 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023c00 	.word	0x40023c00
 80057bc:	40023800 	.word	0x40023800
 80057c0:	0800b030 	.word	0x0800b030
 80057c4:	20000000 	.word	0x20000000
 80057c8:	20000024 	.word	0x20000024

080057cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d0:	b094      	sub	sp, #80	; 0x50
 80057d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	647b      	str	r3, [r7, #68]	; 0x44
 80057d8:	2300      	movs	r3, #0
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	2300      	movs	r3, #0
 80057de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057e4:	4b79      	ldr	r3, [pc, #484]	; (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d00d      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x40>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	f200 80e1 	bhi.w	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x34>
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d003      	beq.n	8005806 <HAL_RCC_GetSysClockFreq+0x3a>
 80057fe:	e0db      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005800:	4b73      	ldr	r3, [pc, #460]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005802:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005804:	e0db      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005806:	4b73      	ldr	r3, [pc, #460]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800580a:	e0d8      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800580c:	4b6f      	ldr	r3, [pc, #444]	; (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005816:	4b6d      	ldr	r3, [pc, #436]	; (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d063      	beq.n	80058ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005822:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	2200      	movs	r2, #0
 800582a:	63bb      	str	r3, [r7, #56]	; 0x38
 800582c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
 800583a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800583e:	4622      	mov	r2, r4
 8005840:	462b      	mov	r3, r5
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	0159      	lsls	r1, r3, #5
 800584c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005850:	0150      	lsls	r0, r2, #5
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4621      	mov	r1, r4
 8005858:	1a51      	subs	r1, r2, r1
 800585a:	6139      	str	r1, [r7, #16]
 800585c:	4629      	mov	r1, r5
 800585e:	eb63 0301 	sbc.w	r3, r3, r1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005870:	4659      	mov	r1, fp
 8005872:	018b      	lsls	r3, r1, #6
 8005874:	4651      	mov	r1, sl
 8005876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800587a:	4651      	mov	r1, sl
 800587c:	018a      	lsls	r2, r1, #6
 800587e:	4651      	mov	r1, sl
 8005880:	ebb2 0801 	subs.w	r8, r2, r1
 8005884:	4659      	mov	r1, fp
 8005886:	eb63 0901 	sbc.w	r9, r3, r1
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800589a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589e:	4690      	mov	r8, r2
 80058a0:	4699      	mov	r9, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	eb18 0303 	adds.w	r3, r8, r3
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	462b      	mov	r3, r5
 80058ac:	eb49 0303 	adc.w	r3, r9, r3
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058be:	4629      	mov	r1, r5
 80058c0:	024b      	lsls	r3, r1, #9
 80058c2:	4621      	mov	r1, r4
 80058c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058c8:	4621      	mov	r1, r4
 80058ca:	024a      	lsls	r2, r1, #9
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d2:	2200      	movs	r2, #0
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058dc:	f7fa fc78 	bl	80001d0 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e8:	e058      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ea:	4b38      	ldr	r3, [pc, #224]	; (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	099b      	lsrs	r3, r3, #6
 80058f0:	2200      	movs	r2, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	4611      	mov	r1, r2
 80058f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058fa:	623b      	str	r3, [r7, #32]
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	f04f 0000 	mov.w	r0, #0
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	0159      	lsls	r1, r3, #5
 8005912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005916:	0150      	lsls	r0, r2, #5
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4641      	mov	r1, r8
 800591e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005922:	4649      	mov	r1, r9
 8005924:	eb63 0b01 	sbc.w	fp, r3, r1
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005934:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005938:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800593c:	ebb2 040a 	subs.w	r4, r2, sl
 8005940:	eb63 050b 	sbc.w	r5, r3, fp
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	00eb      	lsls	r3, r5, #3
 800594e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005952:	00e2      	lsls	r2, r4, #3
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	4643      	mov	r3, r8
 800595a:	18e3      	adds	r3, r4, r3
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	464b      	mov	r3, r9
 8005960:	eb45 0303 	adc.w	r3, r5, r3
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005972:	4629      	mov	r1, r5
 8005974:	028b      	lsls	r3, r1, #10
 8005976:	4621      	mov	r1, r4
 8005978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800597c:	4621      	mov	r1, r4
 800597e:	028a      	lsls	r2, r1, #10
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005986:	2200      	movs	r2, #0
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	61fa      	str	r2, [r7, #28]
 800598c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005990:	f7fa fc1e 	bl	80001d0 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4613      	mov	r3, r2
 800599a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	3301      	adds	r3, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059b6:	e002      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3750      	adds	r7, #80	; 0x50
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	007a1200 	.word	0x007a1200

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000000 	.word	0x20000000

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff0 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	; (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0800b040 	.word	0x0800b040

08005a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a1c:	f7ff ffdc 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	0b5b      	lsrs	r3, r3, #13
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4903      	ldr	r1, [pc, #12]	; (8005a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	0800b040 	.word	0x0800b040

08005a40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0203 	and.w	r2, r3, #3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a74:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	08db      	lsrs	r3, r3, #3
 8005a7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_RCC_GetClockConfig+0x60>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0207 	and.w	r2, r3, #7
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40023c00 	.word	0x40023c00

08005aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e041      	b.n	8005b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb faae 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f000 fe1e 	bl	8006724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d001      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e04e      	b.n	8005bfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a23      	ldr	r2, [pc, #140]	; (8005c08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d022      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x80>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d01d      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x80>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d018      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x80>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1e      	ldr	r2, [pc, #120]	; (8005c10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x80>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00e      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x80>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x80>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x80>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a18      	ldr	r2, [pc, #96]	; (8005c20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d111      	bne.n	8005be8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b06      	cmp	r3, #6
 8005bd4:	d010      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	e007      	b.n	8005bf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40010400 	.word	0x40010400
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40001800 	.word	0x40001800

08005c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e041      	b.n	8005cba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f839 	bl	8005cc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f000 fd5e 	bl	8006724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <HAL_TIM_PWM_Start+0x24>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	bf14      	ite	ne
 8005cf4:	2301      	movne	r3, #1
 8005cf6:	2300      	moveq	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	e022      	b.n	8005d42 <HAL_TIM_PWM_Start+0x6a>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d109      	bne.n	8005d16 <HAL_TIM_PWM_Start+0x3e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	bf14      	ite	ne
 8005d0e:	2301      	movne	r3, #1
 8005d10:	2300      	moveq	r3, #0
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	e015      	b.n	8005d42 <HAL_TIM_PWM_Start+0x6a>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d109      	bne.n	8005d30 <HAL_TIM_PWM_Start+0x58>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e008      	b.n	8005d42 <HAL_TIM_PWM_Start+0x6a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e07c      	b.n	8005e44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_PWM_Start+0x82>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d58:	e013      	b.n	8005d82 <HAL_TIM_PWM_Start+0xaa>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_PWM_Start+0x92>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d68:	e00b      	b.n	8005d82 <HAL_TIM_PWM_Start+0xaa>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d104      	bne.n	8005d7a <HAL_TIM_PWM_Start+0xa2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d78:	e003      	b.n	8005d82 <HAL_TIM_PWM_Start+0xaa>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2201      	movs	r2, #1
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ffb4 	bl	8006cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2d      	ldr	r2, [pc, #180]	; (8005e4c <HAL_TIM_PWM_Start+0x174>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIM_PWM_Start+0xcc>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a2c      	ldr	r2, [pc, #176]	; (8005e50 <HAL_TIM_PWM_Start+0x178>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d101      	bne.n	8005da8 <HAL_TIM_PWM_Start+0xd0>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <HAL_TIM_PWM_Start+0xd2>
 8005da8:	2300      	movs	r3, #0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <HAL_TIM_PWM_Start+0x174>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x136>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d01d      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x136>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <HAL_TIM_PWM_Start+0x17c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d018      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x136>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <HAL_TIM_PWM_Start+0x180>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x136>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <HAL_TIM_PWM_Start+0x184>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x136>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <HAL_TIM_PWM_Start+0x178>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x136>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <HAL_TIM_PWM_Start+0x188>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIM_PWM_Start+0x136>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <HAL_TIM_PWM_Start+0x18c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d111      	bne.n	8005e32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d010      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e30:	e007      	b.n	8005e42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40001800 	.word	0x40001800

08005e68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2200      	movs	r2, #0
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 ff3c 	bl	8006cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2e      	ldr	r2, [pc, #184]	; (8005f40 <HAL_TIM_PWM_Stop+0xd8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_TIM_PWM_Stop+0x2c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2d      	ldr	r2, [pc, #180]	; (8005f44 <HAL_TIM_PWM_Stop+0xdc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d101      	bne.n	8005e98 <HAL_TIM_PWM_Stop+0x30>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <HAL_TIM_PWM_Stop+0x32>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d017      	beq.n	8005ece <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <HAL_TIM_PWM_Stop+0x66>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a1a      	ldr	r2, [r3, #32]
 8005eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d107      	bne.n	8005ece <HAL_TIM_PWM_Stop+0x66>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <HAL_TIM_PWM_Stop+0x96>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	f240 4344 	movw	r3, #1092	; 0x444
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d107      	bne.n	8005efe <HAL_TIM_PWM_Stop+0x96>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Stop+0xa6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f0c:	e013      	b.n	8005f36 <HAL_TIM_PWM_Stop+0xce>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0xb6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f1c:	e00b      	b.n	8005f36 <HAL_TIM_PWM_Stop+0xce>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Stop+0xc6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f2c:	e003      	b.n	8005f36 <HAL_TIM_PWM_Stop+0xce>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40010000 	.word	0x40010000
 8005f44:	40010400 	.word	0x40010400

08005f48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e097      	b.n	800608c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7fb f87d 	bl	8001070 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8c:	f023 0307 	bic.w	r3, r3, #7
 8005f90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 fbc1 	bl	8006724 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fe8:	f023 030c 	bic.w	r3, r3, #12
 8005fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	4313      	orrs	r3, r2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	011a      	lsls	r2, r3, #4
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	031b      	lsls	r3, r3, #12
 8006018:	4313      	orrs	r3, r2
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006026:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800602e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	4313      	orrs	r3, r2
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d110      	bne.n	80060e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d102      	bne.n	80060d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ca:	7b7b      	ldrb	r3, [r7, #13]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d001      	beq.n	80060d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e069      	b.n	80061a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e4:	e031      	b.n	800614a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d110      	bne.n	800610e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d102      	bne.n	80060f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060f2:	7b3b      	ldrb	r3, [r7, #12]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d001      	beq.n	80060fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e055      	b.n	80061a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800610c:	e01d      	b.n	800614a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d108      	bne.n	8006126 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d105      	bne.n	8006126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800611a:	7b7b      	ldrb	r3, [r7, #13]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d102      	bne.n	8006126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006120:	7b3b      	ldrb	r3, [r7, #12]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d001      	beq.n	800612a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e03e      	b.n	80061a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_TIM_Encoder_Start+0xc4>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b04      	cmp	r3, #4
 8006154:	d008      	beq.n	8006168 <HAL_TIM_Encoder_Start+0xd4>
 8006156:	e00f      	b.n	8006178 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2201      	movs	r2, #1
 800615e:	2100      	movs	r1, #0
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fdc9 	bl	8006cf8 <TIM_CCxChannelCmd>
      break;
 8006166:	e016      	b.n	8006196 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2201      	movs	r2, #1
 800616e:	2104      	movs	r1, #4
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fdc1 	bl	8006cf8 <TIM_CCxChannelCmd>
      break;
 8006176:	e00e      	b.n	8006196 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2201      	movs	r2, #1
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fdb9 	bl	8006cf8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	2104      	movs	r1, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fdb2 	bl	8006cf8 <TIM_CCxChannelCmd>
      break;
 8006194:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d122      	bne.n	800620c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0202 	mvn.w	r2, #2
 80061dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa77 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa69 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fa7a 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b04      	cmp	r3, #4
 8006218:	d122      	bne.n	8006260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b04      	cmp	r3, #4
 8006226:	d11b      	bne.n	8006260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0204 	mvn.w	r2, #4
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa4d 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa3f 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa50 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b08      	cmp	r3, #8
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b08      	cmp	r3, #8
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0208 	mvn.w	r2, #8
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2204      	movs	r2, #4
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa23 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa15 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa26 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0210 	mvn.w	r2, #16
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2208      	movs	r2, #8
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f9f9 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9eb 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9fc 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0201 	mvn.w	r2, #1
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fa fc4e 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b80      	cmp	r3, #128	; 0x80
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fd78 	bl	8006e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9c1 	bl	800670e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b20      	cmp	r3, #32
 8006398:	d10e      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d107      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0220 	mvn.w	r2, #32
 80063b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fd42 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063da:	2302      	movs	r3, #2
 80063dc:	e0ae      	b.n	800653c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	f200 809f 	bhi.w	800652c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006429 	.word	0x08006429
 80063f8:	0800652d 	.word	0x0800652d
 80063fc:	0800652d 	.word	0x0800652d
 8006400:	0800652d 	.word	0x0800652d
 8006404:	08006469 	.word	0x08006469
 8006408:	0800652d 	.word	0x0800652d
 800640c:	0800652d 	.word	0x0800652d
 8006410:	0800652d 	.word	0x0800652d
 8006414:	080064ab 	.word	0x080064ab
 8006418:	0800652d 	.word	0x0800652d
 800641c:	0800652d 	.word	0x0800652d
 8006420:	0800652d 	.word	0x0800652d
 8006424:	080064eb 	.word	0x080064eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fa18 	bl	8006864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0208 	orr.w	r2, r2, #8
 8006442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0204 	bic.w	r2, r2, #4
 8006452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6999      	ldr	r1, [r3, #24]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	619a      	str	r2, [r3, #24]
      break;
 8006466:	e064      	b.n	8006532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fa68 	bl	8006944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6999      	ldr	r1, [r3, #24]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	021a      	lsls	r2, r3, #8
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	619a      	str	r2, [r3, #24]
      break;
 80064a8:	e043      	b.n	8006532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fabd 	bl	8006a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0208 	orr.w	r2, r2, #8
 80064c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0204 	bic.w	r2, r2, #4
 80064d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69d9      	ldr	r1, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	61da      	str	r2, [r3, #28]
      break;
 80064e8:	e023      	b.n	8006532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fb11 	bl	8006b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69d9      	ldr	r1, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	021a      	lsls	r2, r3, #8
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	61da      	str	r2, [r3, #28]
      break;
 800652a:	e002      	b.n	8006532 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75fb      	strb	r3, [r7, #23]
      break;
 8006530:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIM_ConfigClockSource+0x1c>
 800655c:	2302      	movs	r3, #2
 800655e:	e0b4      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x186>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800657e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006598:	d03e      	beq.n	8006618 <HAL_TIM_ConfigClockSource+0xd4>
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659e:	f200 8087 	bhi.w	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	f000 8086 	beq.w	80066b6 <HAL_TIM_ConfigClockSource+0x172>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d87f      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b70      	cmp	r3, #112	; 0x70
 80065b2:	d01a      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0xa6>
 80065b4:	2b70      	cmp	r3, #112	; 0x70
 80065b6:	d87b      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b60      	cmp	r3, #96	; 0x60
 80065ba:	d050      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x11a>
 80065bc:	2b60      	cmp	r3, #96	; 0x60
 80065be:	d877      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065c0:	2b50      	cmp	r3, #80	; 0x50
 80065c2:	d03c      	beq.n	800663e <HAL_TIM_ConfigClockSource+0xfa>
 80065c4:	2b50      	cmp	r3, #80	; 0x50
 80065c6:	d873      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b40      	cmp	r3, #64	; 0x40
 80065ca:	d058      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x13a>
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d86f      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b30      	cmp	r3, #48	; 0x30
 80065d2:	d064      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15a>
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	d86b      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d060      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15a>
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d867      	bhi.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d05c      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15a>
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d05a      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x15a>
 80065e8:	e062      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6899      	ldr	r1, [r3, #8]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f000 fb5d 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800660c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	609a      	str	r2, [r3, #8]
      break;
 8006616:	e04f      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	6899      	ldr	r1, [r3, #8]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f000 fb46 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800663a:	609a      	str	r2, [r3, #8]
      break;
 800663c:	e03c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6859      	ldr	r1, [r3, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	461a      	mov	r2, r3
 800664c:	f000 faba 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2150      	movs	r1, #80	; 0x50
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fb13 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 800665c:	e02c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6859      	ldr	r1, [r3, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	461a      	mov	r2, r3
 800666c:	f000 fad9 	bl	8006c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2160      	movs	r1, #96	; 0x60
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fb03 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 800667c:	e01c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fa9a 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2140      	movs	r1, #64	; 0x40
 8006696:	4618      	mov	r0, r3
 8006698:	f000 faf3 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 800669c:	e00c      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f000 faea 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 80066ae:	e003      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]
      break;
 80066b4:	e000      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a40      	ldr	r2, [pc, #256]	; (8006838 <TIM_Base_SetConfig+0x114>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006742:	d00f      	beq.n	8006764 <TIM_Base_SetConfig+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3d      	ldr	r2, [pc, #244]	; (800683c <TIM_Base_SetConfig+0x118>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00b      	beq.n	8006764 <TIM_Base_SetConfig+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a3c      	ldr	r2, [pc, #240]	; (8006840 <TIM_Base_SetConfig+0x11c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a3b      	ldr	r2, [pc, #236]	; (8006844 <TIM_Base_SetConfig+0x120>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_Base_SetConfig+0x40>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a3a      	ldr	r2, [pc, #232]	; (8006848 <TIM_Base_SetConfig+0x124>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d108      	bne.n	8006776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2f      	ldr	r2, [pc, #188]	; (8006838 <TIM_Base_SetConfig+0x114>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d02b      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006784:	d027      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2c      	ldr	r2, [pc, #176]	; (800683c <TIM_Base_SetConfig+0x118>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d023      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2b      	ldr	r2, [pc, #172]	; (8006840 <TIM_Base_SetConfig+0x11c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01f      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a2a      	ldr	r2, [pc, #168]	; (8006844 <TIM_Base_SetConfig+0x120>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01b      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a29      	ldr	r2, [pc, #164]	; (8006848 <TIM_Base_SetConfig+0x124>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d017      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a28      	ldr	r2, [pc, #160]	; (800684c <TIM_Base_SetConfig+0x128>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d013      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a27      	ldr	r2, [pc, #156]	; (8006850 <TIM_Base_SetConfig+0x12c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00f      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a26      	ldr	r2, [pc, #152]	; (8006854 <TIM_Base_SetConfig+0x130>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00b      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a25      	ldr	r2, [pc, #148]	; (8006858 <TIM_Base_SetConfig+0x134>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d007      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a24      	ldr	r2, [pc, #144]	; (800685c <TIM_Base_SetConfig+0x138>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a23      	ldr	r2, [pc, #140]	; (8006860 <TIM_Base_SetConfig+0x13c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d108      	bne.n	80067e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <TIM_Base_SetConfig+0x114>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_Base_SetConfig+0xf8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <TIM_Base_SetConfig+0x124>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d103      	bne.n	8006824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	615a      	str	r2, [r3, #20]
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40010000 	.word	0x40010000
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40010400 	.word	0x40010400
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800
 8006858:	40001800 	.word	0x40001800
 800685c:	40001c00 	.word	0x40001c00
 8006860:	40002000 	.word	0x40002000

08006864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 0201 	bic.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 0302 	bic.w	r3, r3, #2
 80068ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a20      	ldr	r2, [pc, #128]	; (800693c <TIM_OC1_SetConfig+0xd8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC1_SetConfig+0x64>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <TIM_OC1_SetConfig+0xdc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10c      	bne.n	80068e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0308 	bic.w	r3, r3, #8
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a15      	ldr	r2, [pc, #84]	; (800693c <TIM_OC1_SetConfig+0xd8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_OC1_SetConfig+0x8e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a14      	ldr	r2, [pc, #80]	; (8006940 <TIM_OC1_SetConfig+0xdc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d111      	bne.n	8006916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	621a      	str	r2, [r3, #32]
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400

08006944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f023 0210 	bic.w	r2, r3, #16
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f023 0320 	bic.w	r3, r3, #32
 800698e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <TIM_OC2_SetConfig+0xe4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC2_SetConfig+0x68>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <TIM_OC2_SetConfig+0xe8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10d      	bne.n	80069c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a17      	ldr	r2, [pc, #92]	; (8006a28 <TIM_OC2_SetConfig+0xe4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_OC2_SetConfig+0x94>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <TIM_OC2_SetConfig+0xe8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d113      	bne.n	8006a00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400

08006a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0303 	bic.w	r3, r3, #3
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <TIM_OC3_SetConfig+0xe0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC3_SetConfig+0x66>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <TIM_OC3_SetConfig+0xe4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10d      	bne.n	8006ab2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <TIM_OC3_SetConfig+0xe0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <TIM_OC3_SetConfig+0x92>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <TIM_OC3_SetConfig+0xe4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d113      	bne.n	8006aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	621a      	str	r2, [r3, #32]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40010400 	.word	0x40010400

08006b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	031b      	lsls	r3, r3, #12
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <TIM_OC4_SetConfig+0xa4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC4_SetConfig+0x68>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <TIM_OC4_SetConfig+0xa8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d109      	bne.n	8006b94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	019b      	lsls	r3, r3, #6
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40010400 	.word	0x40010400

08006bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 030a 	bic.w	r3, r3, #10
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0210 	bic.w	r2, r3, #16
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	031b      	lsls	r3, r3, #12
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f043 0307 	orr.w	r3, r3, #7
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	021a      	lsls	r2, r3, #8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f003 031f 	and.w	r3, r3, #31
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1a      	ldr	r2, [r3, #32]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e05a      	b.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d022      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da8:	d01d      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d018      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1a      	ldr	r2, [pc, #104]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10c      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40010400 	.word	0x40010400
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40001800 	.word	0x40001800

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e03f      	b.n	8006ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa f9f0 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	; 0x24
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 ff9d 	bl	8007de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b08a      	sub	sp, #40	; 0x28
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d17c      	bne.n	8007018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_UART_Transmit+0x2c>
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e075      	b.n	800701a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Transmit+0x3e>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e06e      	b.n	800701a <HAL_UART_Transmit+0x11c>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2221      	movs	r2, #33	; 0x21
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f52:	f7fc fb33 	bl	80035bc <HAL_GetTick>
 8006f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6c:	d108      	bne.n	8006f80 <HAL_UART_Transmit+0x82>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e003      	b.n	8006f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f90:	e02a      	b.n	8006fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2180      	movs	r1, #128	; 0x80
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fc55 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e036      	b.n	800701a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	e007      	b.n	8006fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1cf      	bne.n	8006f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2140      	movs	r1, #64	; 0x40
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fc25 	bl	800784c <UART_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e006      	b.n	800701a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b08c      	sub	sp, #48	; 0x30
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	4613      	mov	r3, r2
 800702e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b20      	cmp	r3, #32
 800703a:	d152      	bne.n	80070e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e04b      	b.n	80070e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007056:	2302      	movs	r3, #2
 8007058:	e044      	b.n	80070e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	461a      	mov	r2, r3
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fc5a 	bl	8007928 <UART_Start_Receive_DMA>
 8007074:	4603      	mov	r3, r0
 8007076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800707a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800707e:	2b00      	cmp	r3, #0
 8007080:	d12c      	bne.n	80070dc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	2b01      	cmp	r3, #1
 8007088:	d125      	bne.n	80070d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	617b      	str	r3, [r7, #20]
   return(result);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f043 0310 	orr.w	r3, r3, #16
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c0:	627a      	str	r2, [r7, #36]	; 0x24
 80070c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6a39      	ldr	r1, [r7, #32]
 80070c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80070d4:	e002      	b.n	80070dc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80070dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070e0:	e000      	b.n	80070e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80070e2:	2302      	movs	r3, #2
  }
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3730      	adds	r7, #48	; 0x30
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b0ba      	sub	sp, #232	; 0xe8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007112:	2300      	movs	r3, #0
 8007114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800712a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10f      	bne.n	8007152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_UART_IRQHandler+0x66>
 800713e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fd91 	bl	8007c72 <UART_Receive_IT>
      return;
 8007150:	e256      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80de 	beq.w	8007318 <HAL_UART_IRQHandler+0x22c>
 800715c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80d1 	beq.w	8007318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00b      	beq.n	800719a <HAL_UART_IRQHandler+0xae>
 8007182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f043 0201 	orr.w	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <HAL_UART_IRQHandler+0xd2>
 80071a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f043 0202 	orr.w	r2, r3, #2
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <HAL_UART_IRQHandler+0xf6>
 80071ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f043 0204 	orr.w	r2, r3, #4
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d011      	beq.n	8007212 <HAL_UART_IRQHandler+0x126>
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d105      	bne.n	8007206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f043 0208 	orr.w	r2, r3, #8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 81ed 	beq.w	80075f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_UART_IRQHandler+0x14e>
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fd1c 	bl	8007c72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <HAL_UART_IRQHandler+0x17a>
 800725e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d04f      	beq.n	8007306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc24 	bl	8007ab4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d141      	bne.n	80072fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3314      	adds	r3, #20
 8007280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3314      	adds	r3, #20
 80072a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1d9      	bne.n	800727a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d013      	beq.n	80072f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	4a7d      	ldr	r2, [pc, #500]	; (80074c8 <HAL_UART_IRQHandler+0x3dc>)
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fd fa84 	bl	80047e8 <HAL_DMA_Abort_IT>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d016      	beq.n	8007314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072f0:	4610      	mov	r0, r2
 80072f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	e00e      	b.n	8007314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fb ffec 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fc:	e00a      	b.n	8007314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fb ffe8 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	e006      	b.n	8007314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fb ffe4 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007312:	e170      	b.n	80075f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	bf00      	nop
    return;
 8007316:	e16e      	b.n	80075f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	2b01      	cmp	r3, #1
 800731e:	f040 814a 	bne.w	80075b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8143 	beq.w	80075b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	f003 0310 	and.w	r3, r3, #16
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 813c 	beq.w	80075b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800733e:	2300      	movs	r3, #0
 8007340:	60bb      	str	r3, [r7, #8]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	f040 80b4 	bne.w	80074cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8140 	beq.w	80075fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800737e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007382:	429a      	cmp	r2, r3
 8007384:	f080 8139 	bcs.w	80075fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800738e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739a:	f000 8088 	beq.w	80074ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	330c      	adds	r3, #12
 80073a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1d9      	bne.n	800739e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3314      	adds	r3, #20
 80073f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3314      	adds	r3, #20
 800740a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800740e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007412:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e1      	bne.n	80073ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3314      	adds	r3, #20
 800742c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800743c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3314      	adds	r3, #20
 8007446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800744a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800744c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e3      	bne.n	8007426 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800747c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747e:	f023 0310 	bic.w	r3, r3, #16
 8007482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	330c      	adds	r3, #12
 800748c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007490:	65ba      	str	r2, [r7, #88]	; 0x58
 8007492:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007496:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800749e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e3      	bne.n	800746c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fd f92d 	bl	8004708 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fb ffdc 	bl	800347c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074c4:	e099      	b.n	80075fa <HAL_UART_IRQHandler+0x50e>
 80074c6:	bf00      	nop
 80074c8:	08007b7b 	.word	0x08007b7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 808b 	beq.w	80075fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8086 	beq.w	80075fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	330c      	adds	r3, #12
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007516:	647a      	str	r2, [r7, #68]	; 0x44
 8007518:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800751c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	623b      	str	r3, [r7, #32]
   return(result);
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800754e:	633a      	str	r2, [r7, #48]	; 0x30
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e3      	bne.n	800752a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007594:	61fa      	str	r2, [r7, #28]
 8007596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	69b9      	ldr	r1, [r7, #24]
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	617b      	str	r3, [r7, #20]
   return(result);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e3      	bne.n	8007570 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fb ff64 	bl	800347c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075b4:	e023      	b.n	80075fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <HAL_UART_IRQHandler+0x4ea>
 80075c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fae7 	bl	8007ba2 <UART_Transmit_IT>
    return;
 80075d4:	e014      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <HAL_UART_IRQHandler+0x514>
 80075e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fb27 	bl	8007c42 <UART_EndTransmit_IT>
    return;
 80075f4:	e004      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
    return;
 80075f6:	bf00      	nop
 80075f8:	e002      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
      return;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
      return;
 80075fe:	bf00      	nop
  }
}
 8007600:	37e8      	adds	r7, #232	; 0xe8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop

08007608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b09c      	sub	sp, #112	; 0x70
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007674:	2b00      	cmp	r3, #0
 8007676:	d172      	bne.n	800775e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767a:	2200      	movs	r2, #0
 800767c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800767e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800768e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007694:	66bb      	str	r3, [r7, #104]	; 0x68
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	330c      	adds	r3, #12
 800769c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800769e:	65ba      	str	r2, [r7, #88]	; 0x58
 80076a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	f023 0301 	bic.w	r3, r3, #1
 80076c8:	667b      	str	r3, [r7, #100]	; 0x64
 80076ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076d2:	647a      	str	r2, [r7, #68]	; 0x44
 80076d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3314      	adds	r3, #20
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	623b      	str	r3, [r7, #32]
   return(result);
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fc:	663b      	str	r3, [r7, #96]	; 0x60
 80076fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3314      	adds	r3, #20
 8007704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007706:	633a      	str	r2, [r7, #48]	; 0x30
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800770c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800771a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771c:	2220      	movs	r2, #32
 800771e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	2b01      	cmp	r3, #1
 8007728:	d119      	bne.n	800775e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	330c      	adds	r3, #12
 8007730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	60fb      	str	r3, [r7, #12]
   return(result);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f023 0310 	bic.w	r3, r3, #16
 8007740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800774a:	61fa      	str	r2, [r7, #28]
 800774c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	69b9      	ldr	r1, [r7, #24]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	617b      	str	r3, [r7, #20]
   return(result);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e5      	bne.n	800772a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800775e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	2b01      	cmp	r3, #1
 8007764:	d106      	bne.n	8007774 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800776a:	4619      	mov	r1, r3
 800776c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800776e:	f7fb fe85 	bl	800347c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007772:	e002      	b.n	800777a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007774:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007776:	f7ff ff51 	bl	800761c <HAL_UART_RxCpltCallback>
}
 800777a:	bf00      	nop
 800777c:	3770      	adds	r7, #112	; 0x70
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	2b01      	cmp	r3, #1
 8007796:	d108      	bne.n	80077aa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800779c:	085b      	lsrs	r3, r3, #1
 800779e:	b29b      	uxth	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7fb fe6a 	bl	800347c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077a8:	e002      	b.n	80077b0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff ff40 	bl	8007630 <HAL_UART_RxHalfCpltCallback>
}
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b21      	cmp	r3, #33	; 0x21
 80077ea:	d108      	bne.n	80077fe <UART_DMAError+0x46>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2200      	movs	r2, #0
 80077f6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80077f8:	68b8      	ldr	r0, [r7, #8]
 80077fa:	f000 f933 	bl	8007a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	bf0c      	ite	eq
 800780c:	2301      	moveq	r3, #1
 800780e:	2300      	movne	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b22      	cmp	r3, #34	; 0x22
 800781e:	d108      	bne.n	8007832 <UART_DMAError+0x7a>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800782c:	68b8      	ldr	r0, [r7, #8]
 800782e:	f000 f941 	bl	8007ab4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f043 0210 	orr.w	r2, r3, #16
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800783e:	68b8      	ldr	r0, [r7, #8]
 8007840:	f7fb fd48 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007844:	bf00      	nop
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b090      	sub	sp, #64	; 0x40
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	4613      	mov	r3, r2
 800785a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785c:	e050      	b.n	8007900 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d04c      	beq.n	8007900 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <UART_WaitOnFlagUntilTimeout+0x30>
 800786c:	f7fb fea6 	bl	80035bc <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007878:	429a      	cmp	r2, r3
 800787a:	d241      	bcs.n	8007900 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800789c:	637a      	str	r2, [r7, #52]	; 0x34
 800789e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3314      	adds	r3, #20
 80078b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	613b      	str	r3, [r7, #16]
   return(result);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f023 0301 	bic.w	r3, r3, #1
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3314      	adds	r3, #20
 80078ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078d0:	623a      	str	r2, [r7, #32]
 80078d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	69f9      	ldr	r1, [r7, #28]
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e5      	bne.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e00f      	b.n	8007920 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4013      	ands	r3, r2
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	429a      	cmp	r2, r3
 800790e:	bf0c      	ite	eq
 8007910:	2301      	moveq	r3, #1
 8007912:	2300      	movne	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	429a      	cmp	r2, r3
 800791c:	d09f      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3740      	adds	r7, #64	; 0x40
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b098      	sub	sp, #96	; 0x60
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2222      	movs	r2, #34	; 0x22
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	4a40      	ldr	r2, [pc, #256]	; (8007a58 <UART_Start_Receive_DMA+0x130>)
 8007956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	4a3f      	ldr	r2, [pc, #252]	; (8007a5c <UART_Start_Receive_DMA+0x134>)
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	4a3e      	ldr	r2, [pc, #248]	; (8007a60 <UART_Start_Receive_DMA+0x138>)
 8007966:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	2200      	movs	r2, #0
 800796e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007970:	f107 0308 	add.w	r3, r7, #8
 8007974:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	f7fc fe66 	bl	8004658 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800798c:	2300      	movs	r3, #0
 800798e:	613b      	str	r3, [r7, #16]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d019      	beq.n	80079e6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80079d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80079d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80079e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e5      	bne.n	80079b2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3314      	adds	r3, #20
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	657b      	str	r3, [r7, #84]	; 0x54
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a06:	63ba      	str	r2, [r7, #56]	; 0x38
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a30:	653b      	str	r3, [r7, #80]	; 0x50
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3314      	adds	r3, #20
 8007a38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a3a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6a39      	ldr	r1, [r7, #32]
 8007a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e5      	bne.n	8007a1a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3760      	adds	r7, #96	; 0x60
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	0800765d 	.word	0x0800765d
 8007a5c:	08007783 	.word	0x08007783
 8007a60:	080077b9 	.word	0x080077b9

08007a64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b089      	sub	sp, #36	; 0x24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	330c      	adds	r3, #12
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	61ba      	str	r2, [r7, #24]
 8007a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6979      	ldr	r1, [r7, #20]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	613b      	str	r3, [r7, #16]
   return(result);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e5      	bne.n	8007a6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007aa8:	bf00      	nop
 8007aaa:	3724      	adds	r7, #36	; 0x24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b095      	sub	sp, #84	; 0x54
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007adc:	643a      	str	r2, [r7, #64]	; 0x40
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ae2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e5      	bne.n	8007abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e5      	bne.n	8007af0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d119      	bne.n	8007b60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	330c      	adds	r3, #12
 8007b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f023 0310 	bic.w	r3, r3, #16
 8007b42:	647b      	str	r3, [r7, #68]	; 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b4c:	61ba      	str	r2, [r7, #24]
 8007b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6979      	ldr	r1, [r7, #20]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	613b      	str	r3, [r7, #16]
   return(result);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b6e:	bf00      	nop
 8007b70:	3754      	adds	r7, #84	; 0x54
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f7fb fb9d 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b21      	cmp	r3, #33	; 0x21
 8007bb4:	d13e      	bne.n	8007c34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbe:	d114      	bne.n	8007bea <UART_Transmit_IT+0x48>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d110      	bne.n	8007bea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	1c9a      	adds	r2, r3, #2
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	621a      	str	r2, [r3, #32]
 8007be8:	e008      	b.n	8007bfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6211      	str	r1, [r2, #32]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10f      	bne.n	8007c30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c34:	2302      	movs	r3, #2
  }
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff fcd0 	bl	8007608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b08c      	sub	sp, #48	; 0x30
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b22      	cmp	r3, #34	; 0x22
 8007c84:	f040 80ab 	bne.w	8007dde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c90:	d117      	bne.n	8007cc2 <UART_Receive_IT+0x50>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d113      	bne.n	8007cc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	1c9a      	adds	r2, r3, #2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8007cc0:	e026      	b.n	8007d10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd4:	d007      	beq.n	8007ce6 <UART_Receive_IT+0x74>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <UART_Receive_IT+0x82>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	e008      	b.n	8007d06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d15a      	bne.n	8007dda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0220 	bic.w	r2, r2, #32
 8007d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695a      	ldr	r2, [r3, #20]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d135      	bne.n	8007dd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	330c      	adds	r3, #12
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	623a      	str	r2, [r7, #32]
 8007d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	69f9      	ldr	r1, [r7, #28]
 8007d90:	6a3a      	ldr	r2, [r7, #32]
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e5      	bne.n	8007d6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d10a      	bne.n	8007dc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7fb fb57 	bl	800347c <HAL_UARTEx_RxEventCallback>
 8007dce:	e002      	b.n	8007dd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fc23 	bl	800761c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e002      	b.n	8007de0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e000      	b.n	8007de0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007dde:	2302      	movs	r3, #2
  }
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3730      	adds	r7, #48	; 0x30
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dec:	b0c0      	sub	sp, #256	; 0x100
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e04:	68d9      	ldr	r1, [r3, #12]
 8007e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	ea40 0301 	orr.w	r3, r0, r1
 8007e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e40:	f021 010c 	bic.w	r1, r1, #12
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e4e:	430b      	orrs	r3, r1
 8007e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e62:	6999      	ldr	r1, [r3, #24]
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	ea40 0301 	orr.w	r3, r0, r1
 8007e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	4b8f      	ldr	r3, [pc, #572]	; (80080b4 <UART_SetConfig+0x2cc>)
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d005      	beq.n	8007e88 <UART_SetConfig+0xa0>
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b8d      	ldr	r3, [pc, #564]	; (80080b8 <UART_SetConfig+0x2d0>)
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d104      	bne.n	8007e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e88:	f7fd fdc6 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8007e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e90:	e003      	b.n	8007e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e92:	f7fd fdad 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8007e96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea4:	f040 810c 	bne.w	80080c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007eba:	4622      	mov	r2, r4
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	1891      	adds	r1, r2, r2
 8007ec0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ec2:	415b      	adcs	r3, r3
 8007ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007eca:	4621      	mov	r1, r4
 8007ecc:	eb12 0801 	adds.w	r8, r2, r1
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	eb43 0901 	adc.w	r9, r3, r1
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eea:	4690      	mov	r8, r2
 8007eec:	4699      	mov	r9, r3
 8007eee:	4623      	mov	r3, r4
 8007ef0:	eb18 0303 	adds.w	r3, r8, r3
 8007ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ef8:	462b      	mov	r3, r5
 8007efa:	eb49 0303 	adc.w	r3, r9, r3
 8007efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f16:	460b      	mov	r3, r1
 8007f18:	18db      	adds	r3, r3, r3
 8007f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	eb42 0303 	adc.w	r3, r2, r3
 8007f22:	657b      	str	r3, [r7, #84]	; 0x54
 8007f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f2c:	f7f8 f950 	bl	80001d0 <__aeabi_uldivmod>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4b61      	ldr	r3, [pc, #388]	; (80080bc <UART_SetConfig+0x2d4>)
 8007f36:	fba3 2302 	umull	r2, r3, r3, r2
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	011c      	lsls	r4, r3, #4
 8007f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f50:	4642      	mov	r2, r8
 8007f52:	464b      	mov	r3, r9
 8007f54:	1891      	adds	r1, r2, r2
 8007f56:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f58:	415b      	adcs	r3, r3
 8007f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f60:	4641      	mov	r1, r8
 8007f62:	eb12 0a01 	adds.w	sl, r2, r1
 8007f66:	4649      	mov	r1, r9
 8007f68:	eb43 0b01 	adc.w	fp, r3, r1
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f80:	4692      	mov	sl, r2
 8007f82:	469b      	mov	fp, r3
 8007f84:	4643      	mov	r3, r8
 8007f86:	eb1a 0303 	adds.w	r3, sl, r3
 8007f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	eb4b 0303 	adc.w	r3, fp, r3
 8007f94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fac:	460b      	mov	r3, r1
 8007fae:	18db      	adds	r3, r3, r3
 8007fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	eb42 0303 	adc.w	r3, r2, r3
 8007fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007fc2:	f7f8 f905 	bl	80001d0 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <UART_SetConfig+0x2d4>)
 8007fce:	fba3 2301 	umull	r2, r3, r3, r1
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	2264      	movs	r2, #100	; 0x64
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	1acb      	subs	r3, r1, r3
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007fe2:	4b36      	ldr	r3, [pc, #216]	; (80080bc <UART_SetConfig+0x2d4>)
 8007fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8007fe8:	095b      	lsrs	r3, r3, #5
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ff0:	441c      	add	r4, r3
 8007ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	1891      	adds	r1, r2, r2
 800800a:	63b9      	str	r1, [r7, #56]	; 0x38
 800800c:	415b      	adcs	r3, r3
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008014:	4641      	mov	r1, r8
 8008016:	1851      	adds	r1, r2, r1
 8008018:	6339      	str	r1, [r7, #48]	; 0x30
 800801a:	4649      	mov	r1, r9
 800801c:	414b      	adcs	r3, r1
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800802c:	4659      	mov	r1, fp
 800802e:	00cb      	lsls	r3, r1, #3
 8008030:	4651      	mov	r1, sl
 8008032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008036:	4651      	mov	r1, sl
 8008038:	00ca      	lsls	r2, r1, #3
 800803a:	4610      	mov	r0, r2
 800803c:	4619      	mov	r1, r3
 800803e:	4603      	mov	r3, r0
 8008040:	4642      	mov	r2, r8
 8008042:	189b      	adds	r3, r3, r2
 8008044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008048:	464b      	mov	r3, r9
 800804a:	460a      	mov	r2, r1
 800804c:	eb42 0303 	adc.w	r3, r2, r3
 8008050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008060:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008068:	460b      	mov	r3, r1
 800806a:	18db      	adds	r3, r3, r3
 800806c:	62bb      	str	r3, [r7, #40]	; 0x28
 800806e:	4613      	mov	r3, r2
 8008070:	eb42 0303 	adc.w	r3, r2, r3
 8008074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800807a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800807e:	f7f8 f8a7 	bl	80001d0 <__aeabi_uldivmod>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <UART_SetConfig+0x2d4>)
 8008088:	fba3 1302 	umull	r1, r3, r3, r2
 800808c:	095b      	lsrs	r3, r3, #5
 800808e:	2164      	movs	r1, #100	; 0x64
 8008090:	fb01 f303 	mul.w	r3, r1, r3
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	3332      	adds	r3, #50	; 0x32
 800809a:	4a08      	ldr	r2, [pc, #32]	; (80080bc <UART_SetConfig+0x2d4>)
 800809c:	fba2 2303 	umull	r2, r3, r2, r3
 80080a0:	095b      	lsrs	r3, r3, #5
 80080a2:	f003 0207 	and.w	r2, r3, #7
 80080a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4422      	add	r2, r4
 80080ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080b0:	e105      	b.n	80082be <UART_SetConfig+0x4d6>
 80080b2:	bf00      	nop
 80080b4:	40011000 	.word	0x40011000
 80080b8:	40011400 	.word	0x40011400
 80080bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080d2:	4642      	mov	r2, r8
 80080d4:	464b      	mov	r3, r9
 80080d6:	1891      	adds	r1, r2, r2
 80080d8:	6239      	str	r1, [r7, #32]
 80080da:	415b      	adcs	r3, r3
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
 80080de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080e2:	4641      	mov	r1, r8
 80080e4:	1854      	adds	r4, r2, r1
 80080e6:	4649      	mov	r1, r9
 80080e8:	eb43 0501 	adc.w	r5, r3, r1
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	00eb      	lsls	r3, r5, #3
 80080f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080fa:	00e2      	lsls	r2, r4, #3
 80080fc:	4614      	mov	r4, r2
 80080fe:	461d      	mov	r5, r3
 8008100:	4643      	mov	r3, r8
 8008102:	18e3      	adds	r3, r4, r3
 8008104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008108:	464b      	mov	r3, r9
 800810a:	eb45 0303 	adc.w	r3, r5, r3
 800810e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800811e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800812e:	4629      	mov	r1, r5
 8008130:	008b      	lsls	r3, r1, #2
 8008132:	4621      	mov	r1, r4
 8008134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008138:	4621      	mov	r1, r4
 800813a:	008a      	lsls	r2, r1, #2
 800813c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008140:	f7f8 f846 	bl	80001d0 <__aeabi_uldivmod>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4b60      	ldr	r3, [pc, #384]	; (80082cc <UART_SetConfig+0x4e4>)
 800814a:	fba3 2302 	umull	r2, r3, r3, r2
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	011c      	lsls	r4, r3, #4
 8008152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800815c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	1891      	adds	r1, r2, r2
 800816a:	61b9      	str	r1, [r7, #24]
 800816c:	415b      	adcs	r3, r3
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008174:	4641      	mov	r1, r8
 8008176:	1851      	adds	r1, r2, r1
 8008178:	6139      	str	r1, [r7, #16]
 800817a:	4649      	mov	r1, r9
 800817c:	414b      	adcs	r3, r1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800818c:	4659      	mov	r1, fp
 800818e:	00cb      	lsls	r3, r1, #3
 8008190:	4651      	mov	r1, sl
 8008192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008196:	4651      	mov	r1, sl
 8008198:	00ca      	lsls	r2, r1, #3
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	4603      	mov	r3, r0
 80081a0:	4642      	mov	r2, r8
 80081a2:	189b      	adds	r3, r3, r2
 80081a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081a8:	464b      	mov	r3, r9
 80081aa:	460a      	mov	r2, r1
 80081ac:	eb42 0303 	adc.w	r3, r2, r3
 80081b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80081be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081cc:	4649      	mov	r1, r9
 80081ce:	008b      	lsls	r3, r1, #2
 80081d0:	4641      	mov	r1, r8
 80081d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d6:	4641      	mov	r1, r8
 80081d8:	008a      	lsls	r2, r1, #2
 80081da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80081de:	f7f7 fff7 	bl	80001d0 <__aeabi_uldivmod>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4b39      	ldr	r3, [pc, #228]	; (80082cc <UART_SetConfig+0x4e4>)
 80081e8:	fba3 1302 	umull	r1, r3, r3, r2
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	2164      	movs	r1, #100	; 0x64
 80081f0:	fb01 f303 	mul.w	r3, r1, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	3332      	adds	r3, #50	; 0x32
 80081fa:	4a34      	ldr	r2, [pc, #208]	; (80082cc <UART_SetConfig+0x4e4>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008206:	441c      	add	r4, r3
 8008208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800820c:	2200      	movs	r2, #0
 800820e:	673b      	str	r3, [r7, #112]	; 0x70
 8008210:	677a      	str	r2, [r7, #116]	; 0x74
 8008212:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008216:	4642      	mov	r2, r8
 8008218:	464b      	mov	r3, r9
 800821a:	1891      	adds	r1, r2, r2
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	415b      	adcs	r3, r3
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008226:	4641      	mov	r1, r8
 8008228:	1851      	adds	r1, r2, r1
 800822a:	6039      	str	r1, [r7, #0]
 800822c:	4649      	mov	r1, r9
 800822e:	414b      	adcs	r3, r1
 8008230:	607b      	str	r3, [r7, #4]
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800823e:	4659      	mov	r1, fp
 8008240:	00cb      	lsls	r3, r1, #3
 8008242:	4651      	mov	r1, sl
 8008244:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008248:	4651      	mov	r1, sl
 800824a:	00ca      	lsls	r2, r1, #3
 800824c:	4610      	mov	r0, r2
 800824e:	4619      	mov	r1, r3
 8008250:	4603      	mov	r3, r0
 8008252:	4642      	mov	r2, r8
 8008254:	189b      	adds	r3, r3, r2
 8008256:	66bb      	str	r3, [r7, #104]	; 0x68
 8008258:	464b      	mov	r3, r9
 800825a:	460a      	mov	r2, r1
 800825c:	eb42 0303 	adc.w	r3, r2, r3
 8008260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	663b      	str	r3, [r7, #96]	; 0x60
 800826c:	667a      	str	r2, [r7, #100]	; 0x64
 800826e:	f04f 0200 	mov.w	r2, #0
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800827a:	4649      	mov	r1, r9
 800827c:	008b      	lsls	r3, r1, #2
 800827e:	4641      	mov	r1, r8
 8008280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008284:	4641      	mov	r1, r8
 8008286:	008a      	lsls	r2, r1, #2
 8008288:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800828c:	f7f7 ffa0 	bl	80001d0 <__aeabi_uldivmod>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <UART_SetConfig+0x4e4>)
 8008296:	fba3 1302 	umull	r1, r3, r3, r2
 800829a:	095b      	lsrs	r3, r3, #5
 800829c:	2164      	movs	r1, #100	; 0x64
 800829e:	fb01 f303 	mul.w	r3, r1, r3
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	3332      	adds	r3, #50	; 0x32
 80082a8:	4a08      	ldr	r2, [pc, #32]	; (80082cc <UART_SetConfig+0x4e4>)
 80082aa:	fba2 2303 	umull	r2, r3, r2, r3
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	f003 020f 	and.w	r2, r3, #15
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4422      	add	r2, r4
 80082bc:	609a      	str	r2, [r3, #8]
}
 80082be:	bf00      	nop
 80082c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082c4:	46bd      	mov	sp, r7
 80082c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082ca:	bf00      	nop
 80082cc:	51eb851f 	.word	0x51eb851f

080082d0 <__NVIC_SetPriority>:
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	6039      	str	r1, [r7, #0]
 80082da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	db0a      	blt.n	80082fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	490c      	ldr	r1, [pc, #48]	; (800831c <__NVIC_SetPriority+0x4c>)
 80082ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ee:	0112      	lsls	r2, r2, #4
 80082f0:	b2d2      	uxtb	r2, r2
 80082f2:	440b      	add	r3, r1
 80082f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80082f8:	e00a      	b.n	8008310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4908      	ldr	r1, [pc, #32]	; (8008320 <__NVIC_SetPriority+0x50>)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	3b04      	subs	r3, #4
 8008308:	0112      	lsls	r2, r2, #4
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	440b      	add	r3, r1
 800830e:	761a      	strb	r2, [r3, #24]
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	e000e100 	.word	0xe000e100
 8008320:	e000ed00 	.word	0xe000ed00

08008324 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <SysTick_Handler+0x1c>)
 800832a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800832c:	f001 fcfe 	bl	8009d2c <xTaskGetSchedulerState>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d001      	beq.n	800833a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008336:	f002 fae7 	bl	800a908 <xPortSysTickHandler>
  }
}
 800833a:	bf00      	nop
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	e000e010 	.word	0xe000e010

08008344 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008348:	2100      	movs	r1, #0
 800834a:	f06f 0004 	mvn.w	r0, #4
 800834e:	f7ff ffbf 	bl	80082d0 <__NVIC_SetPriority>
#endif
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800835e:	f3ef 8305 	mrs	r3, IPSR
 8008362:	603b      	str	r3, [r7, #0]
  return(result);
 8008364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800836a:	f06f 0305 	mvn.w	r3, #5
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	e00c      	b.n	800838c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008372:	4b0a      	ldr	r3, [pc, #40]	; (800839c <osKernelInitialize+0x44>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800837a:	4b08      	ldr	r3, [pc, #32]	; (800839c <osKernelInitialize+0x44>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008380:	2300      	movs	r3, #0
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	e002      	b.n	800838c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800838c:	687b      	ldr	r3, [r7, #4]
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20001fb4 	.word	0x20001fb4

080083a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083a6:	f3ef 8305 	mrs	r3, IPSR
 80083aa:	603b      	str	r3, [r7, #0]
  return(result);
 80083ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80083b2:	f06f 0305 	mvn.w	r3, #5
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	e010      	b.n	80083dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <osKernelStart+0x48>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d109      	bne.n	80083d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083c2:	f7ff ffbf 	bl	8008344 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <osKernelStart+0x48>)
 80083c8:	2202      	movs	r2, #2
 80083ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083cc:	f001 f866 	bl	800949c <vTaskStartScheduler>
      stat = osOK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	e002      	b.n	80083dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
 80083da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083dc:	687b      	ldr	r3, [r7, #4]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20001fb4 	.word	0x20001fb4

080083ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08e      	sub	sp, #56	; 0x38
 80083f0:	af04      	add	r7, sp, #16
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fc:	f3ef 8305 	mrs	r3, IPSR
 8008400:	617b      	str	r3, [r7, #20]
  return(result);
 8008402:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008404:	2b00      	cmp	r3, #0
 8008406:	d17e      	bne.n	8008506 <osThreadNew+0x11a>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d07b      	beq.n	8008506 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800840e:	2380      	movs	r3, #128	; 0x80
 8008410:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008412:	2318      	movs	r3, #24
 8008414:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
 800841e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d045      	beq.n	80084b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <osThreadNew+0x48>
        name = attr->name;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <osThreadNew+0x6e>
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b38      	cmp	r3, #56	; 0x38
 800844c:	d805      	bhi.n	800845a <osThreadNew+0x6e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <osThreadNew+0x72>
        return (NULL);
 800845a:	2300      	movs	r3, #0
 800845c:	e054      	b.n	8008508 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	089b      	lsrs	r3, r3, #2
 800846c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <osThreadNew+0xa8>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b5b      	cmp	r3, #91	; 0x5b
 800847c:	d90a      	bls.n	8008494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <osThreadNew+0xa8>
        mem = 1;
 800848e:	2301      	movs	r3, #1
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	e010      	b.n	80084b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10c      	bne.n	80084b6 <osThreadNew+0xca>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <osThreadNew+0xca>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <osThreadNew+0xca>
          mem = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	e001      	b.n	80084b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d110      	bne.n	80084de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084c4:	9202      	str	r2, [sp, #8]
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fe0c 	bl	80090f0 <xTaskCreateStatic>
 80084d8:	4603      	mov	r3, r0
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	e013      	b.n	8008506 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d110      	bne.n	8008506 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fe57 	bl	80091aa <xTaskCreate>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d001      	beq.n	8008506 <osThreadNew+0x11a>
            hTask = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008506:	693b      	ldr	r3, [r7, #16]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3728      	adds	r7, #40	; 0x28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008518:	f3ef 8305 	mrs	r3, IPSR
 800851c:	60bb      	str	r3, [r7, #8]
  return(result);
 800851e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <osDelay+0x1c>
    stat = osErrorISR;
 8008524:	f06f 0305 	mvn.w	r3, #5
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	e007      	b.n	800853c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 ff7c 	bl	8009434 <vTaskDelay>
    }
  }

  return (stat);
 800853c:	68fb      	ldr	r3, [r7, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4a07      	ldr	r2, [pc, #28]	; (8008574 <vApplicationGetIdleTaskMemory+0x2c>)
 8008558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4a06      	ldr	r2, [pc, #24]	; (8008578 <vApplicationGetIdleTaskMemory+0x30>)
 800855e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2280      	movs	r2, #128	; 0x80
 8008564:	601a      	str	r2, [r3, #0]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20001fb8 	.word	0x20001fb8
 8008578:	20002014 	.word	0x20002014

0800857c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a07      	ldr	r2, [pc, #28]	; (80085a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800858c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a06      	ldr	r2, [pc, #24]	; (80085ac <vApplicationGetTimerTaskMemory+0x30>)
 8008592:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800859a:	601a      	str	r2, [r3, #0]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20002214 	.word	0x20002214
 80085ac:	20002270 	.word	0x20002270

080085b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f103 0208 	add.w	r2, r3, #8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295
 80085c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f103 0208 	add.w	r2, r3, #8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f103 0208 	add.w	r2, r3, #8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008668:	d103      	bne.n	8008672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e00c      	b.n	800868c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3308      	adds	r3, #8
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e002      	b.n	8008680 <vListInsert+0x2e>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	429a      	cmp	r2, r3
 800868a:	d2f6      	bcs.n	800867a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6892      	ldr	r2, [r2, #8]
 80086da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6852      	ldr	r2, [r2, #4]
 80086e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d103      	bne.n	80086f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	1e5a      	subs	r2, r3, #1
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008742:	f002 f84f 	bl	800a7e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874e:	68f9      	ldr	r1, [r7, #12]
 8008750:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008752:	fb01 f303 	mul.w	r3, r1, r3
 8008756:	441a      	add	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	3b01      	subs	r3, #1
 8008774:	68f9      	ldr	r1, [r7, #12]
 8008776:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008778:	fb01 f303 	mul.w	r3, r1, r3
 800877c:	441a      	add	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	22ff      	movs	r2, #255	; 0xff
 8008786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	22ff      	movs	r2, #255	; 0xff
 800878e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d114      	bne.n	80087c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01a      	beq.n	80087d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3310      	adds	r3, #16
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 f903 	bl	80099b0 <xTaskRemoveFromEventList>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d012      	beq.n	80087d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087b0:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <xQueueGenericReset+0xcc>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	e009      	b.n	80087d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3310      	adds	r3, #16
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fef2 	bl	80085b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3324      	adds	r3, #36	; 0x24
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff feed 	bl	80085b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087d6:	f002 f835 	bl	800a844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087da:	2301      	movs	r3, #1
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08e      	sub	sp, #56	; 0x38
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <xQueueGenericCreateStatic+0x52>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <xQueueGenericCreateStatic+0x56>
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <xQueueGenericCreateStatic+0x58>
 800883e:	2300      	movs	r3, #0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	623b      	str	r3, [r7, #32]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <xQueueGenericCreateStatic+0x7e>
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <xQueueGenericCreateStatic+0x82>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <xQueueGenericCreateStatic+0x84>
 800886a:	2300      	movs	r3, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	61fb      	str	r3, [r7, #28]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008886:	2350      	movs	r3, #80	; 0x50
 8008888:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b50      	cmp	r3, #80	; 0x50
 800888e:	d00a      	beq.n	80088a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	61bb      	str	r3, [r7, #24]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00d      	beq.n	80088ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	4613      	mov	r3, r2
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f805 	bl	80088d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3730      	adds	r7, #48	; 0x30
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d103      	bne.n	80088f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	e002      	b.n	80088fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008906:	2101      	movs	r1, #1
 8008908:	69b8      	ldr	r0, [r7, #24]
 800890a:	f7ff ff05 	bl	8008718 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	; 0x38
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800892e:	2300      	movs	r3, #0
 8008930:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <xQueueGenericSend+0x32>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d103      	bne.n	8008960 <xQueueGenericSend+0x40>
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <xQueueGenericSend+0x44>
 8008960:	2301      	movs	r3, #1
 8008962:	e000      	b.n	8008966 <xQueueGenericSend+0x46>
 8008964:	2300      	movs	r3, #0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <xQueueGenericSend+0x60>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d103      	bne.n	800898e <xQueueGenericSend+0x6e>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898a:	2b01      	cmp	r3, #1
 800898c:	d101      	bne.n	8008992 <xQueueGenericSend+0x72>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <xQueueGenericSend+0x74>
 8008992:	2300      	movs	r3, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <xQueueGenericSend+0x8e>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	623b      	str	r3, [r7, #32]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089ae:	f001 f9bd 	bl	8009d2c <xTaskGetSchedulerState>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d102      	bne.n	80089be <xQueueGenericSend+0x9e>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <xQueueGenericSend+0xa2>
 80089be:	2301      	movs	r3, #1
 80089c0:	e000      	b.n	80089c4 <xQueueGenericSend+0xa4>
 80089c2:	2300      	movs	r3, #0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <xQueueGenericSend+0xbe>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	61fb      	str	r3, [r7, #28]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089de:	f001 ff01 	bl	800a7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d302      	bcc.n	80089f4 <xQueueGenericSend+0xd4>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d129      	bne.n	8008a48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089fa:	f000 fa0b 	bl	8008e14 <prvCopyDataToQueue>
 80089fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d010      	beq.n	8008a2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	3324      	adds	r3, #36	; 0x24
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 ffcf 	bl	80099b0 <xTaskRemoveFromEventList>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d013      	beq.n	8008a40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a18:	4b3f      	ldr	r3, [pc, #252]	; (8008b18 <xQueueGenericSend+0x1f8>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	e00a      	b.n	8008a40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d007      	beq.n	8008a40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a30:	4b39      	ldr	r3, [pc, #228]	; (8008b18 <xQueueGenericSend+0x1f8>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a40:	f001 ff00 	bl	800a844 <vPortExitCritical>
				return pdPASS;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e063      	b.n	8008b10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d103      	bne.n	8008a56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a4e:	f001 fef9 	bl	800a844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e05c      	b.n	8008b10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d106      	bne.n	8008a6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f809 	bl	8009a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a66:	2301      	movs	r3, #1
 8008a68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a6a:	f001 feeb 	bl	800a844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a6e:	f000 fd7b 	bl	8009568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a72:	f001 feb7 	bl	800a7e4 <vPortEnterCritical>
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a7c:	b25b      	sxtb	r3, r3
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d103      	bne.n	8008a8c <xQueueGenericSend+0x16c>
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a92:	b25b      	sxtb	r3, r3
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d103      	bne.n	8008aa2 <xQueueGenericSend+0x182>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aa2:	f001 fecf 	bl	800a844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa6:	1d3a      	adds	r2, r7, #4
 8008aa8:	f107 0314 	add.w	r3, r7, #20
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 fff8 	bl	8009aa4 <xTaskCheckForTimeOut>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d124      	bne.n	8008b04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008aba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008abc:	f000 faa2 	bl	8009004 <prvIsQueueFull>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d018      	beq.n	8008af8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	3310      	adds	r3, #16
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 ff1e 	bl	8009910 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ad6:	f000 fa2d 	bl	8008f34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ada:	f000 fd53 	bl	8009584 <xTaskResumeAll>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f47f af7c 	bne.w	80089de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <xQueueGenericSend+0x1f8>)
 8008ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	e772      	b.n	80089de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008afa:	f000 fa1b 	bl	8008f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008afe:	f000 fd41 	bl	8009584 <xTaskResumeAll>
 8008b02:	e76c      	b.n	80089de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b06:	f000 fa15 	bl	8008f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b0a:	f000 fd3b 	bl	8009584 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3738      	adds	r7, #56	; 0x38
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b090      	sub	sp, #64	; 0x40
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d103      	bne.n	8008b58 <xQueueGenericSendFromISR+0x3c>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <xQueueGenericSendFromISR+0x40>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e000      	b.n	8008b5e <xQueueGenericSendFromISR+0x42>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d103      	bne.n	8008b86 <xQueueGenericSendFromISR+0x6a>
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <xQueueGenericSendFromISR+0x6e>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <xQueueGenericSendFromISR+0x70>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	623b      	str	r3, [r7, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ba6:	f001 feff 	bl	800a9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008baa:	f3ef 8211 	mrs	r2, BASEPRI
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	61fa      	str	r2, [r7, #28]
 8008bc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d302      	bcc.n	8008bd8 <xQueueGenericSendFromISR+0xbc>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d12f      	bne.n	8008c38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bee:	f000 f911 	bl	8008e14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	d112      	bne.n	8008c22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d016      	beq.n	8008c32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	3324      	adds	r3, #36	; 0x24
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fed1 	bl	80099b0 <xTaskRemoveFromEventList>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00e      	beq.n	8008c32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00b      	beq.n	8008c32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e007      	b.n	8008c32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c26:	3301      	adds	r3, #1
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	b25a      	sxtb	r2, r3
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c32:	2301      	movs	r3, #1
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c36:	e001      	b.n	8008c3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3740      	adds	r7, #64	; 0x40
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08c      	sub	sp, #48	; 0x30
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c60:	2300      	movs	r3, #0
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <xQueueReceive+0x30>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	623b      	str	r3, [r7, #32]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d103      	bne.n	8008c92 <xQueueReceive+0x3e>
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <xQueueReceive+0x42>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <xQueueReceive+0x44>
 8008c96:	2300      	movs	r3, #0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <xQueueReceive+0x5e>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	61fb      	str	r3, [r7, #28]
}
 8008cae:	bf00      	nop
 8008cb0:	e7fe      	b.n	8008cb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cb2:	f001 f83b 	bl	8009d2c <xTaskGetSchedulerState>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <xQueueReceive+0x6e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <xQueueReceive+0x72>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e000      	b.n	8008cc8 <xQueueReceive+0x74>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xQueueReceive+0x8e>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	61bb      	str	r3, [r7, #24]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ce2:	f001 fd7f 	bl	800a7e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d01f      	beq.n	8008d32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cf2:	68b9      	ldr	r1, [r7, #8]
 8008cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf6:	f000 f8f7 	bl	8008ee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	1e5a      	subs	r2, r3, #1
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00f      	beq.n	8008d2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	3310      	adds	r3, #16
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fe4e 	bl	80099b0 <xTaskRemoveFromEventList>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d1a:	4b3d      	ldr	r3, [pc, #244]	; (8008e10 <xQueueReceive+0x1bc>)
 8008d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d2a:	f001 fd8b 	bl	800a844 <vPortExitCritical>
				return pdPASS;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e069      	b.n	8008e06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d38:	f001 fd84 	bl	800a844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e062      	b.n	8008e06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d46:	f107 0310 	add.w	r3, r7, #16
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fe94 	bl	8009a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d50:	2301      	movs	r3, #1
 8008d52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d54:	f001 fd76 	bl	800a844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d58:	f000 fc06 	bl	8009568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d5c:	f001 fd42 	bl	800a7e4 <vPortEnterCritical>
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d103      	bne.n	8008d76 <xQueueReceive+0x122>
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d7c:	b25b      	sxtb	r3, r3
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d103      	bne.n	8008d8c <xQueueReceive+0x138>
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d8c:	f001 fd5a 	bl	800a844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d90:	1d3a      	adds	r2, r7, #4
 8008d92:	f107 0310 	add.w	r3, r7, #16
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fe83 	bl	8009aa4 <xTaskCheckForTimeOut>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d123      	bne.n	8008dec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da6:	f000 f917 	bl	8008fd8 <prvIsQueueEmpty>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d017      	beq.n	8008de0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	3324      	adds	r3, #36	; 0x24
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fda9 	bl	8009910 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc0:	f000 f8b8 	bl	8008f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dc4:	f000 fbde 	bl	8009584 <xTaskResumeAll>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d189      	bne.n	8008ce2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008dce:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <xQueueReceive+0x1bc>)
 8008dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	e780      	b.n	8008ce2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de2:	f000 f8a7 	bl	8008f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008de6:	f000 fbcd 	bl	8009584 <xTaskResumeAll>
 8008dea:	e77a      	b.n	8008ce2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dee:	f000 f8a1 	bl	8008f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008df2:	f000 fbc7 	bl	8009584 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df8:	f000 f8ee 	bl	8008fd8 <prvIsQueueEmpty>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f43f af6f 	beq.w	8008ce2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3730      	adds	r7, #48	; 0x30
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10d      	bne.n	8008e4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d14d      	bne.n	8008ed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 ff92 	bl	8009d68 <xTaskPriorityDisinherit>
 8008e44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	609a      	str	r2, [r3, #8]
 8008e4c:	e043      	b.n	8008ed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d119      	bne.n	8008e88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6858      	ldr	r0, [r3, #4]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68b9      	ldr	r1, [r7, #8]
 8008e60:	f001 fff0 	bl	800ae44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	441a      	add	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d32b      	bcc.n	8008ed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	605a      	str	r2, [r3, #4]
 8008e86:	e026      	b.n	8008ed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	68d8      	ldr	r0, [r3, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	461a      	mov	r2, r3
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	f001 ffd6 	bl	800ae44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	425b      	negs	r3, r3
 8008ea2:	441a      	add	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d207      	bcs.n	8008ec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	441a      	add	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d105      	bne.n	8008ed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ede:	697b      	ldr	r3, [r7, #20]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d018      	beq.n	8008f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	441a      	add	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d303      	bcc.n	8008f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68d9      	ldr	r1, [r3, #12]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	461a      	mov	r2, r3
 8008f26:	6838      	ldr	r0, [r7, #0]
 8008f28:	f001 ff8c 	bl	800ae44 <memcpy>
	}
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f3c:	f001 fc52 	bl	800a7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f48:	e011      	b.n	8008f6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d012      	beq.n	8008f78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3324      	adds	r3, #36	; 0x24
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fd2a 	bl	80099b0 <xTaskRemoveFromEventList>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f62:	f000 fe01 	bl	8009b68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dce9      	bgt.n	8008f4a <prvUnlockQueue+0x16>
 8008f76:	e000      	b.n	8008f7a <prvUnlockQueue+0x46>
					break;
 8008f78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	22ff      	movs	r2, #255	; 0xff
 8008f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f82:	f001 fc5f 	bl	800a844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f86:	f001 fc2d 	bl	800a7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f92:	e011      	b.n	8008fb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d012      	beq.n	8008fc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3310      	adds	r3, #16
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fd05 	bl	80099b0 <xTaskRemoveFromEventList>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fac:	f000 fddc 	bl	8009b68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dce9      	bgt.n	8008f94 <prvUnlockQueue+0x60>
 8008fc0:	e000      	b.n	8008fc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	22ff      	movs	r2, #255	; 0xff
 8008fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008fcc:	f001 fc3a 	bl	800a844 <vPortExitCritical>
}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fe0:	f001 fc00 	bl	800a7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e001      	b.n	8008ff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ff6:	f001 fc25 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800900c:	f001 fbea 	bl	800a7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009018:	429a      	cmp	r2, r3
 800901a:	d102      	bne.n	8009022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e001      	b.n	8009026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f001 fc0d 	bl	800a844 <vPortExitCritical>

	return xReturn;
 800902a:	68fb      	ldr	r3, [r7, #12]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	e014      	b.n	800906e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009044:	4a0f      	ldr	r2, [pc, #60]	; (8009084 <vQueueAddToRegistry+0x50>)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10b      	bne.n	8009068 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009050:	490c      	ldr	r1, [pc, #48]	; (8009084 <vQueueAddToRegistry+0x50>)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800905a:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <vQueueAddToRegistry+0x50>)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	4413      	add	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009066:	e006      	b.n	8009076 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3301      	adds	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b07      	cmp	r3, #7
 8009072:	d9e7      	bls.n	8009044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20002670 	.word	0x20002670

08009088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009098:	f001 fba4 	bl	800a7e4 <vPortEnterCritical>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090a2:	b25b      	sxtb	r3, r3
 80090a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a8:	d103      	bne.n	80090b2 <vQueueWaitForMessageRestricted+0x2a>
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090b8:	b25b      	sxtb	r3, r3
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090be:	d103      	bne.n	80090c8 <vQueueWaitForMessageRestricted+0x40>
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090c8:	f001 fbbc 	bl	800a844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d106      	bne.n	80090e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	3324      	adds	r3, #36	; 0x24
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fc3b 	bl	8009958 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f7ff ff26 	bl	8008f34 <prvUnlockQueue>
	}
 80090e8:	bf00      	nop
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08e      	sub	sp, #56	; 0x38
 80090f4:	af04      	add	r7, sp, #16
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	623b      	str	r3, [r7, #32]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <xTaskCreateStatic+0x46>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	61fb      	str	r3, [r7, #28]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009136:	235c      	movs	r3, #92	; 0x5c
 8009138:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b5c      	cmp	r3, #92	; 0x5c
 800913e:	d00a      	beq.n	8009156 <xTaskCreateStatic+0x66>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	61bb      	str	r3, [r7, #24]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009156:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	2b00      	cmp	r3, #0
 800915c:	d01e      	beq.n	800919c <xTaskCreateStatic+0xac>
 800915e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01b      	beq.n	800919c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800916c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	2202      	movs	r2, #2
 8009172:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009176:	2300      	movs	r3, #0
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	9302      	str	r3, [sp, #8]
 800917e:	f107 0314 	add.w	r3, r7, #20
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	68b9      	ldr	r1, [r7, #8]
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 f850 	bl	8009234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009196:	f000 f8dd 	bl	8009354 <prvAddNewTaskToReadyList>
 800919a:	e001      	b.n	80091a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091a0:	697b      	ldr	r3, [r7, #20]
	}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3728      	adds	r7, #40	; 0x28
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b08c      	sub	sp, #48	; 0x30
 80091ae:	af04      	add	r7, sp, #16
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	603b      	str	r3, [r7, #0]
 80091b6:	4613      	mov	r3, r2
 80091b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4618      	mov	r0, r3
 80091c0:	f001 fc32 	bl	800aa28 <pvPortMalloc>
 80091c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00e      	beq.n	80091ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091cc:	205c      	movs	r0, #92	; 0x5c
 80091ce:	f001 fc2b 	bl	800aa28 <pvPortMalloc>
 80091d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	631a      	str	r2, [r3, #48]	; 0x30
 80091e0:	e005      	b.n	80091ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091e2:	6978      	ldr	r0, [r7, #20]
 80091e4:	f001 fcec 	bl	800abc0 <vPortFree>
 80091e8:	e001      	b.n	80091ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d017      	beq.n	8009224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091fc:	88fa      	ldrh	r2, [r7, #6]
 80091fe:	2300      	movs	r3, #0
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	9302      	str	r3, [sp, #8]
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f80e 	bl	8009234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009218:	69f8      	ldr	r0, [r7, #28]
 800921a:	f000 f89b 	bl	8009354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800921e:	2301      	movs	r3, #1
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	e002      	b.n	800922a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009224:	f04f 33ff 	mov.w	r3, #4294967295
 8009228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800922a:	69bb      	ldr	r3, [r7, #24]
	}
 800922c:	4618      	mov	r0, r3
 800922e:	3720      	adds	r7, #32
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	461a      	mov	r2, r3
 800924c:	21a5      	movs	r1, #165	; 0xa5
 800924e:	f001 fe07 	bl	800ae60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800925c:	3b01      	subs	r3, #1
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	f003 0307 	and.w	r3, r3, #7
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	617b      	str	r3, [r7, #20]
}
 8009288:	bf00      	nop
 800928a:	e7fe      	b.n	800928a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d01f      	beq.n	80092d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009292:	2300      	movs	r3, #0
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	e012      	b.n	80092be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	7819      	ldrb	r1, [r3, #0]
 80092a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	3334      	adds	r3, #52	; 0x34
 80092a8:	460a      	mov	r2, r1
 80092aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	4413      	add	r3, r2
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d006      	beq.n	80092c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	3301      	adds	r3, #1
 80092bc:	61fb      	str	r3, [r7, #28]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	2b0f      	cmp	r3, #15
 80092c2:	d9e9      	bls.n	8009298 <prvInitialiseNewTask+0x64>
 80092c4:	e000      	b.n	80092c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80092c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092d0:	e003      	b.n	80092da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	2b37      	cmp	r3, #55	; 0x37
 80092de:	d901      	bls.n	80092e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092e0:	2337      	movs	r3, #55	; 0x37
 80092e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	2200      	movs	r2, #0
 80092f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	3304      	adds	r3, #4
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff f978 	bl	80085f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	3318      	adds	r3, #24
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff f973 	bl	80085f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800930e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800931e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	2200      	movs	r2, #0
 8009324:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	68f9      	ldr	r1, [r7, #12]
 8009332:	69b8      	ldr	r0, [r7, #24]
 8009334:	f001 f928 	bl	800a588 <pxPortInitialiseStack>
 8009338:	4602      	mov	r2, r0
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800934a:	bf00      	nop
 800934c:	3720      	adds	r7, #32
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800935c:	f001 fa42 	bl	800a7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009360:	4b2d      	ldr	r3, [pc, #180]	; (8009418 <prvAddNewTaskToReadyList+0xc4>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	4a2c      	ldr	r2, [pc, #176]	; (8009418 <prvAddNewTaskToReadyList+0xc4>)
 8009368:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800936a:	4b2c      	ldr	r3, [pc, #176]	; (800941c <prvAddNewTaskToReadyList+0xc8>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d109      	bne.n	8009386 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009372:	4a2a      	ldr	r2, [pc, #168]	; (800941c <prvAddNewTaskToReadyList+0xc8>)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009378:	4b27      	ldr	r3, [pc, #156]	; (8009418 <prvAddNewTaskToReadyList+0xc4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d110      	bne.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009380:	f000 fc16 	bl	8009bb0 <prvInitialiseTaskLists>
 8009384:	e00d      	b.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009386:	4b26      	ldr	r3, [pc, #152]	; (8009420 <prvAddNewTaskToReadyList+0xcc>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800938e:	4b23      	ldr	r3, [pc, #140]	; (800941c <prvAddNewTaskToReadyList+0xc8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d802      	bhi.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800939c:	4a1f      	ldr	r2, [pc, #124]	; (800941c <prvAddNewTaskToReadyList+0xc8>)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093a2:	4b20      	ldr	r3, [pc, #128]	; (8009424 <prvAddNewTaskToReadyList+0xd0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3301      	adds	r3, #1
 80093a8:	4a1e      	ldr	r2, [pc, #120]	; (8009424 <prvAddNewTaskToReadyList+0xd0>)
 80093aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093ac:	4b1d      	ldr	r3, [pc, #116]	; (8009424 <prvAddNewTaskToReadyList+0xd0>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	4b1b      	ldr	r3, [pc, #108]	; (8009428 <prvAddNewTaskToReadyList+0xd4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d903      	bls.n	80093c8 <prvAddNewTaskToReadyList+0x74>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a18      	ldr	r2, [pc, #96]	; (8009428 <prvAddNewTaskToReadyList+0xd4>)
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4a15      	ldr	r2, [pc, #84]	; (800942c <prvAddNewTaskToReadyList+0xd8>)
 80093d6:	441a      	add	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3304      	adds	r3, #4
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f7ff f913 	bl	800860a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093e4:	f001 fa2e 	bl	800a844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093e8:	4b0d      	ldr	r3, [pc, #52]	; (8009420 <prvAddNewTaskToReadyList+0xcc>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093f0:	4b0a      	ldr	r3, [pc, #40]	; (800941c <prvAddNewTaskToReadyList+0xc8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d207      	bcs.n	800940e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093fe:	4b0c      	ldr	r3, [pc, #48]	; (8009430 <prvAddNewTaskToReadyList+0xdc>)
 8009400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20002b84 	.word	0x20002b84
 800941c:	200026b0 	.word	0x200026b0
 8009420:	20002b90 	.word	0x20002b90
 8009424:	20002ba0 	.word	0x20002ba0
 8009428:	20002b8c 	.word	0x20002b8c
 800942c:	200026b4 	.word	0x200026b4
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d017      	beq.n	8009476 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <vTaskDelay+0x60>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <vTaskDelay+0x30>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60bb      	str	r3, [r7, #8]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009464:	f000 f880 	bl	8009568 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fcea 	bl	8009e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009470:	f000 f888 	bl	8009584 <xTaskResumeAll>
 8009474:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d107      	bne.n	800948c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <vTaskDelay+0x64>)
 800947e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20002bac 	.word	0x20002bac
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	; 0x28
 80094a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094aa:	463a      	mov	r2, r7
 80094ac:	1d39      	adds	r1, r7, #4
 80094ae:	f107 0308 	add.w	r3, r7, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff f848 	bl	8008548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	9202      	str	r2, [sp, #8]
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	2300      	movs	r3, #0
 80094c8:	460a      	mov	r2, r1
 80094ca:	4921      	ldr	r1, [pc, #132]	; (8009550 <vTaskStartScheduler+0xb4>)
 80094cc:	4821      	ldr	r0, [pc, #132]	; (8009554 <vTaskStartScheduler+0xb8>)
 80094ce:	f7ff fe0f 	bl	80090f0 <xTaskCreateStatic>
 80094d2:	4603      	mov	r3, r0
 80094d4:	4a20      	ldr	r2, [pc, #128]	; (8009558 <vTaskStartScheduler+0xbc>)
 80094d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80094d8:	4b1f      	ldr	r3, [pc, #124]	; (8009558 <vTaskStartScheduler+0xbc>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094e0:	2301      	movs	r3, #1
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	e001      	b.n	80094ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d102      	bne.n	80094f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80094f0:	f000 fcfc 	bl	8009eec <xTimerCreateTimerTask>
 80094f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d116      	bne.n	800952a <vTaskStartScheduler+0x8e>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	613b      	str	r3, [r7, #16]
}
 800950e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009510:	4b12      	ldr	r3, [pc, #72]	; (800955c <vTaskStartScheduler+0xc0>)
 8009512:	f04f 32ff 	mov.w	r2, #4294967295
 8009516:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009518:	4b11      	ldr	r3, [pc, #68]	; (8009560 <vTaskStartScheduler+0xc4>)
 800951a:	2201      	movs	r2, #1
 800951c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800951e:	4b11      	ldr	r3, [pc, #68]	; (8009564 <vTaskStartScheduler+0xc8>)
 8009520:	2200      	movs	r2, #0
 8009522:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009524:	f001 f8bc 	bl	800a6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009528:	e00e      	b.n	8009548 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d10a      	bne.n	8009548 <vTaskStartScheduler+0xac>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	60fb      	str	r3, [r7, #12]
}
 8009544:	bf00      	nop
 8009546:	e7fe      	b.n	8009546 <vTaskStartScheduler+0xaa>
}
 8009548:	bf00      	nop
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	0800aef8 	.word	0x0800aef8
 8009554:	08009b81 	.word	0x08009b81
 8009558:	20002ba8 	.word	0x20002ba8
 800955c:	20002ba4 	.word	0x20002ba4
 8009560:	20002b90 	.word	0x20002b90
 8009564:	20002b88 	.word	0x20002b88

08009568 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800956c:	4b04      	ldr	r3, [pc, #16]	; (8009580 <vTaskSuspendAll+0x18>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	4a03      	ldr	r2, [pc, #12]	; (8009580 <vTaskSuspendAll+0x18>)
 8009574:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009576:	bf00      	nop
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	20002bac 	.word	0x20002bac

08009584 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800958e:	2300      	movs	r3, #0
 8009590:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009592:	4b42      	ldr	r3, [pc, #264]	; (800969c <xTaskResumeAll+0x118>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10a      	bne.n	80095b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	603b      	str	r3, [r7, #0]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095b0:	f001 f918 	bl	800a7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095b4:	4b39      	ldr	r3, [pc, #228]	; (800969c <xTaskResumeAll+0x118>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	4a38      	ldr	r2, [pc, #224]	; (800969c <xTaskResumeAll+0x118>)
 80095bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095be:	4b37      	ldr	r3, [pc, #220]	; (800969c <xTaskResumeAll+0x118>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d162      	bne.n	800968c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095c6:	4b36      	ldr	r3, [pc, #216]	; (80096a0 <xTaskResumeAll+0x11c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d05e      	beq.n	800968c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095ce:	e02f      	b.n	8009630 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d0:	4b34      	ldr	r3, [pc, #208]	; (80096a4 <xTaskResumeAll+0x120>)
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3318      	adds	r3, #24
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff f871 	bl	80086c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff f86c 	bl	80086c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f0:	4b2d      	ldr	r3, [pc, #180]	; (80096a8 <xTaskResumeAll+0x124>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d903      	bls.n	8009600 <xTaskResumeAll+0x7c>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	4a2a      	ldr	r2, [pc, #168]	; (80096a8 <xTaskResumeAll+0x124>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4a27      	ldr	r2, [pc, #156]	; (80096ac <xTaskResumeAll+0x128>)
 800960e:	441a      	add	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3304      	adds	r3, #4
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7fe fff7 	bl	800860a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009620:	4b23      	ldr	r3, [pc, #140]	; (80096b0 <xTaskResumeAll+0x12c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	429a      	cmp	r2, r3
 8009628:	d302      	bcc.n	8009630 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800962a:	4b22      	ldr	r3, [pc, #136]	; (80096b4 <xTaskResumeAll+0x130>)
 800962c:	2201      	movs	r2, #1
 800962e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009630:	4b1c      	ldr	r3, [pc, #112]	; (80096a4 <xTaskResumeAll+0x120>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1cb      	bne.n	80095d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800963e:	f000 fb55 	bl	8009cec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009642:	4b1d      	ldr	r3, [pc, #116]	; (80096b8 <xTaskResumeAll+0x134>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d010      	beq.n	8009670 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800964e:	f000 f847 	bl	80096e0 <xTaskIncrementTick>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009658:	4b16      	ldr	r3, [pc, #88]	; (80096b4 <xTaskResumeAll+0x130>)
 800965a:	2201      	movs	r2, #1
 800965c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3b01      	subs	r3, #1
 8009662:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1f1      	bne.n	800964e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800966a:	4b13      	ldr	r3, [pc, #76]	; (80096b8 <xTaskResumeAll+0x134>)
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009670:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <xTaskResumeAll+0x130>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800967c:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <xTaskResumeAll+0x138>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800968c:	f001 f8da 	bl	800a844 <vPortExitCritical>

	return xAlreadyYielded;
 8009690:	68bb      	ldr	r3, [r7, #8]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20002bac 	.word	0x20002bac
 80096a0:	20002b84 	.word	0x20002b84
 80096a4:	20002b44 	.word	0x20002b44
 80096a8:	20002b8c 	.word	0x20002b8c
 80096ac:	200026b4 	.word	0x200026b4
 80096b0:	200026b0 	.word	0x200026b0
 80096b4:	20002b98 	.word	0x20002b98
 80096b8:	20002b94 	.word	0x20002b94
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <xTaskGetTickCount+0x1c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096cc:	687b      	ldr	r3, [r7, #4]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	20002b88 	.word	0x20002b88

080096e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096e6:	2300      	movs	r3, #0
 80096e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ea:	4b4f      	ldr	r3, [pc, #316]	; (8009828 <xTaskIncrementTick+0x148>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f040 808f 	bne.w	8009812 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096f4:	4b4d      	ldr	r3, [pc, #308]	; (800982c <xTaskIncrementTick+0x14c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096fc:	4a4b      	ldr	r2, [pc, #300]	; (800982c <xTaskIncrementTick+0x14c>)
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d120      	bne.n	800974a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009708:	4b49      	ldr	r3, [pc, #292]	; (8009830 <xTaskIncrementTick+0x150>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <xTaskIncrementTick+0x48>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	603b      	str	r3, [r7, #0]
}
 8009724:	bf00      	nop
 8009726:	e7fe      	b.n	8009726 <xTaskIncrementTick+0x46>
 8009728:	4b41      	ldr	r3, [pc, #260]	; (8009830 <xTaskIncrementTick+0x150>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	4b41      	ldr	r3, [pc, #260]	; (8009834 <xTaskIncrementTick+0x154>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a3f      	ldr	r2, [pc, #252]	; (8009830 <xTaskIncrementTick+0x150>)
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	4a3f      	ldr	r2, [pc, #252]	; (8009834 <xTaskIncrementTick+0x154>)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	4b3e      	ldr	r3, [pc, #248]	; (8009838 <xTaskIncrementTick+0x158>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a3d      	ldr	r2, [pc, #244]	; (8009838 <xTaskIncrementTick+0x158>)
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	f000 fad1 	bl	8009cec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800974a:	4b3c      	ldr	r3, [pc, #240]	; (800983c <xTaskIncrementTick+0x15c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	429a      	cmp	r2, r3
 8009752:	d349      	bcc.n	80097e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009754:	4b36      	ldr	r3, [pc, #216]	; (8009830 <xTaskIncrementTick+0x150>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d104      	bne.n	8009768 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975e:	4b37      	ldr	r3, [pc, #220]	; (800983c <xTaskIncrementTick+0x15c>)
 8009760:	f04f 32ff 	mov.w	r2, #4294967295
 8009764:	601a      	str	r2, [r3, #0]
					break;
 8009766:	e03f      	b.n	80097e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009768:	4b31      	ldr	r3, [pc, #196]	; (8009830 <xTaskIncrementTick+0x150>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d203      	bcs.n	8009788 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009780:	4a2e      	ldr	r2, [pc, #184]	; (800983c <xTaskIncrementTick+0x15c>)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009786:	e02f      	b.n	80097e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	3304      	adds	r3, #4
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe ff99 	bl	80086c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009796:	2b00      	cmp	r3, #0
 8009798:	d004      	beq.n	80097a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	3318      	adds	r3, #24
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe ff90 	bl	80086c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4b25      	ldr	r3, [pc, #148]	; (8009840 <xTaskIncrementTick+0x160>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d903      	bls.n	80097b8 <xTaskIncrementTick+0xd8>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	4a22      	ldr	r2, [pc, #136]	; (8009840 <xTaskIncrementTick+0x160>)
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4a1f      	ldr	r2, [pc, #124]	; (8009844 <xTaskIncrementTick+0x164>)
 80097c6:	441a      	add	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7fe ff1b 	bl	800860a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d8:	4b1b      	ldr	r3, [pc, #108]	; (8009848 <xTaskIncrementTick+0x168>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	429a      	cmp	r2, r3
 80097e0:	d3b8      	bcc.n	8009754 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80097e2:	2301      	movs	r3, #1
 80097e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097e6:	e7b5      	b.n	8009754 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097e8:	4b17      	ldr	r3, [pc, #92]	; (8009848 <xTaskIncrementTick+0x168>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ee:	4915      	ldr	r1, [pc, #84]	; (8009844 <xTaskIncrementTick+0x164>)
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	440b      	add	r3, r1
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d901      	bls.n	8009804 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009804:	4b11      	ldr	r3, [pc, #68]	; (800984c <xTaskIncrementTick+0x16c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d007      	beq.n	800981c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800980c:	2301      	movs	r3, #1
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	e004      	b.n	800981c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <xTaskIncrementTick+0x170>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3301      	adds	r3, #1
 8009818:	4a0d      	ldr	r2, [pc, #52]	; (8009850 <xTaskIncrementTick+0x170>)
 800981a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800981c:	697b      	ldr	r3, [r7, #20]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20002bac 	.word	0x20002bac
 800982c:	20002b88 	.word	0x20002b88
 8009830:	20002b3c 	.word	0x20002b3c
 8009834:	20002b40 	.word	0x20002b40
 8009838:	20002b9c 	.word	0x20002b9c
 800983c:	20002ba4 	.word	0x20002ba4
 8009840:	20002b8c 	.word	0x20002b8c
 8009844:	200026b4 	.word	0x200026b4
 8009848:	200026b0 	.word	0x200026b0
 800984c:	20002b98 	.word	0x20002b98
 8009850:	20002b94 	.word	0x20002b94

08009854 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800985a:	4b28      	ldr	r3, [pc, #160]	; (80098fc <vTaskSwitchContext+0xa8>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009862:	4b27      	ldr	r3, [pc, #156]	; (8009900 <vTaskSwitchContext+0xac>)
 8009864:	2201      	movs	r2, #1
 8009866:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009868:	e041      	b.n	80098ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800986a:	4b25      	ldr	r3, [pc, #148]	; (8009900 <vTaskSwitchContext+0xac>)
 800986c:	2200      	movs	r2, #0
 800986e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009870:	4b24      	ldr	r3, [pc, #144]	; (8009904 <vTaskSwitchContext+0xb0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	e010      	b.n	800989a <vTaskSwitchContext+0x46>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <vTaskSwitchContext+0x40>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <vTaskSwitchContext+0x3e>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3b01      	subs	r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	491b      	ldr	r1, [pc, #108]	; (8009908 <vTaskSwitchContext+0xb4>)
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	440b      	add	r3, r1
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0e4      	beq.n	8009878 <vTaskSwitchContext+0x24>
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4a13      	ldr	r2, [pc, #76]	; (8009908 <vTaskSwitchContext+0xb4>)
 80098ba:	4413      	add	r3, r2
 80098bc:	60bb      	str	r3, [r7, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	605a      	str	r2, [r3, #4]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	3308      	adds	r3, #8
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d104      	bne.n	80098de <vTaskSwitchContext+0x8a>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	4a09      	ldr	r2, [pc, #36]	; (800990c <vTaskSwitchContext+0xb8>)
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	4a06      	ldr	r2, [pc, #24]	; (8009904 <vTaskSwitchContext+0xb0>)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6013      	str	r3, [r2, #0]
}
 80098ee:	bf00      	nop
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	20002bac 	.word	0x20002bac
 8009900:	20002b98 	.word	0x20002b98
 8009904:	20002b8c 	.word	0x20002b8c
 8009908:	200026b4 	.word	0x200026b4
 800990c:	200026b0 	.word	0x200026b0

08009910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60fb      	str	r3, [r7, #12]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <vTaskPlaceOnEventList+0x44>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3318      	adds	r3, #24
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7fe fe87 	bl	8008652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009944:	2101      	movs	r1, #1
 8009946:	6838      	ldr	r0, [r7, #0]
 8009948:	f000 fa7c 	bl	8009e44 <prvAddCurrentTaskToDelayedList>
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	200026b0 	.word	0x200026b0

08009958 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	617b      	str	r3, [r7, #20]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <vTaskPlaceOnEventListRestricted+0x54>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3318      	adds	r3, #24
 8009986:	4619      	mov	r1, r3
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f7fe fe3e 	bl	800860a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009994:	f04f 33ff 	mov.w	r3, #4294967295
 8009998:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	68b8      	ldr	r0, [r7, #8]
 800999e:	f000 fa51 	bl	8009e44 <prvAddCurrentTaskToDelayedList>
	}
 80099a2:	bf00      	nop
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	200026b0 	.word	0x200026b0

080099b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	60fb      	str	r3, [r7, #12]
}
 80099d8:	bf00      	nop
 80099da:	e7fe      	b.n	80099da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	3318      	adds	r3, #24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fe6f 	bl	80086c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099e6:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <xTaskRemoveFromEventList+0xb0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d11d      	bne.n	8009a2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe fe66 	bl	80086c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fc:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <xTaskRemoveFromEventList+0xb4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d903      	bls.n	8009a0c <xTaskRemoveFromEventList+0x5c>
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	4a16      	ldr	r2, [pc, #88]	; (8009a64 <xTaskRemoveFromEventList+0xb4>)
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4a13      	ldr	r2, [pc, #76]	; (8009a68 <xTaskRemoveFromEventList+0xb8>)
 8009a1a:	441a      	add	r2, r3
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f7fe fdf1 	bl	800860a <vListInsertEnd>
 8009a28:	e005      	b.n	8009a36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3318      	adds	r3, #24
 8009a2e:	4619      	mov	r1, r3
 8009a30:	480e      	ldr	r0, [pc, #56]	; (8009a6c <xTaskRemoveFromEventList+0xbc>)
 8009a32:	f7fe fdea 	bl	800860a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <xTaskRemoveFromEventList+0xc0>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d905      	bls.n	8009a50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <xTaskRemoveFromEventList+0xc4>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	e001      	b.n	8009a54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a54:	697b      	ldr	r3, [r7, #20]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20002bac 	.word	0x20002bac
 8009a64:	20002b8c 	.word	0x20002b8c
 8009a68:	200026b4 	.word	0x200026b4
 8009a6c:	20002b44 	.word	0x20002b44
 8009a70:	200026b0 	.word	0x200026b0
 8009a74:	20002b98 	.word	0x20002b98

08009a78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <vTaskInternalSetTimeOutState+0x24>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a88:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <vTaskInternalSetTimeOutState+0x28>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	605a      	str	r2, [r3, #4]
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20002b9c 	.word	0x20002b9c
 8009aa0:	20002b88 	.word	0x20002b88

08009aa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	613b      	str	r3, [r7, #16]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60fb      	str	r3, [r7, #12]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ae6:	f000 fe7d 	bl	800a7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009aea:	4b1d      	ldr	r3, [pc, #116]	; (8009b60 <xTaskCheckForTimeOut+0xbc>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b02:	d102      	bne.n	8009b0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61fb      	str	r3, [r7, #28]
 8009b08:	e023      	b.n	8009b52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	4b15      	ldr	r3, [pc, #84]	; (8009b64 <xTaskCheckForTimeOut+0xc0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d007      	beq.n	8009b26 <xTaskCheckForTimeOut+0x82>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d302      	bcc.n	8009b26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b20:	2301      	movs	r3, #1
 8009b22:	61fb      	str	r3, [r7, #28]
 8009b24:	e015      	b.n	8009b52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d20b      	bcs.n	8009b48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	1ad2      	subs	r2, r2, r3
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff ff9b 	bl	8009a78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	e004      	b.n	8009b52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b52:	f000 fe77 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8009b56:	69fb      	ldr	r3, [r7, #28]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20002b88 	.word	0x20002b88
 8009b64:	20002b9c 	.word	0x20002b9c

08009b68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b6c:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <vTaskMissedYield+0x14>)
 8009b6e:	2201      	movs	r2, #1
 8009b70:	601a      	str	r2, [r3, #0]
}
 8009b72:	bf00      	nop
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	20002b98 	.word	0x20002b98

08009b80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b88:	f000 f852 	bl	8009c30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <prvIdleTask+0x28>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d9f9      	bls.n	8009b88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <prvIdleTask+0x2c>)
 8009b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ba4:	e7f0      	b.n	8009b88 <prvIdleTask+0x8>
 8009ba6:	bf00      	nop
 8009ba8:	200026b4 	.word	0x200026b4
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	607b      	str	r3, [r7, #4]
 8009bba:	e00c      	b.n	8009bd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4a12      	ldr	r2, [pc, #72]	; (8009c10 <prvInitialiseTaskLists+0x60>)
 8009bc8:	4413      	add	r3, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe fcf0 	bl	80085b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	607b      	str	r3, [r7, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b37      	cmp	r3, #55	; 0x37
 8009bda:	d9ef      	bls.n	8009bbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bdc:	480d      	ldr	r0, [pc, #52]	; (8009c14 <prvInitialiseTaskLists+0x64>)
 8009bde:	f7fe fce7 	bl	80085b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009be2:	480d      	ldr	r0, [pc, #52]	; (8009c18 <prvInitialiseTaskLists+0x68>)
 8009be4:	f7fe fce4 	bl	80085b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009be8:	480c      	ldr	r0, [pc, #48]	; (8009c1c <prvInitialiseTaskLists+0x6c>)
 8009bea:	f7fe fce1 	bl	80085b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bee:	480c      	ldr	r0, [pc, #48]	; (8009c20 <prvInitialiseTaskLists+0x70>)
 8009bf0:	f7fe fcde 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009bf4:	480b      	ldr	r0, [pc, #44]	; (8009c24 <prvInitialiseTaskLists+0x74>)
 8009bf6:	f7fe fcdb 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009bfa:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <prvInitialiseTaskLists+0x78>)
 8009bfc:	4a05      	ldr	r2, [pc, #20]	; (8009c14 <prvInitialiseTaskLists+0x64>)
 8009bfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c00:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <prvInitialiseTaskLists+0x7c>)
 8009c02:	4a05      	ldr	r2, [pc, #20]	; (8009c18 <prvInitialiseTaskLists+0x68>)
 8009c04:	601a      	str	r2, [r3, #0]
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	200026b4 	.word	0x200026b4
 8009c14:	20002b14 	.word	0x20002b14
 8009c18:	20002b28 	.word	0x20002b28
 8009c1c:	20002b44 	.word	0x20002b44
 8009c20:	20002b58 	.word	0x20002b58
 8009c24:	20002b70 	.word	0x20002b70
 8009c28:	20002b3c 	.word	0x20002b3c
 8009c2c:	20002b40 	.word	0x20002b40

08009c30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c36:	e019      	b.n	8009c6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c38:	f000 fdd4 	bl	800a7e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c3c:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <prvCheckTasksWaitingTermination+0x50>)
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3304      	adds	r3, #4
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fd3b 	bl	80086c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <prvCheckTasksWaitingTermination+0x54>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	4a0b      	ldr	r2, [pc, #44]	; (8009c84 <prvCheckTasksWaitingTermination+0x54>)
 8009c56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c58:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <prvCheckTasksWaitingTermination+0x58>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <prvCheckTasksWaitingTermination+0x58>)
 8009c60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c62:	f000 fdef 	bl	800a844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f810 	bl	8009c8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c6c:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <prvCheckTasksWaitingTermination+0x58>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e1      	bne.n	8009c38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20002b58 	.word	0x20002b58
 8009c84:	20002b84 	.word	0x20002b84
 8009c88:	20002b6c 	.word	0x20002b6c

08009c8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d108      	bne.n	8009cb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 ff8c 	bl	800abc0 <vPortFree>
				vPortFree( pxTCB );
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 ff89 	bl	800abc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cae:	e018      	b.n	8009ce2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d103      	bne.n	8009cc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 ff80 	bl	800abc0 <vPortFree>
	}
 8009cc0:	e00f      	b.n	8009ce2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d00a      	beq.n	8009ce2 <prvDeleteTCB+0x56>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	60fb      	str	r3, [r7, #12]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <prvDeleteTCB+0x54>
	}
 8009ce2:	bf00      	nop
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <prvResetNextTaskUnblockTime+0x38>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <prvResetNextTaskUnblockTime+0x3c>)
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d04:	e008      	b.n	8009d18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d06:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <prvResetNextTaskUnblockTime+0x38>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	4a04      	ldr	r2, [pc, #16]	; (8009d28 <prvResetNextTaskUnblockTime+0x3c>)
 8009d16:	6013      	str	r3, [r2, #0]
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	20002b3c 	.word	0x20002b3c
 8009d28:	20002ba4 	.word	0x20002ba4

08009d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d32:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <xTaskGetSchedulerState+0x34>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d102      	bne.n	8009d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	607b      	str	r3, [r7, #4]
 8009d3e:	e008      	b.n	8009d52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d40:	4b08      	ldr	r3, [pc, #32]	; (8009d64 <xTaskGetSchedulerState+0x38>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d48:	2302      	movs	r3, #2
 8009d4a:	607b      	str	r3, [r7, #4]
 8009d4c:	e001      	b.n	8009d52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d52:	687b      	ldr	r3, [r7, #4]
	}
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	20002b90 	.word	0x20002b90
 8009d64:	20002bac 	.word	0x20002bac

08009d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d056      	beq.n	8009e2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <xTaskPriorityDisinherit+0xd0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d00a      	beq.n	8009d9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	60fb      	str	r3, [r7, #12]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10a      	bne.n	8009dbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	60bb      	str	r3, [r7, #8]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc0:	1e5a      	subs	r2, r3, #1
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d02c      	beq.n	8009e2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d128      	bne.n	8009e2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fc70 	bl	80086c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	; (8009e3c <xTaskPriorityDisinherit+0xd4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d903      	bls.n	8009e0c <xTaskPriorityDisinherit+0xa4>
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	4a0c      	ldr	r2, [pc, #48]	; (8009e3c <xTaskPriorityDisinherit+0xd4>)
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <xTaskPriorityDisinherit+0xd8>)
 8009e1a:	441a      	add	r2, r3
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f7fe fbf1 	bl	800860a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e2c:	697b      	ldr	r3, [r7, #20]
	}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200026b0 	.word	0x200026b0
 8009e3c:	20002b8c 	.word	0x20002b8c
 8009e40:	200026b4 	.word	0x200026b4

08009e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e4e:	4b21      	ldr	r3, [pc, #132]	; (8009ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e54:	4b20      	ldr	r3, [pc, #128]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe fc32 	bl	80086c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e66:	d10a      	bne.n	8009e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d007      	beq.n	8009e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e6e:	4b1a      	ldr	r3, [pc, #104]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4819      	ldr	r0, [pc, #100]	; (8009edc <prvAddCurrentTaskToDelayedList+0x98>)
 8009e78:	f7fe fbc7 	bl	800860a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e7c:	e026      	b.n	8009ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d209      	bcs.n	8009eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e96:	4b12      	ldr	r3, [pc, #72]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	f7fe fbd5 	bl	8008652 <vListInsert>
}
 8009ea8:	e010      	b.n	8009ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eaa:	4b0e      	ldr	r3, [pc, #56]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fe fbcb 	bl	8008652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d202      	bcs.n	8009ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ec6:	4a08      	ldr	r2, [pc, #32]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	6013      	str	r3, [r2, #0]
}
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20002b88 	.word	0x20002b88
 8009ed8:	200026b0 	.word	0x200026b0
 8009edc:	20002b70 	.word	0x20002b70
 8009ee0:	20002b40 	.word	0x20002b40
 8009ee4:	20002b3c 	.word	0x20002b3c
 8009ee8:	20002ba4 	.word	0x20002ba4

08009eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	; 0x28
 8009ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ef6:	f000 fb07 	bl	800a508 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009efa:	4b1c      	ldr	r3, [pc, #112]	; (8009f6c <xTimerCreateTimerTask+0x80>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d021      	beq.n	8009f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f0a:	1d3a      	adds	r2, r7, #4
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	f107 030c 	add.w	r3, r7, #12
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fb31 	bl	800857c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	9202      	str	r2, [sp, #8]
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	2302      	movs	r3, #2
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	460a      	mov	r2, r1
 8009f2c:	4910      	ldr	r1, [pc, #64]	; (8009f70 <xTimerCreateTimerTask+0x84>)
 8009f2e:	4811      	ldr	r0, [pc, #68]	; (8009f74 <xTimerCreateTimerTask+0x88>)
 8009f30:	f7ff f8de 	bl	80090f0 <xTaskCreateStatic>
 8009f34:	4603      	mov	r3, r0
 8009f36:	4a10      	ldr	r2, [pc, #64]	; (8009f78 <xTimerCreateTimerTask+0x8c>)
 8009f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f3a:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <xTimerCreateTimerTask+0x8c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f42:	2301      	movs	r3, #1
 8009f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10a      	bne.n	8009f62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	613b      	str	r3, [r7, #16]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f62:	697b      	ldr	r3, [r7, #20]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20002be0 	.word	0x20002be0
 8009f70:	0800af00 	.word	0x0800af00
 8009f74:	0800a0b1 	.word	0x0800a0b1
 8009f78:	20002be4 	.word	0x20002be4

08009f7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	; 0x28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	623b      	str	r3, [r7, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009faa:	4b1a      	ldr	r3, [pc, #104]	; (800a014 <xTimerGenericCommand+0x98>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d02a      	beq.n	800a008 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b05      	cmp	r3, #5
 8009fc2:	dc18      	bgt.n	8009ff6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fc4:	f7ff feb2 	bl	8009d2c <xTaskGetSchedulerState>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d109      	bne.n	8009fe2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fce:	4b11      	ldr	r3, [pc, #68]	; (800a014 <xTimerGenericCommand+0x98>)
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	f107 0110 	add.w	r1, r7, #16
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fda:	f7fe fca1 	bl	8008920 <xQueueGenericSend>
 8009fde:	6278      	str	r0, [r7, #36]	; 0x24
 8009fe0:	e012      	b.n	800a008 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <xTimerGenericCommand+0x98>)
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	f107 0110 	add.w	r1, r7, #16
 8009fea:	2300      	movs	r3, #0
 8009fec:	2200      	movs	r2, #0
 8009fee:	f7fe fc97 	bl	8008920 <xQueueGenericSend>
 8009ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ff4:	e008      	b.n	800a008 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ff6:	4b07      	ldr	r3, [pc, #28]	; (800a014 <xTimerGenericCommand+0x98>)
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f107 0110 	add.w	r1, r7, #16
 8009ffe:	2300      	movs	r3, #0
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	f7fe fd8b 	bl	8008b1c <xQueueGenericSendFromISR>
 800a006:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3728      	adds	r7, #40	; 0x28
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20002be0 	.word	0x20002be0

0800a018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a022:	4b22      	ldr	r3, [pc, #136]	; (800a0ac <prvProcessExpiredTimer+0x94>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	3304      	adds	r3, #4
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fb47 	bl	80086c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d022      	beq.n	800a08a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	18d1      	adds	r1, r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	6978      	ldr	r0, [r7, #20]
 800a052:	f000 f8d1 	bl	800a1f8 <prvInsertTimerInActiveList>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01f      	beq.n	800a09c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a05c:	2300      	movs	r3, #0
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2300      	movs	r3, #0
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	2100      	movs	r1, #0
 800a066:	6978      	ldr	r0, [r7, #20]
 800a068:	f7ff ff88 	bl	8009f7c <xTimerGenericCommand>
 800a06c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d113      	bne.n	800a09c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60fb      	str	r3, [r7, #12]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a090:	f023 0301 	bic.w	r3, r3, #1
 800a094:	b2da      	uxtb	r2, r3
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	6978      	ldr	r0, [r7, #20]
 800a0a2:	4798      	blx	r3
}
 800a0a4:	bf00      	nop
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20002bd8 	.word	0x20002bd8

0800a0b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0b8:	f107 0308 	add.w	r3, r7, #8
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 f857 	bl	800a170 <prvGetNextExpireTime>
 800a0c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 f803 	bl	800a0d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0ce:	f000 f8d5 	bl	800a27c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0d2:	e7f1      	b.n	800a0b8 <prvTimerTask+0x8>

0800a0d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0de:	f7ff fa43 	bl	8009568 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f866 	bl	800a1b8 <prvSampleTimeNow>
 800a0ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d130      	bne.n	800a156 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10a      	bne.n	800a110 <prvProcessTimerOrBlockTask+0x3c>
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d806      	bhi.n	800a110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a102:	f7ff fa3f 	bl	8009584 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a106:	68f9      	ldr	r1, [r7, #12]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff ff85 	bl	800a018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a10e:	e024      	b.n	800a15a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d008      	beq.n	800a128 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a116:	4b13      	ldr	r3, [pc, #76]	; (800a164 <prvProcessTimerOrBlockTask+0x90>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <prvProcessTimerOrBlockTask+0x50>
 800a120:	2301      	movs	r3, #1
 800a122:	e000      	b.n	800a126 <prvProcessTimerOrBlockTask+0x52>
 800a124:	2300      	movs	r3, #0
 800a126:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a128:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <prvProcessTimerOrBlockTask+0x94>)
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	4619      	mov	r1, r3
 800a136:	f7fe ffa7 	bl	8009088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a13a:	f7ff fa23 	bl	8009584 <xTaskResumeAll>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10a      	bne.n	800a15a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a144:	4b09      	ldr	r3, [pc, #36]	; (800a16c <prvProcessTimerOrBlockTask+0x98>)
 800a146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	f3bf 8f6f 	isb	sy
}
 800a154:	e001      	b.n	800a15a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a156:	f7ff fa15 	bl	8009584 <xTaskResumeAll>
}
 800a15a:	bf00      	nop
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20002bdc 	.word	0x20002bdc
 800a168:	20002be0 	.word	0x20002be0
 800a16c:	e000ed04 	.word	0xe000ed04

0800a170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a178:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <prvGetNextExpireTime+0x44>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <prvGetNextExpireTime+0x16>
 800a182:	2201      	movs	r2, #1
 800a184:	e000      	b.n	800a188 <prvGetNextExpireTime+0x18>
 800a186:	2200      	movs	r2, #0
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <prvGetNextExpireTime+0x44>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	60fb      	str	r3, [r7, #12]
 800a19e:	e001      	b.n	800a1a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	20002bd8 	.word	0x20002bd8

0800a1b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1c0:	f7ff fa7e 	bl	80096c0 <xTaskGetTickCount>
 800a1c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <prvSampleTimeNow+0x3c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d205      	bcs.n	800a1dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1d0:	f000 f936 	bl	800a440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1e2:	4a04      	ldr	r2, [pc, #16]	; (800a1f4 <prvSampleTimeNow+0x3c>)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20002be8 	.word	0x20002be8

0800a1f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a206:	2300      	movs	r3, #0
 800a208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d812      	bhi.n	800a244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	1ad2      	subs	r2, r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d302      	bcc.n	800a232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a22c:	2301      	movs	r3, #1
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	e01b      	b.n	800a26a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a232:	4b10      	ldr	r3, [pc, #64]	; (800a274 <prvInsertTimerInActiveList+0x7c>)
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3304      	adds	r3, #4
 800a23a:	4619      	mov	r1, r3
 800a23c:	4610      	mov	r0, r2
 800a23e:	f7fe fa08 	bl	8008652 <vListInsert>
 800a242:	e012      	b.n	800a26a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d206      	bcs.n	800a25a <prvInsertTimerInActiveList+0x62>
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d302      	bcc.n	800a25a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a254:	2301      	movs	r3, #1
 800a256:	617b      	str	r3, [r7, #20]
 800a258:	e007      	b.n	800a26a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a25a:	4b07      	ldr	r3, [pc, #28]	; (800a278 <prvInsertTimerInActiveList+0x80>)
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3304      	adds	r3, #4
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f7fe f9f4 	bl	8008652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a26a:	697b      	ldr	r3, [r7, #20]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20002bdc 	.word	0x20002bdc
 800a278:	20002bd8 	.word	0x20002bd8

0800a27c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08e      	sub	sp, #56	; 0x38
 800a280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a282:	e0ca      	b.n	800a41a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	da18      	bge.n	800a2bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a28a:	1d3b      	adds	r3, r7, #4
 800a28c:	3304      	adds	r3, #4
 800a28e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	61fb      	str	r3, [r7, #28]
}
 800a2a8:	bf00      	nop
 800a2aa:	e7fe      	b.n	800a2aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b2:	6850      	ldr	r0, [r2, #4]
 800a2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b6:	6892      	ldr	r2, [r2, #8]
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f2c0 80aa 	blt.w	800a418 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d004      	beq.n	800a2da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe f9f5 	bl	80086c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2da:	463b      	mov	r3, r7
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff ff6b 	bl	800a1b8 <prvSampleTimeNow>
 800a2e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b09      	cmp	r3, #9
 800a2e8:	f200 8097 	bhi.w	800a41a <prvProcessReceivedCommands+0x19e>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <prvProcessReceivedCommands+0x78>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a31d 	.word	0x0800a31d
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a31d 	.word	0x0800a31d
 800a300:	0800a391 	.word	0x0800a391
 800a304:	0800a3a5 	.word	0x0800a3a5
 800a308:	0800a3ef 	.word	0x0800a3ef
 800a30c:	0800a31d 	.word	0x0800a31d
 800a310:	0800a31d 	.word	0x0800a31d
 800a314:	0800a391 	.word	0x0800a391
 800a318:	0800a3a5 	.word	0x0800a3a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a322:	f043 0301 	orr.w	r3, r3, #1
 800a326:	b2da      	uxtb	r2, r3
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	18d1      	adds	r1, r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33c:	f7ff ff5c 	bl	800a1f8 <prvInsertTimerInActiveList>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d069      	beq.n	800a41a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a34c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d05e      	beq.n	800a41a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	441a      	add	r2, r3
 800a364:	2300      	movs	r3, #0
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	2300      	movs	r3, #0
 800a36a:	2100      	movs	r1, #0
 800a36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a36e:	f7ff fe05 	bl	8009f7c <xTimerGenericCommand>
 800a372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d14f      	bne.n	800a41a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	61bb      	str	r3, [r7, #24]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a3a2:	e03a      	b.n	800a41a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3aa:	f043 0301 	orr.w	r3, r3, #1
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	617b      	str	r3, [r7, #20]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	699a      	ldr	r2, [r3, #24]
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	18d1      	adds	r1, r2, r3
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e8:	f7ff ff06 	bl	800a1f8 <prvInsertTimerInActiveList>
					break;
 800a3ec:	e015      	b.n	800a41a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d103      	bne.n	800a404 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a3fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fe:	f000 fbdf 	bl	800abc0 <vPortFree>
 800a402:	e00a      	b.n	800a41a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a40a:	f023 0301 	bic.w	r3, r3, #1
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a416:	e000      	b.n	800a41a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a418:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a41a:	4b08      	ldr	r3, [pc, #32]	; (800a43c <prvProcessReceivedCommands+0x1c0>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	1d39      	adds	r1, r7, #4
 800a420:	2200      	movs	r2, #0
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fc16 	bl	8008c54 <xQueueReceive>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f47f af2a 	bne.w	800a284 <prvProcessReceivedCommands+0x8>
	}
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	3730      	adds	r7, #48	; 0x30
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	20002be0 	.word	0x20002be0

0800a440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a446:	e048      	b.n	800a4da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a448:	4b2d      	ldr	r3, [pc, #180]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a452:	4b2b      	ldr	r3, [pc, #172]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3304      	adds	r3, #4
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe f92f 	bl	80086c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d02e      	beq.n	800a4da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	4413      	add	r3, r2
 800a484:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d90e      	bls.n	800a4ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a49a:	4b19      	ldr	r3, [pc, #100]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7fe f8d4 	bl	8008652 <vListInsert>
 800a4aa:	e016      	b.n	800a4da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f7ff fd60 	bl	8009f7c <xTimerGenericCommand>
 800a4bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10a      	bne.n	800a4da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	603b      	str	r3, [r7, #0]
}
 800a4d6:	bf00      	nop
 800a4d8:	e7fe      	b.n	800a4d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1b1      	bne.n	800a448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4ea:	4b06      	ldr	r3, [pc, #24]	; (800a504 <prvSwitchTimerLists+0xc4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a04      	ldr	r2, [pc, #16]	; (800a500 <prvSwitchTimerLists+0xc0>)
 800a4f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4f2:	4a04      	ldr	r2, [pc, #16]	; (800a504 <prvSwitchTimerLists+0xc4>)
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	6013      	str	r3, [r2, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20002bd8 	.word	0x20002bd8
 800a504:	20002bdc 	.word	0x20002bdc

0800a508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a50e:	f000 f969 	bl	800a7e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <prvCheckForValidListAndQueue+0x60>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d120      	bne.n	800a55c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a51a:	4814      	ldr	r0, [pc, #80]	; (800a56c <prvCheckForValidListAndQueue+0x64>)
 800a51c:	f7fe f848 	bl	80085b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a520:	4813      	ldr	r0, [pc, #76]	; (800a570 <prvCheckForValidListAndQueue+0x68>)
 800a522:	f7fe f845 	bl	80085b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a526:	4b13      	ldr	r3, [pc, #76]	; (800a574 <prvCheckForValidListAndQueue+0x6c>)
 800a528:	4a10      	ldr	r2, [pc, #64]	; (800a56c <prvCheckForValidListAndQueue+0x64>)
 800a52a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a52c:	4b12      	ldr	r3, [pc, #72]	; (800a578 <prvCheckForValidListAndQueue+0x70>)
 800a52e:	4a10      	ldr	r2, [pc, #64]	; (800a570 <prvCheckForValidListAndQueue+0x68>)
 800a530:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a532:	2300      	movs	r3, #0
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	4b11      	ldr	r3, [pc, #68]	; (800a57c <prvCheckForValidListAndQueue+0x74>)
 800a538:	4a11      	ldr	r2, [pc, #68]	; (800a580 <prvCheckForValidListAndQueue+0x78>)
 800a53a:	2110      	movs	r1, #16
 800a53c:	200a      	movs	r0, #10
 800a53e:	f7fe f953 	bl	80087e8 <xQueueGenericCreateStatic>
 800a542:	4603      	mov	r3, r0
 800a544:	4a08      	ldr	r2, [pc, #32]	; (800a568 <prvCheckForValidListAndQueue+0x60>)
 800a546:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <prvCheckForValidListAndQueue+0x60>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d005      	beq.n	800a55c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a550:	4b05      	ldr	r3, [pc, #20]	; (800a568 <prvCheckForValidListAndQueue+0x60>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	490b      	ldr	r1, [pc, #44]	; (800a584 <prvCheckForValidListAndQueue+0x7c>)
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe fd6c 	bl	8009034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a55c:	f000 f972 	bl	800a844 <vPortExitCritical>
}
 800a560:	bf00      	nop
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20002be0 	.word	0x20002be0
 800a56c:	20002bb0 	.word	0x20002bb0
 800a570:	20002bc4 	.word	0x20002bc4
 800a574:	20002bd8 	.word	0x20002bd8
 800a578:	20002bdc 	.word	0x20002bdc
 800a57c:	20002c8c 	.word	0x20002c8c
 800a580:	20002bec 	.word	0x20002bec
 800a584:	0800af08 	.word	0x0800af08

0800a588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3b04      	subs	r3, #4
 800a598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3b04      	subs	r3, #4
 800a5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f023 0201 	bic.w	r2, r3, #1
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3b04      	subs	r3, #4
 800a5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5b8:	4a0c      	ldr	r2, [pc, #48]	; (800a5ec <pxPortInitialiseStack+0x64>)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3b14      	subs	r3, #20
 800a5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3b04      	subs	r3, #4
 800a5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f06f 0202 	mvn.w	r2, #2
 800a5d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3b20      	subs	r3, #32
 800a5dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5de:	68fb      	ldr	r3, [r7, #12]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	0800a5f1 	.word	0x0800a5f1

0800a5f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5fa:	4b12      	ldr	r3, [pc, #72]	; (800a644 <prvTaskExitError+0x54>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a602:	d00a      	beq.n	800a61a <prvTaskExitError+0x2a>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	60fb      	str	r3, [r7, #12]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <prvTaskExitError+0x28>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	60bb      	str	r3, [r7, #8]
}
 800a62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a62e:	bf00      	nop
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d0fc      	beq.n	800a630 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a636:	bf00      	nop
 800a638:	bf00      	nop
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	2000002c 	.word	0x2000002c
	...

0800a650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <pxCurrentTCBConst2>)
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	6808      	ldr	r0, [r1, #0]
 800a656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65a:	f380 8809 	msr	PSP, r0
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8811 	msr	BASEPRI, r0
 800a66a:	4770      	bx	lr
 800a66c:	f3af 8000 	nop.w

0800a670 <pxCurrentTCBConst2>:
 800a670:	200026b0 	.word	0x200026b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop

0800a678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a678:	4808      	ldr	r0, [pc, #32]	; (800a69c <prvPortStartFirstTask+0x24>)
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	6800      	ldr	r0, [r0, #0]
 800a67e:	f380 8808 	msr	MSP, r0
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8814 	msr	CONTROL, r0
 800a68a:	b662      	cpsie	i
 800a68c:	b661      	cpsie	f
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	df00      	svc	0
 800a698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a69a:	bf00      	nop
 800a69c:	e000ed08 	.word	0xe000ed08

0800a6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6a6:	4b46      	ldr	r3, [pc, #280]	; (800a7c0 <xPortStartScheduler+0x120>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a46      	ldr	r2, [pc, #280]	; (800a7c4 <xPortStartScheduler+0x124>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d10a      	bne.n	800a6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	613b      	str	r3, [r7, #16]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6c6:	4b3e      	ldr	r3, [pc, #248]	; (800a7c0 <xPortStartScheduler+0x120>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a3f      	ldr	r2, [pc, #252]	; (800a7c8 <xPortStartScheduler+0x128>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d10a      	bne.n	800a6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	60fb      	str	r3, [r7, #12]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6e6:	4b39      	ldr	r3, [pc, #228]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	22ff      	movs	r2, #255	; 0xff
 800a6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	4b31      	ldr	r3, [pc, #196]	; (800a7d0 <xPortStartScheduler+0x130>)
 800a70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a70e:	4b31      	ldr	r3, [pc, #196]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a710:	2207      	movs	r2, #7
 800a712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a714:	e009      	b.n	800a72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	4a2d      	ldr	r2, [pc, #180]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	b2db      	uxtb	r3, r3
 800a728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a72a:	78fb      	ldrb	r3, [r7, #3]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a732:	2b80      	cmp	r3, #128	; 0x80
 800a734:	d0ef      	beq.n	800a716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a736:	4b27      	ldr	r3, [pc, #156]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f1c3 0307 	rsb	r3, r3, #7
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d00a      	beq.n	800a758 <xPortStartScheduler+0xb8>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	60bb      	str	r3, [r7, #8]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a758:	4b1e      	ldr	r3, [pc, #120]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	4a1d      	ldr	r2, [pc, #116]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a762:	4b1c      	ldr	r3, [pc, #112]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a76a:	4a1a      	ldr	r2, [pc, #104]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	b2da      	uxtb	r2, r3
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a776:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a782:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a14      	ldr	r2, [pc, #80]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a78e:	f000 f8dd 	bl	800a94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a792:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <xPortStartScheduler+0x13c>)
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a798:	f000 f8fc 	bl	800a994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a79c:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <xPortStartScheduler+0x140>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a0f      	ldr	r2, [pc, #60]	; (800a7e0 <xPortStartScheduler+0x140>)
 800a7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7a8:	f7ff ff66 	bl	800a678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7ac:	f7ff f852 	bl	8009854 <vTaskSwitchContext>
	prvTaskExitError();
 800a7b0:	f7ff ff1e 	bl	800a5f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	e000ed00 	.word	0xe000ed00
 800a7c4:	410fc271 	.word	0x410fc271
 800a7c8:	410fc270 	.word	0x410fc270
 800a7cc:	e000e400 	.word	0xe000e400
 800a7d0:	20002cdc 	.word	0x20002cdc
 800a7d4:	20002ce0 	.word	0x20002ce0
 800a7d8:	e000ed20 	.word	0xe000ed20
 800a7dc:	2000002c 	.word	0x2000002c
 800a7e0:	e000ef34 	.word	0xe000ef34

0800a7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	607b      	str	r3, [r7, #4]
}
 800a7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7fe:	4b0f      	ldr	r3, [pc, #60]	; (800a83c <vPortEnterCritical+0x58>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3301      	adds	r3, #1
 800a804:	4a0d      	ldr	r2, [pc, #52]	; (800a83c <vPortEnterCritical+0x58>)
 800a806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a808:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <vPortEnterCritical+0x58>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d10f      	bne.n	800a830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a810:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <vPortEnterCritical+0x5c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <vPortEnterCritical+0x4c>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	603b      	str	r3, [r7, #0]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <vPortEnterCritical+0x4a>
	}
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	2000002c 	.word	0x2000002c
 800a840:	e000ed04 	.word	0xe000ed04

0800a844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <vPortExitCritical+0x50>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <vPortExitCritical+0x24>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	607b      	str	r3, [r7, #4]
}
 800a864:	bf00      	nop
 800a866:	e7fe      	b.n	800a866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a868:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <vPortExitCritical+0x50>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	4a09      	ldr	r2, [pc, #36]	; (800a894 <vPortExitCritical+0x50>)
 800a870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a872:	4b08      	ldr	r3, [pc, #32]	; (800a894 <vPortExitCritical+0x50>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <vPortExitCritical+0x42>
 800a87a:	2300      	movs	r3, #0
 800a87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	f383 8811 	msr	BASEPRI, r3
}
 800a884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	2000002c 	.word	0x2000002c
	...

0800a8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b15      	ldr	r3, [pc, #84]	; (800a900 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f01e 0f10 	tst.w	lr, #16
 800a8b0:	bf08      	it	eq
 800a8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8c4:	f380 8811 	msr	BASEPRI, r0
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f7fe ffc0 	bl	8009854 <vTaskSwitchContext>
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f380 8811 	msr	BASEPRI, r0
 800a8dc:	bc09      	pop	{r0, r3}
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	6808      	ldr	r0, [r1, #0]
 800a8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	f01e 0f10 	tst.w	lr, #16
 800a8ea:	bf08      	it	eq
 800a8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8f0:	f380 8809 	msr	PSP, r0
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w

0800a900 <pxCurrentTCBConst>:
 800a900:	200026b0 	.word	0x200026b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
}
 800a920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a922:	f7fe fedd 	bl	80096e0 <xTaskIncrementTick>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a92c:	4b06      	ldr	r3, [pc, #24]	; (800a948 <xPortSysTickHandler+0x40>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	2300      	movs	r3, #0
 800a936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f383 8811 	msr	BASEPRI, r3
}
 800a93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a956:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <vPortSetupTimerInterrupt+0x38>)
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <vPortSetupTimerInterrupt+0x3c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <vPortSetupTimerInterrupt+0x40>)
 800a962:	fba2 2303 	umull	r2, r3, r2, r3
 800a966:	099b      	lsrs	r3, r3, #6
 800a968:	4a09      	ldr	r2, [pc, #36]	; (800a990 <vPortSetupTimerInterrupt+0x44>)
 800a96a:	3b01      	subs	r3, #1
 800a96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a96e:	4b04      	ldr	r3, [pc, #16]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a970:	2207      	movs	r2, #7
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	e000e010 	.word	0xe000e010
 800a984:	e000e018 	.word	0xe000e018
 800a988:	20000000 	.word	0x20000000
 800a98c:	10624dd3 	.word	0x10624dd3
 800a990:	e000e014 	.word	0xe000e014

0800a994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9a4 <vPortEnableVFP+0x10>
 800a998:	6801      	ldr	r1, [r0, #0]
 800a99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a99e:	6001      	str	r1, [r0, #0]
 800a9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9a2:	bf00      	nop
 800a9a4:	e000ed88 	.word	0xe000ed88

0800a9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ae:	f3ef 8305 	mrs	r3, IPSR
 800a9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b0f      	cmp	r3, #15
 800a9b8:	d914      	bls.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ba:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <vPortValidateInterruptPriority+0x70>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c4:	4b15      	ldr	r3, [pc, #84]	; (800aa1c <vPortValidateInterruptPriority+0x74>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	7afa      	ldrb	r2, [r7, #11]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d20a      	bcs.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	607b      	str	r3, [r7, #4]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <vPortValidateInterruptPriority+0x78>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9ec:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <vPortValidateInterruptPriority+0x7c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d90a      	bls.n	800aa0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	603b      	str	r3, [r7, #0]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <vPortValidateInterruptPriority+0x60>
	}
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	e000e3f0 	.word	0xe000e3f0
 800aa1c:	20002cdc 	.word	0x20002cdc
 800aa20:	e000ed0c 	.word	0xe000ed0c
 800aa24:	20002ce0 	.word	0x20002ce0

0800aa28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	; 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa34:	f7fe fd98 	bl	8009568 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa38:	4b5b      	ldr	r3, [pc, #364]	; (800aba8 <pvPortMalloc+0x180>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa40:	f000 f920 	bl	800ac84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa44:	4b59      	ldr	r3, [pc, #356]	; (800abac <pvPortMalloc+0x184>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f040 8093 	bne.w	800ab78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d01d      	beq.n	800aa94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa58:	2208      	movs	r2, #8
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d014      	beq.n	800aa94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f023 0307 	bic.w	r3, r3, #7
 800aa70:	3308      	adds	r3, #8
 800aa72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <pvPortMalloc+0x6c>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	617b      	str	r3, [r7, #20]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d06e      	beq.n	800ab78 <pvPortMalloc+0x150>
 800aa9a:	4b45      	ldr	r3, [pc, #276]	; (800abb0 <pvPortMalloc+0x188>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d869      	bhi.n	800ab78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaa4:	4b43      	ldr	r3, [pc, #268]	; (800abb4 <pvPortMalloc+0x18c>)
 800aaa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aaa8:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <pvPortMalloc+0x18c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaae:	e004      	b.n	800aaba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d903      	bls.n	800aacc <pvPortMalloc+0xa4>
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f1      	bne.n	800aab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aacc:	4b36      	ldr	r3, [pc, #216]	; (800aba8 <pvPortMalloc+0x180>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d050      	beq.n	800ab78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2208      	movs	r2, #8
 800aadc:	4413      	add	r3, r2
 800aade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	1ad2      	subs	r2, r2, r3
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d91f      	bls.n	800ab38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4413      	add	r3, r2
 800aafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <pvPortMalloc+0xf8>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	613b      	str	r3, [r7, #16]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	1ad2      	subs	r2, r2, r3
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab32:	69b8      	ldr	r0, [r7, #24]
 800ab34:	f000 f908 	bl	800ad48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab38:	4b1d      	ldr	r3, [pc, #116]	; (800abb0 <pvPortMalloc+0x188>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	4a1b      	ldr	r2, [pc, #108]	; (800abb0 <pvPortMalloc+0x188>)
 800ab44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab46:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <pvPortMalloc+0x188>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <pvPortMalloc+0x190>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d203      	bcs.n	800ab5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab52:	4b17      	ldr	r3, [pc, #92]	; (800abb0 <pvPortMalloc+0x188>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a18      	ldr	r2, [pc, #96]	; (800abb8 <pvPortMalloc+0x190>)
 800ab58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	4b13      	ldr	r3, [pc, #76]	; (800abac <pvPortMalloc+0x184>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	431a      	orrs	r2, r3
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab6e:	4b13      	ldr	r3, [pc, #76]	; (800abbc <pvPortMalloc+0x194>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3301      	adds	r3, #1
 800ab74:	4a11      	ldr	r2, [pc, #68]	; (800abbc <pvPortMalloc+0x194>)
 800ab76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab78:	f7fe fd04 	bl	8009584 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	f003 0307 	and.w	r3, r3, #7
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <pvPortMalloc+0x174>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60fb      	str	r3, [r7, #12]
}
 800ab98:	bf00      	nop
 800ab9a:	e7fe      	b.n	800ab9a <pvPortMalloc+0x172>
	return pvReturn;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3728      	adds	r7, #40	; 0x28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	200068ec 	.word	0x200068ec
 800abac:	20006900 	.word	0x20006900
 800abb0:	200068f0 	.word	0x200068f0
 800abb4:	200068e4 	.word	0x200068e4
 800abb8:	200068f4 	.word	0x200068f4
 800abbc:	200068f8 	.word	0x200068f8

0800abc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d04d      	beq.n	800ac6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abd2:	2308      	movs	r3, #8
 800abd4:	425b      	negs	r3, r3
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	4413      	add	r3, r2
 800abda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <vPortFree+0xb8>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4013      	ands	r3, r2
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <vPortFree+0x44>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	60fb      	str	r3, [r7, #12]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00a      	beq.n	800ac22 <vPortFree+0x62>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	60bb      	str	r3, [r7, #8]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	4b14      	ldr	r3, [pc, #80]	; (800ac78 <vPortFree+0xb8>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01e      	beq.n	800ac6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d11a      	bne.n	800ac6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	4b0e      	ldr	r3, [pc, #56]	; (800ac78 <vPortFree+0xb8>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	43db      	mvns	r3, r3
 800ac42:	401a      	ands	r2, r3
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac48:	f7fe fc8e 	bl	8009568 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <vPortFree+0xbc>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4413      	add	r3, r2
 800ac56:	4a09      	ldr	r2, [pc, #36]	; (800ac7c <vPortFree+0xbc>)
 800ac58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f000 f874 	bl	800ad48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <vPortFree+0xc0>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3301      	adds	r3, #1
 800ac66:	4a06      	ldr	r2, [pc, #24]	; (800ac80 <vPortFree+0xc0>)
 800ac68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac6a:	f7fe fc8b 	bl	8009584 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac6e:	bf00      	nop
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20006900 	.word	0x20006900
 800ac7c:	200068f0 	.word	0x200068f0
 800ac80:	200068fc 	.word	0x200068fc

0800ac84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac90:	4b27      	ldr	r3, [pc, #156]	; (800ad30 <prvHeapInit+0xac>)
 800ac92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f003 0307 	and.w	r3, r3, #7
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00c      	beq.n	800acb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3307      	adds	r3, #7
 800aca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f023 0307 	bic.w	r3, r3, #7
 800acaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <prvHeapInit+0xac>)
 800acb4:	4413      	add	r3, r2
 800acb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acbc:	4a1d      	ldr	r2, [pc, #116]	; (800ad34 <prvHeapInit+0xb0>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acc2:	4b1c      	ldr	r3, [pc, #112]	; (800ad34 <prvHeapInit+0xb0>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	4413      	add	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acd0:	2208      	movs	r2, #8
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 0307 	bic.w	r3, r3, #7
 800acde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <prvHeapInit+0xb4>)
 800ace4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ace6:	4b14      	ldr	r3, [pc, #80]	; (800ad38 <prvHeapInit+0xb4>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2200      	movs	r2, #0
 800acec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acee:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <prvHeapInit+0xb4>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad04:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <prvHeapInit+0xb4>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4a0a      	ldr	r2, [pc, #40]	; (800ad3c <prvHeapInit+0xb8>)
 800ad12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <prvHeapInit+0xbc>)
 800ad1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad1c:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <prvHeapInit+0xc0>)
 800ad1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad22:	601a      	str	r2, [r3, #0]
}
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	20002ce4 	.word	0x20002ce4
 800ad34:	200068e4 	.word	0x200068e4
 800ad38:	200068ec 	.word	0x200068ec
 800ad3c:	200068f4 	.word	0x200068f4
 800ad40:	200068f0 	.word	0x200068f0
 800ad44:	20006900 	.word	0x20006900

0800ad48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad50:	4b28      	ldr	r3, [pc, #160]	; (800adf4 <prvInsertBlockIntoFreeList+0xac>)
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	e002      	b.n	800ad5c <prvInsertBlockIntoFreeList+0x14>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d8f7      	bhi.n	800ad56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	4413      	add	r3, r2
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d108      	bne.n	800ad8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	441a      	add	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	441a      	add	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d118      	bne.n	800add0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <prvInsertBlockIntoFreeList+0xb0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d00d      	beq.n	800adc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	441a      	add	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	e008      	b.n	800add8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <prvInsertBlockIntoFreeList+0xb0>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	e003      	b.n	800add8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d002      	beq.n	800ade6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ade6:	bf00      	nop
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	200068e4 	.word	0x200068e4
 800adf8:	200068ec 	.word	0x200068ec

0800adfc <__libc_init_array>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	4d0d      	ldr	r5, [pc, #52]	; (800ae34 <__libc_init_array+0x38>)
 800ae00:	4c0d      	ldr	r4, [pc, #52]	; (800ae38 <__libc_init_array+0x3c>)
 800ae02:	1b64      	subs	r4, r4, r5
 800ae04:	10a4      	asrs	r4, r4, #2
 800ae06:	2600      	movs	r6, #0
 800ae08:	42a6      	cmp	r6, r4
 800ae0a:	d109      	bne.n	800ae20 <__libc_init_array+0x24>
 800ae0c:	4d0b      	ldr	r5, [pc, #44]	; (800ae3c <__libc_init_array+0x40>)
 800ae0e:	4c0c      	ldr	r4, [pc, #48]	; (800ae40 <__libc_init_array+0x44>)
 800ae10:	f000 f82e 	bl	800ae70 <_init>
 800ae14:	1b64      	subs	r4, r4, r5
 800ae16:	10a4      	asrs	r4, r4, #2
 800ae18:	2600      	movs	r6, #0
 800ae1a:	42a6      	cmp	r6, r4
 800ae1c:	d105      	bne.n	800ae2a <__libc_init_array+0x2e>
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae24:	4798      	blx	r3
 800ae26:	3601      	adds	r6, #1
 800ae28:	e7ee      	b.n	800ae08 <__libc_init_array+0xc>
 800ae2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2e:	4798      	blx	r3
 800ae30:	3601      	adds	r6, #1
 800ae32:	e7f2      	b.n	800ae1a <__libc_init_array+0x1e>
 800ae34:	0800b088 	.word	0x0800b088
 800ae38:	0800b088 	.word	0x0800b088
 800ae3c:	0800b088 	.word	0x0800b088
 800ae40:	0800b094 	.word	0x0800b094

0800ae44 <memcpy>:
 800ae44:	440a      	add	r2, r1
 800ae46:	4291      	cmp	r1, r2
 800ae48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae4c:	d100      	bne.n	800ae50 <memcpy+0xc>
 800ae4e:	4770      	bx	lr
 800ae50:	b510      	push	{r4, lr}
 800ae52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	d1f9      	bne.n	800ae52 <memcpy+0xe>
 800ae5e:	bd10      	pop	{r4, pc}

0800ae60 <memset>:
 800ae60:	4402      	add	r2, r0
 800ae62:	4603      	mov	r3, r0
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d100      	bne.n	800ae6a <memset+0xa>
 800ae68:	4770      	bx	lr
 800ae6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae6e:	e7f9      	b.n	800ae64 <memset+0x4>

0800ae70 <_init>:
 800ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae72:	bf00      	nop
 800ae74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae76:	bc08      	pop	{r3}
 800ae78:	469e      	mov	lr, r3
 800ae7a:	4770      	bx	lr

0800ae7c <_fini>:
 800ae7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7e:	bf00      	nop
 800ae80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae82:	bc08      	pop	{r3}
 800ae84:	469e      	mov	lr, r3
 800ae86:	4770      	bx	lr
