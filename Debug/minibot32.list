
minibot32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009118  08009118  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009118  08009118  00019118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009120  08009120  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000066b8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200066c8  200066c8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020592  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005344  00000000  00000000  000405d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00045918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001798  00000000  00000000  00047308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c3d  00000000  00000000  00048aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000218aa  00000000  00000000  000716dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db080  00000000  00000000  00092f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e007  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006814  00000000  00000000  0016e058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f10 	.word	0x08008f10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008f10 	.word	0x08008f10

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_CAN1_Init+0xc8>)
 80004dc:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <MX_CAN1_Init+0xcc>)
 80004de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e2:	2206      	movs	r2, #6
 80004e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_CAN1_Init+0xc8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_CAN1_Init+0xc8>)
 80004f4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80004f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_CAN1_Init+0xc8>)
 80004fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000500:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_CAN1_Init+0xc8>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_CAN1_Init+0xc8>)
 800050a:	2201      	movs	r2, #1
 800050c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_CAN1_Init+0xc8>)
 8000510:	2200      	movs	r2, #0
 8000512:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_CAN1_Init+0xc8>)
 8000516:	2200      	movs	r2, #0
 8000518:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_CAN1_Init+0xc8>)
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_CAN1_Init+0xc8>)
 8000522:	2201      	movs	r2, #1
 8000524:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <MX_CAN1_Init+0xc8>)
 8000528:	f001 ff2c 	bl	8002384 <HAL_CAN_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000532:	f000 fb07 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_CAN1_Init+0xc8>)
 8000560:	f002 f80c 	bl	800257c <HAL_CAN_ConfigFilter>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_CAN1_Init+0x9a>
  {
  	Error_Handler();
 800056a:	f000 faeb 	bl	8000b44 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_CAN1_Init+0xc8>)
 8000570:	f002 f8e4 	bl	800273c <HAL_CAN_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_CAN1_Init+0xaa>
	Error_Handler();
 800057a:	f000 fae3 	bl	8000b44 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1,
 800057e:	f648 4102 	movw	r1, #35842	; 0x8c02
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_CAN1_Init+0xc8>)
 8000584:	f002 fa2e 	bl	80029e4 <HAL_CAN_ActivateNotification>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0xbe>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
	Error_Handler();
 800058e:	f000 fad9 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <HAL_CAN_MspInit+0x84>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d12c      	bne.n	8000620 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000610:	2309      	movs	r3, #9
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_CAN_MspInit+0x8c>)
 800061c:	f003 f9d0 	bl	80039c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40006400 	.word	0x40006400
 800062c:	40023800 	.word	0x40023800
 8000630:	40020400 	.word	0x40020400

08000634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_DMA_Init+0x78>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1a      	ldr	r2, [pc, #104]	; (80006ac <MX_DMA_Init+0x78>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_DMA_Init+0x78>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_DMA_Init+0x78>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <MX_DMA_Init+0x78>)
 8000660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_DMA_Init+0x78>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2105      	movs	r1, #5
 8000676:	200c      	movs	r0, #12
 8000678:	f002 fa92 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800067c:	200c      	movs	r0, #12
 800067e:	f002 faab 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2105      	movs	r1, #5
 8000686:	2010      	movs	r0, #16
 8000688:	f002 fa8a 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800068c:	2010      	movs	r0, #16
 800068e:	f002 faa3 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	203a      	movs	r0, #58	; 0x3a
 8000698:	f002 fa82 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800069c:	203a      	movs	r0, #58	; 0x3a
 800069e:	f002 fa9b 	bl	8002bd8 <HAL_NVIC_EnableIRQ>

}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <MX_FREERTOS_Init+0x88>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4820      	ldr	r0, [pc, #128]	; (800073c <MX_FREERTOS_Init+0x8c>)
 80006ba:	f005 fee7 	bl	800648c <osThreadNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <MX_FREERTOS_Init+0x90>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* creation of OutputsTask */
  OutputsTaskHandle = osThreadNew(StartOutputsTask, NULL, &OutputsTask_attributes);
 80006c4:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <MX_FREERTOS_Init+0x94>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	481f      	ldr	r0, [pc, #124]	; (8000748 <MX_FREERTOS_Init+0x98>)
 80006ca:	f005 fedf 	bl	800648c <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_FREERTOS_Init+0x9c>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of InputsTask */
  InputsTaskHandle = osThreadNew(StartInputsTask, NULL, &InputsTask_attributes);
 80006d4:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_FREERTOS_Init+0xa0>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	481e      	ldr	r0, [pc, #120]	; (8000754 <MX_FREERTOS_Init+0xa4>)
 80006da:	f005 fed7 	bl	800648c <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <MX_FREERTOS_Init+0xa8>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartServoTask, NULL, &ServoTask_attributes);
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <MX_FREERTOS_Init+0xac>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	481d      	ldr	r0, [pc, #116]	; (8000760 <MX_FREERTOS_Init+0xb0>)
 80006ea:	f005 fecf 	bl	800648c <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_FREERTOS_Init+0xb4>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of UartWiFiTask */
  UartWiFiTaskHandle = osThreadNew(StartUartWiFiTask, NULL, &UartWiFiTask_attributes);
 80006f4:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_FREERTOS_Init+0xb8>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <MX_FREERTOS_Init+0xbc>)
 80006fa:	f005 fec7 	bl	800648c <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_FREERTOS_Init+0xc0>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of CanDriversTask */
  CanDriversTaskHandle = osThreadNew(StartCanDriversTask, NULL, &CanDriversTask_attributes);
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_FREERTOS_Init+0xc4>)
 8000706:	2100      	movs	r1, #0
 8000708:	481b      	ldr	r0, [pc, #108]	; (8000778 <MX_FREERTOS_Init+0xc8>)
 800070a:	f005 febf 	bl	800648c <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <MX_FREERTOS_Init+0xcc>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 8000714:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <MX_FREERTOS_Init+0xd0>)
 8000716:	2100      	movs	r1, #0
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <MX_FREERTOS_Init+0xd4>)
 800071a:	f005 feb7 	bl	800648c <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a19      	ldr	r2, [pc, #100]	; (8000788 <MX_FREERTOS_Init+0xd8>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of MissionsTask */
  MissionsTaskHandle = osThreadNew(StartMissionsTask, NULL, &MissionsTask_attributes);
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <MX_FREERTOS_Init+0xdc>)
 8000726:	2100      	movs	r1, #0
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <MX_FREERTOS_Init+0xe0>)
 800072a:	f005 feaf 	bl	800648c <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_FREERTOS_Init+0xe4>)
 8000732:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	08008fa8 	.word	0x08008fa8
 800073c:	08000799 	.word	0x08000799
 8000740:	200000bc 	.word	0x200000bc
 8000744:	08008fcc 	.word	0x08008fcc
 8000748:	08001a81 	.word	0x08001a81
 800074c:	2000031c 	.word	0x2000031c
 8000750:	08008ff0 	.word	0x08008ff0
 8000754:	080018d9 	.word	0x080018d9
 8000758:	2000057c 	.word	0x2000057c
 800075c:	08009014 	.word	0x08009014
 8000760:	08001b49 	.word	0x08001b49
 8000764:	200007dc 	.word	0x200007dc
 8000768:	08009038 	.word	0x08009038
 800076c:	08001b55 	.word	0x08001b55
 8000770:	20000a3c 	.word	0x20000a3c
 8000774:	0800905c 	.word	0x0800905c
 8000778:	08001701 	.word	0x08001701
 800077c:	20000e9c 	.word	0x20000e9c
 8000780:	08009080 	.word	0x08009080
 8000784:	08001615 	.word	0x08001615
 8000788:	200010fc 	.word	0x200010fc
 800078c:	080090a4 	.word	0x080090a4
 8000790:	08001a75 	.word	0x08001a75
 8000794:	2000155c 	.word	0x2000155c

08000798 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a4:	f005 ff04 	bl	80065b0 <osDelay>
 80007a8:	e7fa      	b.n	80007a0 <StartDefaultTask+0x8>
	...

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b7e      	ldr	r3, [pc, #504]	; (80009c0 <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a7d      	ldr	r2, [pc, #500]	; (80009c0 <MX_GPIO_Init+0x214>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b7b      	ldr	r3, [pc, #492]	; (80009c0 <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b77      	ldr	r3, [pc, #476]	; (80009c0 <MX_GPIO_Init+0x214>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a76      	ldr	r2, [pc, #472]	; (80009c0 <MX_GPIO_Init+0x214>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b74      	ldr	r3, [pc, #464]	; (80009c0 <MX_GPIO_Init+0x214>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b70      	ldr	r3, [pc, #448]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a6f      	ldr	r2, [pc, #444]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b6d      	ldr	r3, [pc, #436]	; (80009c0 <MX_GPIO_Init+0x214>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <MX_GPIO_Init+0x214>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a68      	ldr	r2, [pc, #416]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b66      	ldr	r3, [pc, #408]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b62      	ldr	r3, [pc, #392]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a61      	ldr	r2, [pc, #388]	; (80009c0 <MX_GPIO_Init+0x214>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b5f      	ldr	r3, [pc, #380]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b5b      	ldr	r3, [pc, #364]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a5a      	ldr	r2, [pc, #360]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b58      	ldr	r3, [pc, #352]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800086a:	2201      	movs	r2, #1
 800086c:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000870:	4854      	ldr	r0, [pc, #336]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000872:	f003 fa41 	bl	8003cf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800087c:	4852      	ldr	r0, [pc, #328]	; (80009c8 <MX_GPIO_Init+0x21c>)
 800087e:	f003 fa3b 	bl	8003cf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f24c 0103 	movw	r1, #49155	; 0xc003
 8000888:	4850      	ldr	r0, [pc, #320]	; (80009cc <MX_GPIO_Init+0x220>)
 800088a:	f003 fa35 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800088e:	2201      	movs	r2, #1
 8000890:	f64f 7180 	movw	r1, #65408	; 0xff80
 8000894:	484e      	ldr	r0, [pc, #312]	; (80009d0 <MX_GPIO_Init+0x224>)
 8000896:	f003 fa2f 	bl	8003cf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008a0:	484c      	ldr	r0, [pc, #304]	; (80009d4 <MX_GPIO_Init+0x228>)
 80008a2:	f003 fa29 	bl	8003cf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008a6:	237e      	movs	r3, #126	; 0x7e
 80008a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x224>)
 80008ba:	f003 f881 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	483c      	ldr	r0, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x218>)
 80008d4:	f003 f874 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008d8:	f240 33f2 	movw	r3, #1010	; 0x3f2
 80008dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4834      	ldr	r0, [pc, #208]	; (80009c4 <MX_GPIO_Init+0x218>)
 80008f2:	f003 f865 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008f6:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80008fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	482e      	ldr	r0, [pc, #184]	; (80009c8 <MX_GPIO_Init+0x21c>)
 8000910:	f003 f856 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8000914:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <MX_GPIO_Init+0x220>)
 800092e:	f003 f847 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000932:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000936:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x224>)
 800094c:	f003 f838 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000950:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000954:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	481a      	ldr	r0, [pc, #104]	; (80009d4 <MX_GPIO_Init+0x228>)
 800096a:	f003 f829 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800096e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_GPIO_Init+0x21c>)
 8000984:	f003 f81c 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	480e      	ldr	r0, [pc, #56]	; (80009d4 <MX_GPIO_Init+0x228>)
 800099c:	f003 f810 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009a0:	2338      	movs	r3, #56	; 0x38
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_GPIO_Init+0x220>)
 80009b4:	f003 f804 	bl	80039c0 <HAL_GPIO_Init>

}
 80009b8:	bf00      	nop
 80009ba:	3730      	adds	r7, #48	; 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_IWDG_Init+0x2c>)
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <MX_IWDG_Init+0x30>)
 80009e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_IWDG_Init+0x2c>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_IWDG_Init+0x2c>)
 80009ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009ee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_IWDG_Init+0x2c>)
 80009f2:	f003 f99a 	bl	8003d2a <HAL_IWDG_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80009fc:	f000 f8a2 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200019bc 	.word	0x200019bc
 8000a08:	40003000 	.word	0x40003000

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f001 fc76 	bl	8002300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f818 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f7ff fec8 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1c:	f7ff fe0a 	bl	8000634 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a20:	f000 fa48 	bl	8000eb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a24:	f000 fa70 	bl	8000f08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a28:	f000 fa98 	bl	8000f5c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000a2c:	f000 f9a6 	bl	8000d7c <MX_TIM4_Init>
  MX_IWDG_Init();
 8000a30:	f7ff ffd2 	bl	80009d8 <MX_IWDG_Init>
  MX_CAN1_Init();
 8000a34:	f7ff fd4e 	bl	80004d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a38:	f005 fcde 	bl	80063f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a3c:	f7ff fe38 	bl	80006b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a40:	f005 fcfe 	bl	8006440 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x38>
	...

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f008 fa52 	bl	8008f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac0:	23a8      	movs	r3, #168	; 0xa8
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 f97d 	bl	8003dd0 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000adc:	f000 f832 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2105      	movs	r1, #5
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fbde 	bl	80042c0 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b0a:	f000 f81b 	bl	8000b44 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3750      	adds	r7, #80	; 0x50
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b32:	f001 fc07 	bl	8002344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	210f      	movs	r1, #15
 8000b92:	f06f 0001 	mvn.w	r0, #1
 8000b96:	f002 f803 	bl	8002ba0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_InitTick+0xe4>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <HAL_InitTick+0xe4>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_InitTick+0xe4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd4:	f107 0210 	add.w	r2, r7, #16
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fd8e 	bl	8004700 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d103      	bne.n	8000bf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bee:	f003 fd5f 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8000bf2:	6378      	str	r0, [r7, #52]	; 0x34
 8000bf4:	e004      	b.n	8000c00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bf6:	f003 fd5b 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <HAL_InitTick+0xe8>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	0c9b      	lsrs	r3, r3, #18
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_InitTick+0xec>)
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_InitTick+0xf0>)
 8000c12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_InitTick+0xec>)
 8000c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_InitTick+0xec>)
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_InitTick+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_InitTick+0xec>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_InitTick+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_InitTick+0xec>)
 8000c36:	f003 fd95 	bl	8004764 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11b      	bne.n	8000c80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <HAL_InitTick+0xec>)
 8000c4a:	f003 fde5 	bl	8004818 <HAL_TIM_Base_Start_IT>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d111      	bne.n	8000c80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c5c:	2036      	movs	r0, #54	; 0x36
 8000c5e:	f001 ffbb 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d808      	bhi.n	8000c7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2036      	movs	r0, #54	; 0x36
 8000c6e:	f001 ff97 	bl	8002ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_InitTick+0xf4>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	e002      	b.n	8000c80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3738      	adds	r7, #56	; 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	200019c8 	.word	0x200019c8
 8000c98:	40001000 	.word	0x40001000
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA1_Stream1_IRQHandler+0x10>)
 8000cd2:	f002 f927 	bl	8002f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20001be4 	.word	0x20001be4

08000ce0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ce6:	f002 f91d 	bl	8002f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20001b84 	.word	0x20001b84

08000cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <USART1_IRQHandler+0x10>)
 8000cfa:	f004 fa47 	bl	800518c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20001a58 	.word	0x20001a58

08000d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART2_IRQHandler+0x10>)
 8000d0e:	f004 fa3d 	bl	800518c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20001a9c 	.word	0x20001a9c

08000d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART3_IRQHandler+0x10>)
 8000d22:	f004 fa33 	bl	800518c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20001ae0 	.word	0x20001ae0

08000d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM6_DAC_IRQHandler+0x10>)
 8000d36:	f003 fe85 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200019c8 	.word	0x200019c8

08000d44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <DMA2_Stream2_IRQHandler+0x10>)
 8000d4a:	f002 f8eb 	bl	8002f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20001b24 	.word	0x20001b24

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2224      	movs	r2, #36	; 0x24
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f008 f8b8 	bl	8008f00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000d9a:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <MX_TIM4_Init+0xa4>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000dea:	f003 fd85 	bl	80048f8 <HAL_TIM_Encoder_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000df4:	f7ff fea6 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_TIM4_Init+0xa0>)
 8000e06:	f003 ffed 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e10:	f7ff fe98 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20001a10 	.word	0x20001a10
 8000e20:	40000800 	.word	0x40000800

08000e24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d12b      	bne.n	8000e9e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_TIM_Encoder_MspInit+0x88>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_TIM_Encoder_MspInit+0x88>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_TIM_Encoder_MspInit+0x88>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_TIM_Encoder_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <HAL_TIM_Encoder_MspInit+0x88>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_TIM_Encoder_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e7e:	23c0      	movs	r3, #192	; 0xc0
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e9a:	f002 fd91 	bl	80039c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40000800 	.word	0x40000800
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART1_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART1_UART_Init+0x4c>)
 8000eec:	f004 f80a 	bl	8004f04 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f7ff fe25 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20001a58 	.word	0x20001a58
 8000f04:	40011000 	.word	0x40011000

08000f08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_USART2_UART_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f003 ffe0 	bl	8004f04 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f4a:	f7ff fdfb 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20001a9c 	.word	0x20001a9c
 8000f58:	40004400 	.word	0x40004400

08000f5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART3_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART3_UART_Init+0x4c>)
 8000f94:	f003 ffb6 	bl	8004f04 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f9e:	f7ff fdd1 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20001ae0 	.word	0x20001ae0
 8000fac:	40004800 	.word	0x40004800

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08e      	sub	sp, #56	; 0x38
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a9d      	ldr	r2, [pc, #628]	; (8001244 <HAL_UART_MspInit+0x294>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d163      	bne.n	800109a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	4b9c      	ldr	r3, [pc, #624]	; (8001248 <HAL_UART_MspInit+0x298>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a9b      	ldr	r2, [pc, #620]	; (8001248 <HAL_UART_MspInit+0x298>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b99      	ldr	r3, [pc, #612]	; (8001248 <HAL_UART_MspInit+0x298>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	4b95      	ldr	r3, [pc, #596]	; (8001248 <HAL_UART_MspInit+0x298>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a94      	ldr	r2, [pc, #592]	; (8001248 <HAL_UART_MspInit+0x298>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b92      	ldr	r3, [pc, #584]	; (8001248 <HAL_UART_MspInit+0x298>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800100a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800101c:	2307      	movs	r3, #7
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	4889      	ldr	r0, [pc, #548]	; (800124c <HAL_UART_MspInit+0x29c>)
 8001028:	f002 fcca 	bl	80039c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800102c:	4b88      	ldr	r3, [pc, #544]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 800102e:	4a89      	ldr	r2, [pc, #548]	; (8001254 <HAL_UART_MspInit+0x2a4>)
 8001030:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001032:	4b87      	ldr	r3, [pc, #540]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001038:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103a:	4b85      	ldr	r3, [pc, #532]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001040:	4b83      	ldr	r3, [pc, #524]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001046:	4b82      	ldr	r3, [pc, #520]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800104e:	4b80      	ldr	r3, [pc, #512]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001054:	4b7e      	ldr	r3, [pc, #504]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800105a:	4b7d      	ldr	r3, [pc, #500]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001060:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001066:	4b7a      	ldr	r3, [pc, #488]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800106c:	4878      	ldr	r0, [pc, #480]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 800106e:	f001 fdc1 	bl	8002bf4 <HAL_DMA_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001078:	f7ff fd64 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a74      	ldr	r2, [pc, #464]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
 8001082:	4a73      	ldr	r2, [pc, #460]	; (8001250 <HAL_UART_MspInit+0x2a0>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2105      	movs	r1, #5
 800108c:	2025      	movs	r0, #37	; 0x25
 800108e:	f001 fd87 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001092:	2025      	movs	r0, #37	; 0x25
 8001094:	f001 fda0 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001098:	e0cf      	b.n	800123a <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_UART_MspInit+0x2a8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d162      	bne.n	800116a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	4b67      	ldr	r3, [pc, #412]	; (8001248 <HAL_UART_MspInit+0x298>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a66      	ldr	r2, [pc, #408]	; (8001248 <HAL_UART_MspInit+0x298>)
 80010ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b64      	ldr	r3, [pc, #400]	; (8001248 <HAL_UART_MspInit+0x298>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	61bb      	str	r3, [r7, #24]
 80010be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	4b60      	ldr	r3, [pc, #384]	; (8001248 <HAL_UART_MspInit+0x298>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4a5f      	ldr	r2, [pc, #380]	; (8001248 <HAL_UART_MspInit+0x298>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6313      	str	r3, [r2, #48]	; 0x30
 80010d0:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <HAL_UART_MspInit+0x298>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010dc:	230c      	movs	r3, #12
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ec:	2307      	movs	r3, #7
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4855      	ldr	r0, [pc, #340]	; (800124c <HAL_UART_MspInit+0x29c>)
 80010f8:	f002 fc62 	bl	80039c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80010fc:	4b57      	ldr	r3, [pc, #348]	; (800125c <HAL_UART_MspInit+0x2ac>)
 80010fe:	4a58      	ldr	r2, [pc, #352]	; (8001260 <HAL_UART_MspInit+0x2b0>)
 8001100:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001102:	4b56      	ldr	r3, [pc, #344]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001108:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110a:	4b54      	ldr	r3, [pc, #336]	; (800125c <HAL_UART_MspInit+0x2ac>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001110:	4b52      	ldr	r3, [pc, #328]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001116:	4b51      	ldr	r3, [pc, #324]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111e:	4b4f      	ldr	r3, [pc, #316]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001124:	4b4d      	ldr	r3, [pc, #308]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_UART_MspInit+0x2ac>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001130:	4b4a      	ldr	r3, [pc, #296]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800113c:	4847      	ldr	r0, [pc, #284]	; (800125c <HAL_UART_MspInit+0x2ac>)
 800113e:	f001 fd59 	bl	8002bf4 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001148:	f7ff fcfc 	bl	8000b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a43      	ldr	r2, [pc, #268]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
 8001152:	4a42      	ldr	r2, [pc, #264]	; (800125c <HAL_UART_MspInit+0x2ac>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	2026      	movs	r0, #38	; 0x26
 800115e:	f001 fd1f 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001162:	2026      	movs	r0, #38	; 0x26
 8001164:	f001 fd38 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 8001168:	e067      	b.n	800123a <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART3)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <HAL_UART_MspInit+0x2b4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d162      	bne.n	800123a <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_UART_MspInit+0x298>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_UART_MspInit+0x298>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_UART_MspInit+0x298>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_UART_MspInit+0x298>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <HAL_UART_MspInit+0x298>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_UART_MspInit+0x298>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011be:	2307      	movs	r3, #7
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <HAL_UART_MspInit+0x2b8>)
 80011ca:	f002 fbf9 	bl	80039c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_UART_MspInit+0x2c0>)
 80011d2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_UART_MspInit+0x2bc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_UART_MspInit+0x2bc>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_UART_MspInit+0x2bc>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <HAL_UART_MspInit+0x2bc>)
 8001210:	f001 fcf0 	bl	8002bf4 <HAL_DMA_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_UART_MspInit+0x26e>
      Error_Handler();
 800121a:	f7ff fc93 	bl	8000b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <HAL_UART_MspInit+0x2bc>)
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_UART_MspInit+0x2bc>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2105      	movs	r1, #5
 800122e:	2027      	movs	r0, #39	; 0x27
 8001230:	f001 fcb6 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001234:	2027      	movs	r0, #39	; 0x27
 8001236:	f001 fccf 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3738      	adds	r7, #56	; 0x38
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40011000 	.word	0x40011000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000
 8001250:	20001b24 	.word	0x20001b24
 8001254:	40026440 	.word	0x40026440
 8001258:	40004400 	.word	0x40004400
 800125c:	20001b84 	.word	0x20001b84
 8001260:	40026088 	.word	0x40026088
 8001264:	40004800 	.word	0x40004800
 8001268:	40020400 	.word	0x40020400
 800126c:	20001be4 	.word	0x20001be4
 8001270:	40026028 	.word	0x40026028

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800129e:	f7ff fd5b 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f007 fdfb 	bl	8008e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff fbb1 	bl	8000a0c <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012b8:	08009128 	.word	0x08009128
  ldr r2, =_sbss
 80012bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012c0:	200066c8 	.word	0x200066c8

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>

080012c6 <_ZN16KeyaLKTechDriverC1Emmm>:
 *      Author: user
 */

#include <KeyaLKTechDriver.h>

KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, uint32_t stdId = 0)
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	603b      	str	r3, [r7, #0]
{
	_axis = axis;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	621a      	str	r2, [r3, #32]
	_canTxHeader.ExtId = extId;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	605a      	str	r2, [r3, #4]
	_canTxHeader.StdId = stdId;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	601a      	str	r2, [r3, #0]
	_canTxHeader.RTR = CAN_RTR_DATA;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
	_canTxHeader.DLC = 8;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2208      	movs	r2, #8
 80012f0:	611a      	str	r2, [r3, #16]
	_canTxHeader.TransmitGlobalTime = DISABLE;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	751a      	strb	r2, [r3, #20]
	if (extId)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <_ZN16KeyaLKTechDriverC1Emmm+0x40>
	{
		_canTxHeader.IDE = CAN_ID_EXT;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2204      	movs	r2, #4
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	e002      	b.n	800130c <_ZN16KeyaLKTechDriverC1Emmm+0x46>
	}
	else
	{
		_canTxHeader.IDE = CAN_ID_STD;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
	}
}
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_ZN16KeyaLKTechDriverC1Em>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis) : KeyaLKTechDriver::KeyaLKTechDriver(extId, axis, 0){}
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t stdId) : KeyaLKTechDriver::KeyaLKTechDriver(0, 0, stdId){}
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffcb 	bl	80012c6 <_ZN16KeyaLKTechDriverC1Emmm>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_ZN16KeyaLKTechDriver8SetSpeedEl>:

uint8_t KeyaLKTechDriver::SetSpeed(int32_t speed)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
	if (_axis)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d021      	beq.n	8001390 <_ZN16KeyaLKTechDriver8SetSpeedEl+0x56>
	{
		_canData[0] = 0x23;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2223      	movs	r2, #35	; 0x23
 8001350:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2220      	movs	r2, #32
 800135c:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	76da      	strb	r2, [r3, #27]
		_canData[4] = speed >> 24;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	161b      	asrs	r3, r3, #24
 800136c:	b2da      	uxtb	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	771a      	strb	r2, [r3, #28]
		_canData[5] = speed >> 16;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	141b      	asrs	r3, r3, #16
 8001376:	b2da      	uxtb	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	775a      	strb	r2, [r3, #29]
		_canData[6] = speed >> 8;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	121b      	asrs	r3, r3, #8
 8001380:	b2da      	uxtb	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	779a      	strb	r2, [r3, #30]
		_canData[7] = speed;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	77da      	strb	r2, [r3, #31]
 800138e:	e01e      	b.n	80013ce <_ZN16KeyaLKTechDriver8SetSpeedEl+0x94>
	}
	else
	{
		_canData[0] = 0xA2;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	22a2      	movs	r2, #162	; 0xa2
 8001394:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	76da      	strb	r2, [r3, #27]
		_canData[4] = speed;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	771a      	strb	r2, [r3, #28]
		_canData[5] = speed >> 8;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	121b      	asrs	r3, r3, #8
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	775a      	strb	r2, [r3, #29]
		_canData[6] = speed >> 16;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	141b      	asrs	r3, r3, #16
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	779a      	strb	r2, [r3, #30]
		_canData[7] = speed >> 24;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	161b      	asrs	r3, r3, #24
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	77da      	strb	r2, [r3, #31]
		_canData[5] = *((uint8_t *)(&speed)+1);
		_canData[6] = *((uint8_t *)(&speed)+2);
		_canData[7] = *((uint8_t *)(&speed)+3);*/
	}

	return KeyaLKTechDriver::SendData();
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f8ce 	bl	8001570 <_ZN16KeyaLKTechDriver8SendDataEv>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZN16KeyaLKTechDriver4StopEv>:

uint8_t KeyaLKTechDriver::Stop()
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01a      	beq.n	8001424 <_ZN16KeyaLKTechDriver4StopEv+0x46>
		_canData[0] = 0x23;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2223      	movs	r2, #35	; 0x23
 80013f2:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2220      	movs	r2, #32
 80013fe:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	77da      	strb	r2, [r3, #31]
 8001422:	e017      	b.n	8001454 <_ZN16KeyaLKTechDriver4StopEv+0x76>
	} else {
		_canData[0] = 0x81;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2281      	movs	r2, #129	; 0x81
 8001428:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	77da      	strb	r2, [r3, #31]
	}

	return KeyaLKTechDriver::SendData();
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f88b 	bl	8001570 <_ZN16KeyaLKTechDriver8SendDataEv>
 800145a:	4603      	mov	r3, r0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_ZN16KeyaLKTechDriver6EnableEv>:

uint8_t KeyaLKTechDriver::Enable()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if (_axis) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d01a      	beq.n	80014aa <_ZN16KeyaLKTechDriver6EnableEv+0x46>
		_canData[0] = 0x23;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2223      	movs	r2, #35	; 0x23
 8001478:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x0D;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	220d      	movs	r2, #13
 800147e:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2220      	movs	r2, #32
 8001484:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	77da      	strb	r2, [r3, #31]
 80014a8:	e017      	b.n	80014da <_ZN16KeyaLKTechDriver6EnableEv+0x76>
	} else {
		_canData[0] = 0x88;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2288      	movs	r2, #136	; 0x88
 80014ae:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	77da      	strb	r2, [r3, #31]
	}

	return KeyaLKTechDriver::SendData();
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f848 	bl	8001570 <_ZN16KeyaLKTechDriver8SendDataEv>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_ZN16KeyaLKTechDriver7DisableEv>:

uint8_t KeyaLKTechDriver::Disable()
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01a      	beq.n	8001530 <_ZN16KeyaLKTechDriver7DisableEv+0x46>
		_canData[0] = 0x23;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2223      	movs	r2, #35	; 0x23
 80014fe:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x0C;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	220c      	movs	r2, #12
 8001504:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2220      	movs	r2, #32
 800150a:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	77da      	strb	r2, [r3, #31]
 800152e:	e017      	b.n	8001560 <_ZN16KeyaLKTechDriver7DisableEv+0x76>
	} else {
		_canData[0] = 0x80;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	77da      	strb	r2, [r3, #31]
	}

	return KeyaLKTechDriver::SendData();
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f805 	bl	8001570 <_ZN16KeyaLKTechDriver8SendDataEv>
 8001566:	4603      	mov	r3, r0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_ZN16KeyaLKTechDriver8SendDataEv>:

uint8_t KeyaLKTechDriver::SendData()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	return CanMsgSend(&_canTxHeader, _canData);
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3318      	adds	r3, #24
 800157e:	4619      	mov	r1, r3
 8001580:	4610      	mov	r0, r2
 8001582:	f000 f88b 	bl	800169c <CanMsgSend>
 8001586:	4603      	mov	r3, r0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4907      	ldr	r1, [pc, #28]	; (80015c8 <__NVIC_EnableIRQ+0x38>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db12      	blt.n	8001604 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	490a      	ldr	r1, [pc, #40]	; (8001610 <__NVIC_DisableIRQ+0x44>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	3320      	adds	r3, #32
 80015f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015f8:	f3bf 8f4f 	dsb	sy
}
 80015fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015fe:	f3bf 8f6f 	isb	sy
}
 8001602:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100

08001614 <StartCanTask>:
uint8_t RxData[8] = { 0, };
uint32_t TxMailbox = 0;
CanDataRecvTypeDef canDataRecv;
CanDataSendTypeDef prevCanData;

void StartCanTask(void *argument) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		static uint32_t err_count = 0;
		if (NewCanMsg == CAN_GET_MSG_OK) {
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <StartCanTask+0x5c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b01      	cmp	r3, #1
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d009      	beq.n	8001644 <StartCanTask+0x30>
			NewCanMsg = CAN_GET_MSG_WAIT;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <StartCanTask+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
			err_count = 0;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <StartCanTask+0x60>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
			//globData.error.driver_conn = 0;
			CanMsgRead(&canDataRecv);
 800163c:	480e      	ldr	r0, [pc, #56]	; (8001678 <StartCanTask+0x64>)
 800163e:	f000 f81d 	bl	800167c <CanMsgRead>
 8001642:	e011      	b.n	8001668 <StartCanTask+0x54>
		}
		else if (NewCanMsg == CAN_GET_MSG_ERROR) {
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <StartCanTask+0x5c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <StartCanTask+0x54>
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "CAN error\r\n", 11, 100);
			err_count++;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <StartCanTask+0x60>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <StartCanTask+0x60>)
 8001660:	6013      	str	r3, [r2, #0]
				globData.drv_cpu_temp = 0;
				globData.motor1_temp = 0;
				globData.motor2_temp = 0;
				globData.voltage = 0;*/
			}
			NewCanMsg = CAN_GET_MSG_WAIT;
 8001662:	4b03      	ldr	r3, [pc, #12]	; (8001670 <StartCanTask+0x5c>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f004 ffa1 	bl	80065b0 <osDelay>
	}
 800166e:	e7d5      	b.n	800161c <StartCanTask+0x8>
 8001670:	20001c44 	.word	0x20001c44
 8001674:	20001c54 	.word	0x20001c54
 8001678:	20001c4c 	.word	0x20001c4c

0800167c <CanMsgRead>:
}

uint8_t CanMsgRead(CanDataRecvTypeDef *canDataRecv) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

	NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001684:	2014      	movs	r0, #20
 8001686:	f7ff ffa1 	bl	80015cc <__NVIC_DisableIRQ>
			//RxData[7]; //data L fault of motor 2
			diagMsg.motor1 = *(DriverErrMsgTypeDef*)&RxData[4];
			diagMsg.motor2 = *(DriverErrMsgTypeDef*)&RxData[6];
		}
	}*/
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800168a:	2014      	movs	r0, #20
 800168c:	f7ff ff80 	bl	8001590 <__NVIC_EnableIRQ>
	return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <CanMsgSend>:


uint8_t CanMsgSend(CAN_TxHeaderTypeDef *TxHeader, uint8_t canData[]) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]

	if (TxHeader->ExtId != 0 || TxHeader->StdId != 0)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <CanMsgSend+0x1a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01b      	beq.n	80016ee <CanMsgSend+0x52>
	{
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <CanMsgSend+0x5c>)
 80016b8:	f001 f95f 	bl	800297a <HAL_CAN_GetTxMailboxesFreeLevel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d000      	beq.n	80016ce <CanMsgSend+0x32>
 80016cc:	e7f3      	b.n	80016b6 <CanMsgSend+0x1a>
		if (HAL_CAN_AddTxMessage(&hcan1, TxHeader, canData, &TxMailbox) != HAL_OK) {
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <CanMsgSend+0x60>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <CanMsgSend+0x5c>)
 80016d6:	f001 f875 	bl	80027c4 <HAL_CAN_AddTxMessage>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <CanMsgSend+0x52>
			//HAL_UART_Transmit(&huart1, (uint8_t*) "no_trans\r\n", 10, 100);
			return 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <CanMsgSend+0x54>
		}
	}
	return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000002c 	.word	0x2000002c
 80016fc:	20001c48 	.word	0x20001c48

08001700 <StartCanDriversTask>:

extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartCanDriversTask(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b098      	sub	sp, #96	; 0x60
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	KeyaLKTechDriver DriverFB(0x140 + DRIVER1_LKTECH_ID);
 8001708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800170c:	f240 1141 	movw	r1, #321	; 0x141
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fe02 	bl	800131a <_ZN16KeyaLKTechDriverC1Em>
	KeyaLKTechDriver DriverLR(0x140 + DRIVER2_LKTECH_ID);
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fdfb 	bl	800131a <_ZN16KeyaLKTechDriverC1Em>

	for(;;)
	{
		int32_t speed = 30000;
 8001724:	f247 5330 	movw	r3, #30000	; 0x7530
 8001728:	65fb      	str	r3, [r7, #92]	; 0x5c
		DriverFB.SetSpeed(-speed);
 800172a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172c:	425a      	negs	r2, r3
 800172e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe00 	bl	800133a <_ZN16KeyaLKTechDriver8SetSpeedEl>
		osDelay(3000);
 800173a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800173e:	f004 ff37 	bl	80065b0 <osDelay>
		speed = 90000;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <StartCanDriversTask+0xbc>)
 8001744:	65fb      	str	r3, [r7, #92]	; 0x5c
		DriverFB.SetSpeed(speed);
 8001746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800174a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fdf4 	bl	800133a <_ZN16KeyaLKTechDriver8SetSpeedEl>
		DriverLR.Stop();
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe41 	bl	80013de <_ZN16KeyaLKTechDriver4StopEv>
		DriverLR.Disable();
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fec2 	bl	80014ea <_ZN16KeyaLKTechDriver7DisableEv>
		osDelay(3000);
 8001766:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800176a:	f004 ff21 	bl	80065b0 <osDelay>
		DriverFB.Stop();
 800176e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe33 	bl	80013de <_ZN16KeyaLKTechDriver4StopEv>
		DriverLR.Enable();
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fe71 	bl	8001464 <_ZN16KeyaLKTechDriver6EnableEv>
		osDelay(3000);
 8001782:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001786:	f004 ff13 	bl	80065b0 <osDelay>
		DriverFB.Disable();
 800178a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff feab 	bl	80014ea <_ZN16KeyaLKTechDriver7DisableEv>
		DriverLR.SetSpeed(speed);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fdcd 	bl	800133a <_ZN16KeyaLKTechDriver8SetSpeedEl>
		osDelay(3000);
 80017a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017a4:	f004 ff04 	bl	80065b0 <osDelay>
		DriverFB.Enable();
 80017a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe59 	bl	8001464 <_ZN16KeyaLKTechDriver6EnableEv>
		osDelay(3000);
 80017b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017b6:	f004 fefb 	bl	80065b0 <osDelay>

	}
 80017ba:	e7b3      	b.n	8001724 <StartCanDriversTask+0x24>
 80017bc:	00015f90 	.word	0x00015f90

080017c0 <flashWriteData>:
 */

#include "flash_data.h"

uint32_t flashWriteData(MinibotConfigTypeDef *configData)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <flashWriteData+0xc8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <flashWriteData+0xc8>)
 80017d0:	2202      	movs	r2, #2
 80017d2:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <flashWriteData+0xc8>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <flashWriteData+0xc8>)
 80017dc:	2201      	movs	r2, #1
 80017de:	60da      	str	r2, [r3, #12]
	//EraseInitStruct.Banks = FLASH_BANK_1;
	uint32_t Address = START_ADDR;
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <flashWriteData+0xcc>)
 80017e2:	61fb      	str	r3, [r7, #28]
	uint32_t SectorError = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 80017e8:	f001 fe5a 	bl	80034a0 <HAL_FLASH_Unlock>
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4619      	mov	r1, r3
 80017f2:	4825      	ldr	r0, [pc, #148]	; (8001888 <flashWriteData+0xc8>)
 80017f4:	f001 ffc2 	bl	800377c <HAL_FLASHEx_Erase>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <flashWriteData+0x52>
		uint32_t er = HAL_FLASH_GetError();
 8001808:	f001 fe7c 	bl	8003504 <HAL_FLASH_GetError>
 800180c:	6138      	str	r0, [r7, #16]
		return er;
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	e035      	b.n	800187e <flashWriteData+0xbe>
	}
	osDelay(20);
 8001812:	2014      	movs	r0, #20
 8001814:	f004 fecc 	bl	80065b0 <osDelay>
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b0d      	cmp	r3, #13
 8001820:	d827      	bhi.n	8001872 <flashWriteData+0xb2>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *(((uint32_t*)configData)+i)) != HAL_OK)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2200      	movs	r2, #0
 800182e:	461c      	mov	r4, r3
 8001830:	4615      	mov	r5, r2
 8001832:	4622      	mov	r2, r4
 8001834:	462b      	mov	r3, r5
 8001836:	69f9      	ldr	r1, [r7, #28]
 8001838:	2002      	movs	r0, #2
 800183a:	f001 fddd 	bl	80033f8 <HAL_FLASH_Program>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <flashWriteData+0x9e>
		{
			uint32_t er = HAL_FLASH_GetError();
 800184e:	f001 fe59 	bl	8003504 <HAL_FLASH_GetError>
 8001852:	6178      	str	r0, [r7, #20]
			osDelay(50);
 8001854:	2032      	movs	r0, #50	; 0x32
 8001856:	f004 feab 	bl	80065b0 <osDelay>
			return er;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	e00f      	b.n	800187e <flashWriteData+0xbe>
		}
		Address += 4;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	61fb      	str	r3, [r7, #28]
		osDelay(2);
 8001864:	2002      	movs	r0, #2
 8001866:	f004 fea3 	bl	80065b0 <osDelay>
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	3301      	adds	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	e7d4      	b.n	800181c <flashWriteData+0x5c>
	}
	osDelay(10);
 8001872:	200a      	movs	r0, #10
 8001874:	f004 fe9c 	bl	80065b0 <osDelay>
	HAL_FLASH_Lock();
 8001878:	f001 fe34 	bl	80034e4 <HAL_FLASH_Lock>
	return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bdb0      	pop	{r4, r5, r7, pc}
 8001886:	bf00      	nop
 8001888:	20001c58 	.word	0x20001c58
 800188c:	08060000 	.word	0x08060000

08001890 <flashReadData>:
uint32_t flashReadData(MinibotConfigTypeDef *configData)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	uint32_t Address = START_ADDR;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <flashReadData+0x44>)
 800189a:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b0d      	cmp	r3, #13
 80018a4:	d80d      	bhi.n	80018c2 <flashReadData+0x32>
		*(((uint32_t*)configData)+i) = *(uint32_t*)Address;
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	440b      	add	r3, r1
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	601a      	str	r2, [r3, #0]
		Address += 4;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3304      	adds	r3, #4
 80018b8:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3301      	adds	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	e7ee      	b.n	80018a0 <flashReadData+0x10>
	}
	osDelay(10);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f004 fe74 	bl	80065b0 <osDelay>
	return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08060000 	.word	0x08060000

080018d8 <StartInputsTask>:
#include "minibot_config.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartInputsTask(void *argument)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 80018e0:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <StartInputsTask+0x188>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <StartInputsTask+0x20>
 80018ec:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <StartInputsTask+0x18c>)
 80018ee:	7f13      	ldrb	r3, [r2, #28]
 80018f0:	f36f 0300 	bfc	r3, #0, #1
 80018f4:	7713      	strb	r3, [r2, #28]
 80018f6:	e004      	b.n	8001902 <StartInputsTask+0x2a>
 80018f8:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <StartInputsTask+0x18c>)
 80018fa:	7f13      	ldrb	r3, [r2, #28]
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	7713      	strb	r3, [r2, #28]
		IN_X03 ? (globData.sens.limit_sw2 = 0) : (globData.sens.limit_sw2 = 1);
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <StartInputsTask+0x190>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <StartInputsTask+0x42>
 800190e:	4a55      	ldr	r2, [pc, #340]	; (8001a64 <StartInputsTask+0x18c>)
 8001910:	7f13      	ldrb	r3, [r2, #28]
 8001912:	f36f 0341 	bfc	r3, #1, #1
 8001916:	7713      	strb	r3, [r2, #28]
 8001918:	e004      	b.n	8001924 <StartInputsTask+0x4c>
 800191a:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <StartInputsTask+0x18c>)
 800191c:	7f13      	ldrb	r3, [r2, #28]
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	7713      	strb	r3, [r2, #28]
		IN_X04 ? (globData.sens.button_manual_mode = 0) : (globData.sens.button_manual_mode = 1);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <StartInputsTask+0x190>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <StartInputsTask+0x64>
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <StartInputsTask+0x18c>)
 8001932:	7f13      	ldrb	r3, [r2, #28]
 8001934:	f36f 0382 	bfc	r3, #2, #1
 8001938:	7713      	strb	r3, [r2, #28]
 800193a:	e004      	b.n	8001946 <StartInputsTask+0x6e>
 800193c:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <StartInputsTask+0x18c>)
 800193e:	7f13      	ldrb	r3, [r2, #28]
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	7713      	strb	r3, [r2, #28]
		IN_X05 ? (globData.sens.button_motor1_forw = 0) : (globData.sens.button_motor1_forw= 1);
 8001946:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <StartInputsTask+0x190>)
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <StartInputsTask+0x86>
 8001952:	4a44      	ldr	r2, [pc, #272]	; (8001a64 <StartInputsTask+0x18c>)
 8001954:	7f13      	ldrb	r3, [r2, #28]
 8001956:	f36f 03c3 	bfc	r3, #3, #1
 800195a:	7713      	strb	r3, [r2, #28]
 800195c:	e004      	b.n	8001968 <StartInputsTask+0x90>
 800195e:	4a41      	ldr	r2, [pc, #260]	; (8001a64 <StartInputsTask+0x18c>)
 8001960:	7f13      	ldrb	r3, [r2, #28]
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	7713      	strb	r3, [r2, #28]
		IN_X06 ? (globData.sens.button_motor1_back= 0) : (globData.sens.button_motor1_back = 1);
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <StartInputsTask+0x190>)
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <StartInputsTask+0xa8>
 8001974:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <StartInputsTask+0x18c>)
 8001976:	7f13      	ldrb	r3, [r2, #28]
 8001978:	f36f 1304 	bfc	r3, #4, #1
 800197c:	7713      	strb	r3, [r2, #28]
 800197e:	e004      	b.n	800198a <StartInputsTask+0xb2>
 8001980:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <StartInputsTask+0x18c>)
 8001982:	7f13      	ldrb	r3, [r2, #28]
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	7713      	strb	r3, [r2, #28]
		IN_X07 ? (globData.sens.button_motor2_forw = 0) : (globData.sens.button_motor2_forw = 1);
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <StartInputsTask+0x190>)
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <StartInputsTask+0xca>
 8001996:	4a33      	ldr	r2, [pc, #204]	; (8001a64 <StartInputsTask+0x18c>)
 8001998:	7f13      	ldrb	r3, [r2, #28]
 800199a:	f36f 1345 	bfc	r3, #5, #1
 800199e:	7713      	strb	r3, [r2, #28]
 80019a0:	e004      	b.n	80019ac <StartInputsTask+0xd4>
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <StartInputsTask+0x18c>)
 80019a4:	7f13      	ldrb	r3, [r2, #28]
 80019a6:	f043 0320 	orr.w	r3, r3, #32
 80019aa:	7713      	strb	r3, [r2, #28]
		IN_X08 ? (globData.sens.button_motor2_back = 0) : (globData.sens.button_motor2_back = 1);
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <StartInputsTask+0x190>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <StartInputsTask+0xec>
 80019b8:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <StartInputsTask+0x18c>)
 80019ba:	7f13      	ldrb	r3, [r2, #28]
 80019bc:	f36f 1386 	bfc	r3, #6, #1
 80019c0:	7713      	strb	r3, [r2, #28]
 80019c2:	e004      	b.n	80019ce <StartInputsTask+0xf6>
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <StartInputsTask+0x18c>)
 80019c6:	7f13      	ldrb	r3, [r2, #28]
 80019c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019cc:	7713      	strb	r3, [r2, #28]
		IN_X09 ? (globData.sens.button_start = 0) : (globData.sens.button_start = 1);
 80019ce:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <StartInputsTask+0x194>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <StartInputsTask+0x10e>
 80019da:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <StartInputsTask+0x18c>)
 80019dc:	7f13      	ldrb	r3, [r2, #28]
 80019de:	f36f 13c7 	bfc	r3, #7, #1
 80019e2:	7713      	strb	r3, [r2, #28]
 80019e4:	e004      	b.n	80019f0 <StartInputsTask+0x118>
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <StartInputsTask+0x18c>)
 80019e8:	7f13      	ldrb	r3, [r2, #28]
 80019ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ee:	7713      	strb	r3, [r2, #28]
		IN_X10 ? (globData.sens.button_pause = 0) : (globData.sens.button_pause = 1);
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <StartInputsTask+0x194>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <StartInputsTask+0x130>
 80019fc:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <StartInputsTask+0x18c>)
 80019fe:	7f53      	ldrb	r3, [r2, #29]
 8001a00:	f36f 0300 	bfc	r3, #0, #1
 8001a04:	7753      	strb	r3, [r2, #29]
 8001a06:	e004      	b.n	8001a12 <StartInputsTask+0x13a>
 8001a08:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <StartInputsTask+0x18c>)
 8001a0a:	7f53      	ldrb	r3, [r2, #29]
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	7753      	strb	r3, [r2, #29]
		IN_X11 ? (globData.sens.button_stop = 0) : (globData.sens.button_stop = 1);
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <StartInputsTask+0x194>)
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <StartInputsTask+0x152>
 8001a1e:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <StartInputsTask+0x18c>)
 8001a20:	7f53      	ldrb	r3, [r2, #29]
 8001a22:	f36f 0341 	bfc	r3, #1, #1
 8001a26:	7753      	strb	r3, [r2, #29]
 8001a28:	e004      	b.n	8001a34 <StartInputsTask+0x15c>
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <StartInputsTask+0x18c>)
 8001a2c:	7f53      	ldrb	r3, [r2, #29]
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	7753      	strb	r3, [r2, #29]
		IN_X12 ? (globData.sens.button8 = 0) : (globData.sens.button8 = 1);
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <StartInputsTask+0x198>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <StartInputsTask+0x174>
 8001a40:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <StartInputsTask+0x18c>)
 8001a42:	7f53      	ldrb	r3, [r2, #29]
 8001a44:	f36f 0382 	bfc	r3, #2, #1
 8001a48:	7753      	strb	r3, [r2, #29]
 8001a4a:	e004      	b.n	8001a56 <StartInputsTask+0x17e>
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <StartInputsTask+0x18c>)
 8001a4e:	7f53      	ldrb	r3, [r2, #29]
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	7753      	strb	r3, [r2, #29]
		osDelay(1);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f004 fdaa 	bl	80065b0 <osDelay>
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8001a5c:	e740      	b.n	80018e0 <StartInputsTask+0x8>
 8001a5e:	bf00      	nop
 8001a60:	40020800 	.word	0x40020800
 8001a64:	20000054 	.word	0x20000054
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020c00 	.word	0x40020c00

08001a74 <StartMissionsTask>:
#include "mission.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartMissionsTask(void *argument)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

	for(;;)
 8001a7c:	e7fe      	b.n	8001a7c <StartMissionsTask+0x8>
	...

08001a80 <StartOutputsTask>:

//extern IWDG_HandleTypeDef hiwdg;


void StartOutputsTask(void *argument)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001a88:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <StartOutputsTask+0x28>)
 8001a8a:	f002 f990 	bl	8003dae <HAL_IWDG_Refresh>
		SetOutputs();
 8001a8e:	f000 f80f 	bl	8001ab0 <SetOutputs>
		if (globData.LEDB) LedBlink();
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <StartOutputsTask+0x2c>)
 8001a94:	795b      	ldrb	r3, [r3, #5]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <StartOutputsTask+0x1e>
 8001a9a:	f000 f811 	bl	8001ac0 <LedBlink>
		osDelay(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f004 fd86 	bl	80065b0 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 8001aa4:	e7f0      	b.n	8001a88 <StartOutputsTask+0x8>
 8001aa6:	bf00      	nop
 8001aa8:	200019bc 	.word	0x200019bc
 8001aac:	20000054 	.word	0x20000054

08001ab0 <SetOutputs>:
	}
}

void SetOutputs()
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <LedBlink>:

void LedBlink() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
			3   //LEDB_ERROR
	};

	static int32_t ledb_active_time = 0;
	static int32_t ledb_repeats = 0;
	ledb_repeats = ledb_rep[globData.LEDB];
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <LedBlink+0x70>)
 8001ac8:	795b      	ldrb	r3, [r3, #5]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <LedBlink+0x74>)
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <LedBlink+0x78>)
 8001ad6:	601a      	str	r2, [r3, #0]
	ledb_active_time = ledb_time[globData.LEDB];
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <LedBlink+0x70>)
 8001ada:	795b      	ldrb	r3, [r3, #5]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <LedBlink+0x7c>)
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <LedBlink+0x80>)
 8001ae8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ledb_repeats; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <LedBlink+0x78>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	da14      	bge.n	8001b22 <LedBlink+0x62>
	{
		osDelay(ledb_active_time);
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <LedBlink+0x80>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 fd57 	bl	80065b0 <osDelay>
		Y05_ON;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <LedBlink+0x84>)
 8001b04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b08:	619a      	str	r2, [r3, #24]
		osDelay(ledb_active_time);
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <LedBlink+0x80>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 fd4e 	bl	80065b0 <osDelay>
		Y05_OFF;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <LedBlink+0x84>)
 8001b16:	2210      	movs	r2, #16
 8001b18:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < ledb_repeats; i++)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	e7e5      	b.n	8001aee <LedBlink+0x2e>
	}
	globData.LEDB = 0;
 8001b22:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <LedBlink+0x70>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	715a      	strb	r2, [r3, #5]
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000054 	.word	0x20000054
 8001b34:	080090f8 	.word	0x080090f8
 8001b38:	20001c70 	.word	0x20001c70
 8001b3c:	080090e0 	.word	0x080090e0
 8001b40:	20001c6c 	.word	0x20001c6c
 8001b44:	40020800 	.word	0x40020800

08001b48 <StartServoTask>:
#include "servo_control.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartServoTask(void *argument)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	
	for(;;)
 8001b50:	e7fe      	b.n	8001b50 <StartServoTask+0x8>
	...

08001b54 <StartUartWiFiTask>:
StatusMsgTypeDef statusMsg;
JobMsgTypeDef jobMsg;
StmConfigTypeDef stmConf;

void StartUartWiFiTask(void *argument)
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8001b5c:	2264      	movs	r2, #100	; 0x64
 8001b5e:	4964      	ldr	r1, [pc, #400]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001b60:	4864      	ldr	r0, [pc, #400]	; (8001cf4 <StartUartWiFiTask+0x1a0>)
 8001b62:	f003 faae 	bl	80050c2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8001b66:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <StartUartWiFiTask+0x1a4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <StartUartWiFiTask+0x1a4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0208 	bic.w	r2, r2, #8
 8001b74:	601a      	str	r2, [r3, #0]
	ConfigInit();
 8001b76:	f000 f993 	bl	8001ea0 <ConfigInit>
	for(;;)
	{
		if ((new_wifi_data && wifi_uart_buff[2] == WIFI_CONTROL_ID)
 8001b7a:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <StartUartWiFiTask+0x1a8>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0fb      	beq.n	8001b7a <StartUartWiFiTask+0x26>
 8001b82:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001b84:	789b      	ldrb	r3, [r3, #2]
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d1f7      	bne.n	8001b7a <StartUartWiFiTask+0x26>
				&& wifi_uart_buff[0] == START_MSG0 && wifi_uart_buff[1] == START_MSG1) {
 8001b8a:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b84      	cmp	r3, #132	; 0x84
 8001b90:	d1f3      	bne.n	8001b7a <StartUartWiFiTask+0x26>
 8001b92:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	2b53      	cmp	r3, #83	; 0x53
 8001b98:	d1ef      	bne.n	8001b7a <StartUartWiFiTask+0x26>
			enum WIFI_MSG_ID MSG_ID = (WIFI_MSG_ID)wifi_uart_buff[3];
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001b9c:	78db      	ldrb	r3, [r3, #3]
 8001b9e:	73fb      	strb	r3, [r7, #15]
			if (MSG_ID == WIFI_GET_STATUS) {
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d117      	bne.n	8001bd6 <StartUartWiFiTask+0x82>
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001ba6:	4b52      	ldr	r3, [pc, #328]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001ba8:	79dc      	ldrb	r4, [r3, #7]
						!= calculateCS(wifi_uart_buff, RECEV_MSG_CS_BYTE_NUM)) {
 8001baa:	2107      	movs	r1, #7
 8001bac:	4850      	ldr	r0, [pc, #320]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001bae:	f000 f957 	bl	8001e60 <calculateCS>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	429c      	cmp	r4, r3
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <StartUartWiFiTask+0x7c>
					globData.cs_err++;
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001bc4:	791b      	ldrb	r3, [r3, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001bcc:	711a      	strb	r2, [r3, #4]
 8001bce:	e086      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
				else {
					SendStatus();
 8001bd0:	f000 f89c 	bl	8001d0c <SendStatus>
 8001bd4:	e083      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_SET_MANUAL_COM) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d117      	bne.n	8001c0c <StartUartWiFiTask+0xb8>
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001bdc:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001bde:	79dc      	ldrb	r4, [r3, #7]
						!= calculateCS(wifi_uart_buff, RECEV_MSG_CS_BYTE_NUM)) {
 8001be0:	2107      	movs	r1, #7
 8001be2:	4843      	ldr	r0, [pc, #268]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001be4:	f000 f93c 	bl	8001e60 <calculateCS>
 8001be8:	4603      	mov	r3, r0
 8001bea:	429c      	cmp	r4, r3
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <StartUartWiFiTask+0xb2>
					globData.cs_err++;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001bfa:	791b      	ldrb	r3, [r3, #4]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001c02:	711a      	strb	r2, [r3, #4]
 8001c04:	e06b      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
				else {
					SetManual();
 8001c06:	f000 f8c1 	bl	8001d8c <SetManual>
 8001c0a:	e068      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_SET_JOB) {
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d121      	bne.n	8001c56 <StartUartWiFiTask+0x102>
				if (wifi_uart_buff[sizeof(JobMsgTypeDef) - 1]
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001c14:	7ddc      	ldrb	r4, [r3, #23]
						!= calculateCS(wifi_uart_buff, sizeof(JobMsgTypeDef) - 1)) {
 8001c16:	2117      	movs	r1, #23
 8001c18:	4835      	ldr	r0, [pc, #212]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001c1a:	f000 f921 	bl	8001e60 <calculateCS>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	429c      	cmp	r4, r3
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[sizeof(JobMsgTypeDef) - 1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <StartUartWiFiTask+0xe8>
					globData.cs_err++;
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001c30:	791b      	ldrb	r3, [r3, #4]
 8001c32:	3301      	adds	r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001c38:	711a      	strb	r2, [r3, #4]
 8001c3a:	e050      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
				else {
					jobMsg = *(JobMsgTypeDef*) wifi_uart_buff;
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <StartUartWiFiTask+0x1b0>)
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c4c:	e884 0003 	stmia.w	r4, {r0, r1}
					SetJob();
 8001c50:	f000 f8a4 	bl	8001d9c <SetJob>
 8001c54:	e043      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_GET_STM_CONFIG) {
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d117      	bne.n	8001c8c <StartUartWiFiTask+0x138>
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001c5e:	79dc      	ldrb	r4, [r3, #7]
						!= calculateCS(wifi_uart_buff, RECEV_MSG_CS_BYTE_NUM)) {
 8001c60:	2107      	movs	r1, #7
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001c64:	f000 f8fc 	bl	8001e60 <calculateCS>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	429c      	cmp	r4, r3
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <StartUartWiFiTask+0x132>
					globData.cs_err++;
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001c7a:	791b      	ldrb	r3, [r3, #4]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001c82:	711a      	strb	r2, [r3, #4]
 8001c84:	e02b      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
				else {
					GetSTMConfig();
 8001c86:	f000 f8b7 	bl	8001df8 <GetSTMConfig>
 8001c8a:	e028      	b.n	8001cde <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_SET_STM_CONFIG) {
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d125      	bne.n	8001cde <StartUartWiFiTask+0x18a>
				if (wifi_uart_buff[sizeof(StmConfigTypeDef)-1] != calculateCS(wifi_uart_buff, sizeof(StmConfigTypeDef)-1)) {
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001c94:	f893 403f 	ldrb.w	r4, [r3, #63]	; 0x3f
 8001c98:	213f      	movs	r1, #63	; 0x3f
 8001c9a:	4815      	ldr	r0, [pc, #84]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001c9c:	f000 f8e0 	bl	8001e60 <calculateCS>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	429c      	cmp	r4, r3
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <StartUartWiFiTask+0x16a>
					globData.cs_err++;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <StartUartWiFiTask+0x1ac>)
 8001cba:	711a      	strb	r2, [r3, #4]
 8001cbc:	e00f      	b.n	8001cde <StartUartWiFiTask+0x18a>
				} else {
					stmConf = *(StmConfigTypeDef*)wifi_uart_buff;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001cc0:	4a11      	ldr	r2, [pc, #68]	; (8001d08 <StartUartWiFiTask+0x1b4>)
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					ConfigUpdate();
 8001cda:	f000 f92b 	bl	8001f34 <ConfigUpdate>
				}
			}
			new_wifi_data = 0;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <StartUartWiFiTask+0x1a8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
			memset(wifi_uart_buff, 0, 100);
 8001ce4:	2264      	movs	r2, #100	; 0x64
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4801      	ldr	r0, [pc, #4]	; (8001cf0 <StartUartWiFiTask+0x19c>)
 8001cea:	f007 f909 	bl	8008f00 <memset>
			}
		}*/

		//osDelay(1000);
		//SendStatus(); //for test
	}
 8001cee:	e744      	b.n	8001b7a <StartUartWiFiTask+0x26>
 8001cf0:	20001c78 	.word	0x20001c78
 8001cf4:	20001a58 	.word	0x20001a58
 8001cf8:	20001b24 	.word	0x20001b24
 8001cfc:	20001c74 	.word	0x20001c74
 8001d00:	20000054 	.word	0x20000054
 8001d04:	20001cfc 	.word	0x20001cfc
 8001d08:	20001d14 	.word	0x20001d14

08001d0c <SendStatus>:
}

void SendStatus()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	statusMsg.start_msg0 = START_MSG0;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <SendStatus+0x74>)
 8001d12:	2284      	movs	r2, #132	; 0x84
 8001d14:	701a      	strb	r2, [r3, #0]
	statusMsg.start_msg1 = START_MSG1;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <SendStatus+0x74>)
 8001d18:	2253      	movs	r2, #83	; 0x53
 8001d1a:	705a      	strb	r2, [r3, #1]
	statusMsg.control_id = WIFI_CONTROL_ID;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <SendStatus+0x74>)
 8001d1e:	2264      	movs	r2, #100	; 0x64
 8001d20:	709a      	strb	r2, [r3, #2]
	statusMsg.msg_id = WIFI_GET_STATUS;
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <SendStatus+0x74>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	70da      	strb	r2, [r3, #3]
	statusMsg.cs_errors = globData.cs_err;
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <SendStatus+0x78>)
 8001d2a:	791a      	ldrb	r2, [r3, #4]
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <SendStatus+0x74>)
 8001d2e:	775a      	strb	r2, [r3, #29]
	statusMsg.temp1 = globData.temp1;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <SendStatus+0x78>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <SendStatus+0x74>)
 8001d36:	6053      	str	r3, [r2, #4]
	statusMsg.temp2 = globData.temp2;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <SendStatus+0x78>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <SendStatus+0x74>)
 8001d3e:	6093      	str	r3, [r2, #8]
	statusMsg.temp3 = globData.temp3;
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <SendStatus+0x78>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <SendStatus+0x74>)
 8001d46:	60d3      	str	r3, [r2, #12]
	statusMsg.sens = globData.sens;
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <SendStatus+0x74>)
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <SendStatus+0x78>)
 8001d4c:	8b9b      	ldrh	r3, [r3, #28]
 8001d4e:	8213      	strh	r3, [r2, #16]
	statusMsg.cycles_count = globData.cycles_count;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <SendStatus+0x78>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SendStatus+0x74>)
 8001d56:	6153      	str	r3, [r2, #20]
	statusMsg.cycles_set = globData.cycles_set;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <SendStatus+0x78>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <SendStatus+0x74>)
 8001d5e:	6193      	str	r3, [r2, #24]
	statusMsg.CS = calculateCS((uint8_t *)&statusMsg, sizeof(statusMsg)-1);
 8001d60:	211f      	movs	r1, #31
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <SendStatus+0x74>)
 8001d64:	f000 f87c 	bl	8001e60 <calculateCS>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SendStatus+0x74>)
 8001d6e:	77da      	strb	r2, [r3, #31]
	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&txt1, sizeof(txt1), 100);
	*/
	//////////////////////////


	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&statusMsg, sizeof(statusMsg), 100);
 8001d70:	2364      	movs	r3, #100	; 0x64
 8001d72:	2220      	movs	r2, #32
 8001d74:	4902      	ldr	r1, [pc, #8]	; (8001d80 <SendStatus+0x74>)
 8001d76:	4804      	ldr	r0, [pc, #16]	; (8001d88 <SendStatus+0x7c>)
 8001d78:	f003 f911 	bl	8004f9e <HAL_UART_Transmit>
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20001cdc 	.word	0x20001cdc
 8001d84:	20000054 	.word	0x20000054
 8001d88:	20001a58 	.word	0x20001a58

08001d8c <SetManual>:

void SetManual()
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SetJob>:

void SetJob()
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
	if (jobMsg.comm == JOB_START)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <SetJob+0x54>)
 8001da2:	791b      	ldrb	r3, [r3, #4]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10f      	bne.n	8001dc8 <SetJob+0x2c>
	{
		globData.volume = jobMsg.volume;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <SetJob+0x54>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <SetJob+0x58>)
 8001dae:	6293      	str	r3, [r2, #40]	; 0x28
		globData.time_hold = jobMsg.time_hold;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <SetJob+0x54>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <SetJob+0x58>)
 8001db6:	62d3      	str	r3, [r2, #44]	; 0x2c
		globData.cycles_set = jobMsg.cycles;
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <SetJob+0x54>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <SetJob+0x58>)
 8001dbe:	6253      	str	r3, [r2, #36]	; 0x24
		globData.heat_on = 1;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <SetJob+0x58>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	615a      	str	r2, [r3, #20]
 8001dc6:	e00a      	b.n	8001dde <SetJob+0x42>
	}
	else if (jobMsg.comm != JOB_PAUSE || jobMsg.comm != JOB_RESUME)
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <SetJob+0x54>)
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d103      	bne.n	8001dd8 <SetJob+0x3c>
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <SetJob+0x54>)
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d002      	beq.n	8001dde <SetJob+0x42>
	{
		globData.heat_on = 0;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SetJob+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	615a      	str	r2, [r3, #20]
	}
	globData.current_status = jobMsg.comm;
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SetJob+0x54>)
 8001de0:	791a      	ldrb	r2, [r3, #4]
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SetJob+0x58>)
 8001de4:	701a      	strb	r2, [r3, #0]
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	20001cfc 	.word	0x20001cfc
 8001df4:	20000054 	.word	0x20000054

08001df8 <GetSTMConfig>:

void GetSTMConfig()
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	stmConf.start_msg0 = START_MSG0;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <GetSTMConfig+0x5c>)
 8001dfe:	2284      	movs	r2, #132	; 0x84
 8001e00:	701a      	strb	r2, [r3, #0]
	stmConf.start_msg1 = START_MSG1;
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <GetSTMConfig+0x5c>)
 8001e04:	2253      	movs	r2, #83	; 0x53
 8001e06:	705a      	strb	r2, [r3, #1]
	stmConf.control_id = WIFI_CONTROL_ID;
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <GetSTMConfig+0x5c>)
 8001e0a:	2264      	movs	r2, #100	; 0x64
 8001e0c:	709a      	strb	r2, [r3, #2]
	stmConf.msg_id = WIFI_GET_STM_CONFIG;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <GetSTMConfig+0x5c>)
 8001e10:	2203      	movs	r2, #3
 8001e12:	70da      	strb	r2, [r3, #3]
	stmConf.termConfig = minibotConfig;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <GetSTMConfig+0x5c>)
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <GetSTMConfig+0x60>)
 8001e18:	1d1c      	adds	r4, r3, #4
 8001e1a:	4615      	mov	r5, r2
 8001e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e2c:	e884 0003 	stmia.w	r4, {r0, r1}
	stmConf.CS = calculateCS((uint8_t *)&stmConf, sizeof(StmConfigTypeDef)-1);
 8001e30:	213f      	movs	r1, #63	; 0x3f
 8001e32:	4808      	ldr	r0, [pc, #32]	; (8001e54 <GetSTMConfig+0x5c>)
 8001e34:	f000 f814 	bl	8001e60 <calculateCS>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <GetSTMConfig+0x5c>)
 8001e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&stmConf, sizeof(StmConfigTypeDef), 100);
 8001e42:	2364      	movs	r3, #100	; 0x64
 8001e44:	2240      	movs	r2, #64	; 0x40
 8001e46:	4903      	ldr	r1, [pc, #12]	; (8001e54 <GetSTMConfig+0x5c>)
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <GetSTMConfig+0x64>)
 8001e4a:	f003 f8a8 	bl	8004f9e <HAL_UART_Transmit>
}
 8001e4e:	bf00      	nop
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20001d14 	.word	0x20001d14
 8001e58:	20000084 	.word	0x20000084
 8001e5c:	20001a58 	.word	0x20001a58

08001e60 <calculateCS>:

uint8_t calculateCS(uint8_t *msg, int msg_size) {
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint8_t cs = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	da0a      	bge.n	8001e90 <calculateCS+0x30>
  {
    cs+=msg[i];
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	4413      	add	r3, r2
 8001e86:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	e7f0      	b.n	8001e72 <calculateCS+0x12>
  }
  return cs;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <ConfigInit>:

void ConfigInit()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	flashReadData(&minibotConfig);
 8001ea4:	481f      	ldr	r0, [pc, #124]	; (8001f24 <ConfigInit+0x84>)
 8001ea6:	f7ff fcf3 	bl	8001890 <flashReadData>
	if (minibotConfig.flash_init != FLASH_INIT)
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <ConfigInit+0x84>)
 8001eac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001eb0:	2b44      	cmp	r3, #68	; 0x44
 8001eb2:	d034      	beq.n	8001f1e <ConfigInit+0x7e>
	{
		minibotConfig.volume_per_rev = 100.0;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <ConfigInit+0x84>)
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <ConfigInit+0x88>)
 8001eb8:	601a      	str	r2, [r3, #0]
		minibotConfig.volume = 10.0;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <ConfigInit+0x84>)
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <ConfigInit+0x8c>)
 8001ebe:	619a      	str	r2, [r3, #24]
		minibotConfig.motor1_speed = 1000;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <ConfigInit+0x84>)
 8001ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec6:	605a      	str	r2, [r3, #4]
		minibotConfig.motor1_acc = 500;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <ConfigInit+0x84>)
 8001eca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ece:	609a      	str	r2, [r3, #8]
		minibotConfig.motor2_speed = 1000;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <ConfigInit+0x84>)
 8001ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed6:	60da      	str	r2, [r3, #12]
		minibotConfig.motor2_acc = 500;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <ConfigInit+0x84>)
 8001eda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ede:	611a      	str	r2, [r3, #16]
		minibotConfig.time_hold = 10;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <ConfigInit+0x84>)
 8001ee2:	220a      	movs	r2, #10
 8001ee4:	615a      	str	r2, [r3, #20]
		minibotConfig.temp1 = 30.0;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <ConfigInit+0x84>)
 8001ee8:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <ConfigInit+0x90>)
 8001eea:	61da      	str	r2, [r3, #28]
		minibotConfig.temp2 = 30.0;
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <ConfigInit+0x84>)
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <ConfigInit+0x90>)
 8001ef0:	621a      	str	r2, [r3, #32]
		minibotConfig.temp3 = 30.0;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <ConfigInit+0x84>)
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <ConfigInit+0x90>)
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
		minibotConfig.Kp = 1.0;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <ConfigInit+0x84>)
 8001efa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
		minibotConfig.Ki = 1.0;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <ConfigInit+0x84>)
 8001f02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
		minibotConfig.Kd = 1.0;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <ConfigInit+0x84>)
 8001f0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
		minibotConfig.bitParams.ind = 1;
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <ConfigInit+0x84>)
 8001f12:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	}
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000084 	.word	0x20000084
 8001f28:	42c80000 	.word	0x42c80000
 8001f2c:	41200000 	.word	0x41200000
 8001f30:	41f00000 	.word	0x41f00000

08001f34 <ConfigUpdate>:

int ConfigUpdate()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
	int err = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.volume_per_rev > 0) {
 8001f3e:	4b8d      	ldr	r3, [pc, #564]	; (8002174 <ConfigUpdate+0x240>)
 8001f40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	dd04      	ble.n	8001f58 <ConfigUpdate+0x24>
		minibotConfig.volume_per_rev = stmConf.termConfig.volume_per_rev;
 8001f4e:	4b89      	ldr	r3, [pc, #548]	; (8002174 <ConfigUpdate+0x240>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a89      	ldr	r2, [pc, #548]	; (8002178 <ConfigUpdate+0x244>)
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e002      	b.n	8001f5e <ConfigUpdate+0x2a>
	}
	else err++;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.volume > 0) {
 8001f5e:	4b85      	ldr	r3, [pc, #532]	; (8002174 <ConfigUpdate+0x240>)
 8001f60:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	dd04      	ble.n	8001f78 <ConfigUpdate+0x44>
		minibotConfig.volume = stmConf.termConfig.volume;
 8001f6e:	4b81      	ldr	r3, [pc, #516]	; (8002174 <ConfigUpdate+0x240>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a81      	ldr	r2, [pc, #516]	; (8002178 <ConfigUpdate+0x244>)
 8001f74:	6193      	str	r3, [r2, #24]
 8001f76:	e002      	b.n	8001f7e <ConfigUpdate+0x4a>
	}
	else err++;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor1_speed > 0 && stmConf.termConfig.motor1_speed < 5000)
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <ConfigUpdate+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <ConfigUpdate+0x68>
 8001f86:	4b7b      	ldr	r3, [pc, #492]	; (8002174 <ConfigUpdate+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d804      	bhi.n	8001f9c <ConfigUpdate+0x68>
	{
		minibotConfig.motor1_speed = stmConf.termConfig.motor1_speed;
 8001f92:	4b78      	ldr	r3, [pc, #480]	; (8002174 <ConfigUpdate+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a78      	ldr	r2, [pc, #480]	; (8002178 <ConfigUpdate+0x244>)
 8001f98:	6053      	str	r3, [r2, #4]
 8001f9a:	e002      	b.n	8001fa2 <ConfigUpdate+0x6e>
	}
	else err++;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor1_acc > 0 && stmConf.termConfig.motor1_acc < 5000)
 8001fa2:	4b74      	ldr	r3, [pc, #464]	; (8002174 <ConfigUpdate+0x240>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <ConfigUpdate+0x8c>
 8001faa:	4b72      	ldr	r3, [pc, #456]	; (8002174 <ConfigUpdate+0x240>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d804      	bhi.n	8001fc0 <ConfigUpdate+0x8c>
	{
		minibotConfig.motor1_acc= stmConf.termConfig.motor1_acc;
 8001fb6:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <ConfigUpdate+0x240>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a6f      	ldr	r2, [pc, #444]	; (8002178 <ConfigUpdate+0x244>)
 8001fbc:	6093      	str	r3, [r2, #8]
 8001fbe:	e002      	b.n	8001fc6 <ConfigUpdate+0x92>
	}
	else err++;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor2_speed > 0 && stmConf.termConfig.motor2_speed < 5000) {
 8001fc6:	4b6b      	ldr	r3, [pc, #428]	; (8002174 <ConfigUpdate+0x240>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <ConfigUpdate+0xb0>
 8001fce:	4b69      	ldr	r3, [pc, #420]	; (8002174 <ConfigUpdate+0x240>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d804      	bhi.n	8001fe4 <ConfigUpdate+0xb0>
		minibotConfig.motor2_speed = stmConf.termConfig.motor2_speed;
 8001fda:	4b66      	ldr	r3, [pc, #408]	; (8002174 <ConfigUpdate+0x240>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	4a66      	ldr	r2, [pc, #408]	; (8002178 <ConfigUpdate+0x244>)
 8001fe0:	60d3      	str	r3, [r2, #12]
 8001fe2:	e002      	b.n	8001fea <ConfigUpdate+0xb6>
	}
	else err++;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor2_acc > 0 && stmConf.termConfig.motor2_acc < 5000) {
 8001fea:	4b62      	ldr	r3, [pc, #392]	; (8002174 <ConfigUpdate+0x240>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <ConfigUpdate+0xd4>
 8001ff2:	4b60      	ldr	r3, [pc, #384]	; (8002174 <ConfigUpdate+0x240>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d804      	bhi.n	8002008 <ConfigUpdate+0xd4>
		minibotConfig.motor2_acc = stmConf.termConfig.motor2_acc;
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <ConfigUpdate+0x240>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4a5d      	ldr	r2, [pc, #372]	; (8002178 <ConfigUpdate+0x244>)
 8002004:	6113      	str	r3, [r2, #16]
 8002006:	e002      	b.n	800200e <ConfigUpdate+0xda>
	}
	else err++;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3301      	adds	r3, #1
 800200c:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor2_acc > 0 && stmConf.termConfig.motor2_acc < 5000) {
 800200e:	4b59      	ldr	r3, [pc, #356]	; (8002174 <ConfigUpdate+0x240>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <ConfigUpdate+0xf8>
 8002016:	4b57      	ldr	r3, [pc, #348]	; (8002174 <ConfigUpdate+0x240>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f241 3287 	movw	r2, #4999	; 0x1387
 800201e:	4293      	cmp	r3, r2
 8002020:	d804      	bhi.n	800202c <ConfigUpdate+0xf8>
		minibotConfig.motor2_acc = stmConf.termConfig.motor2_acc;
 8002022:	4b54      	ldr	r3, [pc, #336]	; (8002174 <ConfigUpdate+0x240>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	4a54      	ldr	r2, [pc, #336]	; (8002178 <ConfigUpdate+0x244>)
 8002028:	6113      	str	r3, [r2, #16]
 800202a:	e002      	b.n	8002032 <ConfigUpdate+0xfe>
	}
	else err++;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.time_hold > 0) {
 8002032:	4b50      	ldr	r3, [pc, #320]	; (8002174 <ConfigUpdate+0x240>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <ConfigUpdate+0x110>
		minibotConfig.time_hold = stmConf.termConfig.time_hold;
 800203a:	4b4e      	ldr	r3, [pc, #312]	; (8002174 <ConfigUpdate+0x240>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4a4e      	ldr	r2, [pc, #312]	; (8002178 <ConfigUpdate+0x244>)
 8002040:	6153      	str	r3, [r2, #20]
 8002042:	e002      	b.n	800204a <ConfigUpdate+0x116>
	}
	else err++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3301      	adds	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.temp1 > 0 && stmConf.termConfig.temp1 < 500) {
 800204a:	4b4a      	ldr	r3, [pc, #296]	; (8002174 <ConfigUpdate+0x240>)
 800204c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	dd0e      	ble.n	8002078 <ConfigUpdate+0x144>
 800205a:	4b46      	ldr	r3, [pc, #280]	; (8002174 <ConfigUpdate+0x240>)
 800205c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002060:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800217c <ConfigUpdate+0x248>
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	d504      	bpl.n	8002078 <ConfigUpdate+0x144>
		minibotConfig.temp1 = stmConf.termConfig.temp1;
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <ConfigUpdate+0x240>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a41      	ldr	r2, [pc, #260]	; (8002178 <ConfigUpdate+0x244>)
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	e002      	b.n	800207e <ConfigUpdate+0x14a>
	}
	else err++;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3301      	adds	r3, #1
 800207c:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.temp2 > 0 && stmConf.termConfig.temp2 < 500) {
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <ConfigUpdate+0x240>)
 8002080:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	dd0e      	ble.n	80020ac <ConfigUpdate+0x178>
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <ConfigUpdate+0x240>)
 8002090:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002094:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800217c <ConfigUpdate+0x248>
 8002098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d504      	bpl.n	80020ac <ConfigUpdate+0x178>
		minibotConfig.temp2 = stmConf.termConfig.temp2;
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <ConfigUpdate+0x240>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	4a34      	ldr	r2, [pc, #208]	; (8002178 <ConfigUpdate+0x244>)
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	e002      	b.n	80020b2 <ConfigUpdate+0x17e>
	}
	else err++;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.temp3 > 0 && stmConf.termConfig.temp3 < 500) {
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <ConfigUpdate+0x240>)
 80020b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c0:	dd0e      	ble.n	80020e0 <ConfigUpdate+0x1ac>
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <ConfigUpdate+0x240>)
 80020c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020c8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800217c <ConfigUpdate+0x248>
 80020cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	d504      	bpl.n	80020e0 <ConfigUpdate+0x1ac>
		minibotConfig.temp3 = stmConf.termConfig.temp3;
 80020d6:	4b27      	ldr	r3, [pc, #156]	; (8002174 <ConfigUpdate+0x240>)
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	4a27      	ldr	r2, [pc, #156]	; (8002178 <ConfigUpdate+0x244>)
 80020dc:	6253      	str	r3, [r2, #36]	; 0x24
 80020de:	e002      	b.n	80020e6 <ConfigUpdate+0x1b2>
	}
	else err++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3301      	adds	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.Kp > 0) {
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <ConfigUpdate+0x240>)
 80020e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	dd04      	ble.n	8002100 <ConfigUpdate+0x1cc>
		minibotConfig.Kp = stmConf.termConfig.Kp;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <ConfigUpdate+0x240>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <ConfigUpdate+0x244>)
 80020fc:	6293      	str	r3, [r2, #40]	; 0x28
 80020fe:	e002      	b.n	8002106 <ConfigUpdate+0x1d2>
	}
	else err++;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3301      	adds	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.Ki > 0) {
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <ConfigUpdate+0x240>)
 8002108:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800210c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	dd04      	ble.n	8002120 <ConfigUpdate+0x1ec>
		minibotConfig.Ki = stmConf.termConfig.Ki;
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <ConfigUpdate+0x240>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <ConfigUpdate+0x244>)
 800211c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800211e:	e002      	b.n	8002126 <ConfigUpdate+0x1f2>
	}
	else err++;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3301      	adds	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.Kd > 0) {
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <ConfigUpdate+0x240>)
 8002128:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800212c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	dd04      	ble.n	8002140 <ConfigUpdate+0x20c>
		minibotConfig.Kd = stmConf.termConfig.Kd;
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <ConfigUpdate+0x240>)
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213a:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <ConfigUpdate+0x244>)
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	e002      	b.n	8002146 <ConfigUpdate+0x212>
	}
	else err++;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3301      	adds	r3, #1
 8002144:	607b      	str	r3, [r7, #4]
	if (err)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <ConfigUpdate+0x222>
	{
		globData.LEDB = LEDB_ERROR;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <ConfigUpdate+0x24c>)
 800214e:	2205      	movs	r2, #5
 8002150:	715a      	strb	r2, [r3, #5]
		return err;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e00a      	b.n	800216c <ConfigUpdate+0x238>
	}
	minibotConfig.flash_init = FLASH_INIT;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <ConfigUpdate+0x244>)
 8002158:	2244      	movs	r2, #68	; 0x44
 800215a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	flashWriteData(&minibotConfig);
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <ConfigUpdate+0x244>)
 8002160:	f7ff fb2e 	bl	80017c0 <flashWriteData>
	globData.LEDB = LEDB_FLASH_OK;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <ConfigUpdate+0x24c>)
 8002166:	2204      	movs	r2, #4
 8002168:	715a      	strb	r2, [r3, #5]
	return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20001d14 	.word	0x20001d14
 8002178:	20000084 	.word	0x20000084
 800217c:	43fa0000 	.word	0x43fa0000
 8002180:	20000054 	.word	0x20000054

08002184 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(&huart1);
 800218c:	4842      	ldr	r0, [pc, #264]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 800218e:	f003 faa9 	bl	80056e4 <HAL_UART_GetError>
 8002192:	61f8      	str	r0, [r7, #28]
	switch (er) {
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3b01      	subs	r3, #1
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d863      	bhi.n	8002264 <HAL_UART_ErrorCallback+0xe0>
 800219c:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <HAL_UART_ErrorCallback+0x20>)
 800219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a2:	bf00      	nop
 80021a4:	080021e5 	.word	0x080021e5
 80021a8:	08002203 	.word	0x08002203
 80021ac:	08002265 	.word	0x08002265
 80021b0:	08002221 	.word	0x08002221
 80021b4:	08002265 	.word	0x08002265
 80021b8:	08002265 	.word	0x08002265
 80021bc:	08002265 	.word	0x08002265
 80021c0:	0800223f 	.word	0x0800223f
 80021c4:	08002265 	.word	0x08002265
 80021c8:	08002265 	.word	0x08002265
 80021cc:	08002265 	.word	0x08002265
 80021d0:	08002265 	.word	0x08002265
 80021d4:	08002265 	.word	0x08002265
 80021d8:	08002265 	.word	0x08002265
 80021dc:	08002265 	.word	0x08002265
 80021e0:	0800225d 	.word	0x0800225d
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(&huart1);
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002200:	e031      	b.n	8002266 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(&huart1);
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800221e:	e022      	b.n	8002266 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(&huart1);
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800223c:	e013      	b.n	8002266 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800225a:	e004      	b.n	8002266 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002262:	e000      	b.n	8002266 <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 8002264:	bf00      	nop
	}
	if (huart->Instance == WIFI_UART_Ins) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_UART_ErrorCallback+0x118>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d10f      	bne.n	8002290 <HAL_UART_ErrorCallback+0x10c>
		new_wifi_data = 1;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_UART_ErrorCallback+0x11c>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff,
 8002276:	2264      	movs	r2, #100	; 0x64
 8002278:	490a      	ldr	r1, [pc, #40]	; (80022a4 <HAL_UART_ErrorCallback+0x120>)
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <HAL_UART_ErrorCallback+0x114>)
 800227c:	f002 ff21 	bl	80050c2 <HAL_UARTEx_ReceiveToIdle_DMA>
				sizeof(wifi_uart_buff));
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_UART_ErrorCallback+0x124>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_UART_ErrorCallback+0x124>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0208 	bic.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
	}
}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20001a58 	.word	0x20001a58
 800229c:	40011000 	.word	0x40011000
 80022a0:	20001c74 	.word	0x20001c74
 80022a4:	20001c78 	.word	0x20001c78
 80022a8:	20001b24 	.word	0x20001b24

080022ac <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == WIFI_UART_Ins) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_UARTEx_RxEventCallback+0x40>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10f      	bne.n	80022e2 <HAL_UARTEx_RxEventCallback+0x36>
		new_wifi_data = 1;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_UARTEx_RxEventCallback+0x44>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 80022c8:	2264      	movs	r2, #100	; 0x64
 80022ca:	490a      	ldr	r1, [pc, #40]	; (80022f4 <HAL_UARTEx_RxEventCallback+0x48>)
 80022cc:	480a      	ldr	r0, [pc, #40]	; (80022f8 <HAL_UARTEx_RxEventCallback+0x4c>)
 80022ce:	f002 fef8 	bl	80050c2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_UARTEx_RxEventCallback+0x50>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_UARTEx_RxEventCallback+0x50>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0208 	bic.w	r2, r2, #8
 80022e0:	601a      	str	r2, [r3, #0]
	}
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40011000 	.word	0x40011000
 80022f0:	20001c74 	.word	0x20001c74
 80022f4:	20001c78 	.word	0x20001c78
 80022f8:	20001a58 	.word	0x20001a58
 80022fc:	20001b24 	.word	0x20001b24

08002300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_Init+0x40>)
 800230a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_Init+0x40>)
 8002316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_Init+0x40>)
 8002322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 fc2e 	bl	8002b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	200f      	movs	r0, #15
 8002330:	f7fe fc3a 	bl	8000ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7fe fc0c 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008
 8002368:	20001d54 	.word	0x20001d54

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20001d54 	.word	0x20001d54

08002384 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0ed      	b.n	8002572 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe f8fe 	bl	80005a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b8:	f7ff ffd8 	bl	800236c <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023be:	e012      	b.n	80023e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c0:	f7ff ffd4 	bl	800236c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	d90b      	bls.n	80023e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2205      	movs	r2, #5
 80023de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0c5      	b.n	8002572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0e5      	beq.n	80023c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0202 	bic.w	r2, r2, #2
 8002402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002404:	f7ff ffb2 	bl	800236c <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800240a:	e012      	b.n	8002432 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800240c:	f7ff ffae 	bl	800236c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b0a      	cmp	r3, #10
 8002418:	d90b      	bls.n	8002432 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2205      	movs	r2, #5
 800242a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e09f      	b.n	8002572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7e1b      	ldrb	r3, [r3, #24]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d108      	bne.n	800245a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e007      	b.n	800246a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7e5b      	ldrb	r3, [r3, #25]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e007      	b.n	8002494 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7e9b      	ldrb	r3, [r3, #26]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d108      	bne.n	80024ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0220 	bic.w	r2, r2, #32
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7edb      	ldrb	r3, [r3, #27]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d108      	bne.n	80024d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0210 	bic.w	r2, r2, #16
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e007      	b.n	80024e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0210 	orr.w	r2, r2, #16
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7f1b      	ldrb	r3, [r3, #28]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d108      	bne.n	8002502 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0208 	orr.w	r2, r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e007      	b.n	8002512 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7f5b      	ldrb	r3, [r3, #29]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0204 	orr.w	r2, r2, #4
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e007      	b.n	800253c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	ea42 0103 	orr.w	r1, r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002592:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d003      	beq.n	80025a2 <HAL_CAN_ConfigFilter+0x26>
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b02      	cmp	r3, #2
 800259e:	f040 80be 	bne.w	800271e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_CAN_ConfigFilter+0x1bc>)
 80025a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	431a      	orrs	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2201      	movs	r2, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	401a      	ands	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d123      	bne.n	800264c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43db      	mvns	r3, r3
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002626:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3248      	adds	r2, #72	; 0x48
 800262c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002640:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002642:	6979      	ldr	r1, [r7, #20]
 8002644:	3348      	adds	r3, #72	; 0x48
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d122      	bne.n	800269a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	431a      	orrs	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002674:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3248      	adds	r2, #72	; 0x48
 800267a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800268e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002690:	6979      	ldr	r1, [r7, #20]
 8002692:	3348      	adds	r3, #72	; 0x48
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	401a      	ands	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026b4:	e007      	b.n	80026c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	431a      	orrs	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	401a      	ands	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026e0:	e007      	b.n	80026f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	431a      	orrs	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002710:	f023 0201 	bic.w	r2, r3, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e006      	b.n	800272c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
  }
}
 800272c:	4618      	mov	r0, r3
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40006400 	.word	0x40006400

0800273c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d12e      	bne.n	80027ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002768:	f7ff fe00 	bl	800236c <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800276e:	e012      	b.n	8002796 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002770:	f7ff fdfc 	bl	800236c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b0a      	cmp	r3, #10
 800277c:	d90b      	bls.n	8002796 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2205      	movs	r2, #5
 800278e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e012      	b.n	80027bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e5      	bne.n	8002770 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e006      	b.n	80027bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
  }
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d003      	beq.n	80027f0 <HAL_CAN_AddTxMessage+0x2c>
 80027e8:	7ffb      	ldrb	r3, [r7, #31]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	f040 80b8 	bne.w	8002960 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002800:	2b00      	cmp	r3, #0
 8002802:	d105      	bne.n	8002810 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80a0 	beq.w	8002950 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	0e1b      	lsrs	r3, r3, #24
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d907      	bls.n	8002830 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e09e      	b.n	800296e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002830:	2201      	movs	r2, #1
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	409a      	lsls	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	6809      	ldr	r1, [r1, #0]
 8002850:	431a      	orrs	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3318      	adds	r3, #24
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	440b      	add	r3, r1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e00f      	b.n	800287e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002868:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800286e:	68f9      	ldr	r1, [r7, #12]
 8002870:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002872:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3318      	adds	r3, #24
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	440b      	add	r3, r1
 800287c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3318      	adds	r3, #24
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	440b      	add	r3, r1
 800288e:	3304      	adds	r3, #4
 8002890:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	7d1b      	ldrb	r3, [r3, #20]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d111      	bne.n	80028be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3318      	adds	r3, #24
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6811      	ldr	r1, [r2, #0]
 80028ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3318      	adds	r3, #24
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	440b      	add	r3, r1
 80028ba:	3304      	adds	r3, #4
 80028bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3307      	adds	r3, #7
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	061a      	lsls	r2, r3, #24
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3306      	adds	r3, #6
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3305      	adds	r3, #5
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	4313      	orrs	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	3204      	adds	r2, #4
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	4610      	mov	r0, r2
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	6811      	ldr	r1, [r2, #0]
 80028e6:	ea43 0200 	orr.w	r2, r3, r0
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	440b      	add	r3, r1
 80028f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80028f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3303      	adds	r3, #3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	061a      	lsls	r2, r3, #24
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3302      	adds	r3, #2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3301      	adds	r3, #1
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	4313      	orrs	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	4610      	mov	r0, r2
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	6811      	ldr	r1, [r2, #0]
 800291c:	ea43 0200 	orr.w	r2, r3, r0
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	440b      	add	r3, r1
 8002926:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800292a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3318      	adds	r3, #24
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	6811      	ldr	r1, [r2, #0]
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3318      	adds	r3, #24
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	440b      	add	r3, r1
 800294a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e00e      	b.n	800296e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e006      	b.n	800296e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800298e:	7afb      	ldrb	r3, [r7, #11]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d002      	beq.n	800299a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002994:	7afb      	ldrb	r3, [r7, #11]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d11d      	bne.n	80029d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3301      	adds	r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_CAN_ActivateNotification+0x1e>
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d109      	bne.n	8002a16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6959      	ldr	r1, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e006      	b.n	8002a24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <__NVIC_SetPriorityGrouping>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff4c 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb2:	f7ff ff61 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7ff ffb1 	bl	8002b24 <NVIC_EncodePriority>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff80 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff54 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff fbb4 	bl	800236c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e099      	b.n	8002d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c30:	e00f      	b.n	8002c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c32:	f7ff fb9b 	bl	800236c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d908      	bls.n	8002c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e078      	b.n	8002d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e8      	bne.n	8002c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_DMA_Init+0x158>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0307 	bic.w	r3, r3, #7
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d117      	bne.n	8002d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fb01 	bl	8003300 <DMA_CheckFifoParam>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d12:	2301      	movs	r3, #1
 8002d14:	e016      	b.n	8002d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fab8 	bl	8003294 <DMA_CalcBaseAndBitshift>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	223f      	movs	r2, #63	; 0x3f
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	f010803f 	.word	0xf010803f

08002d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_DMA_Start_IT+0x26>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e040      	b.n	8002df8 <HAL_DMA_Start_IT+0xa8>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d12f      	bne.n	8002dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fa4a 	bl	8003238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	223f      	movs	r2, #63	; 0x3f
 8002daa:	409a      	lsls	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0216 	orr.w	r2, r2, #22
 8002dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0208 	orr.w	r2, r2, #8
 8002dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e005      	b.n	8002df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e0e:	f7ff faad 	bl	800236c <HAL_GetTick>
 8002e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d008      	beq.n	8002e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e052      	b.n	8002ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0216 	bic.w	r2, r2, #22
 8002e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_DMA_Abort+0x62>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0208 	bic.w	r2, r2, #8
 8002e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	e013      	b.n	8002eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e84:	f7ff fa72 	bl	800236c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d90c      	bls.n	8002eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e015      	b.n	8002ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e4      	bne.n	8002e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	223f      	movs	r2, #63	; 0x3f
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d004      	beq.n	8002efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00c      	b.n	8002f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2205      	movs	r2, #5
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f30:	4b8e      	ldr	r3, [pc, #568]	; (800316c <HAL_DMA_IRQHandler+0x248>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a8e      	ldr	r2, [pc, #568]	; (8003170 <HAL_DMA_IRQHandler+0x24c>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0a9b      	lsrs	r3, r3, #10
 8002f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2208      	movs	r2, #8
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2201      	movs	r2, #1
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0202 	orr.w	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	2204      	movs	r2, #4
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d012      	beq.n	8002ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00b      	beq.n	8002ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2204      	movs	r2, #4
 8002fea:	409a      	lsls	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003000:	2210      	movs	r2, #16
 8003002:	409a      	lsls	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d043      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d03c      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	2210      	movs	r2, #16
 8003020:	409a      	lsls	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d018      	beq.n	8003066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d024      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
 8003052:	e01f      	b.n	8003094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e016      	b.n	8003094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0208 	bic.w	r2, r2, #8
 8003082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	2220      	movs	r2, #32
 800309a:	409a      	lsls	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 808f 	beq.w	80031c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8087 	beq.w	80031c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	2220      	movs	r2, #32
 80030bc:	409a      	lsls	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d136      	bne.n	800313c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0216 	bic.w	r2, r2, #22
 80030dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <HAL_DMA_IRQHandler+0x1da>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0208 	bic.w	r2, r2, #8
 800310c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	223f      	movs	r2, #63	; 0x3f
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312e:	2b00      	cmp	r3, #0
 8003130:	d07e      	beq.n	8003230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
        }
        return;
 800313a:	e079      	b.n	8003230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01d      	beq.n	8003186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	2b00      	cmp	r3, #0
 800315e:	d031      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
 8003168:	e02c      	b.n	80031c4 <HAL_DMA_IRQHandler+0x2a0>
 800316a:	bf00      	nop
 800316c:	20000000 	.word	0x20000000
 8003170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d023      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
 8003184:	e01e      	b.n	80031c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10f      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0210 	bic.w	r2, r2, #16
 80031a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d032      	beq.n	8003232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d022      	beq.n	800321e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2205      	movs	r2, #5
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d307      	bcc.n	800320c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f2      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x2cc>
 800320a:	e000      	b.n	800320e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800320c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
 800322e:	e000      	b.n	8003232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003230:	bf00      	nop
    }
  }
}
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	d108      	bne.n	8003278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003276:	e007      	b.n	8003288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	3b10      	subs	r3, #16
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <DMA_CalcBaseAndBitshift+0x64>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <DMA_CalcBaseAndBitshift+0x68>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d909      	bls.n	80032d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	1d1a      	adds	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	659a      	str	r2, [r3, #88]	; 0x58
 80032d4:	e007      	b.n	80032e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	aaaaaaab 	.word	0xaaaaaaab
 80032fc:	08009110 	.word	0x08009110

08003300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11f      	bne.n	800335a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d856      	bhi.n	80033ce <DMA_CheckFifoParam+0xce>
 8003320:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <DMA_CheckFifoParam+0x28>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	08003339 	.word	0x08003339
 800332c:	0800334b 	.word	0x0800334b
 8003330:	08003339 	.word	0x08003339
 8003334:	080033cf 	.word	0x080033cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d046      	beq.n	80033d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003348:	e043      	b.n	80033d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003352:	d140      	bne.n	80033d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e03d      	b.n	80033d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003362:	d121      	bne.n	80033a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d837      	bhi.n	80033da <DMA_CheckFifoParam+0xda>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <DMA_CheckFifoParam+0x70>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003381 	.word	0x08003381
 8003374:	08003387 	.word	0x08003387
 8003378:	08003381 	.word	0x08003381
 800337c:	08003399 	.word	0x08003399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e030      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d025      	beq.n	80033de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003396:	e022      	b.n	80033de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033a0:	d11f      	bne.n	80033e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a6:	e01c      	b.n	80033e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d903      	bls.n	80033b6 <DMA_CheckFifoParam+0xb6>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d003      	beq.n	80033bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033b4:	e018      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ba:	e015      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      break;
 80033cc:	e00b      	b.n	80033e6 <DMA_CheckFifoParam+0xe6>
      break;
 80033ce:	bf00      	nop
 80033d0:	e00a      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e008      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e006      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e004      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
    }
  } 
  
  return status; 
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop

080033f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_FLASH_Program+0xa0>)
 800340c:	7e1b      	ldrb	r3, [r3, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_FLASH_Program+0x1e>
 8003412:	2302      	movs	r3, #2
 8003414:	e03b      	b.n	800348e <HAL_FLASH_Program+0x96>
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_FLASH_Program+0xa0>)
 8003418:	2201      	movs	r2, #1
 800341a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800341c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003420:	f000 f87c 	bl	800351c <FLASH_WaitForLastOperation>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d12b      	bne.n	8003486 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003434:	783b      	ldrb	r3, [r7, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	68b8      	ldr	r0, [r7, #8]
 800343a:	f000 f927 	bl	800368c <FLASH_Program_Byte>
 800343e:	e016      	b.n	800346e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003446:	883b      	ldrh	r3, [r7, #0]
 8003448:	4619      	mov	r1, r3
 800344a:	68b8      	ldr	r0, [r7, #8]
 800344c:	f000 f8fa 	bl	8003644 <FLASH_Program_HalfWord>
 8003450:	e00d      	b.n	800346e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d105      	bne.n	8003464 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	68b8      	ldr	r0, [r7, #8]
 800345e:	f000 f8cf 	bl	8003600 <FLASH_Program_Word>
 8003462:	e004      	b.n	800346e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003468:	68b8      	ldr	r0, [r7, #8]
 800346a:	f000 f897 	bl	800359c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800346e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003472:	f000 f853 	bl	800351c <FLASH_WaitForLastOperation>
 8003476:	4603      	mov	r3, r0
 8003478:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_FLASH_Program+0xa4>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <HAL_FLASH_Program+0xa4>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_FLASH_Program+0xa0>)
 8003488:	2200      	movs	r2, #0
 800348a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20001d58 	.word	0x20001d58
 800349c:	40023c00 	.word	0x40023c00

080034a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_FLASH_Unlock+0x38>)
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da0b      	bge.n	80034ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_FLASH_Unlock+0x38>)
 80034b4:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_FLASH_Unlock+0x3c>)
 80034b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <HAL_FLASH_Unlock+0x38>)
 80034ba:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <HAL_FLASH_Unlock+0x40>)
 80034bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_FLASH_Unlock+0x38>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da01      	bge.n	80034ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034ca:	79fb      	ldrb	r3, [r7, #7]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40023c00 	.word	0x40023c00
 80034dc:	45670123 	.word	0x45670123
 80034e0:	cdef89ab 	.word	0xcdef89ab

080034e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_FLASH_Lock+0x1c>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_FLASH_Lock+0x1c>)
 80034ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40023c00 	.word	0x40023c00

08003504 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_FLASH_GetError+0x14>)
 800350a:	69db      	ldr	r3, [r3, #28]
}  
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20001d58 	.word	0x20001d58

0800351c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <FLASH_WaitForLastOperation+0x78>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800352e:	f7fe ff1d 	bl	800236c <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003534:	e010      	b.n	8003558 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d00c      	beq.n	8003558 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <FLASH_WaitForLastOperation+0x38>
 8003544:	f7fe ff12 	bl	800236c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d201      	bcs.n	8003558 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e019      	b.n	800358c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e8      	bne.n	8003536 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 8003572:	2201      	movs	r2, #1
 8003574:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <FLASH_WaitForLastOperation+0x7c>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003582:	f000 f8a5 	bl	80036d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
  
}  
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20001d58 	.word	0x20001d58
 8003598:	40023c00 	.word	0x40023c00

0800359c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <FLASH_Program_DoubleWord+0x60>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	4a13      	ldr	r2, [pc, #76]	; (80035fc <FLASH_Program_DoubleWord+0x60>)
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <FLASH_Program_DoubleWord+0x60>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	4a10      	ldr	r2, [pc, #64]	; (80035fc <FLASH_Program_DoubleWord+0x60>)
 80035ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <FLASH_Program_DoubleWord+0x60>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <FLASH_Program_DoubleWord+0x60>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80035d2:	f3bf 8f6f 	isb	sy
}
 80035d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80035d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	000a      	movs	r2, r1
 80035e6:	2300      	movs	r3, #0
 80035e8:	68f9      	ldr	r1, [r7, #12]
 80035ea:	3104      	adds	r1, #4
 80035ec:	4613      	mov	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40023c00 	.word	0x40023c00

08003600 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <FLASH_Program_Word+0x40>)
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <FLASH_Program_Word+0x40>)
 8003610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <FLASH_Program_Word+0x40>)
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <FLASH_Program_Word+0x40>)
 800361c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003620:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <FLASH_Program_Word+0x40>)
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	4a06      	ldr	r2, [pc, #24]	; (8003640 <FLASH_Program_Word+0x40>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40023c00 	.word	0x40023c00

08003644 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003650:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <FLASH_Program_HalfWord+0x44>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a0c      	ldr	r2, [pc, #48]	; (8003688 <FLASH_Program_HalfWord+0x44>)
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <FLASH_Program_HalfWord+0x44>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	4a09      	ldr	r2, [pc, #36]	; (8003688 <FLASH_Program_HalfWord+0x44>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <FLASH_Program_HalfWord+0x44>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <FLASH_Program_HalfWord+0x44>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	801a      	strh	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00

0800368c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <FLASH_Program_Byte+0x40>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <FLASH_Program_Byte+0x40>)
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <FLASH_Program_Byte+0x40>)
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <FLASH_Program_Byte+0x40>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <FLASH_Program_Byte+0x40>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <FLASH_Program_Byte+0x40>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	701a      	strb	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036d4:	4b27      	ldr	r3, [pc, #156]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f043 0310 	orr.w	r3, r3, #16
 80036e8:	4a23      	ldr	r2, [pc, #140]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 80036ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 80036ee:	2210      	movs	r2, #16
 80036f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 8003708:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800370a:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 800370c:	2220      	movs	r2, #32
 800370e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 8003726:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 8003744:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f043 0320 	orr.w	r3, r3, #32
 8003760:	4a05      	ldr	r2, [pc, #20]	; (8003778 <FLASH_SetErrorCode+0xa8>)
 8003762:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <FLASH_SetErrorCode+0xa4>)
 8003766:	2202      	movs	r2, #2
 8003768:	60da      	str	r2, [r3, #12]
  }
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40023c00 	.word	0x40023c00
 8003778:	20001d58 	.word	0x20001d58

0800377c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_FLASHEx_Erase+0xd8>)
 8003790:	7e1b      	ldrb	r3, [r3, #24]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_FLASHEx_Erase+0x1e>
 8003796:	2302      	movs	r3, #2
 8003798:	e058      	b.n	800384c <HAL_FLASHEx_Erase+0xd0>
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_FLASHEx_Erase+0xd8>)
 800379c:	2201      	movs	r2, #1
 800379e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037a4:	f7ff feba 	bl	800351c <FLASH_WaitForLastOperation>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d148      	bne.n	8003844 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d115      	bne.n	80037ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 f844 	bl	800385c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037d8:	f7ff fea0 	bl	800351c <FLASH_WaitForLastOperation>
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_FLASHEx_Erase+0xdc>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_FLASHEx_Erase+0xdc>)
 80037e6:	f023 0304 	bic.w	r3, r3, #4
 80037ea:	6113      	str	r3, [r2, #16]
 80037ec:	e028      	b.n	8003840 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	e01c      	b.n	8003830 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4619      	mov	r1, r3
 80037fe:	68b8      	ldr	r0, [r7, #8]
 8003800:	f000 f850 	bl	80038a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003804:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003808:	f7ff fe88 	bl	800351c <FLASH_WaitForLastOperation>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_FLASHEx_Erase+0xdc>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_FLASHEx_Erase+0xdc>)
 8003816:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800381a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	601a      	str	r2, [r3, #0]
          break;
 8003828:	e00a      	b.n	8003840 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3301      	adds	r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4413      	add	r3, r2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d3da      	bcc.n	80037f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003840:	f000 f878 	bl	8003934 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_FLASHEx_Erase+0xd8>)
 8003846:	2200      	movs	r2, #0
 8003848:	761a      	strb	r2, [r3, #24]

  return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20001d58 	.word	0x20001d58
 8003858:	40023c00 	.word	0x40023c00

0800385c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <FLASH_MassErase+0x44>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4a0c      	ldr	r2, [pc, #48]	; (80038a0 <FLASH_MassErase+0x44>)
 800386e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <FLASH_MassErase+0x44>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <FLASH_MassErase+0x44>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <FLASH_MassErase+0x44>)
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	4313      	orrs	r3, r2
 800388a:	4a05      	ldr	r2, [pc, #20]	; (80038a0 <FLASH_MassErase+0x44>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6113      	str	r3, [r2, #16]
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023c00 	.word	0x40023c00

080038a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e010      	b.n	80038e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d103      	bne.n	80038ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80038c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e009      	b.n	80038e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d103      	bne.n	80038dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80038d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	e002      	b.n	80038e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80038dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038e2:	4b13      	ldr	r3, [pc, #76]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 80038e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	490f      	ldr	r1, [pc, #60]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 8003900:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003904:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4313      	orrs	r3, r2
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 8003912:	f043 0302 	orr.w	r3, r3, #2
 8003916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <FLASH_Erase_Sector+0x8c>)
 800391e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003922:	6113      	str	r3, [r2, #16]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40023c00 	.word	0x40023c00

08003934 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <FLASH_FlushCaches+0x88>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <FLASH_FlushCaches+0x88>)
 800394a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800394e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003956:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <FLASH_FlushCaches+0x88>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a16      	ldr	r2, [pc, #88]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003966:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <FLASH_FlushCaches+0x88>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a13      	ldr	r2, [pc, #76]	; (80039bc <FLASH_FlushCaches+0x88>)
 800396e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003972:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d017      	beq.n	80039b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0d      	ldr	r2, [pc, #52]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800398a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <FLASH_FlushCaches+0x88>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <FLASH_FlushCaches+0x88>)
 8003992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <FLASH_FlushCaches+0x88>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <FLASH_FlushCaches+0x88>)
 800399e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <FLASH_FlushCaches+0x88>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <FLASH_FlushCaches+0x88>)
 80039aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ae:	6013      	str	r3, [r2, #0]
  }
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023c00 	.word	0x40023c00

080039c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e16b      	b.n	8003cb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039dc:	2201      	movs	r2, #1
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	f040 815a 	bne.w	8003cae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d005      	beq.n	8003a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d130      	bne.n	8003a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 0201 	and.w	r2, r3, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d017      	beq.n	8003ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d123      	bne.n	8003b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	08da      	lsrs	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3208      	adds	r2, #8
 8003ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	08da      	lsrs	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3208      	adds	r2, #8
 8003afe:	69b9      	ldr	r1, [r7, #24]
 8003b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80b4 	beq.w	8003cae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b60      	ldr	r3, [pc, #384]	; (8003ccc <HAL_GPIO_Init+0x30c>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	4a5f      	ldr	r2, [pc, #380]	; (8003ccc <HAL_GPIO_Init+0x30c>)
 8003b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b54:	6453      	str	r3, [r2, #68]	; 0x44
 8003b56:	4b5d      	ldr	r3, [pc, #372]	; (8003ccc <HAL_GPIO_Init+0x30c>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b62:	4a5b      	ldr	r2, [pc, #364]	; (8003cd0 <HAL_GPIO_Init+0x310>)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	3302      	adds	r3, #2
 8003b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	220f      	movs	r2, #15
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a52      	ldr	r2, [pc, #328]	; (8003cd4 <HAL_GPIO_Init+0x314>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02b      	beq.n	8003be6 <HAL_GPIO_Init+0x226>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a51      	ldr	r2, [pc, #324]	; (8003cd8 <HAL_GPIO_Init+0x318>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d025      	beq.n	8003be2 <HAL_GPIO_Init+0x222>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a50      	ldr	r2, [pc, #320]	; (8003cdc <HAL_GPIO_Init+0x31c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01f      	beq.n	8003bde <HAL_GPIO_Init+0x21e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4f      	ldr	r2, [pc, #316]	; (8003ce0 <HAL_GPIO_Init+0x320>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d019      	beq.n	8003bda <HAL_GPIO_Init+0x21a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a4e      	ldr	r2, [pc, #312]	; (8003ce4 <HAL_GPIO_Init+0x324>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_GPIO_Init+0x216>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a4d      	ldr	r2, [pc, #308]	; (8003ce8 <HAL_GPIO_Init+0x328>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_GPIO_Init+0x212>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a4c      	ldr	r2, [pc, #304]	; (8003cec <HAL_GPIO_Init+0x32c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <HAL_GPIO_Init+0x20e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_GPIO_Init+0x330>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_GPIO_Init+0x20a>
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	e00e      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	e00c      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003bce:	2306      	movs	r3, #6
 8003bd0:	e00a      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003bd2:	2305      	movs	r3, #5
 8003bd4:	e008      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e006      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e004      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e002      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_GPIO_Init+0x228>
 8003be6:	2300      	movs	r3, #0
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	f002 0203 	and.w	r2, r2, #3
 8003bee:	0092      	lsls	r2, r2, #2
 8003bf0:	4093      	lsls	r3, r2
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf8:	4935      	ldr	r1, [pc, #212]	; (8003cd0 <HAL_GPIO_Init+0x310>)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	089b      	lsrs	r3, r3, #2
 8003bfe:	3302      	adds	r3, #2
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c06:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c2a:	4a32      	ldr	r2, [pc, #200]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c30:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c7e:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b0f      	cmp	r3, #15
 8003cb8:	f67f ae90 	bls.w	80039dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	40020000 	.word	0x40020000
 8003cd8:	40020400 	.word	0x40020400
 8003cdc:	40020800 	.word	0x40020800
 8003ce0:	40020c00 	.word	0x40020c00
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40021400 	.word	0x40021400
 8003cec:	40021800 	.word	0x40021800
 8003cf0:	40021c00 	.word	0x40021c00
 8003cf4:	40013c00 	.word	0x40013c00

08003cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
 8003d04:	4613      	mov	r3, r2
 8003d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d08:	787b      	ldrb	r3, [r7, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d14:	e003      	b.n	8003d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	041a      	lsls	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	619a      	str	r2, [r3, #24]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e034      	b.n	8003da6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003d44:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f245 5255 	movw	r2, #21845	; 0x5555
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6852      	ldr	r2, [r2, #4]
 8003d58:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003d64:	f7fe fb02 	bl	800236c <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d6a:	e00f      	b.n	8003d8c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003d6c:	f7fe fafe 	bl	800236c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b31      	cmp	r3, #49	; 0x31
 8003d78:	d908      	bls.n	8003d8c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00c      	b.n	8003da6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e8      	bne.n	8003d6c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003da2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e267      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dee:	4b88      	ldr	r3, [pc, #544]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b85      	ldr	r3, [pc, #532]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b82      	ldr	r3, [pc, #520]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b7e      	ldr	r3, [pc, #504]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e242      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b76      	ldr	r3, [pc, #472]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a75      	ldr	r2, [pc, #468]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b70      	ldr	r3, [pc, #448]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6f      	ldr	r2, [pc, #444]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b6d      	ldr	r3, [pc, #436]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6c      	ldr	r2, [pc, #432]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b69      	ldr	r3, [pc, #420]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a68      	ldr	r2, [pc, #416]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b66      	ldr	r3, [pc, #408]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a65      	ldr	r2, [pc, #404]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fe fa70 	bl	800236c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fe fa6c 	bl	800236c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e207      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fa5c 	bl	800236c <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fe fa58 	bl	800236c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1f3      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b51      	ldr	r3, [pc, #324]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b44      	ldr	r3, [pc, #272]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1c7      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4937      	ldr	r1, [pc, #220]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b34      	ldr	r3, [pc, #208]	; (8004014 <HAL_RCC_OscConfig+0x244>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fe fa11 	bl	800236c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fe fa0d 	bl	800236c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1a8      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4925      	ldr	r1, [pc, #148]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_RCC_OscConfig+0x244>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe f9f0 	bl	800236c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fe f9ec 	bl	800236c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e187      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d036      	beq.n	8004028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCC_OscConfig+0x248>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe f9d0 	bl	800236c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fe f9cc 	bl	800236c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e167      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
 8003fee:	e01b      	b.n	8004028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_OscConfig+0x248>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe f9b9 	bl	800236c <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e00e      	b.n	800401c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fe f9b5 	bl	800236c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d907      	bls.n	800401c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e150      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
 8004010:	40023800 	.word	0x40023800
 8004014:	42470000 	.word	0x42470000
 8004018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4b88      	ldr	r3, [pc, #544]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 800401e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ea      	bne.n	8003ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8097 	beq.w	8004164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b81      	ldr	r3, [pc, #516]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	4b7d      	ldr	r3, [pc, #500]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	4a7c      	ldr	r2, [pc, #496]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004054:	6413      	str	r3, [r2, #64]	; 0x40
 8004056:	4b7a      	ldr	r3, [pc, #488]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004066:	4b77      	ldr	r3, [pc, #476]	; (8004244 <HAL_RCC_OscConfig+0x474>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d118      	bne.n	80040a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004072:	4b74      	ldr	r3, [pc, #464]	; (8004244 <HAL_RCC_OscConfig+0x474>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a73      	ldr	r2, [pc, #460]	; (8004244 <HAL_RCC_OscConfig+0x474>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407e:	f7fe f975 	bl	800236c <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7fe f971 	bl	800236c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e10c      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <HAL_RCC_OscConfig+0x474>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x2ea>
 80040ac:	4b64      	ldr	r3, [pc, #400]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	4a63      	ldr	r2, [pc, #396]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
 80040b8:	e01c      	b.n	80040f4 <HAL_RCC_OscConfig+0x324>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x30c>
 80040c2:	4b5f      	ldr	r3, [pc, #380]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a5e      	ldr	r2, [pc, #376]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	4b5c      	ldr	r3, [pc, #368]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a5b      	ldr	r2, [pc, #364]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0x324>
 80040dc:	4b58      	ldr	r3, [pc, #352]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4a57      	ldr	r2, [pc, #348]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
 80040e8:	4b55      	ldr	r3, [pc, #340]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a54      	ldr	r2, [pc, #336]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80040ee:	f023 0304 	bic.w	r3, r3, #4
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fe f936 	bl	800236c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	e00a      	b.n	800411a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fe f932 	bl	800236c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0cb      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	4b49      	ldr	r3, [pc, #292]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ee      	beq.n	8004104 <HAL_RCC_OscConfig+0x334>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fe f920 	bl	800236c <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe f91c 	bl	800236c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0b5      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	4b3e      	ldr	r3, [pc, #248]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ee      	bne.n	8004130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d105      	bne.n	8004164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004158:	4b39      	ldr	r3, [pc, #228]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	4a38      	ldr	r2, [pc, #224]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 800415e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a1 	beq.w	80042b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416e:	4b34      	ldr	r3, [pc, #208]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d05c      	beq.n	8004234 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d141      	bne.n	8004206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <HAL_RCC_OscConfig+0x478>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fe f8f0 	bl	800236c <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe f8ec 	bl	800236c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e087      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	4b27      	ldr	r3, [pc, #156]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	019b      	lsls	r3, r3, #6
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	491b      	ldr	r1, [pc, #108]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d8:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x478>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fe f8c5 	bl	800236c <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fe f8c1 	bl	800236c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e05c      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x416>
 8004204:	e054      	b.n	80042b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <HAL_RCC_OscConfig+0x478>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fe f8ae 	bl	800236c <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004214:	f7fe f8aa 	bl	800236c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e045      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCC_OscConfig+0x470>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x444>
 8004232:	e03d      	b.n	80042b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d107      	bne.n	800424c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e038      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
 8004240:	40023800 	.word	0x40023800
 8004244:	40007000 	.word	0x40007000
 8004248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCC_OscConfig+0x4ec>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d028      	beq.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d121      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d11a      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004284:	4293      	cmp	r3, r2
 8004286:	d111      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	3b01      	subs	r3, #1
 8004296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800

080042c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0cc      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b68      	ldr	r3, [pc, #416]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d90c      	bls.n	80042fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b63      	ldr	r3, [pc, #396]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b8      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a58      	ldr	r2, [pc, #352]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800431e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800432c:	4b53      	ldr	r3, [pc, #332]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	494d      	ldr	r1, [pc, #308]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d044      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d119      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d003      	beq.n	800437e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437a:	2b03      	cmp	r3, #3
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b3f      	ldr	r3, [pc, #252]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e067      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b37      	ldr	r3, [pc, #220]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4934      	ldr	r1, [pc, #208]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fd ffdc 	bl	800236c <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fd ffd8 	bl	800236c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e04f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2b      	ldr	r3, [pc, #172]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d20c      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b22      	ldr	r3, [pc, #136]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4916      	ldr	r1, [pc, #88]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490e      	ldr	r1, [pc, #56]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004446:	f000 f821 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490a      	ldr	r1, [pc, #40]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	fa22 f303 	lsr.w	r3, r2, r3
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fc fb9e 	bl	8000ba8 <HAL_InitTick>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023c00 	.word	0x40023c00
 800447c:	40023800 	.word	0x40023800
 8004480:	080090c8 	.word	0x080090c8
 8004484:	20000000 	.word	0x20000000
 8004488:	20000004 	.word	0x20000004

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b094      	sub	sp, #80	; 0x50
 8004492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	2300      	movs	r3, #0
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	2300      	movs	r3, #0
 800449e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a4:	4b79      	ldr	r3, [pc, #484]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d00d      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x40>
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	f200 80e1 	bhi.w	8004678 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044be:	e0db      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b73      	ldr	r3, [pc, #460]	; (8004690 <HAL_RCC_GetSysClockFreq+0x204>)
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044c4:	e0db      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c6:	4b73      	ldr	r3, [pc, #460]	; (8004694 <HAL_RCC_GetSysClockFreq+0x208>)
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ca:	e0d8      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044cc:	4b6f      	ldr	r3, [pc, #444]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d6:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
 80044f6:	2300      	movs	r3, #0
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
 80044fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	0159      	lsls	r1, r3, #5
 800450c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004510:	0150      	lsls	r0, r2, #5
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4621      	mov	r1, r4
 8004518:	1a51      	subs	r1, r2, r1
 800451a:	6139      	str	r1, [r7, #16]
 800451c:	4629      	mov	r1, r5
 800451e:	eb63 0301 	sbc.w	r3, r3, r1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004530:	4659      	mov	r1, fp
 8004532:	018b      	lsls	r3, r1, #6
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800453a:	4651      	mov	r1, sl
 800453c:	018a      	lsls	r2, r1, #6
 800453e:	4651      	mov	r1, sl
 8004540:	ebb2 0801 	subs.w	r8, r2, r1
 8004544:	4659      	mov	r1, fp
 8004546:	eb63 0901 	sbc.w	r9, r3, r1
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800455a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800455e:	4690      	mov	r8, r2
 8004560:	4699      	mov	r9, r3
 8004562:	4623      	mov	r3, r4
 8004564:	eb18 0303 	adds.w	r3, r8, r3
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	462b      	mov	r3, r5
 800456c:	eb49 0303 	adc.w	r3, r9, r3
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800457e:	4629      	mov	r1, r5
 8004580:	024b      	lsls	r3, r1, #9
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004588:	4621      	mov	r1, r4
 800458a:	024a      	lsls	r2, r1, #9
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004592:	2200      	movs	r2, #0
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
 8004596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004598:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800459c:	f7fb fe18 	bl	80001d0 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	e058      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045aa:	4b38      	ldr	r3, [pc, #224]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	099b      	lsrs	r3, r3, #6
 80045b0:	2200      	movs	r2, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	4611      	mov	r1, r2
 80045b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
 80045c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	0159      	lsls	r1, r3, #5
 80045d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d6:	0150      	lsls	r0, r2, #5
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4641      	mov	r1, r8
 80045de:	ebb2 0a01 	subs.w	sl, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004600:	eb63 050b 	sbc.w	r5, r3, fp
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	00eb      	lsls	r3, r5, #3
 800460e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004612:	00e2      	lsls	r2, r4, #3
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	4643      	mov	r3, r8
 800461a:	18e3      	adds	r3, r4, r3
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	464b      	mov	r3, r9
 8004620:	eb45 0303 	adc.w	r3, r5, r3
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004632:	4629      	mov	r1, r5
 8004634:	028b      	lsls	r3, r1, #10
 8004636:	4621      	mov	r1, r4
 8004638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800463c:	4621      	mov	r1, r4
 800463e:	028a      	lsls	r2, r1, #10
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004646:	2200      	movs	r2, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	61fa      	str	r2, [r7, #28]
 800464c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004650:	f7fb fdbe 	bl	80001d0 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800466c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800466e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetSysClockFreq+0x204>)
 800467a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004680:	4618      	mov	r0, r3
 8004682:	3750      	adds	r7, #80	; 0x50
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800
 8004690:	00f42400 	.word	0x00f42400
 8004694:	007a1200 	.word	0x007a1200

08004698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <HAL_RCC_GetHCLKFreq+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000000 	.word	0x20000000

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046b4:	f7ff fff0 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	080090d8 	.word	0x080090d8

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046dc:	f7ff ffdc 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0b5b      	lsrs	r3, r3, #13
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	080090d8 	.word	0x080090d8

08004700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	220f      	movs	r2, #15
 800470e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_RCC_GetClockConfig+0x5c>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0203 	and.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_RCC_GetClockConfig+0x5c>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_RCC_GetClockConfig+0x5c>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_GetClockConfig+0x5c>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_RCC_GetClockConfig+0x60>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0207 	and.w	r2, r3, #7
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	601a      	str	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	40023c00 	.word	0x40023c00

08004764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e041      	b.n	80047fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f839 	bl	8004802 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f000 fa7e 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e04e      	b.n	80048ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a23      	ldr	r2, [pc, #140]	; (80048dc <HAL_TIM_Base_Start_IT+0xc4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d022      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d01d      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x80>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d111      	bne.n	80048bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d010      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	e007      	b.n	80048cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800

080048f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e097      	b.n	8004a3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fc fa7f 	bl	8000e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493c:	f023 0307 	bic.w	r3, r3, #7
 8004940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 f9a9 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	4313      	orrs	r3, r2
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004998:	f023 030c 	bic.w	r3, r3, #12
 800499c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	4313      	orrs	r3, r2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	011a      	lsls	r2, r3, #4
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	031b      	lsls	r3, r3, #12
 80049c8:	4313      	orrs	r3, r2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4313      	orrs	r3, r2
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0202 	mvn.w	r2, #2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8ee 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8e0 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8f1 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8c4 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f8b6 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8c7 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0208 	mvn.w	r2, #8
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f89a 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f88c 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f89d 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f870 	bl	8004c68 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f862 	bl	8004c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f873 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0201 	mvn.w	r2, #1
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fb ffac 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f97e 	bl	8004ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f838 	bl	8004c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0220 	mvn.w	r2, #32
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f948 	bl	8004edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a40      	ldr	r2, [pc, #256]	; (8004db8 <TIM_Base_SetConfig+0x114>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3d      	ldr	r2, [pc, #244]	; (8004dbc <TIM_Base_SetConfig+0x118>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3c      	ldr	r2, [pc, #240]	; (8004dc0 <TIM_Base_SetConfig+0x11c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3b      	ldr	r2, [pc, #236]	; (8004dc4 <TIM_Base_SetConfig+0x120>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3a      	ldr	r2, [pc, #232]	; (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2f      	ldr	r2, [pc, #188]	; (8004db8 <TIM_Base_SetConfig+0x114>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d027      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <TIM_Base_SetConfig+0x118>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d023      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	; (8004dc0 <TIM_Base_SetConfig+0x11c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <TIM_Base_SetConfig+0x120>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a29      	ldr	r2, [pc, #164]	; (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d017      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a28      	ldr	r2, [pc, #160]	; (8004dcc <TIM_Base_SetConfig+0x128>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <TIM_Base_SetConfig+0x12c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a26      	ldr	r2, [pc, #152]	; (8004dd4 <TIM_Base_SetConfig+0x130>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <TIM_Base_SetConfig+0x134>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <TIM_Base_SetConfig+0x138>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a23      	ldr	r2, [pc, #140]	; (8004de0 <TIM_Base_SetConfig+0x13c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <TIM_Base_SetConfig+0x114>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0xf8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <TIM_Base_SetConfig+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d103      	bne.n	8004da4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	615a      	str	r2, [r3, #20]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800
 8004dd8:	40001800 	.word	0x40001800
 8004ddc:	40001c00 	.word	0x40001c00
 8004de0:	40002000 	.word	0x40002000

08004de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e05a      	b.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d01d      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10c      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40001800 	.word	0x40001800

08004edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03f      	b.n	8004f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc f840 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 ff9d 	bl	8005e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	; 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d17c      	bne.n	80050b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_UART_Transmit+0x2c>
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e075      	b.n	80050ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Transmit+0x3e>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06e      	b.n	80050ba <HAL_UART_Transmit+0x11c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	; 0x21
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff2:	f7fd f9bb 	bl	800236c <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500c:	d108      	bne.n	8005020 <HAL_UART_Transmit+0x82>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e003      	b.n	8005028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005030:	e02a      	b.n	8005088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fc55 	bl	80058ec <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e036      	b.n	80050ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	3302      	adds	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e007      	b.n	800507a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1cf      	bne.n	8005032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2140      	movs	r1, #64	; 0x40
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fc25 	bl	80058ec <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e000      	b.n	80050ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050b8:	2302      	movs	r3, #2
  }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b08c      	sub	sp, #48	; 0x30
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	4613      	mov	r3, r2
 80050ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d152      	bne.n	8005182 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e04b      	b.n	8005184 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e044      	b.n	8005184 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	461a      	mov	r2, r3
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fc5a 	bl	80059c8 <UART_Start_Receive_DMA>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800511a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800511e:	2b00      	cmp	r3, #0
 8005120:	d12c      	bne.n	800517c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	2b01      	cmp	r3, #1
 8005128:	d125      	bne.n	8005176 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	617b      	str	r3, [r7, #20]
   return(result);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f043 0310 	orr.w	r3, r3, #16
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005160:	627a      	str	r2, [r7, #36]	; 0x24
 8005162:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6a39      	ldr	r1, [r7, #32]
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	61fb      	str	r3, [r7, #28]
   return(result);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e5      	bne.n	8005140 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005174:	e002      	b.n	800517c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800517c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005180:	e000      	b.n	8005184 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3730      	adds	r7, #48	; 0x30
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b0ba      	sub	sp, #232	; 0xe8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_UART_IRQHandler+0x66>
 80051de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fd91 	bl	8005d12 <UART_Receive_IT>
      return;
 80051f0:	e256      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80de 	beq.w	80053b8 <HAL_UART_IRQHandler+0x22c>
 80051fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80d1 	beq.w	80053b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <HAL_UART_IRQHandler+0xae>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800523a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <HAL_UART_IRQHandler+0xd2>
 8005246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f043 0202 	orr.w	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <HAL_UART_IRQHandler+0xf6>
 800526a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0204 	orr.w	r2, r3, #4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d011      	beq.n	80052b2 <HAL_UART_IRQHandler+0x126>
 800528e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800529a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0208 	orr.w	r2, r3, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 81ed 	beq.w	8005696 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_UART_IRQHandler+0x14e>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fd1c 	bl	8005d12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <HAL_UART_IRQHandler+0x17a>
 80052fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d04f      	beq.n	80053a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fc24 	bl	8005b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b40      	cmp	r3, #64	; 0x40
 8005318:	d141      	bne.n	800539e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3314      	adds	r3, #20
 8005320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3314      	adds	r3, #20
 8005342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800534a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800535e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d9      	bne.n	800531a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	d013      	beq.n	8005396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	4a7d      	ldr	r2, [pc, #500]	; (8005568 <HAL_UART_IRQHandler+0x3dc>)
 8005374:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	4618      	mov	r0, r3
 800537c:	f7fd fdb0 	bl	8002ee0 <HAL_DMA_Abort_IT>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	e00e      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc fef4 	bl	8002184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	e00a      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fef0 	bl	8002184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e006      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fc feec 	bl	8002184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053b2:	e170      	b.n	8005696 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	bf00      	nop
    return;
 80053b6:	e16e      	b.n	8005696 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	f040 814a 	bne.w	8005656 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8143 	beq.w	8005656 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 813c 	beq.w	8005656 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	f040 80b4 	bne.w	800556c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8140 	beq.w	800569a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800541e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005422:	429a      	cmp	r2, r3
 8005424:	f080 8139 	bcs.w	800569a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800542e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543a:	f000 8088 	beq.w	800554e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800545c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800546a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800546e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1d9      	bne.n	800543e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800549a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e1      	bne.n	800548a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3314      	adds	r3, #20
 80054cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e3      	bne.n	80054c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800551c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551e:	f023 0310 	bic.w	r3, r3, #16
 8005522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005530:	65ba      	str	r2, [r7, #88]	; 0x58
 8005532:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800553e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e3      	bne.n	800550c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	4618      	mov	r0, r3
 800554a:	f7fd fc59 	bl	8002e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005556:	b29b      	uxth	r3, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	b29b      	uxth	r3, r3
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fc fea4 	bl	80022ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005564:	e099      	b.n	800569a <HAL_UART_IRQHandler+0x50e>
 8005566:	bf00      	nop
 8005568:	08005c1b 	.word	0x08005c1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005574:	b29b      	uxth	r3, r3
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 808b 	beq.w	800569e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8086 	beq.w	800569e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055b6:	647a      	str	r2, [r7, #68]	; 0x44
 80055b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e3      	bne.n	8005592 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	623b      	str	r3, [r7, #32]
   return(result);
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055ee:	633a      	str	r2, [r7, #48]	; 0x30
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e3      	bne.n	80055ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005634:	61fa      	str	r2, [r7, #28]
 8005636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	617b      	str	r3, [r7, #20]
   return(result);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e3      	bne.n	8005610 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fc fe2c 	bl	80022ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005654:	e023      	b.n	800569e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_UART_IRQHandler+0x4ea>
 8005662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fae7 	bl	8005c42 <UART_Transmit_IT>
    return;
 8005674:	e014      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <HAL_UART_IRQHandler+0x514>
 8005682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb27 	bl	8005ce2 <UART_EndTransmit_IT>
    return;
 8005694:	e004      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
    return;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
      return;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
      return;
 800569e:	bf00      	nop
  }
}
 80056a0:	37e8      	adds	r7, #232	; 0xe8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop

080056a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b09c      	sub	sp, #112	; 0x70
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d172      	bne.n	80057fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	2200      	movs	r2, #0
 800571c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800571e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800572e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005734:	66bb      	str	r3, [r7, #104]	; 0x68
 8005736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800573e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005740:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800574c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e5      	bne.n	800571e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	667b      	str	r3, [r7, #100]	; 0x64
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005772:	647a      	str	r2, [r7, #68]	; 0x44
 8005774:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	663b      	str	r3, [r7, #96]	; 0x60
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057a6:	633a      	str	r2, [r7, #48]	; 0x30
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d119      	bne.n	80057fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0310 	bic.w	r3, r3, #16
 80057e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ea:	61fa      	str	r2, [r7, #28]
 80057ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	69b9      	ldr	r1, [r7, #24]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	617b      	str	r3, [r7, #20]
   return(result);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e5      	bne.n	80057ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	2b01      	cmp	r3, #1
 8005804:	d106      	bne.n	8005814 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800580a:	4619      	mov	r1, r3
 800580c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800580e:	f7fc fd4d 	bl	80022ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005812:	e002      	b.n	800581a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005814:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005816:	f7ff ff51 	bl	80056bc <HAL_UART_RxCpltCallback>
}
 800581a:	bf00      	nop
 800581c:	3770      	adds	r7, #112	; 0x70
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	2b01      	cmp	r3, #1
 8005836:	d108      	bne.n	800584a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	b29b      	uxth	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7fc fd32 	bl	80022ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005848:	e002      	b.n	8005850 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff ff40 	bl	80056d0 <HAL_UART_RxHalfCpltCallback>
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b21      	cmp	r3, #33	; 0x21
 800588a:	d108      	bne.n	800589e <UART_DMAError+0x46>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2200      	movs	r2, #0
 8005896:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005898:	68b8      	ldr	r0, [r7, #8]
 800589a:	f000 f933 	bl	8005b04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b22      	cmp	r3, #34	; 0x22
 80058be:	d108      	bne.n	80058d2 <UART_DMAError+0x7a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058cc:	68b8      	ldr	r0, [r7, #8]
 80058ce:	f000 f941 	bl	8005b54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f043 0210 	orr.w	r2, r3, #16
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058de:	68b8      	ldr	r0, [r7, #8]
 80058e0:	f7fc fc50 	bl	8002184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b090      	sub	sp, #64	; 0x40
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fc:	e050      	b.n	80059a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d04c      	beq.n	80059a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <UART_WaitOnFlagUntilTimeout+0x30>
 800590c:	f7fc fd2e 	bl	800236c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005918:	429a      	cmp	r2, r3
 800591a:	d241      	bcs.n	80059a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800593c:	637a      	str	r2, [r7, #52]	; 0x34
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005970:	623a      	str	r2, [r7, #32]
 8005972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	61bb      	str	r3, [r7, #24]
   return(result);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e00f      	b.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4013      	ands	r3, r2
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d09f      	beq.n	80058fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3740      	adds	r7, #64	; 0x40
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b098      	sub	sp, #96	; 0x60
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2222      	movs	r2, #34	; 0x22
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	4a40      	ldr	r2, [pc, #256]	; (8005af8 <UART_Start_Receive_DMA+0x130>)
 80059f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	4a3f      	ldr	r2, [pc, #252]	; (8005afc <UART_Start_Receive_DMA+0x134>)
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	4a3e      	ldr	r2, [pc, #248]	; (8005b00 <UART_Start_Receive_DMA+0x138>)
 8005a06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a10:	f107 0308 	add.w	r3, r7, #8
 8005a14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	f7fd f992 	bl	8002d50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d019      	beq.n	8005a86 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3314      	adds	r3, #20
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005aa6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ada:	627a      	str	r2, [r7, #36]	; 0x24
 8005adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6a39      	ldr	r1, [r7, #32]
 8005ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3760      	adds	r7, #96	; 0x60
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	080056fd 	.word	0x080056fd
 8005afc:	08005823 	.word	0x08005823
 8005b00:	08005859 	.word	0x08005859

08005b04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	; 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	61ba      	str	r2, [r7, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e5      	bne.n	8005b0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b48:	bf00      	nop
 8005b4a:	3724      	adds	r7, #36	; 0x24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b095      	sub	sp, #84	; 0x54
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b7c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3314      	adds	r3, #20
 8005b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f023 0301 	bic.w	r3, r3, #1
 8005ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e5      	bne.n	8005b90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d119      	bne.n	8005c00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 0310 	bic.w	r3, r3, #16
 8005be2:	647b      	str	r3, [r7, #68]	; 0x44
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bec:	61ba      	str	r2, [r7, #24]
 8005bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6979      	ldr	r1, [r7, #20]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c0e:	bf00      	nop
 8005c10:	3754      	adds	r7, #84	; 0x54
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7fc faa5 	bl	8002184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b21      	cmp	r3, #33	; 0x21
 8005c54:	d13e      	bne.n	8005cd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5e:	d114      	bne.n	8005c8a <UART_Transmit_IT+0x48>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d110      	bne.n	8005c8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	1c9a      	adds	r2, r3, #2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	621a      	str	r2, [r3, #32]
 8005c88:	e008      	b.n	8005c9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6211      	str	r1, [r2, #32]
 8005c94:	781a      	ldrb	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10f      	bne.n	8005cd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fcd0 	bl	80056a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b08c      	sub	sp, #48	; 0x30
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b22      	cmp	r3, #34	; 0x22
 8005d24:	f040 80ab 	bne.w	8005e7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d30:	d117      	bne.n	8005d62 <UART_Receive_IT+0x50>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d113      	bne.n	8005d62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d60:	e026      	b.n	8005db0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d74:	d007      	beq.n	8005d86 <UART_Receive_IT+0x74>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <UART_Receive_IT+0x82>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e008      	b.n	8005da6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d15a      	bne.n	8005e7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0220 	bic.w	r2, r2, #32
 8005dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005de2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695a      	ldr	r2, [r3, #20]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d135      	bne.n	8005e70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f023 0310 	bic.w	r3, r3, #16
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2a:	623a      	str	r2, [r7, #32]
 8005e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	69f9      	ldr	r1, [r7, #28]
 8005e30:	6a3a      	ldr	r2, [r7, #32]
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e5      	bne.n	8005e0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d10a      	bne.n	8005e62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7fc fa1f 	bl	80022ac <HAL_UARTEx_RxEventCallback>
 8005e6e:	e002      	b.n	8005e76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fc23 	bl	80056bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e002      	b.n	8005e80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e000      	b.n	8005e80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3730      	adds	r7, #48	; 0x30
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e8c:	b0c0      	sub	sp, #256	; 0x100
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	68d9      	ldr	r1, [r3, #12]
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	ea40 0301 	orr.w	r3, r0, r1
 8005eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ee0:	f021 010c 	bic.w	r1, r1, #12
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f02:	6999      	ldr	r1, [r3, #24]
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	ea40 0301 	orr.w	r3, r0, r1
 8005f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b8f      	ldr	r3, [pc, #572]	; (8006154 <UART_SetConfig+0x2cc>)
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d005      	beq.n	8005f28 <UART_SetConfig+0xa0>
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b8d      	ldr	r3, [pc, #564]	; (8006158 <UART_SetConfig+0x2d0>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d104      	bne.n	8005f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f28:	f7fe fbd6 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 8005f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f30:	e003      	b.n	8005f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f32:	f7fe fbbd 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8005f36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f44:	f040 810c 	bne.w	8006160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	1891      	adds	r1, r2, r2
 8005f60:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f62:	415b      	adcs	r3, r3
 8005f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	eb12 0801 	adds.w	r8, r2, r1
 8005f70:	4629      	mov	r1, r5
 8005f72:	eb43 0901 	adc.w	r9, r3, r1
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f8a:	4690      	mov	r8, r2
 8005f8c:	4699      	mov	r9, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	eb18 0303 	adds.w	r3, r8, r3
 8005f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f98:	462b      	mov	r3, r5
 8005f9a:	eb49 0303 	adc.w	r3, r9, r3
 8005f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	18db      	adds	r3, r3, r3
 8005fba:	653b      	str	r3, [r7, #80]	; 0x50
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	eb42 0303 	adc.w	r3, r2, r3
 8005fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fcc:	f7fa f900 	bl	80001d0 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4b61      	ldr	r3, [pc, #388]	; (800615c <UART_SetConfig+0x2d4>)
 8005fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	011c      	lsls	r4, r3, #4
 8005fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	1891      	adds	r1, r2, r2
 8005ff6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ff8:	415b      	adcs	r3, r3
 8005ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006000:	4641      	mov	r1, r8
 8006002:	eb12 0a01 	adds.w	sl, r2, r1
 8006006:	4649      	mov	r1, r9
 8006008:	eb43 0b01 	adc.w	fp, r3, r1
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800601c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006020:	4692      	mov	sl, r2
 8006022:	469b      	mov	fp, r3
 8006024:	4643      	mov	r3, r8
 8006026:	eb1a 0303 	adds.w	r3, sl, r3
 800602a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800602e:	464b      	mov	r3, r9
 8006030:	eb4b 0303 	adc.w	r3, fp, r3
 8006034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006044:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800604c:	460b      	mov	r3, r1
 800604e:	18db      	adds	r3, r3, r3
 8006050:	643b      	str	r3, [r7, #64]	; 0x40
 8006052:	4613      	mov	r3, r2
 8006054:	eb42 0303 	adc.w	r3, r2, r3
 8006058:	647b      	str	r3, [r7, #68]	; 0x44
 800605a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800605e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006062:	f7fa f8b5 	bl	80001d0 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4611      	mov	r1, r2
 800606c:	4b3b      	ldr	r3, [pc, #236]	; (800615c <UART_SetConfig+0x2d4>)
 800606e:	fba3 2301 	umull	r2, r3, r3, r1
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	2264      	movs	r2, #100	; 0x64
 8006076:	fb02 f303 	mul.w	r3, r2, r3
 800607a:	1acb      	subs	r3, r1, r3
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006082:	4b36      	ldr	r3, [pc, #216]	; (800615c <UART_SetConfig+0x2d4>)
 8006084:	fba3 2302 	umull	r2, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006090:	441c      	add	r4, r3
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006096:	2200      	movs	r2, #0
 8006098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800609c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80060ac:	415b      	adcs	r3, r3
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060b4:	4641      	mov	r1, r8
 80060b6:	1851      	adds	r1, r2, r1
 80060b8:	6339      	str	r1, [r7, #48]	; 0x30
 80060ba:	4649      	mov	r1, r9
 80060bc:	414b      	adcs	r3, r1
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060cc:	4659      	mov	r1, fp
 80060ce:	00cb      	lsls	r3, r1, #3
 80060d0:	4651      	mov	r1, sl
 80060d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060d6:	4651      	mov	r1, sl
 80060d8:	00ca      	lsls	r2, r1, #3
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	4642      	mov	r2, r8
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060e8:	464b      	mov	r3, r9
 80060ea:	460a      	mov	r2, r1
 80060ec:	eb42 0303 	adc.w	r3, r2, r3
 80060f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006100:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006108:	460b      	mov	r3, r1
 800610a:	18db      	adds	r3, r3, r3
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28
 800610e:	4613      	mov	r3, r2
 8006110:	eb42 0303 	adc.w	r3, r2, r3
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800611a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800611e:	f7fa f857 	bl	80001d0 <__aeabi_uldivmod>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <UART_SetConfig+0x2d4>)
 8006128:	fba3 1302 	umull	r1, r3, r3, r2
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	2164      	movs	r1, #100	; 0x64
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	3332      	adds	r3, #50	; 0x32
 800613a:	4a08      	ldr	r2, [pc, #32]	; (800615c <UART_SetConfig+0x2d4>)
 800613c:	fba2 2303 	umull	r2, r3, r2, r3
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	f003 0207 	and.w	r2, r3, #7
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4422      	add	r2, r4
 800614e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006150:	e105      	b.n	800635e <UART_SetConfig+0x4d6>
 8006152:	bf00      	nop
 8006154:	40011000 	.word	0x40011000
 8006158:	40011400 	.word	0x40011400
 800615c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006164:	2200      	movs	r2, #0
 8006166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800616a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800616e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006172:	4642      	mov	r2, r8
 8006174:	464b      	mov	r3, r9
 8006176:	1891      	adds	r1, r2, r2
 8006178:	6239      	str	r1, [r7, #32]
 800617a:	415b      	adcs	r3, r3
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
 800617e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006182:	4641      	mov	r1, r8
 8006184:	1854      	adds	r4, r2, r1
 8006186:	4649      	mov	r1, r9
 8006188:	eb43 0501 	adc.w	r5, r3, r1
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	00eb      	lsls	r3, r5, #3
 8006196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619a:	00e2      	lsls	r2, r4, #3
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	4643      	mov	r3, r8
 80061a2:	18e3      	adds	r3, r4, r3
 80061a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061a8:	464b      	mov	r3, r9
 80061aa:	eb45 0303 	adc.w	r3, r5, r3
 80061ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061ce:	4629      	mov	r1, r5
 80061d0:	008b      	lsls	r3, r1, #2
 80061d2:	4621      	mov	r1, r4
 80061d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d8:	4621      	mov	r1, r4
 80061da:	008a      	lsls	r2, r1, #2
 80061dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061e0:	f7f9 fff6 	bl	80001d0 <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4b60      	ldr	r3, [pc, #384]	; (800636c <UART_SetConfig+0x4e4>)
 80061ea:	fba3 2302 	umull	r2, r3, r3, r2
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	011c      	lsls	r4, r3, #4
 80061f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	1891      	adds	r1, r2, r2
 800620a:	61b9      	str	r1, [r7, #24]
 800620c:	415b      	adcs	r3, r3
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006214:	4641      	mov	r1, r8
 8006216:	1851      	adds	r1, r2, r1
 8006218:	6139      	str	r1, [r7, #16]
 800621a:	4649      	mov	r1, r9
 800621c:	414b      	adcs	r3, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800622c:	4659      	mov	r1, fp
 800622e:	00cb      	lsls	r3, r1, #3
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006236:	4651      	mov	r1, sl
 8006238:	00ca      	lsls	r2, r1, #3
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	4603      	mov	r3, r0
 8006240:	4642      	mov	r2, r8
 8006242:	189b      	adds	r3, r3, r2
 8006244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006248:	464b      	mov	r3, r9
 800624a:	460a      	mov	r2, r1
 800624c:	eb42 0303 	adc.w	r3, r2, r3
 8006250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	67bb      	str	r3, [r7, #120]	; 0x78
 800625e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800626c:	4649      	mov	r1, r9
 800626e:	008b      	lsls	r3, r1, #2
 8006270:	4641      	mov	r1, r8
 8006272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006276:	4641      	mov	r1, r8
 8006278:	008a      	lsls	r2, r1, #2
 800627a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800627e:	f7f9 ffa7 	bl	80001d0 <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4b39      	ldr	r3, [pc, #228]	; (800636c <UART_SetConfig+0x4e4>)
 8006288:	fba3 1302 	umull	r1, r3, r3, r2
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	2164      	movs	r1, #100	; 0x64
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	3332      	adds	r3, #50	; 0x32
 800629a:	4a34      	ldr	r2, [pc, #208]	; (800636c <UART_SetConfig+0x4e4>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062a6:	441c      	add	r4, r3
 80062a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ac:	2200      	movs	r2, #0
 80062ae:	673b      	str	r3, [r7, #112]	; 0x70
 80062b0:	677a      	str	r2, [r7, #116]	; 0x74
 80062b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062b6:	4642      	mov	r2, r8
 80062b8:	464b      	mov	r3, r9
 80062ba:	1891      	adds	r1, r2, r2
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	415b      	adcs	r3, r3
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062c6:	4641      	mov	r1, r8
 80062c8:	1851      	adds	r1, r2, r1
 80062ca:	6039      	str	r1, [r7, #0]
 80062cc:	4649      	mov	r1, r9
 80062ce:	414b      	adcs	r3, r1
 80062d0:	607b      	str	r3, [r7, #4]
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062de:	4659      	mov	r1, fp
 80062e0:	00cb      	lsls	r3, r1, #3
 80062e2:	4651      	mov	r1, sl
 80062e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e8:	4651      	mov	r1, sl
 80062ea:	00ca      	lsls	r2, r1, #3
 80062ec:	4610      	mov	r0, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	4603      	mov	r3, r0
 80062f2:	4642      	mov	r2, r8
 80062f4:	189b      	adds	r3, r3, r2
 80062f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f8:	464b      	mov	r3, r9
 80062fa:	460a      	mov	r2, r1
 80062fc:	eb42 0303 	adc.w	r3, r2, r3
 8006300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	663b      	str	r3, [r7, #96]	; 0x60
 800630c:	667a      	str	r2, [r7, #100]	; 0x64
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800631a:	4649      	mov	r1, r9
 800631c:	008b      	lsls	r3, r1, #2
 800631e:	4641      	mov	r1, r8
 8006320:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006324:	4641      	mov	r1, r8
 8006326:	008a      	lsls	r2, r1, #2
 8006328:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800632c:	f7f9 ff50 	bl	80001d0 <__aeabi_uldivmod>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4b0d      	ldr	r3, [pc, #52]	; (800636c <UART_SetConfig+0x4e4>)
 8006336:	fba3 1302 	umull	r1, r3, r3, r2
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	2164      	movs	r1, #100	; 0x64
 800633e:	fb01 f303 	mul.w	r3, r1, r3
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	3332      	adds	r3, #50	; 0x32
 8006348:	4a08      	ldr	r2, [pc, #32]	; (800636c <UART_SetConfig+0x4e4>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4422      	add	r2, r4
 800635c:	609a      	str	r2, [r3, #8]
}
 800635e:	bf00      	nop
 8006360:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006364:	46bd      	mov	sp, r7
 8006366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800636a:	bf00      	nop
 800636c:	51eb851f 	.word	0x51eb851f

08006370 <__NVIC_SetPriority>:
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	6039      	str	r1, [r7, #0]
 800637a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800637c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006380:	2b00      	cmp	r3, #0
 8006382:	db0a      	blt.n	800639a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	b2da      	uxtb	r2, r3
 8006388:	490c      	ldr	r1, [pc, #48]	; (80063bc <__NVIC_SetPriority+0x4c>)
 800638a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800638e:	0112      	lsls	r2, r2, #4
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	440b      	add	r3, r1
 8006394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006398:	e00a      	b.n	80063b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	4908      	ldr	r1, [pc, #32]	; (80063c0 <__NVIC_SetPriority+0x50>)
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	3b04      	subs	r3, #4
 80063a8:	0112      	lsls	r2, r2, #4
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	440b      	add	r3, r1
 80063ae:	761a      	strb	r2, [r3, #24]
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	e000e100 	.word	0xe000e100
 80063c0:	e000ed00 	.word	0xe000ed00

080063c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <SysTick_Handler+0x1c>)
 80063ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80063cc:	f001 fcfe 	bl	8007dcc <xTaskGetSchedulerState>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d001      	beq.n	80063da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80063d6:	f002 fae7 	bl	80089a8 <xPortSysTickHandler>
  }
}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	e000e010 	.word	0xe000e010

080063e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063e8:	2100      	movs	r1, #0
 80063ea:	f06f 0004 	mvn.w	r0, #4
 80063ee:	f7ff ffbf 	bl	8006370 <__NVIC_SetPriority>
#endif
}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fe:	f3ef 8305 	mrs	r3, IPSR
 8006402:	603b      	str	r3, [r7, #0]
  return(result);
 8006404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800640a:	f06f 0305 	mvn.w	r3, #5
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	e00c      	b.n	800642c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <osKernelInitialize+0x44>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d105      	bne.n	8006426 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <osKernelInitialize+0x44>)
 800641c:	2201      	movs	r2, #1
 800641e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006420:	2300      	movs	r3, #0
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	e002      	b.n	800642c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006426:	f04f 33ff 	mov.w	r3, #4294967295
 800642a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800642c:	687b      	ldr	r3, [r7, #4]
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20001d78 	.word	0x20001d78

08006440 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006446:	f3ef 8305 	mrs	r3, IPSR
 800644a:	603b      	str	r3, [r7, #0]
  return(result);
 800644c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006452:	f06f 0305 	mvn.w	r3, #5
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	e010      	b.n	800647c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800645a:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <osKernelStart+0x48>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d109      	bne.n	8006476 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006462:	f7ff ffbf 	bl	80063e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <osKernelStart+0x48>)
 8006468:	2202      	movs	r2, #2
 800646a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800646c:	f001 f866 	bl	800753c <vTaskStartScheduler>
      stat = osOK;
 8006470:	2300      	movs	r3, #0
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	e002      	b.n	800647c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
 800647a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800647c:	687b      	ldr	r3, [r7, #4]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20001d78 	.word	0x20001d78

0800648c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b08e      	sub	sp, #56	; 0x38
 8006490:	af04      	add	r7, sp, #16
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649c:	f3ef 8305 	mrs	r3, IPSR
 80064a0:	617b      	str	r3, [r7, #20]
  return(result);
 80064a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d17e      	bne.n	80065a6 <osThreadNew+0x11a>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d07b      	beq.n	80065a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064b2:	2318      	movs	r3, #24
 80064b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d045      	beq.n	8006552 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <osThreadNew+0x48>
        name = attr->name;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <osThreadNew+0x6e>
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b38      	cmp	r3, #56	; 0x38
 80064ec:	d805      	bhi.n	80064fa <osThreadNew+0x6e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <osThreadNew+0x72>
        return (NULL);
 80064fa:	2300      	movs	r3, #0
 80064fc:	e054      	b.n	80065a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	089b      	lsrs	r3, r3, #2
 800650c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <osThreadNew+0xa8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b5b      	cmp	r3, #91	; 0x5b
 800651c:	d90a      	bls.n	8006534 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006522:	2b00      	cmp	r3, #0
 8006524:	d006      	beq.n	8006534 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <osThreadNew+0xa8>
        mem = 1;
 800652e:	2301      	movs	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e010      	b.n	8006556 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10c      	bne.n	8006556 <osThreadNew+0xca>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d108      	bne.n	8006556 <osThreadNew+0xca>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <osThreadNew+0xca>
          mem = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	e001      	b.n	8006556 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d110      	bne.n	800657e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006564:	9202      	str	r2, [sp, #8]
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fe0c 	bl	8007190 <xTaskCreateStatic>
 8006578:	4603      	mov	r3, r0
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	e013      	b.n	80065a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d110      	bne.n	80065a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f107 0310 	add.w	r3, r7, #16
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fe57 	bl	800724a <xTaskCreate>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d001      	beq.n	80065a6 <osThreadNew+0x11a>
            hTask = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065a6:	693b      	ldr	r3, [r7, #16]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3728      	adds	r7, #40	; 0x28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b8:	f3ef 8305 	mrs	r3, IPSR
 80065bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80065be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <osDelay+0x1c>
    stat = osErrorISR;
 80065c4:	f06f 0305 	mvn.w	r3, #5
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e007      	b.n	80065dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 ff7c 	bl	80074d4 <vTaskDelay>
    }
  }

  return (stat);
 80065dc:	68fb      	ldr	r3, [r7, #12]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a07      	ldr	r2, [pc, #28]	; (8006614 <vApplicationGetIdleTaskMemory+0x2c>)
 80065f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4a06      	ldr	r2, [pc, #24]	; (8006618 <vApplicationGetIdleTaskMemory+0x30>)
 80065fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2280      	movs	r2, #128	; 0x80
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20001d7c 	.word	0x20001d7c
 8006618:	20001dd8 	.word	0x20001dd8

0800661c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4a07      	ldr	r2, [pc, #28]	; (8006648 <vApplicationGetTimerTaskMemory+0x2c>)
 800662c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4a06      	ldr	r2, [pc, #24]	; (800664c <vApplicationGetTimerTaskMemory+0x30>)
 8006632:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800663a:	601a      	str	r2, [r3, #0]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	20001fd8 	.word	0x20001fd8
 800664c:	20002034 	.word	0x20002034

08006650 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f103 0208 	add.w	r2, r3, #8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f103 0208 	add.w	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f103 0208 	add.w	r2, r3, #8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d103      	bne.n	8006712 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e00c      	b.n	800672c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3308      	adds	r3, #8
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e002      	b.n	8006720 <vListInsert+0x2e>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d2f6      	bcs.n	800671a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6892      	ldr	r2, [r2, #8]
 800677a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6852      	ldr	r2, [r2, #4]
 8006784:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d103      	bne.n	8006798 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	1e5a      	subs	r2, r3, #1
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067e2:	f002 f84f 	bl	8008884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067f2:	fb01 f303 	mul.w	r3, r1, r3
 80067f6:	441a      	add	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	3b01      	subs	r3, #1
 8006814:	68f9      	ldr	r1, [r7, #12]
 8006816:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	441a      	add	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d114      	bne.n	8006862 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01a      	beq.n	8006876 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3310      	adds	r3, #16
 8006844:	4618      	mov	r0, r3
 8006846:	f001 f903 	bl	8007a50 <xTaskRemoveFromEventList>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d012      	beq.n	8006876 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <xQueueGenericReset+0xcc>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	e009      	b.n	8006876 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3310      	adds	r3, #16
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fef2 	bl	8006650 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3324      	adds	r3, #36	; 0x24
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff feed 	bl	8006650 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006876:	f002 f835 	bl	80088e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800687a:	2301      	movs	r3, #1
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08e      	sub	sp, #56	; 0x38
 800688c:	af02      	add	r7, sp, #8
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <xQueueGenericCreateStatic+0x52>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <xQueueGenericCreateStatic+0x56>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <xQueueGenericCreateStatic+0x58>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	623b      	str	r3, [r7, #32]
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <xQueueGenericCreateStatic+0x7e>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <xQueueGenericCreateStatic+0x82>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <xQueueGenericCreateStatic+0x84>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	61fb      	str	r3, [r7, #28]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006926:	2350      	movs	r3, #80	; 0x50
 8006928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b50      	cmp	r3, #80	; 0x50
 800692e:	d00a      	beq.n	8006946 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	61bb      	str	r3, [r7, #24]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006946:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00d      	beq.n	800696e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800695a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	4613      	mov	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f805 	bl	8006978 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006970:	4618      	mov	r0, r3
 8006972:	3730      	adds	r7, #48	; 0x30
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	e002      	b.n	800699a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069a6:	2101      	movs	r1, #1
 80069a8:	69b8      	ldr	r0, [r7, #24]
 80069aa:	f7ff ff05 	bl	80067b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08e      	sub	sp, #56	; 0x38
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <xQueueGenericSend+0x32>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <xQueueGenericSend+0x40>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <xQueueGenericSend+0x44>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <xQueueGenericSend+0x46>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <xQueueGenericSend+0x60>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d103      	bne.n	8006a2e <xQueueGenericSend+0x6e>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <xQueueGenericSend+0x72>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <xQueueGenericSend+0x74>
 8006a32:	2300      	movs	r3, #0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <xQueueGenericSend+0x8e>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	623b      	str	r3, [r7, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	e7fe      	b.n	8006a4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a4e:	f001 f9bd 	bl	8007dcc <xTaskGetSchedulerState>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <xQueueGenericSend+0x9e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <xQueueGenericSend+0xa2>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <xQueueGenericSend+0xa4>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <xQueueGenericSend+0xbe>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	61fb      	str	r3, [r7, #28]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a7e:	f001 ff01 	bl	8008884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d302      	bcc.n	8006a94 <xQueueGenericSend+0xd4>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d129      	bne.n	8006ae8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9a:	f000 fa0b 	bl	8006eb4 <prvCopyDataToQueue>
 8006a9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d010      	beq.n	8006aca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 ffcf 	bl	8007a50 <xTaskRemoveFromEventList>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d013      	beq.n	8006ae0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ab8:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <xQueueGenericSend+0x1f8>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	e00a      	b.n	8006ae0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d007      	beq.n	8006ae0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ad0:	4b39      	ldr	r3, [pc, #228]	; (8006bb8 <xQueueGenericSend+0x1f8>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ae0:	f001 ff00 	bl	80088e4 <vPortExitCritical>
				return pdPASS;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e063      	b.n	8006bb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aee:	f001 fef9 	bl	80088e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e05c      	b.n	8006bb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006afc:	f107 0314 	add.w	r3, r7, #20
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 f809 	bl	8007b18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b06:	2301      	movs	r3, #1
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b0a:	f001 feeb 	bl	80088e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b0e:	f000 fd7b 	bl	8007608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b12:	f001 feb7 	bl	8008884 <vPortEnterCritical>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b1c:	b25b      	sxtb	r3, r3
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d103      	bne.n	8006b2c <xQueueGenericSend+0x16c>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b32:	b25b      	sxtb	r3, r3
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d103      	bne.n	8006b42 <xQueueGenericSend+0x182>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b42:	f001 fecf 	bl	80088e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b46:	1d3a      	adds	r2, r7, #4
 8006b48:	f107 0314 	add.w	r3, r7, #20
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fff8 	bl	8007b44 <xTaskCheckForTimeOut>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d124      	bne.n	8006ba4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5c:	f000 faa2 	bl	80070a4 <prvIsQueueFull>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d018      	beq.n	8006b98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	3310      	adds	r3, #16
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 ff1e 	bl	80079b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b76:	f000 fa2d 	bl	8006fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b7a:	f000 fd53 	bl	8007624 <xTaskResumeAll>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f47f af7c 	bne.w	8006a7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <xQueueGenericSend+0x1f8>)
 8006b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	e772      	b.n	8006a7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b9a:	f000 fa1b 	bl	8006fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b9e:	f000 fd41 	bl	8007624 <xTaskResumeAll>
 8006ba2:	e76c      	b.n	8006a7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ba6:	f000 fa15 	bl	8006fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006baa:	f000 fd3b 	bl	8007624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3738      	adds	r7, #56	; 0x38
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b090      	sub	sp, #64	; 0x40
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d103      	bne.n	8006bf8 <xQueueGenericSendFromISR+0x3c>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <xQueueGenericSendFromISR+0x40>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <xQueueGenericSendFromISR+0x42>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d103      	bne.n	8006c26 <xQueueGenericSendFromISR+0x6a>
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <xQueueGenericSendFromISR+0x6e>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <xQueueGenericSendFromISR+0x70>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	623b      	str	r3, [r7, #32]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c46:	f001 feff 	bl	8008a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	61fa      	str	r2, [r7, #28]
 8006c60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <xQueueGenericSendFromISR+0xbc>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d12f      	bne.n	8006cd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c8e:	f000 f911 	bl	8006eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d112      	bne.n	8006cc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fed1 	bl	8007a50 <xTaskRemoveFromEventList>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00e      	beq.n	8006cd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e007      	b.n	8006cd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	b25a      	sxtb	r2, r3
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006cd6:	e001      	b.n	8006cdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ce6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3740      	adds	r7, #64	; 0x40
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <xQueueReceive+0x30>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	623b      	str	r3, [r7, #32]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <xQueueReceive+0x3e>
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <xQueueReceive+0x42>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueReceive+0x44>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueReceive+0x5e>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	61fb      	str	r3, [r7, #28]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d52:	f001 f83b 	bl	8007dcc <xTaskGetSchedulerState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <xQueueReceive+0x6e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <xQueueReceive+0x72>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueReceive+0x74>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xQueueReceive+0x8e>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	61bb      	str	r3, [r7, #24]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d82:	f001 fd7f 	bl	8008884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01f      	beq.n	8006dd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d96:	f000 f8f7 	bl	8006f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	1e5a      	subs	r2, r3, #1
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00f      	beq.n	8006dca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	3310      	adds	r3, #16
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fe4e 	bl	8007a50 <xTaskRemoveFromEventList>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dba:	4b3d      	ldr	r3, [pc, #244]	; (8006eb0 <xQueueReceive+0x1bc>)
 8006dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dca:	f001 fd8b 	bl	80088e4 <vPortExitCritical>
				return pdPASS;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e069      	b.n	8006ea6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dd8:	f001 fd84 	bl	80088e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e062      	b.n	8006ea6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de6:	f107 0310 	add.w	r3, r7, #16
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fe94 	bl	8007b18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df4:	f001 fd76 	bl	80088e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006df8:	f000 fc06 	bl	8007608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dfc:	f001 fd42 	bl	8008884 <vPortEnterCritical>
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e06:	b25b      	sxtb	r3, r3
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d103      	bne.n	8006e16 <xQueueReceive+0x122>
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d103      	bne.n	8006e2c <xQueueReceive+0x138>
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e2c:	f001 fd5a 	bl	80088e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e30:	1d3a      	adds	r2, r7, #4
 8006e32:	f107 0310 	add.w	r3, r7, #16
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fe83 	bl	8007b44 <xTaskCheckForTimeOut>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d123      	bne.n	8006e8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e46:	f000 f917 	bl	8007078 <prvIsQueueEmpty>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d017      	beq.n	8006e80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	3324      	adds	r3, #36	; 0x24
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fda9 	bl	80079b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e60:	f000 f8b8 	bl	8006fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e64:	f000 fbde 	bl	8007624 <xTaskResumeAll>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d189      	bne.n	8006d82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e6e:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <xQueueReceive+0x1bc>)
 8006e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	e780      	b.n	8006d82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e82:	f000 f8a7 	bl	8006fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e86:	f000 fbcd 	bl	8007624 <xTaskResumeAll>
 8006e8a:	e77a      	b.n	8006d82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8e:	f000 f8a1 	bl	8006fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e92:	f000 fbc7 	bl	8007624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e98:	f000 f8ee 	bl	8007078 <prvIsQueueEmpty>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f43f af6f 	beq.w	8006d82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3730      	adds	r7, #48	; 0x30
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d14d      	bne.n	8006f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 ff92 	bl	8007e08 <xTaskPriorityDisinherit>
 8006ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	609a      	str	r2, [r3, #8]
 8006eec:	e043      	b.n	8006f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d119      	bne.n	8006f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6858      	ldr	r0, [r3, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	461a      	mov	r2, r3
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	f001 fff0 	bl	8008ee4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d32b      	bcc.n	8006f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	e026      	b.n	8006f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68d8      	ldr	r0, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	461a      	mov	r2, r3
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	f001 ffd6 	bl	8008ee4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	425b      	negs	r3, r3
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d207      	bcs.n	8006f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	425b      	negs	r3, r3
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d105      	bne.n	8006f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f7e:	697b      	ldr	r3, [r7, #20]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d018      	beq.n	8006fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	441a      	add	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d303      	bcc.n	8006fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68d9      	ldr	r1, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6838      	ldr	r0, [r7, #0]
 8006fc8:	f001 ff8c 	bl	8008ee4 <memcpy>
	}
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fdc:	f001 fc52 	bl	8008884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe8:	e011      	b.n	800700e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d012      	beq.n	8007018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fd2a 	bl	8007a50 <xTaskRemoveFromEventList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007002:	f000 fe01 	bl	8007c08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	3b01      	subs	r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007012:	2b00      	cmp	r3, #0
 8007014:	dce9      	bgt.n	8006fea <prvUnlockQueue+0x16>
 8007016:	e000      	b.n	800701a <prvUnlockQueue+0x46>
					break;
 8007018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007022:	f001 fc5f 	bl	80088e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007026:	f001 fc2d 	bl	8008884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007032:	e011      	b.n	8007058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d012      	beq.n	8007062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3310      	adds	r3, #16
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fd05 	bl	8007a50 <xTaskRemoveFromEventList>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800704c:	f000 fddc 	bl	8007c08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	3b01      	subs	r3, #1
 8007054:	b2db      	uxtb	r3, r3
 8007056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800705c:	2b00      	cmp	r3, #0
 800705e:	dce9      	bgt.n	8007034 <prvUnlockQueue+0x60>
 8007060:	e000      	b.n	8007064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	22ff      	movs	r2, #255	; 0xff
 8007068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800706c:	f001 fc3a 	bl	80088e4 <vPortExitCritical>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007080:	f001 fc00 	bl	8008884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e001      	b.n	8007096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f001 fc25 	bl	80088e4 <vPortExitCritical>

	return xReturn;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ac:	f001 fbea 	bl	8008884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d102      	bne.n	80070c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e001      	b.n	80070c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c6:	f001 fc0d 	bl	80088e4 <vPortExitCritical>

	return xReturn;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e014      	b.n	800710e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070e4:	4a0f      	ldr	r2, [pc, #60]	; (8007124 <vQueueAddToRegistry+0x50>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070f0:	490c      	ldr	r1, [pc, #48]	; (8007124 <vQueueAddToRegistry+0x50>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070fa:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <vQueueAddToRegistry+0x50>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007106:	e006      	b.n	8007116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b07      	cmp	r3, #7
 8007112:	d9e7      	bls.n	80070e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20002434 	.word	0x20002434

08007128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007138:	f001 fba4 	bl	8008884 <vPortEnterCritical>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007142:	b25b      	sxtb	r3, r3
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d103      	bne.n	8007152 <vQueueWaitForMessageRestricted+0x2a>
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007158:	b25b      	sxtb	r3, r3
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d103      	bne.n	8007168 <vQueueWaitForMessageRestricted+0x40>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007168:	f001 fbbc 	bl	80088e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3324      	adds	r3, #36	; 0x24
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fc3b 	bl	80079f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007182:	6978      	ldr	r0, [r7, #20]
 8007184:	f7ff ff26 	bl	8006fd4 <prvUnlockQueue>
	}
 8007188:	bf00      	nop
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08e      	sub	sp, #56	; 0x38
 8007194:	af04      	add	r7, sp, #16
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800719e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	623b      	str	r3, [r7, #32]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	61fb      	str	r3, [r7, #28]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071d6:	235c      	movs	r3, #92	; 0x5c
 80071d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b5c      	cmp	r3, #92	; 0x5c
 80071de:	d00a      	beq.n	80071f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	61bb      	str	r3, [r7, #24]
}
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01e      	beq.n	800723c <xTaskCreateStatic+0xac>
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01b      	beq.n	800723c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800720c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	2202      	movs	r2, #2
 8007212:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007216:	2300      	movs	r3, #0
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	9302      	str	r3, [sp, #8]
 800721e:	f107 0314 	add.w	r3, r7, #20
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f850 	bl	80072d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007236:	f000 f8dd 	bl	80073f4 <prvAddNewTaskToReadyList>
 800723a:	e001      	b.n	8007240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007240:	697b      	ldr	r3, [r7, #20]
	}
 8007242:	4618      	mov	r0, r3
 8007244:	3728      	adds	r7, #40	; 0x28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800724a:	b580      	push	{r7, lr}
 800724c:	b08c      	sub	sp, #48	; 0x30
 800724e:	af04      	add	r7, sp, #16
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	603b      	str	r3, [r7, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fc32 	bl	8008ac8 <pvPortMalloc>
 8007264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800726c:	205c      	movs	r0, #92	; 0x5c
 800726e:	f001 fc2b 	bl	8008ac8 <pvPortMalloc>
 8007272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
 8007280:	e005      	b.n	800728e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007282:	6978      	ldr	r0, [r7, #20]
 8007284:	f001 fcec 	bl	8008c60 <vPortFree>
 8007288:	e001      	b.n	800728e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d017      	beq.n	80072c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800729c:	88fa      	ldrh	r2, [r7, #6]
 800729e:	2300      	movs	r3, #0
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	9302      	str	r3, [sp, #8]
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f80e 	bl	80072d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072b8:	69f8      	ldr	r0, [r7, #28]
 80072ba:	f000 f89b 	bl	80073f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072be:	2301      	movs	r3, #1
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e002      	b.n	80072ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072ca:	69bb      	ldr	r3, [r7, #24]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	461a      	mov	r2, r3
 80072ec:	21a5      	movs	r1, #165	; 0xa5
 80072ee:	f001 fe07 	bl	8008f00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072fc:	3b01      	subs	r3, #1
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f023 0307 	bic.w	r3, r3, #7
 800730a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	617b      	str	r3, [r7, #20]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01f      	beq.n	8007372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	e012      	b.n	800735e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	7819      	ldrb	r1, [r3, #0]
 8007340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	3334      	adds	r3, #52	; 0x34
 8007348:	460a      	mov	r2, r1
 800734a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	3301      	adds	r3, #1
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d9e9      	bls.n	8007338 <prvInitialiseNewTask+0x64>
 8007364:	e000      	b.n	8007368 <prvInitialiseNewTask+0x94>
			{
				break;
 8007366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007370:	e003      	b.n	800737a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	2b37      	cmp	r3, #55	; 0x37
 800737e:	d901      	bls.n	8007384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007380:	2337      	movs	r3, #55	; 0x37
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800738e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	2200      	movs	r2, #0
 8007394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff f978 	bl	8006690 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	3318      	adds	r3, #24
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff f973 	bl	8006690 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	2200      	movs	r2, #0
 80073c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	68f9      	ldr	r1, [r7, #12]
 80073d2:	69b8      	ldr	r0, [r7, #24]
 80073d4:	f001 f928 	bl	8008628 <pxPortInitialiseStack>
 80073d8:	4602      	mov	r2, r0
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ea:	bf00      	nop
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073fc:	f001 fa42 	bl	8008884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007400:	4b2d      	ldr	r3, [pc, #180]	; (80074b8 <prvAddNewTaskToReadyList+0xc4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	4a2c      	ldr	r2, [pc, #176]	; (80074b8 <prvAddNewTaskToReadyList+0xc4>)
 8007408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800740a:	4b2c      	ldr	r3, [pc, #176]	; (80074bc <prvAddNewTaskToReadyList+0xc8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007412:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <prvAddNewTaskToReadyList+0xc8>)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007418:	4b27      	ldr	r3, [pc, #156]	; (80074b8 <prvAddNewTaskToReadyList+0xc4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d110      	bne.n	8007442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007420:	f000 fc16 	bl	8007c50 <prvInitialiseTaskLists>
 8007424:	e00d      	b.n	8007442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007426:	4b26      	ldr	r3, [pc, #152]	; (80074c0 <prvAddNewTaskToReadyList+0xcc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800742e:	4b23      	ldr	r3, [pc, #140]	; (80074bc <prvAddNewTaskToReadyList+0xc8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	429a      	cmp	r2, r3
 800743a:	d802      	bhi.n	8007442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800743c:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <prvAddNewTaskToReadyList+0xc8>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007442:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <prvAddNewTaskToReadyList+0xd0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3301      	adds	r3, #1
 8007448:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <prvAddNewTaskToReadyList+0xd0>)
 800744a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <prvAddNewTaskToReadyList+0xd0>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <prvAddNewTaskToReadyList+0xd4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d903      	bls.n	8007468 <prvAddNewTaskToReadyList+0x74>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4a18      	ldr	r2, [pc, #96]	; (80074c8 <prvAddNewTaskToReadyList+0xd4>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4a15      	ldr	r2, [pc, #84]	; (80074cc <prvAddNewTaskToReadyList+0xd8>)
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f7ff f913 	bl	80066aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007484:	f001 fa2e 	bl	80088e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007488:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <prvAddNewTaskToReadyList+0xcc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00e      	beq.n	80074ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <prvAddNewTaskToReadyList+0xc8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	429a      	cmp	r2, r3
 800749c:	d207      	bcs.n	80074ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <prvAddNewTaskToReadyList+0xdc>)
 80074a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20002948 	.word	0x20002948
 80074bc:	20002474 	.word	0x20002474
 80074c0:	20002954 	.word	0x20002954
 80074c4:	20002964 	.word	0x20002964
 80074c8:	20002950 	.word	0x20002950
 80074cc:	20002478 	.word	0x20002478
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d017      	beq.n	8007516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074e6:	4b13      	ldr	r3, [pc, #76]	; (8007534 <vTaskDelay+0x60>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <vTaskDelay+0x30>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	60bb      	str	r3, [r7, #8]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007504:	f000 f880 	bl	8007608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fcea 	bl	8007ee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007510:	f000 f888 	bl	8007624 <xTaskResumeAll>
 8007514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d107      	bne.n	800752c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <vTaskDelay+0x64>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	20002970 	.word	0x20002970
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800754a:	463a      	mov	r2, r7
 800754c:	1d39      	adds	r1, r7, #4
 800754e:	f107 0308 	add.w	r3, r7, #8
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f848 	bl	80065e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	9202      	str	r2, [sp, #8]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	2300      	movs	r3, #0
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	2300      	movs	r3, #0
 8007568:	460a      	mov	r2, r1
 800756a:	4921      	ldr	r1, [pc, #132]	; (80075f0 <vTaskStartScheduler+0xb4>)
 800756c:	4821      	ldr	r0, [pc, #132]	; (80075f4 <vTaskStartScheduler+0xb8>)
 800756e:	f7ff fe0f 	bl	8007190 <xTaskCreateStatic>
 8007572:	4603      	mov	r3, r0
 8007574:	4a20      	ldr	r2, [pc, #128]	; (80075f8 <vTaskStartScheduler+0xbc>)
 8007576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007578:	4b1f      	ldr	r3, [pc, #124]	; (80075f8 <vTaskStartScheduler+0xbc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007580:	2301      	movs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e001      	b.n	800758a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d102      	bne.n	8007596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007590:	f000 fcfc 	bl	8007f8c <xTimerCreateTimerTask>
 8007594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d116      	bne.n	80075ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	613b      	str	r3, [r7, #16]
}
 80075ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075b0:	4b12      	ldr	r3, [pc, #72]	; (80075fc <vTaskStartScheduler+0xc0>)
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075b8:	4b11      	ldr	r3, [pc, #68]	; (8007600 <vTaskStartScheduler+0xc4>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <vTaskStartScheduler+0xc8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075c4:	f001 f8bc 	bl	8008740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075c8:	e00e      	b.n	80075e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d10a      	bne.n	80075e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60fb      	str	r3, [r7, #12]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <vTaskStartScheduler+0xaa>
}
 80075e8:	bf00      	nop
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	08008f90 	.word	0x08008f90
 80075f4:	08007c21 	.word	0x08007c21
 80075f8:	2000296c 	.word	0x2000296c
 80075fc:	20002968 	.word	0x20002968
 8007600:	20002954 	.word	0x20002954
 8007604:	2000294c 	.word	0x2000294c

08007608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <vTaskSuspendAll+0x18>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a03      	ldr	r2, [pc, #12]	; (8007620 <vTaskSuspendAll+0x18>)
 8007614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007616:	bf00      	nop
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	20002970 	.word	0x20002970

08007624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800762e:	2300      	movs	r3, #0
 8007630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007632:	4b42      	ldr	r3, [pc, #264]	; (800773c <xTaskResumeAll+0x118>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <xTaskResumeAll+0x2c>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	603b      	str	r3, [r7, #0]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007650:	f001 f918 	bl	8008884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007654:	4b39      	ldr	r3, [pc, #228]	; (800773c <xTaskResumeAll+0x118>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3b01      	subs	r3, #1
 800765a:	4a38      	ldr	r2, [pc, #224]	; (800773c <xTaskResumeAll+0x118>)
 800765c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800765e:	4b37      	ldr	r3, [pc, #220]	; (800773c <xTaskResumeAll+0x118>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d162      	bne.n	800772c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007666:	4b36      	ldr	r3, [pc, #216]	; (8007740 <xTaskResumeAll+0x11c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d05e      	beq.n	800772c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800766e:	e02f      	b.n	80076d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007670:	4b34      	ldr	r3, [pc, #208]	; (8007744 <xTaskResumeAll+0x120>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3318      	adds	r3, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff f871 	bl	8006764 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3304      	adds	r3, #4
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff f86c 	bl	8006764 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007690:	4b2d      	ldr	r3, [pc, #180]	; (8007748 <xTaskResumeAll+0x124>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d903      	bls.n	80076a0 <xTaskResumeAll+0x7c>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	4a2a      	ldr	r2, [pc, #168]	; (8007748 <xTaskResumeAll+0x124>)
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4a27      	ldr	r2, [pc, #156]	; (800774c <xTaskResumeAll+0x128>)
 80076ae:	441a      	add	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fe fff7 	bl	80066aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4b23      	ldr	r3, [pc, #140]	; (8007750 <xTaskResumeAll+0x12c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d302      	bcc.n	80076d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076ca:	4b22      	ldr	r3, [pc, #136]	; (8007754 <xTaskResumeAll+0x130>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <xTaskResumeAll+0x120>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1cb      	bne.n	8007670 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076de:	f000 fb55 	bl	8007d8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076e2:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <xTaskResumeAll+0x134>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d010      	beq.n	8007710 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076ee:	f000 f847 	bl	8007780 <xTaskIncrementTick>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80076f8:	4b16      	ldr	r3, [pc, #88]	; (8007754 <xTaskResumeAll+0x130>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3b01      	subs	r3, #1
 8007702:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f1      	bne.n	80076ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <xTaskResumeAll+0x134>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <xTaskResumeAll+0x130>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d009      	beq.n	800772c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <xTaskResumeAll+0x138>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800772c:	f001 f8da 	bl	80088e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007730:	68bb      	ldr	r3, [r7, #8]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20002970 	.word	0x20002970
 8007740:	20002948 	.word	0x20002948
 8007744:	20002908 	.word	0x20002908
 8007748:	20002950 	.word	0x20002950
 800774c:	20002478 	.word	0x20002478
 8007750:	20002474 	.word	0x20002474
 8007754:	2000295c 	.word	0x2000295c
 8007758:	20002958 	.word	0x20002958
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007766:	4b05      	ldr	r3, [pc, #20]	; (800777c <xTaskGetTickCount+0x1c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800776c:	687b      	ldr	r3, [r7, #4]
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	2000294c 	.word	0x2000294c

08007780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800778a:	4b4f      	ldr	r3, [pc, #316]	; (80078c8 <xTaskIncrementTick+0x148>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f040 808f 	bne.w	80078b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007794:	4b4d      	ldr	r3, [pc, #308]	; (80078cc <xTaskIncrementTick+0x14c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800779c:	4a4b      	ldr	r2, [pc, #300]	; (80078cc <xTaskIncrementTick+0x14c>)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d120      	bne.n	80077ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077a8:	4b49      	ldr	r3, [pc, #292]	; (80078d0 <xTaskIncrementTick+0x150>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	603b      	str	r3, [r7, #0]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xTaskIncrementTick+0x46>
 80077c8:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <xTaskIncrementTick+0x150>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	4b41      	ldr	r3, [pc, #260]	; (80078d4 <xTaskIncrementTick+0x154>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3f      	ldr	r2, [pc, #252]	; (80078d0 <xTaskIncrementTick+0x150>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	4a3f      	ldr	r2, [pc, #252]	; (80078d4 <xTaskIncrementTick+0x154>)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	4b3e      	ldr	r3, [pc, #248]	; (80078d8 <xTaskIncrementTick+0x158>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3301      	adds	r3, #1
 80077e2:	4a3d      	ldr	r2, [pc, #244]	; (80078d8 <xTaskIncrementTick+0x158>)
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	f000 fad1 	bl	8007d8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077ea:	4b3c      	ldr	r3, [pc, #240]	; (80078dc <xTaskIncrementTick+0x15c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d349      	bcc.n	8007888 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077f4:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <xTaskIncrementTick+0x150>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d104      	bne.n	8007808 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077fe:	4b37      	ldr	r3, [pc, #220]	; (80078dc <xTaskIncrementTick+0x15c>)
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	601a      	str	r2, [r3, #0]
					break;
 8007806:	e03f      	b.n	8007888 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007808:	4b31      	ldr	r3, [pc, #196]	; (80078d0 <xTaskIncrementTick+0x150>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d203      	bcs.n	8007828 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007820:	4a2e      	ldr	r2, [pc, #184]	; (80078dc <xTaskIncrementTick+0x15c>)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007826:	e02f      	b.n	8007888 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3304      	adds	r3, #4
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe ff99 	bl	8006764 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3318      	adds	r3, #24
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe ff90 	bl	8006764 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <xTaskIncrementTick+0x160>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d903      	bls.n	8007858 <xTaskIncrementTick+0xd8>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	4a22      	ldr	r2, [pc, #136]	; (80078e0 <xTaskIncrementTick+0x160>)
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <xTaskIncrementTick+0x164>)
 8007866:	441a      	add	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7fe ff1b 	bl	80066aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <xTaskIncrementTick+0x168>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	429a      	cmp	r2, r3
 8007880:	d3b8      	bcc.n	80077f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007882:	2301      	movs	r3, #1
 8007884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007886:	e7b5      	b.n	80077f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007888:	4b17      	ldr	r3, [pc, #92]	; (80078e8 <xTaskIncrementTick+0x168>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788e:	4915      	ldr	r1, [pc, #84]	; (80078e4 <xTaskIncrementTick+0x164>)
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d901      	bls.n	80078a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <xTaskIncrementTick+0x16c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80078ac:	2301      	movs	r3, #1
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e004      	b.n	80078bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078b2:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <xTaskIncrementTick+0x170>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	4a0d      	ldr	r2, [pc, #52]	; (80078f0 <xTaskIncrementTick+0x170>)
 80078ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078bc:	697b      	ldr	r3, [r7, #20]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20002970 	.word	0x20002970
 80078cc:	2000294c 	.word	0x2000294c
 80078d0:	20002900 	.word	0x20002900
 80078d4:	20002904 	.word	0x20002904
 80078d8:	20002960 	.word	0x20002960
 80078dc:	20002968 	.word	0x20002968
 80078e0:	20002950 	.word	0x20002950
 80078e4:	20002478 	.word	0x20002478
 80078e8:	20002474 	.word	0x20002474
 80078ec:	2000295c 	.word	0x2000295c
 80078f0:	20002958 	.word	0x20002958

080078f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078fa:	4b28      	ldr	r3, [pc, #160]	; (800799c <vTaskSwitchContext+0xa8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007902:	4b27      	ldr	r3, [pc, #156]	; (80079a0 <vTaskSwitchContext+0xac>)
 8007904:	2201      	movs	r2, #1
 8007906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007908:	e041      	b.n	800798e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800790a:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <vTaskSwitchContext+0xac>)
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007910:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <vTaskSwitchContext+0xb0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	e010      	b.n	800793a <vTaskSwitchContext+0x46>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <vTaskSwitchContext+0x40>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <vTaskSwitchContext+0x3e>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3b01      	subs	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	491b      	ldr	r1, [pc, #108]	; (80079a8 <vTaskSwitchContext+0xb4>)
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	440b      	add	r3, r1
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0e4      	beq.n	8007918 <vTaskSwitchContext+0x24>
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <vTaskSwitchContext+0xb4>)
 800795a:	4413      	add	r3, r2
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	605a      	str	r2, [r3, #4]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	3308      	adds	r3, #8
 8007970:	429a      	cmp	r2, r3
 8007972:	d104      	bne.n	800797e <vTaskSwitchContext+0x8a>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4a09      	ldr	r2, [pc, #36]	; (80079ac <vTaskSwitchContext+0xb8>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	4a06      	ldr	r2, [pc, #24]	; (80079a4 <vTaskSwitchContext+0xb0>)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6013      	str	r3, [r2, #0]
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20002970 	.word	0x20002970
 80079a0:	2000295c 	.word	0x2000295c
 80079a4:	20002950 	.word	0x20002950
 80079a8:	20002478 	.word	0x20002478
 80079ac:	20002474 	.word	0x20002474

080079b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	60fb      	str	r3, [r7, #12]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <vTaskPlaceOnEventList+0x44>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3318      	adds	r3, #24
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fe fe87 	bl	80066f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079e4:	2101      	movs	r1, #1
 80079e6:	6838      	ldr	r0, [r7, #0]
 80079e8:	f000 fa7c 	bl	8007ee4 <prvAddCurrentTaskToDelayedList>
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20002474 	.word	0x20002474

080079f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	617b      	str	r3, [r7, #20]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <vTaskPlaceOnEventListRestricted+0x54>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3318      	adds	r3, #24
 8007a26:	4619      	mov	r1, r3
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f7fe fe3e 	bl	80066aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a34:	f04f 33ff 	mov.w	r3, #4294967295
 8007a38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	68b8      	ldr	r0, [r7, #8]
 8007a3e:	f000 fa51 	bl	8007ee4 <prvAddCurrentTaskToDelayedList>
	}
 8007a42:	bf00      	nop
 8007a44:	3718      	adds	r7, #24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20002474 	.word	0x20002474

08007a50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	60fb      	str	r3, [r7, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	3318      	adds	r3, #24
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe fe6f 	bl	8006764 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a86:	4b1e      	ldr	r3, [pc, #120]	; (8007b00 <xTaskRemoveFromEventList+0xb0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d11d      	bne.n	8007aca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe fe66 	bl	8006764 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <xTaskRemoveFromEventList+0xb4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d903      	bls.n	8007aac <xTaskRemoveFromEventList+0x5c>
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	4a16      	ldr	r2, [pc, #88]	; (8007b04 <xTaskRemoveFromEventList+0xb4>)
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4a13      	ldr	r2, [pc, #76]	; (8007b08 <xTaskRemoveFromEventList+0xb8>)
 8007aba:	441a      	add	r2, r3
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7fe fdf1 	bl	80066aa <vListInsertEnd>
 8007ac8:	e005      	b.n	8007ad6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3318      	adds	r3, #24
 8007ace:	4619      	mov	r1, r3
 8007ad0:	480e      	ldr	r0, [pc, #56]	; (8007b0c <xTaskRemoveFromEventList+0xbc>)
 8007ad2:	f7fe fdea 	bl	80066aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <xTaskRemoveFromEventList+0xc0>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d905      	bls.n	8007af0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <xTaskRemoveFromEventList+0xc4>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e001      	b.n	8007af4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007af4:	697b      	ldr	r3, [r7, #20]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20002970 	.word	0x20002970
 8007b04:	20002950 	.word	0x20002950
 8007b08:	20002478 	.word	0x20002478
 8007b0c:	20002908 	.word	0x20002908
 8007b10:	20002474 	.word	0x20002474
 8007b14:	2000295c 	.word	0x2000295c

08007b18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b20:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <vTaskInternalSetTimeOutState+0x24>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <vTaskInternalSetTimeOutState+0x28>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	605a      	str	r2, [r3, #4]
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	20002960 	.word	0x20002960
 8007b40:	2000294c 	.word	0x2000294c

08007b44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	613b      	str	r3, [r7, #16]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b86:	f000 fe7d 	bl	8008884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b8a:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <xTaskCheckForTimeOut+0xbc>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d102      	bne.n	8007baa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	e023      	b.n	8007bf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b15      	ldr	r3, [pc, #84]	; (8007c04 <xTaskCheckForTimeOut+0xc0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d007      	beq.n	8007bc6 <xTaskCheckForTimeOut+0x82>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d302      	bcc.n	8007bc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	61fb      	str	r3, [r7, #28]
 8007bc4:	e015      	b.n	8007bf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d20b      	bcs.n	8007be8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	1ad2      	subs	r2, r2, r3
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ff9b 	bl	8007b18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	e004      	b.n	8007bf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bf2:	f000 fe77 	bl	80088e4 <vPortExitCritical>

	return xReturn;
 8007bf6:	69fb      	ldr	r3, [r7, #28]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3720      	adds	r7, #32
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	2000294c 	.word	0x2000294c
 8007c04:	20002960 	.word	0x20002960

08007c08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c0c:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <vTaskMissedYield+0x14>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	601a      	str	r2, [r3, #0]
}
 8007c12:	bf00      	nop
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	2000295c 	.word	0x2000295c

08007c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c28:	f000 f852 	bl	8007cd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <prvIdleTask+0x28>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d9f9      	bls.n	8007c28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <prvIdleTask+0x2c>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c44:	e7f0      	b.n	8007c28 <prvIdleTask+0x8>
 8007c46:	bf00      	nop
 8007c48:	20002478 	.word	0x20002478
 8007c4c:	e000ed04 	.word	0xe000ed04

08007c50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c56:	2300      	movs	r3, #0
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	e00c      	b.n	8007c76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4a12      	ldr	r2, [pc, #72]	; (8007cb0 <prvInitialiseTaskLists+0x60>)
 8007c68:	4413      	add	r3, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fcf0 	bl	8006650 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3301      	adds	r3, #1
 8007c74:	607b      	str	r3, [r7, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b37      	cmp	r3, #55	; 0x37
 8007c7a:	d9ef      	bls.n	8007c5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c7c:	480d      	ldr	r0, [pc, #52]	; (8007cb4 <prvInitialiseTaskLists+0x64>)
 8007c7e:	f7fe fce7 	bl	8006650 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c82:	480d      	ldr	r0, [pc, #52]	; (8007cb8 <prvInitialiseTaskLists+0x68>)
 8007c84:	f7fe fce4 	bl	8006650 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c88:	480c      	ldr	r0, [pc, #48]	; (8007cbc <prvInitialiseTaskLists+0x6c>)
 8007c8a:	f7fe fce1 	bl	8006650 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c8e:	480c      	ldr	r0, [pc, #48]	; (8007cc0 <prvInitialiseTaskLists+0x70>)
 8007c90:	f7fe fcde 	bl	8006650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c94:	480b      	ldr	r0, [pc, #44]	; (8007cc4 <prvInitialiseTaskLists+0x74>)
 8007c96:	f7fe fcdb 	bl	8006650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <prvInitialiseTaskLists+0x78>)
 8007c9c:	4a05      	ldr	r2, [pc, #20]	; (8007cb4 <prvInitialiseTaskLists+0x64>)
 8007c9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <prvInitialiseTaskLists+0x7c>)
 8007ca2:	4a05      	ldr	r2, [pc, #20]	; (8007cb8 <prvInitialiseTaskLists+0x68>)
 8007ca4:	601a      	str	r2, [r3, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20002478 	.word	0x20002478
 8007cb4:	200028d8 	.word	0x200028d8
 8007cb8:	200028ec 	.word	0x200028ec
 8007cbc:	20002908 	.word	0x20002908
 8007cc0:	2000291c 	.word	0x2000291c
 8007cc4:	20002934 	.word	0x20002934
 8007cc8:	20002900 	.word	0x20002900
 8007ccc:	20002904 	.word	0x20002904

08007cd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cd6:	e019      	b.n	8007d0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cd8:	f000 fdd4 	bl	8008884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cdc:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <prvCheckTasksWaitingTermination+0x50>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fe fd3b 	bl	8006764 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cee:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <prvCheckTasksWaitingTermination+0x54>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	4a0b      	ldr	r2, [pc, #44]	; (8007d24 <prvCheckTasksWaitingTermination+0x54>)
 8007cf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <prvCheckTasksWaitingTermination+0x58>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	4a0a      	ldr	r2, [pc, #40]	; (8007d28 <prvCheckTasksWaitingTermination+0x58>)
 8007d00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d02:	f000 fdef 	bl	80088e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f810 	bl	8007d2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <prvCheckTasksWaitingTermination+0x58>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e1      	bne.n	8007cd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	2000291c 	.word	0x2000291c
 8007d24:	20002948 	.word	0x20002948
 8007d28:	20002930 	.word	0x20002930

08007d2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d108      	bne.n	8007d50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 ff8c 	bl	8008c60 <vPortFree>
				vPortFree( pxTCB );
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 ff89 	bl	8008c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d4e:	e018      	b.n	8007d82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d103      	bne.n	8007d62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 ff80 	bl	8008c60 <vPortFree>
	}
 8007d60:	e00f      	b.n	8007d82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d00a      	beq.n	8007d82 <prvDeleteTCB+0x56>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60fb      	str	r3, [r7, #12]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <prvDeleteTCB+0x54>
	}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <prvResetNextTaskUnblockTime+0x38>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8007d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007da2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007da4:	e008      	b.n	8007db8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da6:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <prvResetNextTaskUnblockTime+0x38>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	4a04      	ldr	r2, [pc, #16]	; (8007dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8007db6:	6013      	str	r3, [r2, #0]
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	20002900 	.word	0x20002900
 8007dc8:	20002968 	.word	0x20002968

08007dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <xTaskGetSchedulerState+0x34>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	e008      	b.n	8007df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de0:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <xTaskGetSchedulerState+0x38>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007de8:	2302      	movs	r3, #2
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	e001      	b.n	8007df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dee:	2300      	movs	r3, #0
 8007df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007df2:	687b      	ldr	r3, [r7, #4]
	}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20002954 	.word	0x20002954
 8007e04:	20002970 	.word	0x20002970

08007e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d056      	beq.n	8007ecc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <xTaskPriorityDisinherit+0xd0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d00a      	beq.n	8007e3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	60fb      	str	r3, [r7, #12]
}
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10a      	bne.n	8007e5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60bb      	str	r3, [r7, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e60:	1e5a      	subs	r2, r3, #1
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d02c      	beq.n	8007ecc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d128      	bne.n	8007ecc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fc70 	bl	8006764 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9c:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <xTaskPriorityDisinherit+0xd4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d903      	bls.n	8007eac <xTaskPriorityDisinherit+0xa4>
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	4a0c      	ldr	r2, [pc, #48]	; (8007edc <xTaskPriorityDisinherit+0xd4>)
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <xTaskPriorityDisinherit+0xd8>)
 8007eba:	441a      	add	r2, r3
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f7fe fbf1 	bl	80066aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ecc:	697b      	ldr	r3, [r7, #20]
	}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20002474 	.word	0x20002474
 8007edc:	20002950 	.word	0x20002950
 8007ee0:	20002478 	.word	0x20002478

08007ee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef4:	4b20      	ldr	r3, [pc, #128]	; (8007f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fc32 	bl	8006764 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d10a      	bne.n	8007f1e <prvAddCurrentTaskToDelayedList+0x3a>
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f0e:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4819      	ldr	r0, [pc, #100]	; (8007f7c <prvAddCurrentTaskToDelayedList+0x98>)
 8007f18:	f7fe fbc7 	bl	80066aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f1c:	e026      	b.n	8007f6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4413      	add	r3, r2
 8007f24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d209      	bcs.n	8007f4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f36:	4b12      	ldr	r3, [pc, #72]	; (8007f80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f7fe fbd5 	bl	80066f2 <vListInsert>
}
 8007f48:	e010      	b.n	8007f6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f4a:	4b0e      	ldr	r3, [pc, #56]	; (8007f84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f7fe fbcb 	bl	80066f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d202      	bcs.n	8007f6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f66:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6013      	str	r3, [r2, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	2000294c 	.word	0x2000294c
 8007f78:	20002474 	.word	0x20002474
 8007f7c:	20002934 	.word	0x20002934
 8007f80:	20002904 	.word	0x20002904
 8007f84:	20002900 	.word	0x20002900
 8007f88:	20002968 	.word	0x20002968

08007f8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08a      	sub	sp, #40	; 0x28
 8007f90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f96:	f000 fb07 	bl	80085a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f9a:	4b1c      	ldr	r3, [pc, #112]	; (800800c <xTimerCreateTimerTask+0x80>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d021      	beq.n	8007fe6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007faa:	1d3a      	adds	r2, r7, #4
 8007fac:	f107 0108 	add.w	r1, r7, #8
 8007fb0:	f107 030c 	add.w	r3, r7, #12
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fb31 	bl	800661c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	9202      	str	r2, [sp, #8]
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	460a      	mov	r2, r1
 8007fcc:	4910      	ldr	r1, [pc, #64]	; (8008010 <xTimerCreateTimerTask+0x84>)
 8007fce:	4811      	ldr	r0, [pc, #68]	; (8008014 <xTimerCreateTimerTask+0x88>)
 8007fd0:	f7ff f8de 	bl	8007190 <xTaskCreateStatic>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4a10      	ldr	r2, [pc, #64]	; (8008018 <xTimerCreateTimerTask+0x8c>)
 8007fd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fda:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <xTimerCreateTimerTask+0x8c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	613b      	str	r3, [r7, #16]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008002:	697b      	ldr	r3, [r7, #20]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	200029a4 	.word	0x200029a4
 8008010:	08008f98 	.word	0x08008f98
 8008014:	08008151 	.word	0x08008151
 8008018:	200029a8 	.word	0x200029a8

0800801c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800802a:	2300      	movs	r3, #0
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	623b      	str	r3, [r7, #32]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800804a:	4b1a      	ldr	r3, [pc, #104]	; (80080b4 <xTimerGenericCommand+0x98>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d02a      	beq.n	80080a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b05      	cmp	r3, #5
 8008062:	dc18      	bgt.n	8008096 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008064:	f7ff feb2 	bl	8007dcc <xTaskGetSchedulerState>
 8008068:	4603      	mov	r3, r0
 800806a:	2b02      	cmp	r3, #2
 800806c:	d109      	bne.n	8008082 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800806e:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <xTimerGenericCommand+0x98>)
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f107 0110 	add.w	r1, r7, #16
 8008076:	2300      	movs	r3, #0
 8008078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807a:	f7fe fca1 	bl	80069c0 <xQueueGenericSend>
 800807e:	6278      	str	r0, [r7, #36]	; 0x24
 8008080:	e012      	b.n	80080a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <xTimerGenericCommand+0x98>)
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f107 0110 	add.w	r1, r7, #16
 800808a:	2300      	movs	r3, #0
 800808c:	2200      	movs	r2, #0
 800808e:	f7fe fc97 	bl	80069c0 <xQueueGenericSend>
 8008092:	6278      	str	r0, [r7, #36]	; 0x24
 8008094:	e008      	b.n	80080a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <xTimerGenericCommand+0x98>)
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f107 0110 	add.w	r1, r7, #16
 800809e:	2300      	movs	r3, #0
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	f7fe fd8b 	bl	8006bbc <xQueueGenericSendFromISR>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3728      	adds	r7, #40	; 0x28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200029a4 	.word	0x200029a4

080080b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af02      	add	r7, sp, #8
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c2:	4b22      	ldr	r3, [pc, #136]	; (800814c <prvProcessExpiredTimer+0x94>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fb47 	bl	8006764 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d022      	beq.n	800812a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	18d1      	adds	r1, r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	6978      	ldr	r0, [r7, #20]
 80080f2:	f000 f8d1 	bl	8008298 <prvInsertTimerInActiveList>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01f      	beq.n	800813c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	2100      	movs	r1, #0
 8008106:	6978      	ldr	r0, [r7, #20]
 8008108:	f7ff ff88 	bl	800801c <xTimerGenericCommand>
 800810c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d113      	bne.n	800813c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008130:	f023 0301 	bic.w	r3, r3, #1
 8008134:	b2da      	uxtb	r2, r3
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	6978      	ldr	r0, [r7, #20]
 8008142:	4798      	blx	r3
}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	2000299c 	.word	0x2000299c

08008150 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008158:	f107 0308 	add.w	r3, r7, #8
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f857 	bl	8008210 <prvGetNextExpireTime>
 8008162:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4619      	mov	r1, r3
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f803 	bl	8008174 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800816e:	f000 f8d5 	bl	800831c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008172:	e7f1      	b.n	8008158 <prvTimerTask+0x8>

08008174 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800817e:	f7ff fa43 	bl	8007608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008182:	f107 0308 	add.w	r3, r7, #8
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f866 	bl	8008258 <prvSampleTimeNow>
 800818c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d130      	bne.n	80081f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <prvProcessTimerOrBlockTask+0x3c>
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d806      	bhi.n	80081b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081a2:	f7ff fa3f 	bl	8007624 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081a6:	68f9      	ldr	r1, [r7, #12]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ff85 	bl	80080b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081ae:	e024      	b.n	80081fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d008      	beq.n	80081c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081b6:	4b13      	ldr	r3, [pc, #76]	; (8008204 <prvProcessTimerOrBlockTask+0x90>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <prvProcessTimerOrBlockTask+0x50>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <prvProcessTimerOrBlockTask+0x52>
 80081c4:	2300      	movs	r3, #0
 80081c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081c8:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <prvProcessTimerOrBlockTask+0x94>)
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	4619      	mov	r1, r3
 80081d6:	f7fe ffa7 	bl	8007128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081da:	f7ff fa23 	bl	8007624 <xTaskResumeAll>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081e4:	4b09      	ldr	r3, [pc, #36]	; (800820c <prvProcessTimerOrBlockTask+0x98>)
 80081e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	f3bf 8f6f 	isb	sy
}
 80081f4:	e001      	b.n	80081fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081f6:	f7ff fa15 	bl	8007624 <xTaskResumeAll>
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200029a0 	.word	0x200029a0
 8008208:	200029a4 	.word	0x200029a4
 800820c:	e000ed04 	.word	0xe000ed04

08008210 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008218:	4b0e      	ldr	r3, [pc, #56]	; (8008254 <prvGetNextExpireTime+0x44>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <prvGetNextExpireTime+0x16>
 8008222:	2201      	movs	r2, #1
 8008224:	e000      	b.n	8008228 <prvGetNextExpireTime+0x18>
 8008226:	2200      	movs	r2, #0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d105      	bne.n	8008240 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008234:	4b07      	ldr	r3, [pc, #28]	; (8008254 <prvGetNextExpireTime+0x44>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e001      	b.n	8008244 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008244:	68fb      	ldr	r3, [r7, #12]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	2000299c 	.word	0x2000299c

08008258 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008260:	f7ff fa7e 	bl	8007760 <xTaskGetTickCount>
 8008264:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <prvSampleTimeNow+0x3c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	429a      	cmp	r2, r3
 800826e:	d205      	bcs.n	800827c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008270:	f000 f936 	bl	80084e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e002      	b.n	8008282 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008282:	4a04      	ldr	r2, [pc, #16]	; (8008294 <prvSampleTimeNow+0x3c>)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008288:	68fb      	ldr	r3, [r7, #12]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200029ac 	.word	0x200029ac

08008298 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d812      	bhi.n	80082e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	1ad2      	subs	r2, r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d302      	bcc.n	80082d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e01b      	b.n	800830a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082d2:	4b10      	ldr	r3, [pc, #64]	; (8008314 <prvInsertTimerInActiveList+0x7c>)
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3304      	adds	r3, #4
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7fe fa08 	bl	80066f2 <vListInsert>
 80082e2:	e012      	b.n	800830a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d206      	bcs.n	80082fa <prvInsertTimerInActiveList+0x62>
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d302      	bcc.n	80082fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e007      	b.n	800830a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <prvInsertTimerInActiveList+0x80>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f7fe f9f4 	bl	80066f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800830a:	697b      	ldr	r3, [r7, #20]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	200029a0 	.word	0x200029a0
 8008318:	2000299c 	.word	0x2000299c

0800831c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08e      	sub	sp, #56	; 0x38
 8008320:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008322:	e0ca      	b.n	80084ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	da18      	bge.n	800835c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800832a:	1d3b      	adds	r3, r7, #4
 800832c:	3304      	adds	r3, #4
 800832e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	61fb      	str	r3, [r7, #28]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008352:	6850      	ldr	r0, [r2, #4]
 8008354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008356:	6892      	ldr	r2, [r2, #8]
 8008358:	4611      	mov	r1, r2
 800835a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f2c0 80aa 	blt.w	80084b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	3304      	adds	r3, #4
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe f9f5 	bl	8006764 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800837a:	463b      	mov	r3, r7
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff ff6b 	bl	8008258 <prvSampleTimeNow>
 8008382:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b09      	cmp	r3, #9
 8008388:	f200 8097 	bhi.w	80084ba <prvProcessReceivedCommands+0x19e>
 800838c:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <prvProcessReceivedCommands+0x78>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083bd 	.word	0x080083bd
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083bd 	.word	0x080083bd
 80083a0:	08008431 	.word	0x08008431
 80083a4:	08008445 	.word	0x08008445
 80083a8:	0800848f 	.word	0x0800848f
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083bd 	.word	0x080083bd
 80083b4:	08008431 	.word	0x08008431
 80083b8:	08008445 	.word	0x08008445
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083c2:	f043 0301 	orr.w	r3, r3, #1
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	18d1      	adds	r1, r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083dc:	f7ff ff5c 	bl	8008298 <prvInsertTimerInActiveList>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d069      	beq.n	80084ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05e      	beq.n	80084ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	441a      	add	r2, r3
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2300      	movs	r3, #0
 800840a:	2100      	movs	r1, #0
 800840c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800840e:	f7ff fe05 	bl	800801c <xTimerGenericCommand>
 8008412:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d14f      	bne.n	80084ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61bb      	str	r3, [r7, #24]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008436:	f023 0301 	bic.w	r3, r3, #1
 800843a:	b2da      	uxtb	r2, r3
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008442:	e03a      	b.n	80084ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800844a:	f043 0301 	orr.w	r3, r3, #1
 800844e:	b2da      	uxtb	r2, r3
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	617b      	str	r3, [r7, #20]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	18d1      	adds	r1, r2, r3
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008488:	f7ff ff06 	bl	8008298 <prvInsertTimerInActiveList>
					break;
 800848c:	e015      	b.n	80084ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800849c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800849e:	f000 fbdf 	bl	8008c60 <vPortFree>
 80084a2:	e00a      	b.n	80084ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084b6:	e000      	b.n	80084ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ba:	4b08      	ldr	r3, [pc, #32]	; (80084dc <prvProcessReceivedCommands+0x1c0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	1d39      	adds	r1, r7, #4
 80084c0:	2200      	movs	r2, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fc16 	bl	8006cf4 <xQueueReceive>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f47f af2a 	bne.w	8008324 <prvProcessReceivedCommands+0x8>
	}
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	3730      	adds	r7, #48	; 0x30
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200029a4 	.word	0x200029a4

080084e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084e6:	e048      	b.n	800857a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084e8:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <prvSwitchTimerLists+0xc0>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f2:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <prvSwitchTimerLists+0xc0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3304      	adds	r3, #4
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe f92f 	bl	8006764 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d02e      	beq.n	800857a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	429a      	cmp	r2, r3
 800852c:	d90e      	bls.n	800854c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800853a:	4b19      	ldr	r3, [pc, #100]	; (80085a0 <prvSwitchTimerLists+0xc0>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3304      	adds	r3, #4
 8008542:	4619      	mov	r1, r3
 8008544:	4610      	mov	r0, r2
 8008546:	f7fe f8d4 	bl	80066f2 <vListInsert>
 800854a:	e016      	b.n	800857a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800854c:	2300      	movs	r3, #0
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	2300      	movs	r3, #0
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	2100      	movs	r1, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff fd60 	bl	800801c <xTimerGenericCommand>
 800855c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	603b      	str	r3, [r7, #0]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800857a:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <prvSwitchTimerLists+0xc0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1b1      	bne.n	80084e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <prvSwitchTimerLists+0xc0>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800858a:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <prvSwitchTimerLists+0xc4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <prvSwitchTimerLists+0xc0>)
 8008590:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008592:	4a04      	ldr	r2, [pc, #16]	; (80085a4 <prvSwitchTimerLists+0xc4>)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	6013      	str	r3, [r2, #0]
}
 8008598:	bf00      	nop
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	2000299c 	.word	0x2000299c
 80085a4:	200029a0 	.word	0x200029a0

080085a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085ae:	f000 f969 	bl	8008884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <prvCheckForValidListAndQueue+0x60>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d120      	bne.n	80085fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085ba:	4814      	ldr	r0, [pc, #80]	; (800860c <prvCheckForValidListAndQueue+0x64>)
 80085bc:	f7fe f848 	bl	8006650 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085c0:	4813      	ldr	r0, [pc, #76]	; (8008610 <prvCheckForValidListAndQueue+0x68>)
 80085c2:	f7fe f845 	bl	8006650 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085c6:	4b13      	ldr	r3, [pc, #76]	; (8008614 <prvCheckForValidListAndQueue+0x6c>)
 80085c8:	4a10      	ldr	r2, [pc, #64]	; (800860c <prvCheckForValidListAndQueue+0x64>)
 80085ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085cc:	4b12      	ldr	r3, [pc, #72]	; (8008618 <prvCheckForValidListAndQueue+0x70>)
 80085ce:	4a10      	ldr	r2, [pc, #64]	; (8008610 <prvCheckForValidListAndQueue+0x68>)
 80085d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085d2:	2300      	movs	r3, #0
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <prvCheckForValidListAndQueue+0x74>)
 80085d8:	4a11      	ldr	r2, [pc, #68]	; (8008620 <prvCheckForValidListAndQueue+0x78>)
 80085da:	2110      	movs	r1, #16
 80085dc:	200a      	movs	r0, #10
 80085de:	f7fe f953 	bl	8006888 <xQueueGenericCreateStatic>
 80085e2:	4603      	mov	r3, r0
 80085e4:	4a08      	ldr	r2, [pc, #32]	; (8008608 <prvCheckForValidListAndQueue+0x60>)
 80085e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085e8:	4b07      	ldr	r3, [pc, #28]	; (8008608 <prvCheckForValidListAndQueue+0x60>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <prvCheckForValidListAndQueue+0x60>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	490b      	ldr	r1, [pc, #44]	; (8008624 <prvCheckForValidListAndQueue+0x7c>)
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fd6c 	bl	80070d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085fc:	f000 f972 	bl	80088e4 <vPortExitCritical>
}
 8008600:	bf00      	nop
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	200029a4 	.word	0x200029a4
 800860c:	20002974 	.word	0x20002974
 8008610:	20002988 	.word	0x20002988
 8008614:	2000299c 	.word	0x2000299c
 8008618:	200029a0 	.word	0x200029a0
 800861c:	20002a50 	.word	0x20002a50
 8008620:	200029b0 	.word	0x200029b0
 8008624:	08008fa0 	.word	0x08008fa0

08008628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3b04      	subs	r3, #4
 8008638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3b04      	subs	r3, #4
 8008646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f023 0201 	bic.w	r2, r3, #1
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3b04      	subs	r3, #4
 8008656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008658:	4a0c      	ldr	r2, [pc, #48]	; (800868c <pxPortInitialiseStack+0x64>)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3b14      	subs	r3, #20
 8008662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3b04      	subs	r3, #4
 800866e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f06f 0202 	mvn.w	r2, #2
 8008676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3b20      	subs	r3, #32
 800867c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	08008691 	.word	0x08008691

08008690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800869a:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <prvTaskExitError+0x54>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d00a      	beq.n	80086ba <prvTaskExitError+0x2a>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	60fb      	str	r3, [r7, #12]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <prvTaskExitError+0x28>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	60bb      	str	r3, [r7, #8]
}
 80086cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086ce:	bf00      	nop
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0fc      	beq.n	80086d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	2000000c 	.word	0x2000000c
	...

080086f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <pxCurrentTCBConst2>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6808      	ldr	r0, [r1, #0]
 80086f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f380 8809 	msr	PSP, r0
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8811 	msr	BASEPRI, r0
 800870a:	4770      	bx	lr
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst2>:
 8008710:	20002474 	.word	0x20002474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008718:	4808      	ldr	r0, [pc, #32]	; (800873c <prvPortStartFirstTask+0x24>)
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	6800      	ldr	r0, [r0, #0]
 800871e:	f380 8808 	msr	MSP, r0
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8814 	msr	CONTROL, r0
 800872a:	b662      	cpsie	i
 800872c:	b661      	cpsie	f
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	df00      	svc	0
 8008738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800873a:	bf00      	nop
 800873c:	e000ed08 	.word	0xe000ed08

08008740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008746:	4b46      	ldr	r3, [pc, #280]	; (8008860 <xPortStartScheduler+0x120>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a46      	ldr	r2, [pc, #280]	; (8008864 <xPortStartScheduler+0x124>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d10a      	bne.n	8008766 <xPortStartScheduler+0x26>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	613b      	str	r3, [r7, #16]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008766:	4b3e      	ldr	r3, [pc, #248]	; (8008860 <xPortStartScheduler+0x120>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a3f      	ldr	r2, [pc, #252]	; (8008868 <xPortStartScheduler+0x128>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d10a      	bne.n	8008786 <xPortStartScheduler+0x46>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	60fb      	str	r3, [r7, #12]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008786:	4b39      	ldr	r3, [pc, #228]	; (800886c <xPortStartScheduler+0x12c>)
 8008788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	22ff      	movs	r2, #255	; 0xff
 8008796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4b31      	ldr	r3, [pc, #196]	; (8008870 <xPortStartScheduler+0x130>)
 80087ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ae:	4b31      	ldr	r3, [pc, #196]	; (8008874 <xPortStartScheduler+0x134>)
 80087b0:	2207      	movs	r2, #7
 80087b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087b4:	e009      	b.n	80087ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087b6:	4b2f      	ldr	r3, [pc, #188]	; (8008874 <xPortStartScheduler+0x134>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	4a2d      	ldr	r2, [pc, #180]	; (8008874 <xPortStartScheduler+0x134>)
 80087be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	d0ef      	beq.n	80087b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087d6:	4b27      	ldr	r3, [pc, #156]	; (8008874 <xPortStartScheduler+0x134>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f1c3 0307 	rsb	r3, r3, #7
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d00a      	beq.n	80087f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60bb      	str	r3, [r7, #8]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087f8:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <xPortStartScheduler+0x134>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <xPortStartScheduler+0x134>)
 8008800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <xPortStartScheduler+0x134>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800880a:	4a1a      	ldr	r2, [pc, #104]	; (8008874 <xPortStartScheduler+0x134>)
 800880c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	b2da      	uxtb	r2, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008816:	4b18      	ldr	r3, [pc, #96]	; (8008878 <xPortStartScheduler+0x138>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a17      	ldr	r2, [pc, #92]	; (8008878 <xPortStartScheduler+0x138>)
 800881c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <xPortStartScheduler+0x138>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a14      	ldr	r2, [pc, #80]	; (8008878 <xPortStartScheduler+0x138>)
 8008828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800882c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800882e:	f000 f8dd 	bl	80089ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008832:	4b12      	ldr	r3, [pc, #72]	; (800887c <xPortStartScheduler+0x13c>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008838:	f000 f8fc 	bl	8008a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <xPortStartScheduler+0x140>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a0f      	ldr	r2, [pc, #60]	; (8008880 <xPortStartScheduler+0x140>)
 8008842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008848:	f7ff ff66 	bl	8008718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800884c:	f7ff f852 	bl	80078f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008850:	f7ff ff1e 	bl	8008690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	e000ed00 	.word	0xe000ed00
 8008864:	410fc271 	.word	0x410fc271
 8008868:	410fc270 	.word	0x410fc270
 800886c:	e000e400 	.word	0xe000e400
 8008870:	20002aa0 	.word	0x20002aa0
 8008874:	20002aa4 	.word	0x20002aa4
 8008878:	e000ed20 	.word	0xe000ed20
 800887c:	2000000c 	.word	0x2000000c
 8008880:	e000ef34 	.word	0xe000ef34

08008884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	607b      	str	r3, [r7, #4]
}
 800889c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800889e:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <vPortEnterCritical+0x58>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	4a0d      	ldr	r2, [pc, #52]	; (80088dc <vPortEnterCritical+0x58>)
 80088a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <vPortEnterCritical+0x58>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d10f      	bne.n	80088d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <vPortEnterCritical+0x5c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	603b      	str	r3, [r7, #0]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <vPortEnterCritical+0x4a>
	}
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	2000000c 	.word	0x2000000c
 80088e0:	e000ed04 	.word	0xe000ed04

080088e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088ea:	4b12      	ldr	r3, [pc, #72]	; (8008934 <vPortExitCritical+0x50>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10a      	bne.n	8008908 <vPortExitCritical+0x24>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	607b      	str	r3, [r7, #4]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <vPortExitCritical+0x50>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3b01      	subs	r3, #1
 800890e:	4a09      	ldr	r2, [pc, #36]	; (8008934 <vPortExitCritical+0x50>)
 8008910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008912:	4b08      	ldr	r3, [pc, #32]	; (8008934 <vPortExitCritical+0x50>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <vPortExitCritical+0x42>
 800891a:	2300      	movs	r3, #0
 800891c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f383 8811 	msr	BASEPRI, r3
}
 8008924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	2000000c 	.word	0x2000000c
	...

08008940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008940:	f3ef 8009 	mrs	r0, PSP
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <pxCurrentTCBConst>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	f01e 0f10 	tst.w	lr, #16
 8008950:	bf08      	it	eq
 8008952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	6010      	str	r0, [r2, #0]
 800895c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008964:	f380 8811 	msr	BASEPRI, r0
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f7fe ffc0 	bl	80078f4 <vTaskSwitchContext>
 8008974:	f04f 0000 	mov.w	r0, #0
 8008978:	f380 8811 	msr	BASEPRI, r0
 800897c:	bc09      	pop	{r0, r3}
 800897e:	6819      	ldr	r1, [r3, #0]
 8008980:	6808      	ldr	r0, [r1, #0]
 8008982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008986:	f01e 0f10 	tst.w	lr, #16
 800898a:	bf08      	it	eq
 800898c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008990:	f380 8809 	msr	PSP, r0
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	f3af 8000 	nop.w

080089a0 <pxCurrentTCBConst>:
 80089a0:	20002474 	.word	0x20002474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop

080089a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089c2:	f7fe fedd 	bl	8007780 <xTaskIncrementTick>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <xPortSysTickHandler+0x40>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	2300      	movs	r3, #0
 80089d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f383 8811 	msr	BASEPRI, r3
}
 80089de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <vPortSetupTimerInterrupt+0x34>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <vPortSetupTimerInterrupt+0x38>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <vPortSetupTimerInterrupt+0x3c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <vPortSetupTimerInterrupt+0x40>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	099b      	lsrs	r3, r3, #6
 8008a08:	4a09      	ldr	r2, [pc, #36]	; (8008a30 <vPortSetupTimerInterrupt+0x44>)
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a0e:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <vPortSetupTimerInterrupt+0x34>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	e000e010 	.word	0xe000e010
 8008a24:	e000e018 	.word	0xe000e018
 8008a28:	20000000 	.word	0x20000000
 8008a2c:	10624dd3 	.word	0x10624dd3
 8008a30:	e000e014 	.word	0xe000e014

08008a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a44 <vPortEnableVFP+0x10>
 8008a38:	6801      	ldr	r1, [r0, #0]
 8008a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a3e:	6001      	str	r1, [r0, #0]
 8008a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a42:	bf00      	nop
 8008a44:	e000ed88 	.word	0xe000ed88

08008a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a4e:	f3ef 8305 	mrs	r3, IPSR
 8008a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b0f      	cmp	r3, #15
 8008a58:	d914      	bls.n	8008a84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <vPortValidateInterruptPriority+0x70>)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a64:	4b15      	ldr	r3, [pc, #84]	; (8008abc <vPortValidateInterruptPriority+0x74>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	7afa      	ldrb	r2, [r7, #11]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d20a      	bcs.n	8008a84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a84:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <vPortValidateInterruptPriority+0x78>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ac4 <vPortValidateInterruptPriority+0x7c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d90a      	bls.n	8008aaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	603b      	str	r3, [r7, #0]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <vPortValidateInterruptPriority+0x60>
	}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	e000e3f0 	.word	0xe000e3f0
 8008abc:	20002aa0 	.word	0x20002aa0
 8008ac0:	e000ed0c 	.word	0xe000ed0c
 8008ac4:	20002aa4 	.word	0x20002aa4

08008ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08a      	sub	sp, #40	; 0x28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ad4:	f7fe fd98 	bl	8007608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ad8:	4b5b      	ldr	r3, [pc, #364]	; (8008c48 <pvPortMalloc+0x180>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ae0:	f000 f920 	bl	8008d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ae4:	4b59      	ldr	r3, [pc, #356]	; (8008c4c <pvPortMalloc+0x184>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4013      	ands	r3, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 8093 	bne.w	8008c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01d      	beq.n	8008b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008af8:	2208      	movs	r2, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d014      	beq.n	8008b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f023 0307 	bic.w	r3, r3, #7
 8008b10:	3308      	adds	r3, #8
 8008b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <pvPortMalloc+0x6c>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	617b      	str	r3, [r7, #20]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d06e      	beq.n	8008c18 <pvPortMalloc+0x150>
 8008b3a:	4b45      	ldr	r3, [pc, #276]	; (8008c50 <pvPortMalloc+0x188>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d869      	bhi.n	8008c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b44:	4b43      	ldr	r3, [pc, #268]	; (8008c54 <pvPortMalloc+0x18c>)
 8008b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b48:	4b42      	ldr	r3, [pc, #264]	; (8008c54 <pvPortMalloc+0x18c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b4e:	e004      	b.n	8008b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d903      	bls.n	8008b6c <pvPortMalloc+0xa4>
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1f1      	bne.n	8008b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b6c:	4b36      	ldr	r3, [pc, #216]	; (8008c48 <pvPortMalloc+0x180>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d050      	beq.n	8008c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2208      	movs	r2, #8
 8008b7c:	4413      	add	r3, r2
 8008b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	2308      	movs	r3, #8
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d91f      	bls.n	8008bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	613b      	str	r3, [r7, #16]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	1ad2      	subs	r2, r2, r3
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bd2:	69b8      	ldr	r0, [r7, #24]
 8008bd4:	f000 f908 	bl	8008de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bd8:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <pvPortMalloc+0x188>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <pvPortMalloc+0x188>)
 8008be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008be6:	4b1a      	ldr	r3, [pc, #104]	; (8008c50 <pvPortMalloc+0x188>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b1b      	ldr	r3, [pc, #108]	; (8008c58 <pvPortMalloc+0x190>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d203      	bcs.n	8008bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bf2:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <pvPortMalloc+0x188>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <pvPortMalloc+0x190>)
 8008bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	4b13      	ldr	r3, [pc, #76]	; (8008c4c <pvPortMalloc+0x184>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	431a      	orrs	r2, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c0e:	4b13      	ldr	r3, [pc, #76]	; (8008c5c <pvPortMalloc+0x194>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a11      	ldr	r2, [pc, #68]	; (8008c5c <pvPortMalloc+0x194>)
 8008c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c18:	f7fe fd04 	bl	8007624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <pvPortMalloc+0x174>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	60fb      	str	r3, [r7, #12]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <pvPortMalloc+0x172>
	return pvReturn;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3728      	adds	r7, #40	; 0x28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	200066b0 	.word	0x200066b0
 8008c4c:	200066c4 	.word	0x200066c4
 8008c50:	200066b4 	.word	0x200066b4
 8008c54:	200066a8 	.word	0x200066a8
 8008c58:	200066b8 	.word	0x200066b8
 8008c5c:	200066bc 	.word	0x200066bc

08008c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d04d      	beq.n	8008d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c72:	2308      	movs	r3, #8
 8008c74:	425b      	negs	r3, r3
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	4413      	add	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <vPortFree+0xb8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <vPortFree+0x44>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60fb      	str	r3, [r7, #12]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <vPortFree+0x62>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60bb      	str	r3, [r7, #8]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <vPortFree+0xb8>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01e      	beq.n	8008d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d11a      	bne.n	8008d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <vPortFree+0xb8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	401a      	ands	r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ce8:	f7fe fc8e 	bl	8007608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <vPortFree+0xbc>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	4a09      	ldr	r2, [pc, #36]	; (8008d1c <vPortFree+0xbc>)
 8008cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cfa:	6938      	ldr	r0, [r7, #16]
 8008cfc:	f000 f874 	bl	8008de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <vPortFree+0xc0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	4a06      	ldr	r2, [pc, #24]	; (8008d20 <vPortFree+0xc0>)
 8008d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d0a:	f7fe fc8b 	bl	8007624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d0e:	bf00      	nop
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200066c4 	.word	0x200066c4
 8008d1c:	200066b4 	.word	0x200066b4
 8008d20:	200066c0 	.word	0x200066c0

08008d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d30:	4b27      	ldr	r3, [pc, #156]	; (8008dd0 <prvHeapInit+0xac>)
 8008d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3307      	adds	r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0307 	bic.w	r3, r3, #7
 8008d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	4a1f      	ldr	r2, [pc, #124]	; (8008dd0 <prvHeapInit+0xac>)
 8008d54:	4413      	add	r3, r2
 8008d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d5c:	4a1d      	ldr	r2, [pc, #116]	; (8008dd4 <prvHeapInit+0xb0>)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d62:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <prvHeapInit+0xb0>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d70:	2208      	movs	r2, #8
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d86:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d8e:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <prvHeapInit+0xb4>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <prvHeapInit+0xb8>)
 8008db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4a09      	ldr	r2, [pc, #36]	; (8008de0 <prvHeapInit+0xbc>)
 8008dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dbc:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <prvHeapInit+0xc0>)
 8008dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dc2:	601a      	str	r2, [r3, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	20002aa8 	.word	0x20002aa8
 8008dd4:	200066a8 	.word	0x200066a8
 8008dd8:	200066b0 	.word	0x200066b0
 8008ddc:	200066b8 	.word	0x200066b8
 8008de0:	200066b4 	.word	0x200066b4
 8008de4:	200066c4 	.word	0x200066c4

08008de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <prvInsertBlockIntoFreeList+0xac>)
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	e002      	b.n	8008dfc <prvInsertBlockIntoFreeList+0x14>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d8f7      	bhi.n	8008df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4413      	add	r3, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d108      	bne.n	8008e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	441a      	add	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	441a      	add	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d118      	bne.n	8008e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <prvInsertBlockIntoFreeList+0xb0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d00d      	beq.n	8008e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	441a      	add	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e008      	b.n	8008e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <prvInsertBlockIntoFreeList+0xb0>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e003      	b.n	8008e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d002      	beq.n	8008e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	200066a8 	.word	0x200066a8
 8008e98:	200066b0 	.word	0x200066b0

08008e9c <__libc_init_array>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ed4 <__libc_init_array+0x38>)
 8008ea0:	4c0d      	ldr	r4, [pc, #52]	; (8008ed8 <__libc_init_array+0x3c>)
 8008ea2:	1b64      	subs	r4, r4, r5
 8008ea4:	10a4      	asrs	r4, r4, #2
 8008ea6:	2600      	movs	r6, #0
 8008ea8:	42a6      	cmp	r6, r4
 8008eaa:	d109      	bne.n	8008ec0 <__libc_init_array+0x24>
 8008eac:	4d0b      	ldr	r5, [pc, #44]	; (8008edc <__libc_init_array+0x40>)
 8008eae:	4c0c      	ldr	r4, [pc, #48]	; (8008ee0 <__libc_init_array+0x44>)
 8008eb0:	f000 f82e 	bl	8008f10 <_init>
 8008eb4:	1b64      	subs	r4, r4, r5
 8008eb6:	10a4      	asrs	r4, r4, #2
 8008eb8:	2600      	movs	r6, #0
 8008eba:	42a6      	cmp	r6, r4
 8008ebc:	d105      	bne.n	8008eca <__libc_init_array+0x2e>
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec4:	4798      	blx	r3
 8008ec6:	3601      	adds	r6, #1
 8008ec8:	e7ee      	b.n	8008ea8 <__libc_init_array+0xc>
 8008eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ece:	4798      	blx	r3
 8008ed0:	3601      	adds	r6, #1
 8008ed2:	e7f2      	b.n	8008eba <__libc_init_array+0x1e>
 8008ed4:	08009120 	.word	0x08009120
 8008ed8:	08009120 	.word	0x08009120
 8008edc:	08009120 	.word	0x08009120
 8008ee0:	08009124 	.word	0x08009124

08008ee4 <memcpy>:
 8008ee4:	440a      	add	r2, r1
 8008ee6:	4291      	cmp	r1, r2
 8008ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eec:	d100      	bne.n	8008ef0 <memcpy+0xc>
 8008eee:	4770      	bx	lr
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008efa:	4291      	cmp	r1, r2
 8008efc:	d1f9      	bne.n	8008ef2 <memcpy+0xe>
 8008efe:	bd10      	pop	{r4, pc}

08008f00 <memset>:
 8008f00:	4402      	add	r2, r0
 8008f02:	4603      	mov	r3, r0
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d100      	bne.n	8008f0a <memset+0xa>
 8008f08:	4770      	bx	lr
 8008f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0e:	e7f9      	b.n	8008f04 <memset+0x4>

08008f10 <_init>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr

08008f1c <_fini>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	bf00      	nop
 8008f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f22:	bc08      	pop	{r3}
 8008f24:	469e      	mov	lr, r3
 8008f26:	4770      	bx	lr
