
minibot32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a238  0800a238  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a238  0800a238  0001a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a240  0800a240  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a240  0800a240  0001a240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00006720  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006794  20006794  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021b07  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051d4  00000000  00000000  00041bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001930  00000000  00000000  00046d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e8  00000000  00000000  000486b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028dd5  00000000  00000000  00049d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020c78  00000000  00000000  00072b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db165  00000000  00000000  000937e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e94a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068fc  00000000  00000000  0016e99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fec 	.word	0x08009fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009fec 	.word	0x08009fec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800058a:	4b30      	ldr	r3, [pc, #192]	; (800064c <MX_CAN1_Init+0xc8>)
 800058c:	4a30      	ldr	r2, [pc, #192]	; (8000650 <MX_CAN1_Init+0xcc>)
 800058e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000590:	4b2e      	ldr	r3, [pc, #184]	; (800064c <MX_CAN1_Init+0xc8>)
 8000592:	2206      	movs	r2, #6
 8000594:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <MX_CAN1_Init+0xc8>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <MX_CAN1_Init+0xc8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <MX_CAN1_Init+0xc8>)
 80005a4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80005a8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <MX_CAN1_Init+0xc8>)
 80005ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005b0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_CAN1_Init+0xc8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_CAN1_Init+0xc8>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_CAN1_Init+0xc8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_CAN1_Init+0xc8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_CAN1_Init+0xc8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_CAN1_Init+0xc8>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <MX_CAN1_Init+0xc8>)
 80005d8:	f001 fdb4 	bl	8002144 <HAL_CAN_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005e2:	f000 fb5f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <MX_CAN1_Init+0xc8>)
 8000610:	f001 fe94 	bl	800233c <HAL_CAN_ConfigFilter>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_CAN1_Init+0x9a>
  {
  	Error_Handler();
 800061a:	f000 fb43 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <MX_CAN1_Init+0xc8>)
 8000620:	f001 ff6c 	bl	80024fc <HAL_CAN_Start>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_CAN1_Init+0xaa>
	Error_Handler();
 800062a:	f000 fb3b 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1,
 800062e:	f648 4102 	movw	r1, #35842	; 0x8c02
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_CAN1_Init+0xc8>)
 8000634:	f002 f9c8 	bl	80029c8 <HAL_CAN_ActivateNotification>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_CAN1_Init+0xbe>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
	Error_Handler();
 800063e:	f000 fb31 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	; 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000090 	.word	0x20000090
 8000650:	40006400 	.word	0x40006400

08000654 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <HAL_CAN_MspInit+0xa4>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d13c      	bne.n	80006f0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <HAL_CAN_MspInit+0xa8>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <HAL_CAN_MspInit+0xa8>)
 8000680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <HAL_CAN_MspInit+0xa8>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_CAN_MspInit+0xa8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <HAL_CAN_MspInit+0xa8>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_CAN_MspInit+0xa8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006c0:	2309      	movs	r3, #9
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <HAL_CAN_MspInit+0xac>)
 80006cc:	f003 f8ac 	bl	8003828 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2105      	movs	r1, #5
 80006d4:	2014      	movs	r0, #20
 80006d6:	f002 fc7b 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006da:	2014      	movs	r0, #20
 80006dc:	f002 fc94 	bl	8003008 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2105      	movs	r1, #5
 80006e4:	2016      	movs	r0, #22
 80006e6:	f002 fc73 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006ea:	2016      	movs	r0, #22
 80006ec:	f002 fc8c 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40006400 	.word	0x40006400
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_DMA_Init+0x78>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <MX_DMA_Init+0x78>)
 8000714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_DMA_Init+0x78>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_DMA_Init+0x78>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_DMA_Init+0x78>)
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_DMA_Init+0x78>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2105      	movs	r1, #5
 8000746:	200c      	movs	r0, #12
 8000748:	f002 fc42 	bl	8002fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800074c:	200c      	movs	r0, #12
 800074e:	f002 fc5b 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2105      	movs	r1, #5
 8000756:	2010      	movs	r0, #16
 8000758:	f002 fc3a 	bl	8002fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800075c:	2010      	movs	r0, #16
 800075e:	f002 fc53 	bl	8003008 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2105      	movs	r1, #5
 8000766:	203a      	movs	r0, #58	; 0x3a
 8000768:	f002 fc32 	bl	8002fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800076c:	203a      	movs	r0, #58	; 0x3a
 800076e:	f002 fc4b 	bl	8003008 <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <MX_FREERTOS_Init+0x88>)
 8000786:	2100      	movs	r1, #0
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <MX_FREERTOS_Init+0x8c>)
 800078a:	f006 fa8b 	bl	8006ca4 <osThreadNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <MX_FREERTOS_Init+0x90>)
 8000792:	6013      	str	r3, [r2, #0]

  /* creation of OutputsTask */
  OutputsTaskHandle = osThreadNew(StartOutputsTask, NULL, &OutputsTask_attributes);
 8000794:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_FREERTOS_Init+0x94>)
 8000796:	2100      	movs	r1, #0
 8000798:	481f      	ldr	r0, [pc, #124]	; (8000818 <MX_FREERTOS_Init+0x98>)
 800079a:	f006 fa83 	bl	8006ca4 <osThreadNew>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_FREERTOS_Init+0x9c>)
 80007a2:	6013      	str	r3, [r2, #0]

  /* creation of InputsTask */
  InputsTaskHandle = osThreadNew(StartInputsTask, NULL, &InputsTask_attributes);
 80007a4:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <MX_FREERTOS_Init+0xa0>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	481e      	ldr	r0, [pc, #120]	; (8000824 <MX_FREERTOS_Init+0xa4>)
 80007aa:	f006 fa7b 	bl	8006ca4 <osThreadNew>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <MX_FREERTOS_Init+0xa8>)
 80007b2:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartServoTask, NULL, &ServoTask_attributes);
 80007b4:	4a1d      	ldr	r2, [pc, #116]	; (800082c <MX_FREERTOS_Init+0xac>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	481d      	ldr	r0, [pc, #116]	; (8000830 <MX_FREERTOS_Init+0xb0>)
 80007ba:	f006 fa73 	bl	8006ca4 <osThreadNew>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_FREERTOS_Init+0xb4>)
 80007c2:	6013      	str	r3, [r2, #0]

  /* creation of UartWiFiTask */
  UartWiFiTaskHandle = osThreadNew(StartUartWiFiTask, NULL, &UartWiFiTask_attributes);
 80007c4:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_FREERTOS_Init+0xb8>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	481c      	ldr	r0, [pc, #112]	; (800083c <MX_FREERTOS_Init+0xbc>)
 80007ca:	f006 fa6b 	bl	8006ca4 <osThreadNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_FREERTOS_Init+0xc0>)
 80007d2:	6013      	str	r3, [r2, #0]

  /* creation of CanDriversTask */
  CanDriversTaskHandle = osThreadNew(StartCanDriversTask, NULL, &CanDriversTask_attributes);
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_FREERTOS_Init+0xc4>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	481b      	ldr	r0, [pc, #108]	; (8000848 <MX_FREERTOS_Init+0xc8>)
 80007da:	f006 fa63 	bl	8006ca4 <osThreadNew>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <MX_FREERTOS_Init+0xcc>)
 80007e2:	6013      	str	r3, [r2, #0]

  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <MX_FREERTOS_Init+0xd0>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	481a      	ldr	r0, [pc, #104]	; (8000854 <MX_FREERTOS_Init+0xd4>)
 80007ea:	f006 fa5b 	bl	8006ca4 <osThreadNew>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <MX_FREERTOS_Init+0xd8>)
 80007f2:	6013      	str	r3, [r2, #0]

  /* creation of MissionsTask */
  MissionsTaskHandle = osThreadNew(StartMissionsTask, NULL, &MissionsTask_attributes);
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <MX_FREERTOS_Init+0xdc>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4819      	ldr	r0, [pc, #100]	; (8000860 <MX_FREERTOS_Init+0xe0>)
 80007fa:	f006 fa53 	bl	8006ca4 <osThreadNew>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <MX_FREERTOS_Init+0xe4>)
 8000802:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	0800a094 	.word	0x0800a094
 800080c:	08000869 	.word	0x08000869
 8000810:	200000ec 	.word	0x200000ec
 8000814:	0800a0b8 	.word	0x0800a0b8
 8000818:	08001d31 	.word	0x08001d31
 800081c:	2000034c 	.word	0x2000034c
 8000820:	0800a0dc 	.word	0x0800a0dc
 8000824:	08001b89 	.word	0x08001b89
 8000828:	200005ac 	.word	0x200005ac
 800082c:	0800a100 	.word	0x0800a100
 8000830:	08001df9 	.word	0x08001df9
 8000834:	2000080c 	.word	0x2000080c
 8000838:	0800a124 	.word	0x0800a124
 800083c:	08001e0d 	.word	0x08001e0d
 8000840:	20000a6c 	.word	0x20000a6c
 8000844:	0800a148 	.word	0x0800a148
 8000848:	08001b09 	.word	0x08001b09
 800084c:	20000ecc 	.word	0x20000ecc
 8000850:	0800a16c 	.word	0x0800a16c
 8000854:	08001999 	.word	0x08001999
 8000858:	2000112c 	.word	0x2000112c
 800085c:	0800a190 	.word	0x0800a190
 8000860:	08001d25 	.word	0x08001d25
 8000864:	2000158c 	.word	0x2000158c

08000868 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f006 faa8 	bl	8006dc8 <osDelay>
 8000878:	e7fa      	b.n	8000870 <StartDefaultTask+0x8>
	...

0800087c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b7d      	ldr	r3, [pc, #500]	; (8000a8c <MX_GPIO_Init+0x210>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a7c      	ldr	r2, [pc, #496]	; (8000a8c <MX_GPIO_Init+0x210>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b7a      	ldr	r3, [pc, #488]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b76      	ldr	r3, [pc, #472]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a75      	ldr	r2, [pc, #468]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b73      	ldr	r3, [pc, #460]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a6e      	ldr	r2, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b6c      	ldr	r3, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b68      	ldr	r3, [pc, #416]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a67      	ldr	r2, [pc, #412]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b65      	ldr	r3, [pc, #404]	; (8000a8c <MX_GPIO_Init+0x210>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b61      	ldr	r3, [pc, #388]	; (8000a8c <MX_GPIO_Init+0x210>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a60      	ldr	r2, [pc, #384]	; (8000a8c <MX_GPIO_Init+0x210>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b5e      	ldr	r3, [pc, #376]	; (8000a8c <MX_GPIO_Init+0x210>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <MX_GPIO_Init+0x210>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a59      	ldr	r2, [pc, #356]	; (8000a8c <MX_GPIO_Init+0x210>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <MX_GPIO_Init+0x210>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2132      	movs	r1, #50	; 0x32
 800093e:	4854      	ldr	r0, [pc, #336]	; (8000a90 <MX_GPIO_Init+0x214>)
 8000940:	f003 f90e 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800094a:	4852      	ldr	r0, [pc, #328]	; (8000a94 <MX_GPIO_Init+0x218>)
 800094c:	f003 f908 	bl	8003b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f24c 0103 	movw	r1, #49155	; 0xc003
 8000956:	4850      	ldr	r0, [pc, #320]	; (8000a98 <MX_GPIO_Init+0x21c>)
 8000958:	f003 f902 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800095c:	2201      	movs	r2, #1
 800095e:	f64f 7180 	movw	r1, #65408	; 0xff80
 8000962:	484e      	ldr	r0, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x220>)
 8000964:	f003 f8fc 	bl	8003b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800096e:	484c      	ldr	r0, [pc, #304]	; (8000aa0 <MX_GPIO_Init+0x224>)
 8000970:	f003 f8f6 	bl	8003b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000974:	237e      	movs	r3, #126	; 0x7e
 8000976:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4845      	ldr	r0, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x220>)
 8000988:	f002 ff4e 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800098c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	483b      	ldr	r0, [pc, #236]	; (8000a90 <MX_GPIO_Init+0x214>)
 80009a2:	f002 ff41 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009a6:	2332      	movs	r3, #50	; 0x32
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4834      	ldr	r0, [pc, #208]	; (8000a90 <MX_GPIO_Init+0x214>)
 80009be:	f002 ff33 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009c2:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80009c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	482e      	ldr	r0, [pc, #184]	; (8000a94 <MX_GPIO_Init+0x218>)
 80009dc:	f002 ff24 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 80009e0:	f24c 0303 	movw	r3, #49155	; 0xc003
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4827      	ldr	r0, [pc, #156]	; (8000a98 <MX_GPIO_Init+0x21c>)
 80009fa:	f002 ff15 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80009fe:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4821      	ldr	r0, [pc, #132]	; (8000a9c <MX_GPIO_Init+0x220>)
 8000a18:	f002 ff06 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a1c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a20:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0x224>)
 8000a36:	f002 fef7 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0x218>)
 8000a50:	f002 feea 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a54:	23ff      	movs	r3, #255	; 0xff
 8000a56:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_GPIO_Init+0x224>)
 8000a68:	f002 fede 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a6c:	2338      	movs	r3, #56	; 0x38
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_GPIO_Init+0x21c>)
 8000a80:	f002 fed2 	bl	8003828 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020c00 	.word	0x40020c00

08000aa4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_IWDG_Init+0x2c>)
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <MX_IWDG_Init+0x30>)
 8000aac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_IWDG_Init+0x2c>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_IWDG_Init+0x2c>)
 8000ab6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000aba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_IWDG_Init+0x2c>)
 8000abe:	f003 f868 	bl	8003b92 <HAL_IWDG_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000ac8:	f000 f8ec 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200019ec 	.word	0x200019ec
 8000ad4:	40003000 	.word	0x40003000

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f001 facc 	bl	8002078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f862 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f7ff feca 	bl	800087c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae8:	f7ff fe0c 	bl	8000704 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000aec:	f000 fbd0 	bl	8001290 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000af0:	f000 fbf8 	bl	80012e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000af4:	f000 fc20 	bl	8001338 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000af8:	f000 fa3a 	bl	8000f70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000afc:	f000 fad0 	bl	80010a0 <MX_TIM4_Init>
  MX_IWDG_Init();
 8000b00:	f7ff ffd0 	bl	8000aa4 <MX_IWDG_Init>
  MX_CAN1_Init();
 8000b04:	f7ff fd3e 	bl	8000584 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2500);
 8000b08:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000b0c:	f001 faf6 	bl	80020fc <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 8000b10:	2264      	movs	r2, #100	; 0x64
 8000b12:	491a      	ldr	r1, [pc, #104]	; (8000b7c <main+0xa4>)
 8000b14:	481a      	ldr	r0, [pc, #104]	; (8000b80 <main+0xa8>)
 8000b16:	f004 fee0 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 8000b1a:	2264      	movs	r2, #100	; 0x64
 8000b1c:	4919      	ldr	r1, [pc, #100]	; (8000b84 <main+0xac>)
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <main+0xb0>)
 8000b20:	f004 fedb 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	4919      	ldr	r1, [pc, #100]	; (8000b8c <main+0xb4>)
 8000b28:	4819      	ldr	r0, [pc, #100]	; (8000b90 <main+0xb8>)
 8000b2a:	f004 fed6 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <main+0xbc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <main+0xbc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0208 	bic.w	r2, r2, #8
 8000b3c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <main+0xc0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <main+0xc0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f022 0208 	bic.w	r2, r2, #8
 8000b4c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <main+0xc4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <main+0xc4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 0208 	bic.w	r2, r2, #8
 8000b5c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000b5e:	213c      	movs	r1, #60	; 0x3c
 8000b60:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <main+0xc8>)
 8000b62:	f003 fef2 	bl	800494a <HAL_TIM_Encoder_Start>
  HAL_IWDG_Refresh(&hiwdg);
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <main+0xcc>)
 8000b68:	f003 f855 	bl	8003c16 <HAL_IWDG_Refresh>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b6c:	f006 f850 	bl	8006c10 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b70:	f7ff fe06 	bl	8000780 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b74:	f006 f870 	bl	8006c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <main+0xa0>
 8000b7a:	bf00      	nop
 8000b7c:	20001d04 	.word	0x20001d04
 8000b80:	20001b5c 	.word	0x20001b5c
 8000b84:	20001d68 	.word	0x20001d68
 8000b88:	20001b18 	.word	0x20001b18
 8000b8c:	20001dcc 	.word	0x20001dcc
 8000b90:	20001ad4 	.word	0x20001ad4
 8000b94:	20001c60 	.word	0x20001c60
 8000b98:	20001c00 	.word	0x20001c00
 8000b9c:	20001ba0 	.word	0x20001ba0
 8000ba0:	20001a8c 	.word	0x20001a8c
 8000ba4:	200019ec 	.word	0x200019ec

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f008 fdb0 	bl	800971c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <SystemClock_Config+0xd0>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <SystemClock_Config+0xd0>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <SystemClock_Config+0xd0>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <SystemClock_Config+0xd4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <SystemClock_Config+0xd4>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <SystemClock_Config+0xd4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c04:	2309      	movs	r3, #9
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c20:	23a8      	movs	r3, #168	; 0xa8
 8000c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 f801 	bl	8003c38 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c3c:	f000 f832 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2302      	movs	r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fa62 	bl	8004128 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c6a:	f000 f81b 	bl	8000ca4 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3750      	adds	r7, #80	; 0x50
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000

08000c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c92:	f001 fa13 	bl	80020bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40001000 	.word	0x40001000

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_MspInit+0x54>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_MspInit+0x54>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x54>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_MspInit+0x54>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_MspInit+0x54>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_MspInit+0x54>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	f06f 0001 	mvn.w	r0, #1
 8000cf6:	f002 f96b 	bl	8002fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	; 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_InitTick+0xe4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a32      	ldr	r2, [pc, #200]	; (8000dec <HAL_InitTick+0xe4>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <HAL_InitTick+0xe4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d34:	f107 0210 	add.w	r2, r7, #16
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fc12 	bl	8004568 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4e:	f003 fbe3 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8000d52:	6378      	str	r0, [r7, #52]	; 0x34
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d56:	f003 fbdf 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d62:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <HAL_InitTick+0xe8>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_InitTick+0xec>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <HAL_InitTick+0xf0>)
 8000d72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_InitTick+0xec>)
 8000d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_InitTick+0xec>)
 8000d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_InitTick+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_InitTick+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_InitTick+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d94:	4817      	ldr	r0, [pc, #92]	; (8000df4 <HAL_InitTick+0xec>)
 8000d96:	f003 fc19 	bl	80045cc <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000da0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d11b      	bne.n	8000de0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da8:	4812      	ldr	r0, [pc, #72]	; (8000df4 <HAL_InitTick+0xec>)
 8000daa:	f003 fc5f 	bl	800466c <HAL_TIM_Base_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d111      	bne.n	8000de0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dbc:	2036      	movs	r0, #54	; 0x36
 8000dbe:	f002 f923 	bl	8003008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d808      	bhi.n	8000dda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	2036      	movs	r0, #54	; 0x36
 8000dce:	f002 f8ff 	bl	8002fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_InitTick+0xf4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e002      	b.n	8000de0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3738      	adds	r7, #56	; 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	200019f8 	.word	0x200019f8
 8000df8:	40001000 	.word	0x40001000
 8000dfc:	20000004 	.word	0x20000004

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Stream1_IRQHandler+0x10>)
 8000e32:	f002 fa8f 	bl	8003354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20001c60 	.word	0x20001c60

08000e40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA1_Stream5_IRQHandler+0x10>)
 8000e46:	f002 fa85 	bl	8003354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20001c00 	.word	0x20001c00

08000e54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <CAN1_RX0_IRQHandler+0x10>)
 8000e5a:	f001 fddb 	bl	8002a14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000090 	.word	0x20000090

08000e68 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <CAN1_SCE_IRQHandler+0x10>)
 8000e6e:	f001 fdd1 	bl	8002a14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000090 	.word	0x20000090

08000e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <USART1_IRQHandler+0x10>)
 8000e82:	f004 fd8f 	bl	80059a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20001ad4 	.word	0x20001ad4

08000e90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USART2_IRQHandler+0x10>)
 8000e96:	f004 fd85 	bl	80059a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20001b18 	.word	0x20001b18

08000ea4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <USART3_IRQHandler+0x10>)
 8000eaa:	f004 fd7b 	bl	80059a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20001b5c 	.word	0x20001b5c

08000eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM6_DAC_IRQHandler+0x10>)
 8000ebe:	f003 fdd2 	bl	8004a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200019f8 	.word	0x200019f8

08000ecc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <DMA2_Stream2_IRQHandler+0x10>)
 8000ed2:	f002 fa3f 	bl	8003354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20001ba0 	.word	0x20001ba0

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f008 fbcc 	bl	80096ac <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20020000 	.word	0x20020000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20001a40 	.word	0x20001a40
 8000f48:	20006798 	.word	0x20006798

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fa2:	4a3e      	ldr	r2, [pc, #248]	; (800109c <MX_TIM3_Init+0x12c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fa8:	f240 3247 	movw	r2, #839	; 0x347
 8000fac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fb6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fc8:	4833      	ldr	r0, [pc, #204]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fca:	f003 faff 	bl	80045cc <HAL_TIM_Base_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000fd4:	f7ff fe66 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	482c      	ldr	r0, [pc, #176]	; (8001098 <MX_TIM3_Init+0x128>)
 8000fe6:	f003 ff09 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ff0:	f7ff fe58 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff4:	4828      	ldr	r0, [pc, #160]	; (8001098 <MX_TIM3_Init+0x128>)
 8000ff6:	f003 fba9 	bl	800474c <HAL_TIM_PWM_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001000:	f7ff fe50 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4619      	mov	r1, r3
 8001012:	4821      	ldr	r0, [pc, #132]	; (8001098 <MX_TIM3_Init+0x128>)
 8001014:	f004 faf2 	bl	80055fc <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800101e:	f7ff fe41 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001022:	2360      	movs	r3, #96	; 0x60
 8001024:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	4619      	mov	r1, r3
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <MX_TIM3_Init+0x128>)
 800103a:	f003 fe1d 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001044:	f7ff fe2e 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2204      	movs	r2, #4
 800104c:	4619      	mov	r1, r3
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <MX_TIM3_Init+0x128>)
 8001050:	f003 fe12 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800105a:	f7ff fe23 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2208      	movs	r2, #8
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <MX_TIM3_Init+0x128>)
 8001066:	f003 fe07 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001070:	f7ff fe18 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	220c      	movs	r2, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM3_Init+0x128>)
 800107c:	f003 fdfc 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001086:	f7ff fe0d 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM3_Init+0x128>)
 800108c:	f000 f8c6 	bl	800121c <HAL_TIM_MspPostInit>

}
 8001090:	bf00      	nop
 8001092:	3738      	adds	r7, #56	; 0x38
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20001a44 	.word	0x20001a44
 800109c:	40000400 	.word	0x40000400

080010a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2224      	movs	r2, #36	; 0x24
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f008 fb34 	bl	800971c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_TIM4_Init+0xa0>)
 80010be:	4a21      	ldr	r2, [pc, #132]	; (8001144 <MX_TIM4_Init+0xa4>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_TIM4_Init+0xa0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM4_Init+0xa0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_TIM4_Init+0xa0>)
 80010d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM4_Init+0xa0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM4_Init+0xa0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM4_Init+0xa0>)
 800110e:	f003 fb76 	bl	80047fe <HAL_TIM_Encoder_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001118:	f7ff fdc4 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM4_Init+0xa0>)
 800112a:	f004 fa67 	bl	80055fc <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001134:	f7ff fdb6 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3730      	adds	r7, #48	; 0x30
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20001a8c 	.word	0x20001a8c
 8001144:	40000800 	.word	0x40000800

08001148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <HAL_TIM_Base_MspInit+0x3c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10d      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_TIM_Base_MspInit+0x40>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_TIM_Base_MspInit+0x40>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_TIM_Base_MspInit+0x40>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40000400 	.word	0x40000400
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_TIM_Encoder_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12b      	bne.n	8001206 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_TIM_Encoder_MspInit+0x88>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_TIM_Encoder_MspInit+0x88>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_TIM_Encoder_MspInit+0x88>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_TIM_Encoder_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_TIM_Encoder_MspInit+0x88>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_TIM_Encoder_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e6:	23c0      	movs	r3, #192	; 0xc0
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f6:	2302      	movs	r3, #2
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001202:	f002 fb11 	bl	8003828 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40000800 	.word	0x40000800
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_TIM_MspPostInit+0x68>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d11e      	bne.n	800127c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_TIM_MspPostInit+0x6c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_TIM_MspPostInit+0x6c>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_TIM_MspPostInit+0x6c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800125a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800125e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800126c:	2302      	movs	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_TIM_MspPostInit+0x70>)
 8001278:	f002 fad6 	bl	8003828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40000400 	.word	0x40000400
 8001288:	40023800 	.word	0x40023800
 800128c:	40020800 	.word	0x40020800

08001290 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART1_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c8:	f004 fa28 	bl	800571c <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f7ff fce7 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20001ad4 	.word	0x20001ad4
 80012e0:	40011000 	.word	0x40011000

080012e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MX_USART2_UART_Init+0x50>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800131c:	f004 f9fe 	bl	800571c <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001326:	f7ff fcbd 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20001b18 	.word	0x20001b18
 8001334:	40004400 	.word	0x40004400

08001338 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <MX_USART3_UART_Init+0x50>)
 8001340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART3_UART_Init+0x4c>)
 8001370:	f004 f9d4 	bl	800571c <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800137a:	f7ff fc93 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20001b5c 	.word	0x20001b5c
 8001388:	40004800 	.word	0x40004800

0800138c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a9d      	ldr	r2, [pc, #628]	; (8001620 <HAL_UART_MspInit+0x294>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d163      	bne.n	8001476 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	4b9c      	ldr	r3, [pc, #624]	; (8001624 <HAL_UART_MspInit+0x298>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a9b      	ldr	r2, [pc, #620]	; (8001624 <HAL_UART_MspInit+0x298>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b99      	ldr	r3, [pc, #612]	; (8001624 <HAL_UART_MspInit+0x298>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	4b95      	ldr	r3, [pc, #596]	; (8001624 <HAL_UART_MspInit+0x298>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a94      	ldr	r2, [pc, #592]	; (8001624 <HAL_UART_MspInit+0x298>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_UART_MspInit+0x298>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f8:	2307      	movs	r3, #7
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4889      	ldr	r0, [pc, #548]	; (8001628 <HAL_UART_MspInit+0x29c>)
 8001404:	f002 fa10 	bl	8003828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001408:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_UART_MspInit+0x2a0>)
 800140a:	4a89      	ldr	r2, [pc, #548]	; (8001630 <HAL_UART_MspInit+0x2a4>)
 800140c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800140e:	4b87      	ldr	r3, [pc, #540]	; (800162c <HAL_UART_MspInit+0x2a0>)
 8001410:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001414:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001416:	4b85      	ldr	r3, [pc, #532]	; (800162c <HAL_UART_MspInit+0x2a0>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141c:	4b83      	ldr	r3, [pc, #524]	; (800162c <HAL_UART_MspInit+0x2a0>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <HAL_UART_MspInit+0x2a0>)
 8001424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001428:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142a:	4b80      	ldr	r3, [pc, #512]	; (800162c <HAL_UART_MspInit+0x2a0>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001430:	4b7e      	ldr	r3, [pc, #504]	; (800162c <HAL_UART_MspInit+0x2a0>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001436:	4b7d      	ldr	r3, [pc, #500]	; (800162c <HAL_UART_MspInit+0x2a0>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143c:	4b7b      	ldr	r3, [pc, #492]	; (800162c <HAL_UART_MspInit+0x2a0>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001442:	4b7a      	ldr	r3, [pc, #488]	; (800162c <HAL_UART_MspInit+0x2a0>)
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001448:	4878      	ldr	r0, [pc, #480]	; (800162c <HAL_UART_MspInit+0x2a0>)
 800144a:	f001 fdeb 	bl	8003024 <HAL_DMA_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001454:	f7ff fc26 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a74      	ldr	r2, [pc, #464]	; (800162c <HAL_UART_MspInit+0x2a0>)
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
 800145e:	4a73      	ldr	r2, [pc, #460]	; (800162c <HAL_UART_MspInit+0x2a0>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2105      	movs	r1, #5
 8001468:	2025      	movs	r0, #37	; 0x25
 800146a:	f001 fdb1 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146e:	2025      	movs	r0, #37	; 0x25
 8001470:	f001 fdca 	bl	8003008 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001474:	e0cf      	b.n	8001616 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_UART_MspInit+0x2a8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d162      	bne.n	8001546 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_UART_MspInit+0x298>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_UART_MspInit+0x298>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_UART_MspInit+0x298>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	4b60      	ldr	r3, [pc, #384]	; (8001624 <HAL_UART_MspInit+0x298>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a5f      	ldr	r2, [pc, #380]	; (8001624 <HAL_UART_MspInit+0x298>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b5d      	ldr	r3, [pc, #372]	; (8001624 <HAL_UART_MspInit+0x298>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b8:	230c      	movs	r3, #12
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c8:	2307      	movs	r3, #7
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	4855      	ldr	r0, [pc, #340]	; (8001628 <HAL_UART_MspInit+0x29c>)
 80014d4:	f002 f9a8 	bl	8003828 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014d8:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 80014da:	4a58      	ldr	r2, [pc, #352]	; (800163c <HAL_UART_MspInit+0x2b0>)
 80014dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014de:	4b56      	ldr	r3, [pc, #344]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 80014e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e6:	4b54      	ldr	r3, [pc, #336]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 80014f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fa:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001506:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800150c:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001518:	4847      	ldr	r0, [pc, #284]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 800151a:	f001 fd83 	bl	8003024 <HAL_DMA_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001524:	f7ff fbbe 	bl	8000ca4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a43      	ldr	r2, [pc, #268]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
 800152e:	4a42      	ldr	r2, [pc, #264]	; (8001638 <HAL_UART_MspInit+0x2ac>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2105      	movs	r1, #5
 8001538:	2026      	movs	r0, #38	; 0x26
 800153a:	f001 fd49 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800153e:	2026      	movs	r0, #38	; 0x26
 8001540:	f001 fd62 	bl	8003008 <HAL_NVIC_EnableIRQ>
}
 8001544:	e067      	b.n	8001616 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART3)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a3d      	ldr	r2, [pc, #244]	; (8001640 <HAL_UART_MspInit+0x2b4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d162      	bne.n	8001616 <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_UART_MspInit+0x298>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a32      	ldr	r2, [pc, #200]	; (8001624 <HAL_UART_MspInit+0x298>)
 800155a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_UART_MspInit+0x298>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HAL_UART_MspInit+0x298>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	4a2b      	ldr	r2, [pc, #172]	; (8001624 <HAL_UART_MspInit+0x298>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	6313      	str	r3, [r2, #48]	; 0x30
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_UART_MspInit+0x298>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001588:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800159a:	2307      	movs	r3, #7
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4827      	ldr	r0, [pc, #156]	; (8001644 <HAL_UART_MspInit+0x2b8>)
 80015a6:	f002 f93f 	bl	8003828 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015ac:	4a27      	ldr	r2, [pc, #156]	; (800164c <HAL_UART_MspInit+0x2c0>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015ec:	f001 fd1a 	bl	8003024 <HAL_DMA_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x26e>
      Error_Handler();
 80015f6:	f7ff fb55 	bl	8000ca4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_UART_MspInit+0x2bc>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	2027      	movs	r0, #39	; 0x27
 800160c:	f001 fce0 	bl	8002fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001610:	2027      	movs	r0, #39	; 0x27
 8001612:	f001 fcf9 	bl	8003008 <HAL_NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3738      	adds	r7, #56	; 0x38
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40011000 	.word	0x40011000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	20001ba0 	.word	0x20001ba0
 8001630:	40026440 	.word	0x40026440
 8001634:	40004400 	.word	0x40004400
 8001638:	20001c00 	.word	0x20001c00
 800163c:	40026088 	.word	0x40026088
 8001640:	40004800 	.word	0x40004800
 8001644:	40020400 	.word	0x40020400
 8001648:	20001c60 	.word	0x20001c60
 800164c:	40026028 	.word	0x40026028

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <LoopFillZerobss+0x26>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167a:	f7ff fc67 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f008 f81b 	bl	80096b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fa29 	bl	8000ad8 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001694:	0800a248 	.word	0x0800a248
  ldr r2, =_sbss
 8001698:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800169c:	20006794 	.word	0x20006794

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>

080016a2 <_ZN16KeyaLKTechDriverC1Emmm>:
 *      Author: user
 */

#include <KeyaLKTechDriver.h>

KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, uint32_t stdId = 0)
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
{
	_axis = axis;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	621a      	str	r2, [r3, #32]
	_canTxHeader.ExtId = extId;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	605a      	str	r2, [r3, #4]
	_canTxHeader.StdId = stdId;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	601a      	str	r2, [r3, #0]
	_canTxHeader.RTR = CAN_RTR_DATA;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
	_canTxHeader.DLC = 8;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2208      	movs	r2, #8
 80016cc:	611a      	str	r2, [r3, #16]
	_canTxHeader.TransmitGlobalTime = DISABLE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	751a      	strb	r2, [r3, #20]
	if (extId)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <_ZN16KeyaLKTechDriverC1Emmm+0x40>
	{
		_canTxHeader.IDE = CAN_ID_EXT;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2204      	movs	r2, #4
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e002      	b.n	80016e8 <_ZN16KeyaLKTechDriverC1Emmm+0x46>
	}
	else
	{
		_canTxHeader.IDE = CAN_ID_STD;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
	}
}
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_ZN16KeyaLKTechDriverC1Em>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis) : KeyaLKTechDriver::KeyaLKTechDriver(extId, axis, 0){}
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t stdId) : KeyaLKTechDriver::KeyaLKTechDriver(0, 0, stdId){}
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffcb 	bl	80016a2 <_ZN16KeyaLKTechDriverC1Emmm>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_ZN16KeyaLKTechDriver8setSpeedEl>:

uint8_t KeyaLKTechDriver::setSpeed(int32_t speed)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
	if (_axis)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d021      	beq.n	800176c <_ZN16KeyaLKTechDriver8setSpeedEl+0x56>
	{
		_canData[0] = 0x23;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2223      	movs	r2, #35	; 0x23
 800172c:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2220      	movs	r2, #32
 8001738:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	76da      	strb	r2, [r3, #27]
		_canData[4] = speed >> 24;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	161b      	asrs	r3, r3, #24
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	771a      	strb	r2, [r3, #28]
		_canData[5] = speed >> 16;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	141b      	asrs	r3, r3, #16
 8001752:	b2da      	uxtb	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	775a      	strb	r2, [r3, #29]
		_canData[6] = speed >> 8;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	121b      	asrs	r3, r3, #8
 800175c:	b2da      	uxtb	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	779a      	strb	r2, [r3, #30]
		_canData[7] = speed;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	77da      	strb	r2, [r3, #31]
 800176a:	e01e      	b.n	80017aa <_ZN16KeyaLKTechDriver8setSpeedEl+0x94>
	}
	else
	{
		_canData[0] = 0xA2;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	22a2      	movs	r2, #162	; 0xa2
 8001770:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	76da      	strb	r2, [r3, #27]
		_canData[4] = speed;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	771a      	strb	r2, [r3, #28]
		_canData[5] = speed >> 8;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	121b      	asrs	r3, r3, #8
 8001790:	b2da      	uxtb	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	775a      	strb	r2, [r3, #29]
		_canData[6] = speed >> 16;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	141b      	asrs	r3, r3, #16
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	779a      	strb	r2, [r3, #30]
		_canData[7] = speed >> 24;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	161b      	asrs	r3, r3, #24
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	77da      	strb	r2, [r3, #31]
		_canData[5] = *((uint8_t *)(&speed)+1);
		_canData[6] = *((uint8_t *)(&speed)+2);
		_canData[7] = *((uint8_t *)(&speed)+3);*/
	}

	return KeyaLKTechDriver::sendData();
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f88f 	bl	80018ce <_ZN16KeyaLKTechDriver8sendDataEv>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_ZN16KeyaLKTechDriver4stopEv>:

uint8_t KeyaLKTechDriver::stop()
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d01a      	beq.n	8001800 <_ZN16KeyaLKTechDriver4stopEv+0x46>
		_canData[0] = 0x23;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2223      	movs	r2, #35	; 0x23
 80017ce:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2220      	movs	r2, #32
 80017da:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	77da      	strb	r2, [r3, #31]
 80017fe:	e017      	b.n	8001830 <_ZN16KeyaLKTechDriver4stopEv+0x76>
	} else {
		_canData[0] = 0x81;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2281      	movs	r2, #129	; 0x81
 8001804:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	77da      	strb	r2, [r3, #31]
	}

	return KeyaLKTechDriver::sendData();
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f84c 	bl	80018ce <_ZN16KeyaLKTechDriver8sendDataEv>
 8001836:	4603      	mov	r3, r0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZN16KeyaLKTechDriver6getEncEv>:

	return KeyaLKTechDriver::sendData();
}

uint8_t KeyaLKTechDriver::getEnc()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	if (_axis) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01a      	beq.n	8001886 <_ZN16KeyaLKTechDriver6getEncEv+0x46>
		_canData[0] = 0x23;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2223      	movs	r2, #35	; 0x23
 8001854:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x0C;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	220c      	movs	r2, #12
 800185a:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	77da      	strb	r2, [r3, #31]
 8001884:	e017      	b.n	80018b6 <_ZN16KeyaLKTechDriver6getEncEv+0x76>
	} else {
		_canData[0] = 0x9C;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	229c      	movs	r2, #156	; 0x9c
 800188a:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	77da      	strb	r2, [r3, #31]
	}
	return CanMsgSend(&_canTxHeader, _canData);
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3318      	adds	r3, #24
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f000 f8be 	bl	8001a40 <CanMsgSend>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_ZN16KeyaLKTechDriver8sendDataEv>:

uint8_t KeyaLKTechDriver::sendData()
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	return CanMsgSend(&_canTxHeader, _canData);
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3318      	adds	r3, #24
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f000 f8ae 	bl	8001a40 <CanMsgSend>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZN5ServoC1EP17TIM_HandleTypeDefm>:
 *      Author: user
 */

#include "Servo.h"

Servo::Servo(TIM_HandleTypeDef *htim, uint32_t timChannel)
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
{
	_htim = htim;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	601a      	str	r2, [r3, #0]
	_timChannel = timChannel;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]
}
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db12      	blt.n	8001988 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	490a      	ldr	r1, [pc, #40]	; (8001994 <__NVIC_DisableIRQ+0x44>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	3320      	adds	r3, #32
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800197c:	f3bf 8f4f 	dsb	sy
}
 8001980:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001982:	f3bf 8f6f 	isb	sy
}
 8001986:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100

08001998 <StartCanTask>:
uint8_t RxData[8] = { 0, };
uint32_t TxMailbox = 0;
CanDataRecvTypeDef canDataRecv;
CanDataSendTypeDef prevCanData;

void StartCanTask(void *argument) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		static uint32_t err_count = 0;
		if (NewCanMsg == CAN_GET_MSG_OK) {
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <StartCanTask+0x5c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <StartCanTask+0x30>
			NewCanMsg = CAN_GET_MSG_WAIT;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <StartCanTask+0x5c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
			err_count = 0;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <StartCanTask+0x60>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
			//globData.error.driver_conn = 0;
			CanMsgRead(&canDataRecv);
 80019c0:	480e      	ldr	r0, [pc, #56]	; (80019fc <StartCanTask+0x64>)
 80019c2:	f000 f81d 	bl	8001a00 <CanMsgRead>
 80019c6:	e011      	b.n	80019ec <StartCanTask+0x54>
		}
		else if (NewCanMsg == CAN_GET_MSG_ERROR) {
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <StartCanTask+0x5c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <StartCanTask+0x54>
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "CAN error\r\n", 11, 100);
			err_count++;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <StartCanTask+0x60>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <StartCanTask+0x60>)
 80019e4:	6013      	str	r3, [r2, #0]
				globData.drv_cpu_temp = 0;
				globData.motor1_temp = 0;
				globData.motor2_temp = 0;
				globData.voltage = 0;*/
			}
			NewCanMsg = CAN_GET_MSG_WAIT;
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <StartCanTask+0x5c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f005 f9eb 	bl	8006dc8 <osDelay>
	}
 80019f2:	e7d5      	b.n	80019a0 <StartCanTask+0x8>
 80019f4:	20001cc0 	.word	0x20001cc0
 80019f8:	20001cf4 	.word	0x20001cf4
 80019fc:	20001cec 	.word	0x20001cec

08001a00 <CanMsgRead>:
}

uint8_t CanMsgRead(CanDataRecvTypeDef *canDataRecv) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

	NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001a08:	2014      	movs	r0, #20
 8001a0a:	f7ff ffa1 	bl	8001950 <__NVIC_DisableIRQ>
		}
	}*/

	//uint32_t drvId = 0x140 + DRIVER1_LKTECH_ID;
	//if (RxHeader.StdId == drvId && RxData[0] == 0x9C) {
			globData.LKTemp = RxData[1];//*(uint16_t*) &RxData[6];
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <CanMsgRead+0x34>)
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <CanMsgRead+0x38>)
 8001a16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	//}
			globData.LKEncoder = *(uint16_t*) &RxData[6];
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <CanMsgRead+0x3c>)
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <CanMsgRead+0x38>)
 8001a20:	861a      	strh	r2, [r3, #48]	; 0x30
			//HAL_UART_Transmit(&WIFI_UART, (uint8_t*) "get\r\n", 5, 100);
			//HAL_UART_Transmit(&WIFI_UART, RxData, 8, 100);

	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a22:	2014      	movs	r0, #20
 8001a24:	f7ff ff76 	bl	8001914 <__NVIC_EnableIRQ>
	return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20001ce0 	.word	0x20001ce0
 8001a38:	200000b8 	.word	0x200000b8
 8001a3c:	20001ce6 	.word	0x20001ce6

08001a40 <CanMsgSend>:


uint8_t CanMsgSend(CAN_TxHeaderTypeDef *TxHeader, uint8_t canData[]) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]

	if (TxHeader->ExtId != 0 || TxHeader->StdId != 0)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <CanMsgSend+0x1a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01b      	beq.n	8001a92 <CanMsgSend+0x52>
	{
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8001a5a:	4810      	ldr	r0, [pc, #64]	; (8001a9c <CanMsgSend+0x5c>)
 8001a5c:	f000 fe6d 	bl	800273a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf0c      	ite	eq
 8001a66:	2301      	moveq	r3, #1
 8001a68:	2300      	movne	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d000      	beq.n	8001a72 <CanMsgSend+0x32>
 8001a70:	e7f3      	b.n	8001a5a <CanMsgSend+0x1a>
		if (HAL_CAN_AddTxMessage(&hcan1, TxHeader, canData, &TxMailbox) != HAL_OK) {
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <CanMsgSend+0x60>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4808      	ldr	r0, [pc, #32]	; (8001a9c <CanMsgSend+0x5c>)
 8001a7a:	f000 fd83 	bl	8002584 <HAL_CAN_AddTxMessage>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <CanMsgSend+0x52>
			//HAL_UART_Transmit(&huart1, (uint8_t*) "no_trans\r\n", 10, 100);
			return 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <CanMsgSend+0x54>
		}
	}
	return 1;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000090 	.word	0x20000090
 8001aa0:	20001ce8 	.word	0x20001ce8

08001aa4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fe76 	bl	80027a4 <HAL_CAN_GetRxMessage>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf14      	ite	ne
 8001abe:	2301      	movne	r3, #1
 8001ac0:	2300      	moveq	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		Error_Handler();
 8001ac8:	f7ff f8ec 	bl	8000ca4 <Error_Handler>
	}
	NewCanMsg = CAN_GET_MSG_OK;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20001ce0 	.word	0x20001ce0
 8001ae0:	20001cc4 	.word	0x20001cc4
 8001ae4:	20001cc0 	.word	0x20001cc0

08001ae8 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	NewCanMsg = CAN_GET_MSG_ERROR;
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_CAN_ErrorCallback+0x1c>)
 8001af2:	2202      	movs	r2, #2
 8001af4:	701a      	strb	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20001cc0 	.word	0x20001cc0

08001b08 <StartCanDriversTask>:
extern TIM_HandleTypeDef htim3;
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartCanDriversTask(void *argument)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b09a      	sub	sp, #104	; 0x68
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	Servo servo1(&htim3, TIM_CHANNEL_1);
 8001b10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b14:	2200      	movs	r2, #0
 8001b16:	491b      	ldr	r1, [pc, #108]	; (8001b84 <StartCanDriversTask+0x7c>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fee8 	bl	80018ee <_ZN5ServoC1EP17TIM_HandleTypeDefm>

	KeyaLKTechDriver DriverFB(0x140 + DRIVER1_LKTECH_ID);
 8001b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b22:	f240 1141 	movw	r1, #321	; 0x141
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fde5 	bl	80016f6 <_ZN16KeyaLKTechDriverC1Em>
	KeyaLKTechDriver DriverLR(0x140 + DRIVER2_LKTECH_ID);
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fdde 	bl	80016f6 <_ZN16KeyaLKTechDriverC1Em>
	osDelay(1000);
 8001b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3e:	f005 f943 	bl	8006dc8 <osDelay>
		osDelay(1000);
		servo1.setAngle(180);
		osDelay(1000);
		servo1.setAngle(270);
		osDelay(5000);*/
		DriverFB.setSpeed(3000);
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fde3 	bl	8001716 <_ZN16KeyaLKTechDriver8setSpeedEl>
		osDelay(500);
 8001b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b54:	f005 f938 	bl	8006dc8 <osDelay>
		DriverFB.stop();
 8001b58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe2c 	bl	80017ba <_ZN16KeyaLKTechDriver4stopEv>
		osDelay(50);
 8001b62:	2032      	movs	r0, #50	; 0x32
 8001b64:	f005 f930 	bl	8006dc8 <osDelay>
		DriverFB.getEnc();
 8001b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fe67 	bl	8001840 <_ZN16KeyaLKTechDriver6getEncEv>
		osDelay(500);
 8001b72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b76:	f005 f927 	bl	8006dc8 <osDelay>

		osDelay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f005 f924 	bl	8006dc8 <osDelay>
		DriverFB.setSpeed(3000);
 8001b80:	e7df      	b.n	8001b42 <StartCanDriversTask+0x3a>
 8001b82:	bf00      	nop
 8001b84:	20001a44 	.word	0x20001a44

08001b88 <StartInputsTask>:
#include "minibot_config.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartInputsTask(void *argument)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8001b90:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <StartInputsTask+0x188>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <StartInputsTask+0x20>
 8001b9c:	4a5d      	ldr	r2, [pc, #372]	; (8001d14 <StartInputsTask+0x18c>)
 8001b9e:	7f13      	ldrb	r3, [r2, #28]
 8001ba0:	f36f 0300 	bfc	r3, #0, #1
 8001ba4:	7713      	strb	r3, [r2, #28]
 8001ba6:	e004      	b.n	8001bb2 <StartInputsTask+0x2a>
 8001ba8:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <StartInputsTask+0x18c>)
 8001baa:	7f13      	ldrb	r3, [r2, #28]
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	7713      	strb	r3, [r2, #28]
		IN_X03 ? (globData.sens.limit_sw2 = 0) : (globData.sens.limit_sw2 = 1);
 8001bb2:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <StartInputsTask+0x190>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <StartInputsTask+0x42>
 8001bbe:	4a55      	ldr	r2, [pc, #340]	; (8001d14 <StartInputsTask+0x18c>)
 8001bc0:	7f13      	ldrb	r3, [r2, #28]
 8001bc2:	f36f 0341 	bfc	r3, #1, #1
 8001bc6:	7713      	strb	r3, [r2, #28]
 8001bc8:	e004      	b.n	8001bd4 <StartInputsTask+0x4c>
 8001bca:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <StartInputsTask+0x18c>)
 8001bcc:	7f13      	ldrb	r3, [r2, #28]
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	7713      	strb	r3, [r2, #28]
		IN_X04 ? (globData.sens.button_manual_mode = 0) : (globData.sens.button_manual_mode = 1);
 8001bd4:	4b50      	ldr	r3, [pc, #320]	; (8001d18 <StartInputsTask+0x190>)
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <StartInputsTask+0x64>
 8001be0:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <StartInputsTask+0x18c>)
 8001be2:	7f13      	ldrb	r3, [r2, #28]
 8001be4:	f36f 0382 	bfc	r3, #2, #1
 8001be8:	7713      	strb	r3, [r2, #28]
 8001bea:	e004      	b.n	8001bf6 <StartInputsTask+0x6e>
 8001bec:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <StartInputsTask+0x18c>)
 8001bee:	7f13      	ldrb	r3, [r2, #28]
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	7713      	strb	r3, [r2, #28]
		IN_X05 ? (globData.sens.button_motor1_forw = 0) : (globData.sens.button_motor1_forw= 1);
 8001bf6:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <StartInputsTask+0x190>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <StartInputsTask+0x86>
 8001c02:	4a44      	ldr	r2, [pc, #272]	; (8001d14 <StartInputsTask+0x18c>)
 8001c04:	7f13      	ldrb	r3, [r2, #28]
 8001c06:	f36f 03c3 	bfc	r3, #3, #1
 8001c0a:	7713      	strb	r3, [r2, #28]
 8001c0c:	e004      	b.n	8001c18 <StartInputsTask+0x90>
 8001c0e:	4a41      	ldr	r2, [pc, #260]	; (8001d14 <StartInputsTask+0x18c>)
 8001c10:	7f13      	ldrb	r3, [r2, #28]
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	7713      	strb	r3, [r2, #28]
		IN_X06 ? (globData.sens.button_motor1_back= 0) : (globData.sens.button_motor1_back = 1);
 8001c18:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <StartInputsTask+0x190>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <StartInputsTask+0xa8>
 8001c24:	4a3b      	ldr	r2, [pc, #236]	; (8001d14 <StartInputsTask+0x18c>)
 8001c26:	7f13      	ldrb	r3, [r2, #28]
 8001c28:	f36f 1304 	bfc	r3, #4, #1
 8001c2c:	7713      	strb	r3, [r2, #28]
 8001c2e:	e004      	b.n	8001c3a <StartInputsTask+0xb2>
 8001c30:	4a38      	ldr	r2, [pc, #224]	; (8001d14 <StartInputsTask+0x18c>)
 8001c32:	7f13      	ldrb	r3, [r2, #28]
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	7713      	strb	r3, [r2, #28]
		IN_X07 ? (globData.sens.button_motor2_forw = 0) : (globData.sens.button_motor2_forw = 1);
 8001c3a:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <StartInputsTask+0x190>)
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <StartInputsTask+0xca>
 8001c46:	4a33      	ldr	r2, [pc, #204]	; (8001d14 <StartInputsTask+0x18c>)
 8001c48:	7f13      	ldrb	r3, [r2, #28]
 8001c4a:	f36f 1345 	bfc	r3, #5, #1
 8001c4e:	7713      	strb	r3, [r2, #28]
 8001c50:	e004      	b.n	8001c5c <StartInputsTask+0xd4>
 8001c52:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <StartInputsTask+0x18c>)
 8001c54:	7f13      	ldrb	r3, [r2, #28]
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	7713      	strb	r3, [r2, #28]
		IN_X08 ? (globData.sens.button_motor2_back = 0) : (globData.sens.button_motor2_back = 1);
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <StartInputsTask+0x190>)
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <StartInputsTask+0xec>
 8001c68:	4a2a      	ldr	r2, [pc, #168]	; (8001d14 <StartInputsTask+0x18c>)
 8001c6a:	7f13      	ldrb	r3, [r2, #28]
 8001c6c:	f36f 1386 	bfc	r3, #6, #1
 8001c70:	7713      	strb	r3, [r2, #28]
 8001c72:	e004      	b.n	8001c7e <StartInputsTask+0xf6>
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <StartInputsTask+0x18c>)
 8001c76:	7f13      	ldrb	r3, [r2, #28]
 8001c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c7c:	7713      	strb	r3, [r2, #28]
		IN_X09 ? (globData.sens.button_start = 0) : (globData.sens.button_start = 1);
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <StartInputsTask+0x194>)
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <StartInputsTask+0x10e>
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <StartInputsTask+0x18c>)
 8001c8c:	7f13      	ldrb	r3, [r2, #28]
 8001c8e:	f36f 13c7 	bfc	r3, #7, #1
 8001c92:	7713      	strb	r3, [r2, #28]
 8001c94:	e004      	b.n	8001ca0 <StartInputsTask+0x118>
 8001c96:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <StartInputsTask+0x18c>)
 8001c98:	7f13      	ldrb	r3, [r2, #28]
 8001c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9e:	7713      	strb	r3, [r2, #28]
		IN_X10 ? (globData.sens.button_pause = 0) : (globData.sens.button_pause = 1);
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <StartInputsTask+0x194>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <StartInputsTask+0x130>
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <StartInputsTask+0x18c>)
 8001cae:	7f53      	ldrb	r3, [r2, #29]
 8001cb0:	f36f 0300 	bfc	r3, #0, #1
 8001cb4:	7753      	strb	r3, [r2, #29]
 8001cb6:	e004      	b.n	8001cc2 <StartInputsTask+0x13a>
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <StartInputsTask+0x18c>)
 8001cba:	7f53      	ldrb	r3, [r2, #29]
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	7753      	strb	r3, [r2, #29]
		IN_X11 ? (globData.sens.button_stop = 0) : (globData.sens.button_stop = 1);
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <StartInputsTask+0x194>)
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <StartInputsTask+0x152>
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <StartInputsTask+0x18c>)
 8001cd0:	7f53      	ldrb	r3, [r2, #29]
 8001cd2:	f36f 0341 	bfc	r3, #1, #1
 8001cd6:	7753      	strb	r3, [r2, #29]
 8001cd8:	e004      	b.n	8001ce4 <StartInputsTask+0x15c>
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <StartInputsTask+0x18c>)
 8001cdc:	7f53      	ldrb	r3, [r2, #29]
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	7753      	strb	r3, [r2, #29]
		IN_X12 ? (globData.sens.button8 = 0) : (globData.sens.button8 = 1);
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <StartInputsTask+0x198>)
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <StartInputsTask+0x174>
 8001cf0:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <StartInputsTask+0x18c>)
 8001cf2:	7f53      	ldrb	r3, [r2, #29]
 8001cf4:	f36f 0382 	bfc	r3, #2, #1
 8001cf8:	7753      	strb	r3, [r2, #29]
 8001cfa:	e004      	b.n	8001d06 <StartInputsTask+0x17e>
 8001cfc:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <StartInputsTask+0x18c>)
 8001cfe:	7f53      	ldrb	r3, [r2, #29]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	7753      	strb	r3, [r2, #29]
		osDelay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f005 f85e 	bl	8006dc8 <osDelay>
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8001d0c:	e740      	b.n	8001b90 <StartInputsTask+0x8>
 8001d0e:	bf00      	nop
 8001d10:	40020800 	.word	0x40020800
 8001d14:	200000b8 	.word	0x200000b8
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020c00 	.word	0x40020c00

08001d24 <StartMissionsTask>:
#include "mission.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartMissionsTask(void *argument)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

	for(;;)
 8001d2c:	e7fe      	b.n	8001d2c <StartMissionsTask+0x8>
	...

08001d30 <StartOutputsTask>:

//extern IWDG_HandleTypeDef hiwdg;


void StartOutputsTask(void *argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <StartOutputsTask+0x28>)
 8001d3a:	f001 ff6c 	bl	8003c16 <HAL_IWDG_Refresh>
		SetOutputs();
 8001d3e:	f000 f80f 	bl	8001d60 <SetOutputs>
		if (globData.LEDB) LedBlink();
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <StartOutputsTask+0x2c>)
 8001d44:	795b      	ldrb	r3, [r3, #5]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <StartOutputsTask+0x1e>
 8001d4a:	f000 f811 	bl	8001d70 <LedBlink>
		osDelay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f005 f83a 	bl	8006dc8 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 8001d54:	e7f0      	b.n	8001d38 <StartOutputsTask+0x8>
 8001d56:	bf00      	nop
 8001d58:	200019ec 	.word	0x200019ec
 8001d5c:	200000b8 	.word	0x200000b8

08001d60 <SetOutputs>:
	}
}

void SetOutputs()
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <LedBlink>:

void LedBlink() {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
			3   //LEDB_ERROR
	};

	static int32_t ledb_active_time = 0;
	static int32_t ledb_repeats = 0;
	ledb_repeats = ledb_rep[globData.LEDB];
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <LedBlink+0x70>)
 8001d78:	795b      	ldrb	r3, [r3, #5]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <LedBlink+0x74>)
 8001d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <LedBlink+0x78>)
 8001d86:	601a      	str	r2, [r3, #0]
	ledb_active_time = ledb_time[globData.LEDB];
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <LedBlink+0x70>)
 8001d8a:	795b      	ldrb	r3, [r3, #5]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <LedBlink+0x7c>)
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <LedBlink+0x80>)
 8001d98:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ledb_repeats; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <LedBlink+0x78>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	da14      	bge.n	8001dd2 <LedBlink+0x62>
	{
		osDelay(ledb_active_time);
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <LedBlink+0x80>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 f80b 	bl	8006dc8 <osDelay>
		Y05_ON;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <LedBlink+0x84>)
 8001db4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001db8:	619a      	str	r2, [r3, #24]
		osDelay(ledb_active_time);
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <LedBlink+0x80>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 f802 	bl	8006dc8 <osDelay>
		Y05_OFF;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <LedBlink+0x84>)
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < ledb_repeats; i++)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e7e5      	b.n	8001d9e <LedBlink+0x2e>
	}
	globData.LEDB = 0;
 8001dd2:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <LedBlink+0x70>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	715a      	strb	r2, [r3, #5]
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200000b8 	.word	0x200000b8
 8001de4:	0800a1e4 	.word	0x0800a1e4
 8001de8:	20001cfc 	.word	0x20001cfc
 8001dec:	0800a1cc 	.word	0x0800a1cc
 8001df0:	20001cf8 	.word	0x20001cf8
 8001df4:	40020800 	.word	0x40020800

08001df8 <StartServoTask>:
#include "stdio.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartServoTask(void *argument)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	
	for(;;)
	{
		osDelay(3000);
 8001e00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e04:	f004 ffe0 	bl	8006dc8 <osDelay>
 8001e08:	e7fa      	b.n	8001e00 <StartServoTask+0x8>
	...

08001e0c <StartUartWiFiTask>:
StatusMsgTypeDef statusMsg;
JobMsgTypeDef jobMsg;
StmConfigTypeDef stmConf;

void StartUartWiFiTask(void *argument)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8001e14:	2264      	movs	r2, #100	; 0x64
 8001e16:	4914      	ldr	r1, [pc, #80]	; (8001e68 <StartUartWiFiTask+0x5c>)
 8001e18:	4814      	ldr	r0, [pc, #80]	; (8001e6c <StartUartWiFiTask+0x60>)
 8001e1a:	f003 fd5e 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <StartUartWiFiTask+0x64>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <StartUartWiFiTask+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0208 	bic.w	r2, r2, #8
 8001e2c:	601a      	str	r2, [r3, #0]

		//osDelay(1000);
		//SendStatus(); //for test
		//globData.LKEncoder++;
		uint8_t str[30];
		sprintf((char*)str, (char*)"e: %d, t: %d\n\r", globData.LKEncoder, globData.LKTemp);
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <StartUartWiFiTask+0x68>)
 8001e30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <StartUartWiFiTask+0x68>)
 8001e36:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001e3a:	f107 0008 	add.w	r0, r7, #8
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <StartUartWiFiTask+0x6c>)
 8001e40:	f007 fc74 	bl	800972c <siprintf>
		HAL_UART_Transmit(&huart1, str, strlen((char *)str), 100);
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe f9c1 	bl	80001d0 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	f107 0108 	add.w	r1, r7, #8
 8001e56:	2364      	movs	r3, #100	; 0x64
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <StartUartWiFiTask+0x60>)
 8001e5a:	f003 fcac 	bl	80057b6 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&WIFI_UART, (uint8_t*)"WIFI ok", 7, 100);
		osDelay(1000);
 8001e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e62:	f004 ffb1 	bl	8006dc8 <osDelay>
	}
 8001e66:	e7e2      	b.n	8001e2e <StartUartWiFiTask+0x22>
 8001e68:	20001dcc 	.word	0x20001dcc
 8001e6c:	20001ad4 	.word	0x20001ad4
 8001e70:	20001ba0 	.word	0x20001ba0
 8001e74:	200000b8 	.word	0x200000b8
 8001e78:	0800a06c 	.word	0x0800a06c

08001e7c <HAL_UART_ErrorCallback>:
	globData.LEDB = LEDB_FLASH_OK;
	return 0;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(&huart1);
 8001e84:	4842      	ldr	r0, [pc, #264]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001e86:	f004 f839 	bl	8005efc <HAL_UART_GetError>
 8001e8a:	61f8      	str	r0, [r7, #28]
	switch (er) {
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d863      	bhi.n	8001f5c <HAL_UART_ErrorCallback+0xe0>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <HAL_UART_ErrorCallback+0x20>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001edd 	.word	0x08001edd
 8001ea0:	08001efb 	.word	0x08001efb
 8001ea4:	08001f5d 	.word	0x08001f5d
 8001ea8:	08001f19 	.word	0x08001f19
 8001eac:	08001f5d 	.word	0x08001f5d
 8001eb0:	08001f5d 	.word	0x08001f5d
 8001eb4:	08001f5d 	.word	0x08001f5d
 8001eb8:	08001f37 	.word	0x08001f37
 8001ebc:	08001f5d 	.word	0x08001f5d
 8001ec0:	08001f5d 	.word	0x08001f5d
 8001ec4:	08001f5d 	.word	0x08001f5d
 8001ec8:	08001f5d 	.word	0x08001f5d
 8001ecc:	08001f5d 	.word	0x08001f5d
 8001ed0:	08001f5d 	.word	0x08001f5d
 8001ed4:	08001f5d 	.word	0x08001f5d
 8001ed8:	08001f55 	.word	0x08001f55
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(&huart1);
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001ef8:	e031      	b.n	8001f5e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(&huart1);
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001f16:	e022      	b.n	8001f5e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(&huart1);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001f34:	e013      	b.n	8001f5e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001f52:	e004      	b.n	8001f5e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001f5a:	e000      	b.n	8001f5e <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 8001f5c:	bf00      	nop
	}
	if (huart->Instance == WIFI_UART_Ins) {
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_UART_ErrorCallback+0x118>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d10f      	bne.n	8001f88 <HAL_UART_ErrorCallback+0x10c>
		new_wifi_data = 1;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_UART_ErrorCallback+0x11c>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff,
 8001f6e:	2264      	movs	r2, #100	; 0x64
 8001f70:	490a      	ldr	r1, [pc, #40]	; (8001f9c <HAL_UART_ErrorCallback+0x120>)
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <HAL_UART_ErrorCallback+0x114>)
 8001f74:	f003 fcb1 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
				sizeof(wifi_uart_buff));
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_UART_ErrorCallback+0x124>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_UART_ErrorCallback+0x124>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0208 	bic.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]
	}
}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20001ad4 	.word	0x20001ad4
 8001f94:	40011000 	.word	0x40011000
 8001f98:	20001d00 	.word	0x20001d00
 8001f9c:	20001dcc 	.word	0x20001dcc
 8001fa0:	20001ba0 	.word	0x20001ba0

08001fa4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == RC_UART_Ins) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_UARTEx_RxEventCallback+0x98>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d110      	bne.n	8001fdc <HAL_UARTEx_RxEventCallback+0x38>
		new_remote_data = 1;
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_UARTEx_RxEventCallback+0x9c>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 8001fc0:	2264      	movs	r2, #100	; 0x64
 8001fc2:	4920      	ldr	r1, [pc, #128]	; (8002044 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001fc4:	4820      	ldr	r0, [pc, #128]	; (8002048 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001fc6:	f003 fc88 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_UARTEx_RxEventCallback+0xa8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_UARTEx_RxEventCallback+0xa8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0208 	bic.w	r2, r2, #8
 8001fd8:	601a      	str	r2, [r3, #0]
		new_wifi_data = 1;
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
		//HAL_UART_Transmit(&WIFI_UART, (uint8_t*)"DEBA ok", 7, 100);
	}
}
 8001fda:	e02a      	b.n	8002032 <HAL_UARTEx_RxEventCallback+0x8e>
	} else if (huart->Instance == BMS_UART_Ins) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <HAL_UARTEx_RxEventCallback+0xac>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d110      	bne.n	8002008 <HAL_UARTEx_RxEventCallback+0x64>
		new_bms_data = 1;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 8001fec:	2264      	movs	r2, #100	; 0x64
 8001fee:	491a      	ldr	r1, [pc, #104]	; (8002058 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001ff0:	481a      	ldr	r0, [pc, #104]	; (800205c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001ff2:	f003 fc72 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	e014      	b.n	8002032 <HAL_UARTEx_RxEventCallback+0x8e>
	} else if (huart->Instance == WIFI_UART_Ins) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a15      	ldr	r2, [pc, #84]	; (8002064 <HAL_UARTEx_RxEventCallback+0xc0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10f      	bne.n	8002032 <HAL_UARTEx_RxEventCallback+0x8e>
		new_wifi_data = 1;
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8002018:	2264      	movs	r2, #100	; 0x64
 800201a:	4914      	ldr	r1, [pc, #80]	; (800206c <HAL_UARTEx_RxEventCallback+0xc8>)
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <HAL_UARTEx_RxEventCallback+0xcc>)
 800201e:	f003 fc5c 	bl	80058da <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_UARTEx_RxEventCallback+0xd0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0208 	bic.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40004800 	.word	0x40004800
 8002040:	20001d01 	.word	0x20001d01
 8002044:	20001d04 	.word	0x20001d04
 8002048:	20001b5c 	.word	0x20001b5c
 800204c:	20001c60 	.word	0x20001c60
 8002050:	40004400 	.word	0x40004400
 8002054:	20001d02 	.word	0x20001d02
 8002058:	20001d68 	.word	0x20001d68
 800205c:	20001b18 	.word	0x20001b18
 8002060:	20001c00 	.word	0x20001c00
 8002064:	40011000 	.word	0x40011000
 8002068:	20001d00 	.word	0x20001d00
 800206c:	20001dcc 	.word	0x20001dcc
 8002070:	20001ad4 	.word	0x20001ad4
 8002074:	20001ba0 	.word	0x20001ba0

08002078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_Init+0x40>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <HAL_Init+0x40>)
 8002082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_Init+0x40>)
 800208e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <HAL_Init+0x40>)
 800209a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f000 ff8a 	bl	8002fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a6:	200f      	movs	r0, #15
 80020a8:	f7fe fe2e 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ac:	f7fe fe00 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000008 	.word	0x20000008
 80020e0:	20001e30 	.word	0x20001e30

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20001e30 	.word	0x20001e30

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0ed      	b.n	8002332 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fa76 	bl	8000654 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002178:	f7ff ffb4 	bl	80020e4 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800217e:	e012      	b.n	80021a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002180:	f7ff ffb0 	bl	80020e4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b0a      	cmp	r3, #10
 800218c:	d90b      	bls.n	80021a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2205      	movs	r2, #5
 800219e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0c5      	b.n	8002332 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0e5      	beq.n	8002180 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0202 	bic.w	r2, r2, #2
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff ff8e 	bl	80020e4 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ca:	e012      	b.n	80021f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021cc:	f7ff ff8a 	bl	80020e4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b0a      	cmp	r3, #10
 80021d8:	d90b      	bls.n	80021f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2205      	movs	r2, #5
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e09f      	b.n	8002332 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e5      	bne.n	80021cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d108      	bne.n	800221a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e007      	b.n	800222a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7e5b      	ldrb	r3, [r3, #25]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7e9b      	ldrb	r3, [r3, #26]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d108      	bne.n	800226e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0220 	orr.w	r2, r2, #32
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e007      	b.n	800227e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0220 	bic.w	r2, r2, #32
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7edb      	ldrb	r3, [r3, #27]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0210 	bic.w	r2, r2, #16
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e007      	b.n	80022a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0210 	orr.w	r2, r2, #16
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7f1b      	ldrb	r3, [r3, #28]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d108      	bne.n	80022c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0208 	orr.w	r2, r2, #8
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e007      	b.n	80022d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0208 	bic.w	r2, r2, #8
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7f5b      	ldrb	r3, [r3, #29]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0204 	orr.w	r2, r2, #4
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e007      	b.n	80022fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	ea42 0103 	orr.w	r1, r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002352:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d003      	beq.n	8002362 <HAL_CAN_ConfigFilter+0x26>
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b02      	cmp	r3, #2
 800235e:	f040 80be 	bne.w	80024de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002362:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002364:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800237c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	431a      	orrs	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2201      	movs	r2, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	401a      	ands	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d123      	bne.n	800240c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3248      	adds	r2, #72	; 0x48
 80023ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002400:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002402:	6979      	ldr	r1, [r7, #20]
 8002404:	3348      	adds	r3, #72	; 0x48
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d122      	bne.n	800245a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002434:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3248      	adds	r2, #72	; 0x48
 800243a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800244e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002450:	6979      	ldr	r1, [r7, #20]
 8002452:	3348      	adds	r3, #72	; 0x48
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	401a      	ands	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002474:	e007      	b.n	8002486 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024a0:	e007      	b.n	80024b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024d0:	f023 0201 	bic.w	r2, r3, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e006      	b.n	80024ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40006400 	.word	0x40006400

080024fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d12e      	bne.n	800256e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002528:	f7ff fddc 	bl	80020e4 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800252e:	e012      	b.n	8002556 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002530:	f7ff fdd8 	bl	80020e4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b0a      	cmp	r3, #10
 800253c:	d90b      	bls.n	8002556 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2205      	movs	r2, #5
 800254e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e012      	b.n	800257c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e5      	bne.n	8002530 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e006      	b.n	800257c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
  }
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002598:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d003      	beq.n	80025b0 <HAL_CAN_AddTxMessage+0x2c>
 80025a8:	7ffb      	ldrb	r3, [r7, #31]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f040 80b8 	bne.w	8002720 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10a      	bne.n	80025d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80a0 	beq.w	8002710 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	0e1b      	lsrs	r3, r3, #24
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d907      	bls.n	80025f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e09e      	b.n	800272e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025f0:	2201      	movs	r2, #1
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	409a      	lsls	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	6809      	ldr	r1, [r1, #0]
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3318      	adds	r3, #24
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	440b      	add	r3, r1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	e00f      	b.n	800263e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002628:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800262e:	68f9      	ldr	r1, [r7, #12]
 8002630:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002632:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3318      	adds	r3, #24
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	440b      	add	r3, r1
 800263c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3318      	adds	r3, #24
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	7d1b      	ldrb	r3, [r3, #20]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d111      	bne.n	800267e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3318      	adds	r3, #24
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6811      	ldr	r1, [r2, #0]
 800266e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3318      	adds	r3, #24
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	440b      	add	r3, r1
 800267a:	3304      	adds	r3, #4
 800267c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3307      	adds	r3, #7
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	061a      	lsls	r2, r3, #24
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3306      	adds	r3, #6
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3305      	adds	r3, #5
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	4313      	orrs	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	3204      	adds	r2, #4
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	4610      	mov	r0, r2
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	6811      	ldr	r1, [r2, #0]
 80026a6:	ea43 0200 	orr.w	r2, r3, r0
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	440b      	add	r3, r1
 80026b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3303      	adds	r3, #3
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	061a      	lsls	r2, r3, #24
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3302      	adds	r3, #2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3301      	adds	r3, #1
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	4313      	orrs	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	4610      	mov	r0, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	6811      	ldr	r1, [r2, #0]
 80026dc:	ea43 0200 	orr.w	r2, r3, r0
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80026ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3318      	adds	r3, #24
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4413      	add	r3, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6811      	ldr	r1, [r2, #0]
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3318      	adds	r3, #24
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	440b      	add	r3, r1
 800270a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e00e      	b.n	800272e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e006      	b.n	800272e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800274c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d002      	beq.n	800275a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002754:	7afb      	ldrb	r3, [r7, #11]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d11d      	bne.n	8002796 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3301      	adds	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d003      	beq.n	80027c8 <HAL_CAN_GetRxMessage+0x24>
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 80f3 	bne.w	80029ae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d116      	bne.n	800280a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0e7      	b.n	80029bc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d107      	bne.n	800280a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0d8      	b.n	80029bc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	331b      	adds	r3, #27
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	4413      	add	r3, r2
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0204 	and.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10c      	bne.n	8002842 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	331b      	adds	r3, #27
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4413      	add	r3, r2
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0d5b      	lsrs	r3, r3, #21
 8002838:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e00b      	b.n	800285a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	331b      	adds	r3, #27
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	331b      	adds	r3, #27
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	4413      	add	r3, r2
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0202 	and.w	r2, r3, #2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	331b      	adds	r3, #27
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	4413      	add	r3, r2
 800287c:	3304      	adds	r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	331b      	adds	r3, #27
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	4413      	add	r3, r2
 8002894:	3304      	adds	r3, #4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	331b      	adds	r3, #27
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0a1a      	lsrs	r2, r3, #8
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0c1a      	lsrs	r2, r3, #16
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	3302      	adds	r3, #2
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e1a      	lsrs	r2, r3, #24
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	3303      	adds	r3, #3
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	4413      	add	r3, r2
 8002926:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	3304      	adds	r3, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4413      	add	r3, r2
 800293e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0a1a      	lsrs	r2, r3, #8
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3305      	adds	r3, #5
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	4413      	add	r3, r2
 8002958:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0c1a      	lsrs	r2, r3, #16
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	3306      	adds	r3, #6
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	4413      	add	r3, r2
 8002972:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0e1a      	lsrs	r2, r3, #24
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3307      	adds	r3, #7
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d108      	bne.n	800299a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	e007      	b.n	80029aa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0220 	orr.w	r2, r2, #32
 80029a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e006      	b.n	80029bc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d002      	beq.n	80029e6 <HAL_CAN_ActivateNotification+0x1e>
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d109      	bne.n	80029fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6959      	ldr	r1, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e006      	b.n	8002a08 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d07c      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f983 	bl	8002d82 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a7c:	e016      	b.n	8002aac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	e00c      	b.n	8002aac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	e002      	b.n	8002aac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f989 	bl	8002dbe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d024      	beq.n	8002b00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002abe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f963 	bl	8002d96 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ad0:	e016      	b.n	8002b00 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	e00c      	b.n	8002b00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	e002      	b.n	8002b00 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f969 	bl	8002dd2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d024      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f943 	bl	8002daa <HAL_CAN_TxMailbox2CompleteCallback>
 8002b24:	e016      	b.n	8002b54 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e00c      	b.n	8002b54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	e002      	b.n	8002b54 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f949 	bl	8002de6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2210      	movs	r2, #16
 8002b76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2208      	movs	r2, #8
 8002b92:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f930 	bl	8002dfa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe ff76 	bl	8001aa4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f912 	bl	8002e22 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8f9 	bl	8002e0e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2210      	movs	r2, #16
 8002c36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8fc 	bl	8002e36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d006      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2208      	movs	r2, #8
 8002c58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8f5 	bl	8002e4a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d07b      	beq.n	8002d62 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d072      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d043      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d03e      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ce2:	2b60      	cmp	r3, #96	; 0x60
 8002ce4:	d02b      	beq.n	8002d3e <HAL_CAN_IRQHandler+0x32a>
 8002ce6:	2b60      	cmp	r3, #96	; 0x60
 8002ce8:	d82e      	bhi.n	8002d48 <HAL_CAN_IRQHandler+0x334>
 8002cea:	2b50      	cmp	r3, #80	; 0x50
 8002cec:	d022      	beq.n	8002d34 <HAL_CAN_IRQHandler+0x320>
 8002cee:	2b50      	cmp	r3, #80	; 0x50
 8002cf0:	d82a      	bhi.n	8002d48 <HAL_CAN_IRQHandler+0x334>
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d019      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x316>
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d826      	bhi.n	8002d48 <HAL_CAN_IRQHandler+0x334>
 8002cfa:	2b30      	cmp	r3, #48	; 0x30
 8002cfc:	d010      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x30c>
 8002cfe:	2b30      	cmp	r3, #48	; 0x30
 8002d00:	d822      	bhi.n	8002d48 <HAL_CAN_IRQHandler+0x334>
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d002      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x2f8>
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d005      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d0a:	e01d      	b.n	8002d48 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d14:	e019      	b.n	8002d4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f043 0310 	orr.w	r3, r3, #16
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d1e:	e014      	b.n	8002d4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f043 0320 	orr.w	r3, r3, #32
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d28:	e00f      	b.n	8002d4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d32:	e00a      	b.n	8002d4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d3c:	e005      	b.n	8002d4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d46:	e000      	b.n	8002d4a <HAL_CAN_IRQHandler+0x336>
            break;
 8002d48:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d58:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe feb7 	bl	8001ae8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <__NVIC_SetPriorityGrouping>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_GetPriorityGrouping>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0307 	and.w	r3, r3, #7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_EnableIRQ>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0b      	blt.n	8002eee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4907      	ldr	r1, [pc, #28]	; (8002efc <__NVIC_EnableIRQ+0x38>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	; (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	; (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
         );
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	; 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff4c 	bl	8002e60 <__NVIC_SetPriorityGrouping>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe2:	f7ff ff61 	bl	8002ea8 <__NVIC_GetPriorityGrouping>
 8002fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	6978      	ldr	r0, [r7, #20]
 8002fee:	f7ff ffb1 	bl	8002f54 <NVIC_EncodePriority>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff80 	bl	8002f00 <__NVIC_SetPriority>
}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff54 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff f858 	bl	80020e4 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e099      	b.n	8003174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003060:	e00f      	b.n	8003082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003062:	f7ff f83f 	bl	80020e4 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b05      	cmp	r3, #5
 800306e:	d908      	bls.n	8003082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2203      	movs	r2, #3
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e078      	b.n	8003174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e8      	bne.n	8003062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_DMA_Init+0x158>)
 800309c:	4013      	ands	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d107      	bne.n	80030ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	4313      	orrs	r3, r2
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0307 	bic.w	r3, r3, #7
 8003102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b04      	cmp	r3, #4
 8003114:	d117      	bne.n	8003146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fb01 	bl	8003730 <DMA_CheckFifoParam>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003142:	2301      	movs	r3, #1
 8003144:	e016      	b.n	8003174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fab8 	bl	80036c4 <DMA_CalcBaseAndBitshift>
 8003154:	4603      	mov	r3, r0
 8003156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	223f      	movs	r2, #63	; 0x3f
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	f010803f 	.word	0xf010803f

08003180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_DMA_Start_IT+0x26>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e040      	b.n	8003228 <HAL_DMA_Start_IT+0xa8>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d12f      	bne.n	800321a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa4a 	bl	8003668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	223f      	movs	r2, #63	; 0x3f
 80031da:	409a      	lsls	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0216 	orr.w	r2, r2, #22
 80031ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0208 	orr.w	r2, r2, #8
 8003206:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e005      	b.n	8003226 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003226:	7dfb      	ldrb	r3, [r7, #23]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800323e:	f7fe ff51 	bl	80020e4 <HAL_GetTick>
 8003242:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d008      	beq.n	8003262 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e052      	b.n	8003308 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0216 	bic.w	r2, r2, #22
 8003270:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003280:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_DMA_Abort+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0208 	bic.w	r2, r2, #8
 80032a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b2:	e013      	b.n	80032dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b4:	f7fe ff16 	bl	80020e4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d90c      	bls.n	80032dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2203      	movs	r2, #3
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e015      	b.n	8003308 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e4      	bne.n	80032b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	223f      	movs	r2, #63	; 0x3f
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d004      	beq.n	800332e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2280      	movs	r2, #128	; 0x80
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e00c      	b.n	8003348 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2205      	movs	r2, #5
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003360:	4b8e      	ldr	r3, [pc, #568]	; (800359c <HAL_DMA_IRQHandler+0x248>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a8e      	ldr	r2, [pc, #568]	; (80035a0 <HAL_DMA_IRQHandler+0x24c>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	2208      	movs	r2, #8
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01a      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	2208      	movs	r2, #8
 80033ae:	409a      	lsls	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	2201      	movs	r2, #1
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	2201      	movs	r2, #1
 80033e4:	409a      	lsls	r2, r3
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f043 0202 	orr.w	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	2204      	movs	r2, #4
 80033fc:	409a      	lsls	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	2204      	movs	r2, #4
 800341a:	409a      	lsls	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2210      	movs	r2, #16
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d043      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d03c      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	2210      	movs	r2, #16
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d024      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
 8003482:	e01f      	b.n	80034c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01b      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
 8003494:	e016      	b.n	80034c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0208 	bic.w	r2, r2, #8
 80034b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	2220      	movs	r2, #32
 80034ca:	409a      	lsls	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 808f 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8087 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2220      	movs	r2, #32
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d136      	bne.n	800356c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0216 	bic.w	r2, r2, #22
 800350c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800351c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_DMA_IRQHandler+0x1da>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0208 	bic.w	r2, r2, #8
 800353c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	223f      	movs	r2, #63	; 0x3f
 8003544:	409a      	lsls	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355e:	2b00      	cmp	r3, #0
 8003560:	d07e      	beq.n	8003660 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
        }
        return;
 800356a:	e079      	b.n	8003660 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01d      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	2b00      	cmp	r3, #0
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	e02c      	b.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
 800359a:	bf00      	nop
 800359c:	20000000 	.word	0x20000000
 80035a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d023      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
 80035b4:	e01e      	b.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10f      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0210 	bic.w	r2, r2, #16
 80035d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d032      	beq.n	8003662 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d022      	beq.n	800364e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2205      	movs	r2, #5
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3301      	adds	r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	d307      	bcc.n	800363c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f2      	bne.n	8003620 <HAL_DMA_IRQHandler+0x2cc>
 800363a:	e000      	b.n	800363e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800363c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
 800365e:	e000      	b.n	8003662 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003660:	bf00      	nop
    }
  }
}
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d108      	bne.n	80036a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036a6:	e007      	b.n	80036b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3b10      	subs	r3, #16
 80036d4:	4a14      	ldr	r2, [pc, #80]	; (8003728 <DMA_CalcBaseAndBitshift+0x64>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <DMA_CalcBaseAndBitshift+0x68>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d909      	bls.n	8003706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	1d1a      	adds	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	659a      	str	r2, [r3, #88]	; 0x58
 8003704:	e007      	b.n	8003716 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	aaaaaaab 	.word	0xaaaaaaab
 800372c:	0800a1fc 	.word	0x0800a1fc

08003730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d11f      	bne.n	800378a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d856      	bhi.n	80037fe <DMA_CheckFifoParam+0xce>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <DMA_CheckFifoParam+0x28>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	08003769 	.word	0x08003769
 800375c:	0800377b 	.word	0x0800377b
 8003760:	08003769 	.word	0x08003769
 8003764:	080037ff 	.word	0x080037ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d046      	beq.n	8003802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003778:	e043      	b.n	8003802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003782:	d140      	bne.n	8003806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003788:	e03d      	b.n	8003806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003792:	d121      	bne.n	80037d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d837      	bhi.n	800380a <DMA_CheckFifoParam+0xda>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <DMA_CheckFifoParam+0x70>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037b7 	.word	0x080037b7
 80037a8:	080037b1 	.word	0x080037b1
 80037ac:	080037c9 	.word	0x080037c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e030      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d025      	beq.n	800380e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c6:	e022      	b.n	800380e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d0:	d11f      	bne.n	8003812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037d6:	e01c      	b.n	8003812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d903      	bls.n	80037e6 <DMA_CheckFifoParam+0xb6>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d003      	beq.n	80037ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e4:	e018      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ea:	e015      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e00b      	b.n	8003816 <DMA_CheckFifoParam+0xe6>
      break;
 80037fe:	bf00      	nop
 8003800:	e00a      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 8003802:	bf00      	nop
 8003804:	e008      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e006      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e004      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;   
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
    }
  } 
  
  return status; 
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e16b      	b.n	8003b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	f040 815a 	bne.w	8003b16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d005      	beq.n	800387a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003876:	2b02      	cmp	r3, #2
 8003878:	d130      	bne.n	80038dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b0:	2201      	movs	r2, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 0201 	and.w	r2, r3, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d017      	beq.n	8003918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d123      	bne.n	800396c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	220f      	movs	r2, #15
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3208      	adds	r2, #8
 8003966:	69b9      	ldr	r1, [r7, #24]
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0203 	and.w	r2, r3, #3
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80b4 	beq.w	8003b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	4b60      	ldr	r3, [pc, #384]	; (8003b34 <HAL_GPIO_Init+0x30c>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4a5f      	ldr	r2, [pc, #380]	; (8003b34 <HAL_GPIO_Init+0x30c>)
 80039b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039bc:	6453      	str	r3, [r2, #68]	; 0x44
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_GPIO_Init+0x30c>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ca:	4a5b      	ldr	r2, [pc, #364]	; (8003b38 <HAL_GPIO_Init+0x310>)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_GPIO_Init+0x314>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d02b      	beq.n	8003a4e <HAL_GPIO_Init+0x226>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a51      	ldr	r2, [pc, #324]	; (8003b40 <HAL_GPIO_Init+0x318>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d025      	beq.n	8003a4a <HAL_GPIO_Init+0x222>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a50      	ldr	r2, [pc, #320]	; (8003b44 <HAL_GPIO_Init+0x31c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01f      	beq.n	8003a46 <HAL_GPIO_Init+0x21e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4f      	ldr	r2, [pc, #316]	; (8003b48 <HAL_GPIO_Init+0x320>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d019      	beq.n	8003a42 <HAL_GPIO_Init+0x21a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4e      	ldr	r2, [pc, #312]	; (8003b4c <HAL_GPIO_Init+0x324>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_GPIO_Init+0x216>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4d      	ldr	r2, [pc, #308]	; (8003b50 <HAL_GPIO_Init+0x328>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00d      	beq.n	8003a3a <HAL_GPIO_Init+0x212>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4c      	ldr	r2, [pc, #304]	; (8003b54 <HAL_GPIO_Init+0x32c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <HAL_GPIO_Init+0x20e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4b      	ldr	r2, [pc, #300]	; (8003b58 <HAL_GPIO_Init+0x330>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_GPIO_Init+0x20a>
 8003a2e:	2307      	movs	r3, #7
 8003a30:	e00e      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a32:	2308      	movs	r3, #8
 8003a34:	e00c      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a36:	2306      	movs	r3, #6
 8003a38:	e00a      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_Init+0x228>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a60:	4935      	ldr	r1, [pc, #212]	; (8003b38 <HAL_GPIO_Init+0x310>)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a92:	4a32      	ldr	r2, [pc, #200]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a98:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_GPIO_Init+0x334>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	f67f ae90 	bls.w	8003844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3724      	adds	r7, #36	; 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40021400 	.word	0x40021400
 8003b54:	40021800 	.word	0x40021800
 8003b58:	40021c00 	.word	0x40021c00
 8003b5c:	40013c00 	.word	0x40013c00

08003b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b70:	787b      	ldrb	r3, [r7, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b7c:	e003      	b.n	8003b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	041a      	lsls	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e034      	b.n	8003c0e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003bac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f245 5255 	movw	r2, #21845	; 0x5555
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6852      	ldr	r2, [r2, #4]
 8003bc0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6892      	ldr	r2, [r2, #8]
 8003bca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003bcc:	f7fe fa8a 	bl	80020e4 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003bd2:	e00f      	b.n	8003bf4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003bd4:	f7fe fa86 	bl	80020e4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b31      	cmp	r3, #49	; 0x31
 8003be0:	d908      	bls.n	8003bf4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e00c      	b.n	8003c0e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e8      	bne.n	8003bd4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003c26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e267      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d075      	beq.n	8003d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c56:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6e:	4b82      	ldr	r3, [pc, #520]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	4b7e      	ldr	r3, [pc, #504]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d05b      	beq.n	8003d40 <HAL_RCC_OscConfig+0x108>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d157      	bne.n	8003d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e242      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x74>
 8003c9e:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a75      	ldr	r2, [pc, #468]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x98>
 8003cb6:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a6f      	ldr	r2, [pc, #444]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6c      	ldr	r2, [pc, #432]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cd0:	4b69      	ldr	r3, [pc, #420]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a68      	ldr	r2, [pc, #416]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f9f8 	bl	80020e4 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe f9f4 	bl	80020e4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e207      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xc0>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fe f9e4 	bl	80020e4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fe f9e0 	bl	80020e4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1f3      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b51      	ldr	r3, [pc, #324]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0xe8>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d063      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d4e:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b47      	ldr	r3, [pc, #284]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d66:	4b44      	ldr	r3, [pc, #272]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1c7      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4937      	ldr	r1, [pc, #220]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	e03a      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <HAL_RCC_OscConfig+0x244>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe f999 	bl	80020e4 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fe f995 	bl	80020e4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1a8      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b28      	ldr	r3, [pc, #160]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4925      	ldr	r1, [pc, #148]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dea:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <HAL_RCC_OscConfig+0x244>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe f978 	bl	80020e4 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fe f974 	bl	80020e4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e187      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d036      	beq.n	8003e90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCC_OscConfig+0x248>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fe f958 	bl	80020e4 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fe f954 	bl	80020e4 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e167      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x200>
 8003e56:	e01b      	b.n	8003e90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_OscConfig+0x248>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe f941 	bl	80020e4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	e00e      	b.n	8003e84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e66:	f7fe f93d 	bl	80020e4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d907      	bls.n	8003e84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e150      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	42470000 	.word	0x42470000
 8003e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ea      	bne.n	8003e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8097 	beq.w	8003fcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea2:	4b81      	ldr	r3, [pc, #516]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	4b7d      	ldr	r3, [pc, #500]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a7c      	ldr	r2, [pc, #496]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b7a      	ldr	r3, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ece:	4b77      	ldr	r3, [pc, #476]	; (80040ac <HAL_RCC_OscConfig+0x474>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d118      	bne.n	8003f0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eda:	4b74      	ldr	r3, [pc, #464]	; (80040ac <HAL_RCC_OscConfig+0x474>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a73      	ldr	r2, [pc, #460]	; (80040ac <HAL_RCC_OscConfig+0x474>)
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee6:	f7fe f8fd 	bl	80020e4 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eee:	f7fe f8f9 	bl	80020e4 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e10c      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f00:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <HAL_RCC_OscConfig+0x474>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d106      	bne.n	8003f22 <HAL_RCC_OscConfig+0x2ea>
 8003f14:	4b64      	ldr	r3, [pc, #400]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a63      	ldr	r2, [pc, #396]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f20:	e01c      	b.n	8003f5c <HAL_RCC_OscConfig+0x324>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x30c>
 8003f2a:	4b5f      	ldr	r3, [pc, #380]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5e      	ldr	r2, [pc, #376]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f30:	f043 0304 	orr.w	r3, r3, #4
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	4b5c      	ldr	r3, [pc, #368]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a5b      	ldr	r2, [pc, #364]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	e00b      	b.n	8003f5c <HAL_RCC_OscConfig+0x324>
 8003f44:	4b58      	ldr	r3, [pc, #352]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a57      	ldr	r2, [pc, #348]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f50:	4b55      	ldr	r3, [pc, #340]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a54      	ldr	r2, [pc, #336]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f023 0304 	bic.w	r3, r3, #4
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fe f8be 	bl	80020e4 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6c:	f7fe f8ba 	bl	80020e4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e0cb      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ee      	beq.n	8003f6c <HAL_RCC_OscConfig+0x334>
 8003f8e:	e014      	b.n	8003fba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f90:	f7fe f8a8 	bl	80020e4 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fe f8a4 	bl	80020e4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e0b5      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ee      	bne.n	8003f98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc0:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	4a38      	ldr	r2, [pc, #224]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80a1 	beq.w	8004118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d05c      	beq.n	800409c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d141      	bne.n	800406e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <HAL_RCC_OscConfig+0x478>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fe f878 	bl	80020e4 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fe f874 	bl	80020e4 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e087      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	019b      	lsls	r3, r3, #6
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	3b01      	subs	r3, #1
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	491b      	ldr	r1, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x478>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fe f84d 	bl	80020e4 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404e:	f7fe f849 	bl	80020e4 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e05c      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x416>
 800406c:	e054      	b.n	8004118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_RCC_OscConfig+0x478>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fe f836 	bl	80020e4 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407c:	f7fe f832 	bl	80020e4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e045      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x470>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x444>
 800409a:	e03d      	b.n	8004118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e038      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40007000 	.word	0x40007000
 80040b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d028      	beq.n	8004114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d121      	bne.n	8004114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d11a      	bne.n	8004114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d111      	bne.n	8004114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	3b01      	subs	r3, #1
 80040fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cc      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90c      	bls.n	8004164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d044      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e067      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fd ff64 	bl	80020e4 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fd ff60 	bl	80020e4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e04f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d20c      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f821 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fc fd1a 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	0800a1b4 	.word	0x0800a1b4
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b094      	sub	sp, #80	; 0x50
 80042fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004300:	2300      	movs	r3, #0
 8004302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004304:	2300      	movs	r3, #0
 8004306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800430c:	4b79      	ldr	r3, [pc, #484]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b08      	cmp	r3, #8
 8004316:	d00d      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x40>
 8004318:	2b08      	cmp	r3, #8
 800431a:	f200 80e1 	bhi.w	80044e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x34>
 8004322:	2b04      	cmp	r3, #4
 8004324:	d003      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x3a>
 8004326:	e0db      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004328:	4b73      	ldr	r3, [pc, #460]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800432a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800432c:	e0db      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432e:	4b73      	ldr	r3, [pc, #460]	; (80044fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004332:	e0d8      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004334:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433e:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d063      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434a:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	2200      	movs	r2, #0
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38
 8004354:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435c:	633b      	str	r3, [r7, #48]	; 0x30
 800435e:	2300      	movs	r3, #0
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
 8004362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004366:	4622      	mov	r2, r4
 8004368:	462b      	mov	r3, r5
 800436a:	f04f 0000 	mov.w	r0, #0
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	0159      	lsls	r1, r3, #5
 8004374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004378:	0150      	lsls	r0, r2, #5
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4621      	mov	r1, r4
 8004380:	1a51      	subs	r1, r2, r1
 8004382:	6139      	str	r1, [r7, #16]
 8004384:	4629      	mov	r1, r5
 8004386:	eb63 0301 	sbc.w	r3, r3, r1
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004398:	4659      	mov	r1, fp
 800439a:	018b      	lsls	r3, r1, #6
 800439c:	4651      	mov	r1, sl
 800439e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043a2:	4651      	mov	r1, sl
 80043a4:	018a      	lsls	r2, r1, #6
 80043a6:	4651      	mov	r1, sl
 80043a8:	ebb2 0801 	subs.w	r8, r2, r1
 80043ac:	4659      	mov	r1, fp
 80043ae:	eb63 0901 	sbc.w	r9, r3, r1
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c6:	4690      	mov	r8, r2
 80043c8:	4699      	mov	r9, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	eb18 0303 	adds.w	r3, r8, r3
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	462b      	mov	r3, r5
 80043d4:	eb49 0303 	adc.w	r3, r9, r3
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043e6:	4629      	mov	r1, r5
 80043e8:	024b      	lsls	r3, r1, #9
 80043ea:	4621      	mov	r1, r4
 80043ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043f0:	4621      	mov	r1, r4
 80043f2:	024a      	lsls	r2, r1, #9
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fa:	2200      	movs	r2, #0
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004404:	f7fb ff3c 	bl	8000280 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4613      	mov	r3, r2
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004410:	e058      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004412:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	2200      	movs	r2, #0
 800441a:	4618      	mov	r0, r3
 800441c:	4611      	mov	r1, r2
 800441e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	2300      	movs	r3, #0
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
 8004428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	f04f 0000 	mov.w	r0, #0
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	0159      	lsls	r1, r3, #5
 800443a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800443e:	0150      	lsls	r0, r2, #5
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4641      	mov	r1, r8
 8004446:	ebb2 0a01 	subs.w	sl, r2, r1
 800444a:	4649      	mov	r1, r9
 800444c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800445c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004464:	ebb2 040a 	subs.w	r4, r2, sl
 8004468:	eb63 050b 	sbc.w	r5, r3, fp
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	00eb      	lsls	r3, r5, #3
 8004476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447a:	00e2      	lsls	r2, r4, #3
 800447c:	4614      	mov	r4, r2
 800447e:	461d      	mov	r5, r3
 8004480:	4643      	mov	r3, r8
 8004482:	18e3      	adds	r3, r4, r3
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	464b      	mov	r3, r9
 8004488:	eb45 0303 	adc.w	r3, r5, r3
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800449a:	4629      	mov	r1, r5
 800449c:	028b      	lsls	r3, r1, #10
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a4:	4621      	mov	r1, r4
 80044a6:	028a      	lsls	r2, r1, #10
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ae:	2200      	movs	r2, #0
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	61fa      	str	r2, [r7, #28]
 80044b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b8:	f7fb fee2 	bl	8000280 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044de:	e002      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3750      	adds	r7, #80	; 0x50
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400
 80044fc:	007a1200 	.word	0x007a1200

08004500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCC_GetHCLKFreq+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000000 	.word	0x20000000

08004518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800451c:	f7ff fff0 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0a9b      	lsrs	r3, r3, #10
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	; (800453c <HAL_RCC_GetPCLK1Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	0800a1c4 	.word	0x0800a1c4

08004540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004544:	f7ff ffdc 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0b5b      	lsrs	r3, r3, #13
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4903      	ldr	r1, [pc, #12]	; (8004564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40023800 	.word	0x40023800
 8004564:	0800a1c4 	.word	0x0800a1c4

08004568 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	220f      	movs	r2, #15
 8004576:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCC_GetClockConfig+0x5c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0203 	and.w	r2, r3, #3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_GetClockConfig+0x5c>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	08db      	lsrs	r3, r3, #3
 80045a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <HAL_RCC_GetClockConfig+0x60>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0207 	and.w	r2, r3, #7
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	601a      	str	r2, [r3, #0]
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40023c00 	.word	0x40023c00

080045cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e041      	b.n	8004662 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc fda8 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 fce6 	bl	8004fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d001      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e04e      	b.n	8004722 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a23      	ldr	r2, [pc, #140]	; (8004730 <HAL_TIM_Base_Start_IT+0xc4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d022      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x80>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ae:	d01d      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x80>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <HAL_TIM_Base_Start_IT+0xc8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d018      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x80>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1e      	ldr	r2, [pc, #120]	; (8004738 <HAL_TIM_Base_Start_IT+0xcc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x80>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1c      	ldr	r2, [pc, #112]	; (800473c <HAL_TIM_Base_Start_IT+0xd0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x80>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_TIM_Base_Start_IT+0xd4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x80>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <HAL_TIM_Base_Start_IT+0xd8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x80>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_TIM_Base_Start_IT+0xdc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d111      	bne.n	8004710 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b06      	cmp	r3, #6
 80046fc:	d010      	beq.n	8004720 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470e:	e007      	b.n	8004720 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40010400 	.word	0x40010400
 8004744:	40014000 	.word	0x40014000
 8004748:	40001800 	.word	0x40001800

0800474c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e041      	b.n	80047e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f839 	bl	80047ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 fc26 	bl	8004fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e097      	b.n	8004942 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc fcb0 	bl	800118c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f000 fbc2 	bl	8004fdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004880:	f023 0303 	bic.w	r3, r3, #3
 8004884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	4313      	orrs	r3, r2
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800489e:	f023 030c 	bic.w	r3, r3, #12
 80048a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	4313      	orrs	r3, r2
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	011a      	lsls	r2, r3, #4
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	031b      	lsls	r3, r3, #12
 80048ce:	4313      	orrs	r3, r2
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048dc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80048e4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	4313      	orrs	r3, r2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004962:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800496a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004972:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d110      	bne.n	800499c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d102      	bne.n	8004986 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004980:	7b7b      	ldrb	r3, [r7, #13]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d001      	beq.n	800498a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e069      	b.n	8004a5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499a:	e031      	b.n	8004a00 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d110      	bne.n	80049c4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a2:	7bbb      	ldrb	r3, [r7, #14]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d102      	bne.n	80049ae <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049a8:	7b3b      	ldrb	r3, [r7, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d001      	beq.n	80049b2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e055      	b.n	8004a5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c2:	e01d      	b.n	8004a00 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d108      	bne.n	80049dc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ca:	7bbb      	ldrb	r3, [r7, #14]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d105      	bne.n	80049dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d0:	7b7b      	ldrb	r3, [r7, #13]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d102      	bne.n	80049dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049d6:	7b3b      	ldrb	r3, [r7, #12]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e03e      	b.n	8004a5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_Encoder_Start+0xc4>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d008      	beq.n	8004a1e <HAL_TIM_Encoder_Start+0xd4>
 8004a0c:	e00f      	b.n	8004a2e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2201      	movs	r2, #1
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fdca 	bl	80055b0 <TIM_CCxChannelCmd>
      break;
 8004a1c:	e016      	b.n	8004a4c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	2104      	movs	r1, #4
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fdc2 	bl	80055b0 <TIM_CCxChannelCmd>
      break;
 8004a2c:	e00e      	b.n	8004a4c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fdba 	bl	80055b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	2104      	movs	r1, #4
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fdb3 	bl	80055b0 <TIM_CCxChannelCmd>
      break;
 8004a4a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d122      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d11b      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f06f 0202 	mvn.w	r2, #2
 8004a92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fa78 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004aae:	e005      	b.n	8004abc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa6a 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa7b 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d122      	bne.n	8004b16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d11b      	bne.n	8004b16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0204 	mvn.w	r2, #4
 8004ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fa4e 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004b02:	e005      	b.n	8004b10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fa40 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa51 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d122      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d11b      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0208 	mvn.w	r2, #8
 8004b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa24 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004b56:	e005      	b.n	8004b64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fa16 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa27 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d122      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d11b      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f06f 0210 	mvn.w	r2, #16
 8004b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2208      	movs	r2, #8
 8004b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f9fa 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004baa:	e005      	b.n	8004bb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f9ec 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9fd 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10e      	bne.n	8004bea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f06f 0201 	mvn.w	r2, #1
 8004be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fc f84b 	bl	8000c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d10e      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d107      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fd79 	bl	8005708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d10e      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d107      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9c2 	bl	8004fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d10e      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0220 	mvn.w	r2, #32
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fd43 	bl	80056f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e0ae      	b.n	8004df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f200 809f 	bhi.w	8004de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004ce1 	.word	0x08004ce1
 8004cb0:	08004de5 	.word	0x08004de5
 8004cb4:	08004de5 	.word	0x08004de5
 8004cb8:	08004de5 	.word	0x08004de5
 8004cbc:	08004d21 	.word	0x08004d21
 8004cc0:	08004de5 	.word	0x08004de5
 8004cc4:	08004de5 	.word	0x08004de5
 8004cc8:	08004de5 	.word	0x08004de5
 8004ccc:	08004d63 	.word	0x08004d63
 8004cd0:	08004de5 	.word	0x08004de5
 8004cd4:	08004de5 	.word	0x08004de5
 8004cd8:	08004de5 	.word	0x08004de5
 8004cdc:	08004da3 	.word	0x08004da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fa18 	bl	800511c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0204 	bic.w	r2, r2, #4
 8004d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]
      break;
 8004d1e:	e064      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fa68 	bl	80051fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6999      	ldr	r1, [r3, #24]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]
      break;
 8004d60:	e043      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fabd 	bl	80052e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0208 	orr.w	r2, r2, #8
 8004d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0204 	bic.w	r2, r2, #4
 8004d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69d9      	ldr	r1, [r3, #28]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	61da      	str	r2, [r3, #28]
      break;
 8004da0:	e023      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fb11 	bl	80053d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69d9      	ldr	r1, [r3, #28]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	021a      	lsls	r2, r3, #8
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	61da      	str	r2, [r3, #28]
      break;
 8004de2:	e002      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
      break;
 8004de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_ConfigClockSource+0x1c>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0b4      	b.n	8004f82 <HAL_TIM_ConfigClockSource+0x186>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	d03e      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	f200 8087 	bhi.w	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	f000 8086 	beq.w	8004f6e <HAL_TIM_ConfigClockSource+0x172>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e66:	d87f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b70      	cmp	r3, #112	; 0x70
 8004e6a:	d01a      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e6c:	2b70      	cmp	r3, #112	; 0x70
 8004e6e:	d87b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b60      	cmp	r3, #96	; 0x60
 8004e72:	d050      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x11a>
 8004e74:	2b60      	cmp	r3, #96	; 0x60
 8004e76:	d877      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b50      	cmp	r3, #80	; 0x50
 8004e7a:	d03c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d873      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d058      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x13a>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d86f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	d064      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8c:	2b30      	cmp	r3, #48	; 0x30
 8004e8e:	d86b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d060      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d867      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d05c      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d05a      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	e062      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f000 fb5d 	bl	8005570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	609a      	str	r2, [r3, #8]
      break;
 8004ece:	e04f      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6899      	ldr	r1, [r3, #8]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f000 fb46 	bl	8005570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef2:	609a      	str	r2, [r3, #8]
      break;
 8004ef4:	e03c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 faba 	bl	800547c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2150      	movs	r1, #80	; 0x50
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fb13 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 8004f14:	e02c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 fad9 	bl	80054da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2160      	movs	r1, #96	; 0x60
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fb03 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 8004f34:	e01c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 fa9a 	bl	800547c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 faf3 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 8004f54:	e00c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f000 faea 	bl	800553a <TIM_ITRx_SetConfig>
      break;
 8004f66:	e003      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	e000      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <TIM_Base_SetConfig+0x114>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffa:	d00f      	beq.n	800501c <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3d      	ldr	r2, [pc, #244]	; (80050f4 <TIM_Base_SetConfig+0x118>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00b      	beq.n	800501c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a3c      	ldr	r2, [pc, #240]	; (80050f8 <TIM_Base_SetConfig+0x11c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a3b      	ldr	r2, [pc, #236]	; (80050fc <TIM_Base_SetConfig+0x120>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3a      	ldr	r2, [pc, #232]	; (8005100 <TIM_Base_SetConfig+0x124>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d108      	bne.n	800502e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2f      	ldr	r2, [pc, #188]	; (80050f0 <TIM_Base_SetConfig+0x114>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d02b      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503c:	d027      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2c      	ldr	r2, [pc, #176]	; (80050f4 <TIM_Base_SetConfig+0x118>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d023      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2b      	ldr	r2, [pc, #172]	; (80050f8 <TIM_Base_SetConfig+0x11c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01f      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2a      	ldr	r2, [pc, #168]	; (80050fc <TIM_Base_SetConfig+0x120>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01b      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a29      	ldr	r2, [pc, #164]	; (8005100 <TIM_Base_SetConfig+0x124>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d017      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a28      	ldr	r2, [pc, #160]	; (8005104 <TIM_Base_SetConfig+0x128>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d013      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a27      	ldr	r2, [pc, #156]	; (8005108 <TIM_Base_SetConfig+0x12c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00f      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a26      	ldr	r2, [pc, #152]	; (800510c <TIM_Base_SetConfig+0x130>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00b      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a25      	ldr	r2, [pc, #148]	; (8005110 <TIM_Base_SetConfig+0x134>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a24      	ldr	r2, [pc, #144]	; (8005114 <TIM_Base_SetConfig+0x138>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a23      	ldr	r2, [pc, #140]	; (8005118 <TIM_Base_SetConfig+0x13c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d108      	bne.n	80050a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <TIM_Base_SetConfig+0x114>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_Base_SetConfig+0xf8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <TIM_Base_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d103      	bne.n	80050dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	615a      	str	r2, [r3, #20]
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40010000 	.word	0x40010000
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	40010400 	.word	0x40010400
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800
 8005110:	40001800 	.word	0x40001800
 8005114:	40001c00 	.word	0x40001c00
 8005118:	40002000 	.word	0x40002000

0800511c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f023 0302 	bic.w	r3, r3, #2
 8005164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <TIM_OC1_SetConfig+0xd8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC1_SetConfig+0x64>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <TIM_OC1_SetConfig+0xdc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10c      	bne.n	800519a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0308 	bic.w	r3, r3, #8
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <TIM_OC1_SetConfig+0xd8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_OC1_SetConfig+0x8e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <TIM_OC1_SetConfig+0xdc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d111      	bne.n	80051ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40010400 	.word	0x40010400

080051fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0210 	bic.w	r2, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0320 	bic.w	r3, r3, #32
 8005246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <TIM_OC2_SetConfig+0xe4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC2_SetConfig+0x68>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <TIM_OC2_SetConfig+0xe8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10d      	bne.n	8005280 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a17      	ldr	r2, [pc, #92]	; (80052e0 <TIM_OC2_SetConfig+0xe4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC2_SetConfig+0x94>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <TIM_OC2_SetConfig+0xe8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d113      	bne.n	80052b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40010400 	.word	0x40010400

080052e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <TIM_OC3_SetConfig+0xe0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_OC3_SetConfig+0x66>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a20      	ldr	r2, [pc, #128]	; (80053cc <TIM_OC3_SetConfig+0xe4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10d      	bne.n	800536a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <TIM_OC3_SetConfig+0xe0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_OC3_SetConfig+0x92>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <TIM_OC3_SetConfig+0xe4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d113      	bne.n	80053a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800541a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a12      	ldr	r2, [pc, #72]	; (8005474 <TIM_OC4_SetConfig+0xa4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC4_SetConfig+0x68>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a11      	ldr	r2, [pc, #68]	; (8005478 <TIM_OC4_SetConfig+0xa8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d109      	bne.n	800544c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	019b      	lsls	r3, r3, #6
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000
 8005478:	40010400 	.word	0x40010400

0800547c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 030a 	bic.w	r3, r3, #10
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054da:	b480      	push	{r7}
 80054dc:	b087      	sub	sp, #28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0210 	bic.w	r2, r3, #16
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	031b      	lsls	r3, r3, #12
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	f043 0307 	orr.w	r3, r3, #7
 800555c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	609a      	str	r2, [r3, #8]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	431a      	orrs	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2201      	movs	r2, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1a      	ldr	r2, [r3, #32]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005610:	2302      	movs	r3, #2
 8005612:	e05a      	b.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a21      	ldr	r2, [pc, #132]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d022      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005660:	d01d      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d018      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00e      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d009      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a17      	ldr	r2, [pc, #92]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d10c      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40010400 	.word	0x40010400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40001800 	.word	0x40001800

080056f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e03f      	b.n	80057ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fb fe22 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2224      	movs	r2, #36	; 0x24
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800575e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 ff9d 	bl	80066a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b08a      	sub	sp, #40	; 0x28
 80057ba:	af02      	add	r7, sp, #8
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d17c      	bne.n	80058d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_Transmit+0x2c>
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e075      	b.n	80058d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_UART_Transmit+0x3e>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e06e      	b.n	80058d2 <HAL_UART_Transmit+0x11c>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2221      	movs	r2, #33	; 0x21
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580a:	f7fc fc6b 	bl	80020e4 <HAL_GetTick>
 800580e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	88fa      	ldrh	r2, [r7, #6]
 800581a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005824:	d108      	bne.n	8005838 <HAL_UART_Transmit+0x82>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e003      	b.n	8005840 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005848:	e02a      	b.n	80058a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fc55 	bl	8006104 <UART_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e036      	b.n	80058d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005878:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	3302      	adds	r3, #2
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	e007      	b.n	8005892 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	781a      	ldrb	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	3301      	adds	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1cf      	bne.n	800584a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2140      	movs	r1, #64	; 0x40
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fc25 	bl	8006104 <UART_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e006      	b.n	80058d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e000      	b.n	80058d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b08c      	sub	sp, #48	; 0x30
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	4613      	mov	r3, r2
 80058e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d152      	bne.n	800599a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e04b      	b.n	800599c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800590e:	2302      	movs	r3, #2
 8005910:	e044      	b.n	800599c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	461a      	mov	r2, r3
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fc5a 	bl	80061e0 <UART_Start_Receive_DMA>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005936:	2b00      	cmp	r3, #0
 8005938:	d12c      	bne.n	8005994 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	2b01      	cmp	r3, #1
 8005940:	d125      	bne.n	800598e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	617b      	str	r3, [r7, #20]
   return(result);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f043 0310 	orr.w	r3, r3, #16
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005978:	627a      	str	r2, [r7, #36]	; 0x24
 800597a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6a39      	ldr	r1, [r7, #32]
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	61fb      	str	r3, [r7, #28]
   return(result);
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800598c:	e002      	b.n	8005994 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005998:	e000      	b.n	800599c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3730      	adds	r7, #48	; 0x30
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b0ba      	sub	sp, #232	; 0xe8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10f      	bne.n	8005a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_UART_IRQHandler+0x66>
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fd91 	bl	800652a <UART_Receive_IT>
      return;
 8005a08:	e256      	b.n	8005eb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80de 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x22c>
 8005a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80d1 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_UART_IRQHandler+0xae>
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00b      	beq.n	8005a76 <HAL_UART_IRQHandler+0xd2>
 8005a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f043 0202 	orr.w	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <HAL_UART_IRQHandler+0xf6>
 8005a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f043 0204 	orr.w	r2, r3, #4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d011      	beq.n	8005aca <HAL_UART_IRQHandler+0x126>
 8005aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d105      	bne.n	8005abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 0208 	orr.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 81ed 	beq.w	8005eae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_UART_IRQHandler+0x14e>
 8005ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fd1c 	bl	800652a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <HAL_UART_IRQHandler+0x17a>
 8005b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04f      	beq.n	8005bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fc24 	bl	800636c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d141      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1d9      	bne.n	8005b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d013      	beq.n	8005bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	4a7d      	ldr	r2, [pc, #500]	; (8005d80 <HAL_UART_IRQHandler+0x3dc>)
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd fbbc 	bl	8003310 <HAL_DMA_Abort_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d016      	beq.n	8005bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	e00e      	b.n	8005bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fc f964 	bl	8001e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	e00a      	b.n	8005bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc f960 	bl	8001e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	e006      	b.n	8005bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc f95c 	bl	8001e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bca:	e170      	b.n	8005eae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bcc:	bf00      	nop
    return;
 8005bce:	e16e      	b.n	8005eae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 814a 	bne.w	8005e6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8143 	beq.w	8005e6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 813c 	beq.w	8005e6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	f040 80b4 	bne.w	8005d84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8140 	beq.w	8005eb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	f080 8139 	bcs.w	8005eb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c52:	f000 8088 	beq.w	8005d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1d9      	bne.n	8005c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e1      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3314      	adds	r3, #20
 8005ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3314      	adds	r3, #20
 8005cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e3      	bne.n	8005cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d36:	f023 0310 	bic.w	r3, r3, #16
 8005d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d48:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e3      	bne.n	8005d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fd fa65 	bl	8003230 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc f914 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d7c:	e099      	b.n	8005eb2 <HAL_UART_IRQHandler+0x50e>
 8005d7e:	bf00      	nop
 8005d80:	08006433 	.word	0x08006433
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 808b 	beq.w	8005eb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8086 	beq.w	8005eb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dce:	647a      	str	r2, [r7, #68]	; 0x44
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e3      	bne.n	8005daa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3314      	adds	r3, #20
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	623b      	str	r3, [r7, #32]
   return(result);
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3314      	adds	r3, #20
 8005e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e06:	633a      	str	r2, [r7, #48]	; 0x30
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e3      	bne.n	8005de2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0310 	bic.w	r3, r3, #16
 8005e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e4c:	61fa      	str	r2, [r7, #28]
 8005e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e3      	bne.n	8005e28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fc f89c 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e6c:	e023      	b.n	8005eb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <HAL_UART_IRQHandler+0x4ea>
 8005e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fae7 	bl	800645a <UART_Transmit_IT>
    return;
 8005e8c:	e014      	b.n	8005eb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x514>
 8005e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb27 	bl	80064fa <UART_EndTransmit_IT>
    return;
 8005eac:	e004      	b.n	8005eb8 <HAL_UART_IRQHandler+0x514>
    return;
 8005eae:	bf00      	nop
 8005eb0:	e002      	b.n	8005eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8005eb6:	bf00      	nop
  }
}
 8005eb8:	37e8      	adds	r7, #232	; 0xe8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop

08005ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b09c      	sub	sp, #112	; 0x70
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d172      	bne.n	8006016 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	2200      	movs	r2, #0
 8005f34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	330c      	adds	r3, #12
 8005f54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f56:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e5      	bne.n	8005f36 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3314      	adds	r3, #20
 8005f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	667b      	str	r3, [r7, #100]	; 0x64
 8005f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3314      	adds	r3, #20
 8005f88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f8a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e5      	bne.n	8005f6a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	623b      	str	r3, [r7, #32]
   return(result);
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e5      	bne.n	8005f9e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d119      	bne.n	8006016 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f023 0310 	bic.w	r3, r3, #16
 8005ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006002:	61fa      	str	r2, [r7, #28]
 8006004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69b9      	ldr	r1, [r7, #24]
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	617b      	str	r3, [r7, #20]
   return(result);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	2b01      	cmp	r3, #1
 800601c:	d106      	bne.n	800602c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006022:	4619      	mov	r1, r3
 8006024:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006026:	f7fb ffbd 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800602a:	e002      	b.n	8006032 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800602c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800602e:	f7ff ff51 	bl	8005ed4 <HAL_UART_RxCpltCallback>
}
 8006032:	bf00      	nop
 8006034:	3770      	adds	r7, #112	; 0x70
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	2b01      	cmp	r3, #1
 800604e:	d108      	bne.n	8006062 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7fb ffa2 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006060:	e002      	b.n	8006068 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff ff40 	bl	8005ee8 <HAL_UART_RxHalfCpltCallback>
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b21      	cmp	r3, #33	; 0x21
 80060a2:	d108      	bne.n	80060b6 <UART_DMAError+0x46>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d005      	beq.n	80060b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060b0:	68b8      	ldr	r0, [r7, #8]
 80060b2:	f000 f933 	bl	800631c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b22      	cmp	r3, #34	; 0x22
 80060d6:	d108      	bne.n	80060ea <UART_DMAError+0x7a>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060e4:	68b8      	ldr	r0, [r7, #8]
 80060e6:	f000 f941 	bl	800636c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0210 	orr.w	r2, r3, #16
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060f6:	68b8      	ldr	r0, [r7, #8]
 80060f8:	f7fb fec0 	bl	8001e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b090      	sub	sp, #64	; 0x40
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006114:	e050      	b.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d04c      	beq.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800611e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0x30>
 8006124:	f7fb ffde 	bl	80020e4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006130:	429a      	cmp	r2, r3
 8006132:	d241      	bcs.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	330c      	adds	r3, #12
 8006152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006154:	637a      	str	r2, [r7, #52]	; 0x34
 8006156:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800615a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e5      	bne.n	8006134 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	613b      	str	r3, [r7, #16]
   return(result);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006188:	623a      	str	r2, [r7, #32]
 800618a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	69f9      	ldr	r1, [r7, #28]
 800618e:	6a3a      	ldr	r2, [r7, #32]
 8006190:	e841 2300 	strex	r3, r2, [r1]
 8006194:	61bb      	str	r3, [r7, #24]
   return(result);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e5      	bne.n	8006168 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e00f      	b.n	80061d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	bf0c      	ite	eq
 80061c8:	2301      	moveq	r3, #1
 80061ca:	2300      	movne	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d09f      	beq.n	8006116 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3740      	adds	r7, #64	; 0x40
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b098      	sub	sp, #96	; 0x60
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2222      	movs	r2, #34	; 0x22
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	4a40      	ldr	r2, [pc, #256]	; (8006310 <UART_Start_Receive_DMA+0x130>)
 800620e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	4a3f      	ldr	r2, [pc, #252]	; (8006314 <UART_Start_Receive_DMA+0x134>)
 8006216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	4a3e      	ldr	r2, [pc, #248]	; (8006318 <UART_Start_Receive_DMA+0x138>)
 800621e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	2200      	movs	r2, #0
 8006226:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	f7fc ff9e 	bl	8003180 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d019      	beq.n	800629e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800627a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006280:	65bb      	str	r3, [r7, #88]	; 0x58
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800628a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800628c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e5      	bne.n	800626a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	657b      	str	r3, [r7, #84]	; 0x54
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3314      	adds	r3, #20
 80062bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062be:	63ba      	str	r2, [r7, #56]	; 0x38
 80062c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e5      	bne.n	800629e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	617b      	str	r3, [r7, #20]
   return(result);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e8:	653b      	str	r3, [r7, #80]	; 0x50
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062f2:	627a      	str	r2, [r7, #36]	; 0x24
 80062f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6a39      	ldr	r1, [r7, #32]
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3760      	adds	r7, #96	; 0x60
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	08005f15 	.word	0x08005f15
 8006314:	0800603b 	.word	0x0800603b
 8006318:	08006071 	.word	0x08006071

0800631c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	; 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	60bb      	str	r3, [r7, #8]
   return(result);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	61ba      	str	r2, [r7, #24]
 8006346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	613b      	str	r3, [r7, #16]
   return(result);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e5      	bne.n	8006324 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006360:	bf00      	nop
 8006362:	3724      	adds	r7, #36	; 0x24
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b095      	sub	sp, #84	; 0x54
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006394:	643a      	str	r2, [r7, #64]	; 0x40
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800639a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3314      	adds	r3, #20
 80063c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d119      	bne.n	8006418 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0310 	bic.w	r3, r3, #16
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006404:	61ba      	str	r2, [r7, #24]
 8006406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6979      	ldr	r1, [r7, #20]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	613b      	str	r3, [r7, #16]
   return(result);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e5      	bne.n	80063e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006426:	bf00      	nop
 8006428:	3754      	adds	r7, #84	; 0x54
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7fb fd15 	bl	8001e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b21      	cmp	r3, #33	; 0x21
 800646c:	d13e      	bne.n	80064ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006476:	d114      	bne.n	80064a2 <UART_Transmit_IT+0x48>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d110      	bne.n	80064a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006494:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	1c9a      	adds	r2, r3, #2
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]
 80064a0:	e008      	b.n	80064b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6211      	str	r1, [r2, #32]
 80064ac:	781a      	ldrb	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006510:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fcd0 	bl	8005ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b08c      	sub	sp, #48	; 0x30
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b22      	cmp	r3, #34	; 0x22
 800653c:	f040 80ab 	bne.w	8006696 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006548:	d117      	bne.n	800657a <UART_Receive_IT+0x50>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d113      	bne.n	800657a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006568:	b29a      	uxth	r2, r3
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	629a      	str	r2, [r3, #40]	; 0x28
 8006578:	e026      	b.n	80065c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d007      	beq.n	800659e <UART_Receive_IT+0x74>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <UART_Receive_IT+0x82>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e008      	b.n	80065be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4619      	mov	r1, r3
 80065d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d15a      	bne.n	8006692 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0220 	bic.w	r2, r2, #32
 80065ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	2b01      	cmp	r3, #1
 800661a:	d135      	bne.n	8006688 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	613b      	str	r3, [r7, #16]
   return(result);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f023 0310 	bic.w	r3, r3, #16
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	623a      	str	r2, [r7, #32]
 8006644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	69f9      	ldr	r1, [r7, #28]
 8006648:	6a3a      	ldr	r2, [r7, #32]
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e5      	bne.n	8006622 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b10      	cmp	r3, #16
 8006662:	d10a      	bne.n	800667a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fb fc8f 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
 8006686:	e002      	b.n	800668e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff fc23 	bl	8005ed4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e002      	b.n	8006698 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3730      	adds	r7, #48	; 0x30
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a4:	b0c0      	sub	sp, #256	; 0x100
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	68d9      	ldr	r1, [r3, #12]
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	ea40 0301 	orr.w	r3, r0, r1
 80066c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	431a      	orrs	r2, r3
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066f8:	f021 010c 	bic.w	r1, r1, #12
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006706:	430b      	orrs	r3, r1
 8006708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	6999      	ldr	r1, [r3, #24]
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	ea40 0301 	orr.w	r3, r0, r1
 8006726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b8f      	ldr	r3, [pc, #572]	; (800696c <UART_SetConfig+0x2cc>)
 8006730:	429a      	cmp	r2, r3
 8006732:	d005      	beq.n	8006740 <UART_SetConfig+0xa0>
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b8d      	ldr	r3, [pc, #564]	; (8006970 <UART_SetConfig+0x2d0>)
 800673c:	429a      	cmp	r2, r3
 800673e:	d104      	bne.n	800674a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7fd fefe 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8006744:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006748:	e003      	b.n	8006752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800674a:	f7fd fee5 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 800674e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675c:	f040 810c 	bne.w	8006978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006764:	2200      	movs	r2, #0
 8006766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800676a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800676e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006772:	4622      	mov	r2, r4
 8006774:	462b      	mov	r3, r5
 8006776:	1891      	adds	r1, r2, r2
 8006778:	65b9      	str	r1, [r7, #88]	; 0x58
 800677a:	415b      	adcs	r3, r3
 800677c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006782:	4621      	mov	r1, r4
 8006784:	eb12 0801 	adds.w	r8, r2, r1
 8006788:	4629      	mov	r1, r5
 800678a:	eb43 0901 	adc.w	r9, r3, r1
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800679e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a2:	4690      	mov	r8, r2
 80067a4:	4699      	mov	r9, r3
 80067a6:	4623      	mov	r3, r4
 80067a8:	eb18 0303 	adds.w	r3, r8, r3
 80067ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067b0:	462b      	mov	r3, r5
 80067b2:	eb49 0303 	adc.w	r3, r9, r3
 80067b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067ce:	460b      	mov	r3, r1
 80067d0:	18db      	adds	r3, r3, r3
 80067d2:	653b      	str	r3, [r7, #80]	; 0x50
 80067d4:	4613      	mov	r3, r2
 80067d6:	eb42 0303 	adc.w	r3, r2, r3
 80067da:	657b      	str	r3, [r7, #84]	; 0x54
 80067dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067e4:	f7f9 fd4c 	bl	8000280 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4b61      	ldr	r3, [pc, #388]	; (8006974 <UART_SetConfig+0x2d4>)
 80067ee:	fba3 2302 	umull	r2, r3, r3, r2
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	011c      	lsls	r4, r3, #4
 80067f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006800:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	1891      	adds	r1, r2, r2
 800680e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006810:	415b      	adcs	r3, r3
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006818:	4641      	mov	r1, r8
 800681a:	eb12 0a01 	adds.w	sl, r2, r1
 800681e:	4649      	mov	r1, r9
 8006820:	eb43 0b01 	adc.w	fp, r3, r1
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006838:	4692      	mov	sl, r2
 800683a:	469b      	mov	fp, r3
 800683c:	4643      	mov	r3, r8
 800683e:	eb1a 0303 	adds.w	r3, sl, r3
 8006842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006846:	464b      	mov	r3, r9
 8006848:	eb4b 0303 	adc.w	r3, fp, r3
 800684c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800685c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006864:	460b      	mov	r3, r1
 8006866:	18db      	adds	r3, r3, r3
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
 800686a:	4613      	mov	r3, r2
 800686c:	eb42 0303 	adc.w	r3, r2, r3
 8006870:	647b      	str	r3, [r7, #68]	; 0x44
 8006872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800687a:	f7f9 fd01 	bl	8000280 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4611      	mov	r1, r2
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <UART_SetConfig+0x2d4>)
 8006886:	fba3 2301 	umull	r2, r3, r3, r1
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	2264      	movs	r2, #100	; 0x64
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	1acb      	subs	r3, r1, r3
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800689a:	4b36      	ldr	r3, [pc, #216]	; (8006974 <UART_SetConfig+0x2d4>)
 800689c:	fba3 2302 	umull	r2, r3, r3, r2
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068a8:	441c      	add	r4, r3
 80068aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	1891      	adds	r1, r2, r2
 80068c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80068c4:	415b      	adcs	r3, r3
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068cc:	4641      	mov	r1, r8
 80068ce:	1851      	adds	r1, r2, r1
 80068d0:	6339      	str	r1, [r7, #48]	; 0x30
 80068d2:	4649      	mov	r1, r9
 80068d4:	414b      	adcs	r3, r1
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068e4:	4659      	mov	r1, fp
 80068e6:	00cb      	lsls	r3, r1, #3
 80068e8:	4651      	mov	r1, sl
 80068ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ee:	4651      	mov	r1, sl
 80068f0:	00ca      	lsls	r2, r1, #3
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	4642      	mov	r2, r8
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006900:	464b      	mov	r3, r9
 8006902:	460a      	mov	r2, r1
 8006904:	eb42 0303 	adc.w	r3, r2, r3
 8006908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006918:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800691c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006920:	460b      	mov	r3, r1
 8006922:	18db      	adds	r3, r3, r3
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
 8006926:	4613      	mov	r3, r2
 8006928:	eb42 0303 	adc.w	r3, r2, r3
 800692c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800692e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006936:	f7f9 fca3 	bl	8000280 <__aeabi_uldivmod>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <UART_SetConfig+0x2d4>)
 8006940:	fba3 1302 	umull	r1, r3, r3, r2
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	2164      	movs	r1, #100	; 0x64
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	3332      	adds	r3, #50	; 0x32
 8006952:	4a08      	ldr	r2, [pc, #32]	; (8006974 <UART_SetConfig+0x2d4>)
 8006954:	fba2 2303 	umull	r2, r3, r2, r3
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	f003 0207 	and.w	r2, r3, #7
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4422      	add	r2, r4
 8006966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006968:	e105      	b.n	8006b76 <UART_SetConfig+0x4d6>
 800696a:	bf00      	nop
 800696c:	40011000 	.word	0x40011000
 8006970:	40011400 	.word	0x40011400
 8006974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800697c:	2200      	movs	r2, #0
 800697e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006982:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800698a:	4642      	mov	r2, r8
 800698c:	464b      	mov	r3, r9
 800698e:	1891      	adds	r1, r2, r2
 8006990:	6239      	str	r1, [r7, #32]
 8006992:	415b      	adcs	r3, r3
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
 8006996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800699a:	4641      	mov	r1, r8
 800699c:	1854      	adds	r4, r2, r1
 800699e:	4649      	mov	r1, r9
 80069a0:	eb43 0501 	adc.w	r5, r3, r1
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	00eb      	lsls	r3, r5, #3
 80069ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b2:	00e2      	lsls	r2, r4, #3
 80069b4:	4614      	mov	r4, r2
 80069b6:	461d      	mov	r5, r3
 80069b8:	4643      	mov	r3, r8
 80069ba:	18e3      	adds	r3, r4, r3
 80069bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069c0:	464b      	mov	r3, r9
 80069c2:	eb45 0303 	adc.w	r3, r5, r3
 80069c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069e6:	4629      	mov	r1, r5
 80069e8:	008b      	lsls	r3, r1, #2
 80069ea:	4621      	mov	r1, r4
 80069ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f0:	4621      	mov	r1, r4
 80069f2:	008a      	lsls	r2, r1, #2
 80069f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069f8:	f7f9 fc42 	bl	8000280 <__aeabi_uldivmod>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4b60      	ldr	r3, [pc, #384]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006a02:	fba3 2302 	umull	r2, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	011c      	lsls	r4, r3, #4
 8006a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	1891      	adds	r1, r2, r2
 8006a22:	61b9      	str	r1, [r7, #24]
 8006a24:	415b      	adcs	r3, r3
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	1851      	adds	r1, r2, r1
 8006a30:	6139      	str	r1, [r7, #16]
 8006a32:	4649      	mov	r1, r9
 8006a34:	414b      	adcs	r3, r1
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a44:	4659      	mov	r1, fp
 8006a46:	00cb      	lsls	r3, r1, #3
 8006a48:	4651      	mov	r1, sl
 8006a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a4e:	4651      	mov	r1, sl
 8006a50:	00ca      	lsls	r2, r1, #3
 8006a52:	4610      	mov	r0, r2
 8006a54:	4619      	mov	r1, r3
 8006a56:	4603      	mov	r3, r0
 8006a58:	4642      	mov	r2, r8
 8006a5a:	189b      	adds	r3, r3, r2
 8006a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a60:	464b      	mov	r3, r9
 8006a62:	460a      	mov	r2, r1
 8006a64:	eb42 0303 	adc.w	r3, r2, r3
 8006a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a84:	4649      	mov	r1, r9
 8006a86:	008b      	lsls	r3, r1, #2
 8006a88:	4641      	mov	r1, r8
 8006a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a8e:	4641      	mov	r1, r8
 8006a90:	008a      	lsls	r2, r1, #2
 8006a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a96:	f7f9 fbf3 	bl	8000280 <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4b39      	ldr	r3, [pc, #228]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	2164      	movs	r1, #100	; 0x64
 8006aa8:	fb01 f303 	mul.w	r3, r1, r3
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	3332      	adds	r3, #50	; 0x32
 8006ab2:	4a34      	ldr	r2, [pc, #208]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006abe:	441c      	add	r4, r3
 8006ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ac8:	677a      	str	r2, [r7, #116]	; 0x74
 8006aca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ace:	4642      	mov	r2, r8
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	1891      	adds	r1, r2, r2
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	415b      	adcs	r3, r3
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ade:	4641      	mov	r1, r8
 8006ae0:	1851      	adds	r1, r2, r1
 8006ae2:	6039      	str	r1, [r7, #0]
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	414b      	adcs	r3, r1
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006af6:	4659      	mov	r1, fp
 8006af8:	00cb      	lsls	r3, r1, #3
 8006afa:	4651      	mov	r1, sl
 8006afc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b00:	4651      	mov	r1, sl
 8006b02:	00ca      	lsls	r2, r1, #3
 8006b04:	4610      	mov	r0, r2
 8006b06:	4619      	mov	r1, r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4642      	mov	r2, r8
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b10:	464b      	mov	r3, r9
 8006b12:	460a      	mov	r2, r1
 8006b14:	eb42 0303 	adc.w	r3, r2, r3
 8006b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	663b      	str	r3, [r7, #96]	; 0x60
 8006b24:	667a      	str	r2, [r7, #100]	; 0x64
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b32:	4649      	mov	r1, r9
 8006b34:	008b      	lsls	r3, r1, #2
 8006b36:	4641      	mov	r1, r8
 8006b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b3c:	4641      	mov	r1, r8
 8006b3e:	008a      	lsls	r2, r1, #2
 8006b40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b44:	f7f9 fb9c 	bl	8000280 <__aeabi_uldivmod>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2164      	movs	r1, #100	; 0x64
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	3332      	adds	r3, #50	; 0x32
 8006b60:	4a08      	ldr	r2, [pc, #32]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f003 020f 	and.w	r2, r3, #15
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4422      	add	r2, r4
 8006b74:	609a      	str	r2, [r3, #8]
}
 8006b76:	bf00      	nop
 8006b78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b82:	bf00      	nop
 8006b84:	51eb851f 	.word	0x51eb851f

08006b88 <__NVIC_SetPriority>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	db0a      	blt.n	8006bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	490c      	ldr	r1, [pc, #48]	; (8006bd4 <__NVIC_SetPriority+0x4c>)
 8006ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba6:	0112      	lsls	r2, r2, #4
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	440b      	add	r3, r1
 8006bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006bb0:	e00a      	b.n	8006bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	4908      	ldr	r1, [pc, #32]	; (8006bd8 <__NVIC_SetPriority+0x50>)
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	3b04      	subs	r3, #4
 8006bc0:	0112      	lsls	r2, r2, #4
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	761a      	strb	r2, [r3, #24]
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	e000e100 	.word	0xe000e100
 8006bd8:	e000ed00 	.word	0xe000ed00

08006bdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <SysTick_Handler+0x1c>)
 8006be2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006be4:	f001 fcfe 	bl	80085e4 <xTaskGetSchedulerState>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d001      	beq.n	8006bf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006bee:	f002 fae3 	bl	80091b8 <xPortSysTickHandler>
  }
}
 8006bf2:	bf00      	nop
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	e000e010 	.word	0xe000e010

08006bfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c00:	2100      	movs	r1, #0
 8006c02:	f06f 0004 	mvn.w	r0, #4
 8006c06:	f7ff ffbf 	bl	8006b88 <__NVIC_SetPriority>
#endif
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c16:	f3ef 8305 	mrs	r3, IPSR
 8006c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c22:	f06f 0305 	mvn.w	r3, #5
 8006c26:	607b      	str	r3, [r7, #4]
 8006c28:	e00c      	b.n	8006c44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c2a:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <osKernelInitialize+0x44>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c32:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <osKernelInitialize+0x44>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	e002      	b.n	8006c44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c44:	687b      	ldr	r3, [r7, #4]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20001e34 	.word	0x20001e34

08006c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c5e:	f3ef 8305 	mrs	r3, IPSR
 8006c62:	603b      	str	r3, [r7, #0]
  return(result);
 8006c64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c6a:	f06f 0305 	mvn.w	r3, #5
 8006c6e:	607b      	str	r3, [r7, #4]
 8006c70:	e010      	b.n	8006c94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <osKernelStart+0x48>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d109      	bne.n	8006c8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c7a:	f7ff ffbf 	bl	8006bfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c7e:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <osKernelStart+0x48>)
 8006c80:	2202      	movs	r2, #2
 8006c82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c84:	f001 f866 	bl	8007d54 <vTaskStartScheduler>
      stat = osOK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	607b      	str	r3, [r7, #4]
 8006c8c:	e002      	b.n	8006c94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c94:	687b      	ldr	r3, [r7, #4]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20001e34 	.word	0x20001e34

08006ca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	; 0x38
 8006ca8:	af04      	add	r7, sp, #16
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cb4:	f3ef 8305 	mrs	r3, IPSR
 8006cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8006cba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d17e      	bne.n	8006dbe <osThreadNew+0x11a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d07b      	beq.n	8006dbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006cc6:	2380      	movs	r3, #128	; 0x80
 8006cc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006cca:	2318      	movs	r3, #24
 8006ccc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d045      	beq.n	8006d6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <osThreadNew+0x48>
        name = attr->name;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <osThreadNew+0x6e>
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b38      	cmp	r3, #56	; 0x38
 8006d04:	d805      	bhi.n	8006d12 <osThreadNew+0x6e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <osThreadNew+0x72>
        return (NULL);
 8006d12:	2300      	movs	r3, #0
 8006d14:	e054      	b.n	8006dc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	089b      	lsrs	r3, r3, #2
 8006d24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <osThreadNew+0xa8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b5b      	cmp	r3, #91	; 0x5b
 8006d34:	d90a      	bls.n	8006d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d006      	beq.n	8006d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <osThreadNew+0xa8>
        mem = 1;
 8006d46:	2301      	movs	r3, #1
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e010      	b.n	8006d6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <osThreadNew+0xca>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d108      	bne.n	8006d6e <osThreadNew+0xca>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <osThreadNew+0xca>
          mem = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	e001      	b.n	8006d6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d110      	bne.n	8006d96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d7c:	9202      	str	r2, [sp, #8]
 8006d7e:	9301      	str	r3, [sp, #4]
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	6a3a      	ldr	r2, [r7, #32]
 8006d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fe0c 	bl	80079a8 <xTaskCreateStatic>
 8006d90:	4603      	mov	r3, r0
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	e013      	b.n	8006dbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d110      	bne.n	8006dbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	f107 0310 	add.w	r3, r7, #16
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 fe57 	bl	8007a62 <xTaskCreate>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d001      	beq.n	8006dbe <osThreadNew+0x11a>
            hTask = NULL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006dbe:	693b      	ldr	r3, [r7, #16]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3728      	adds	r7, #40	; 0x28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd0:	f3ef 8305 	mrs	r3, IPSR
 8006dd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <osDelay+0x1c>
    stat = osErrorISR;
 8006ddc:	f06f 0305 	mvn.w	r3, #5
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e007      	b.n	8006df4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 ff7c 	bl	8007cec <vTaskDelay>
    }
  }

  return (stat);
 8006df4:	68fb      	ldr	r3, [r7, #12]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4a07      	ldr	r2, [pc, #28]	; (8006e2c <vApplicationGetIdleTaskMemory+0x2c>)
 8006e10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4a06      	ldr	r2, [pc, #24]	; (8006e30 <vApplicationGetIdleTaskMemory+0x30>)
 8006e16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2280      	movs	r2, #128	; 0x80
 8006e1c:	601a      	str	r2, [r3, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20001e38 	.word	0x20001e38
 8006e30:	20001e94 	.word	0x20001e94

08006e34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a07      	ldr	r2, [pc, #28]	; (8006e60 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4a06      	ldr	r2, [pc, #24]	; (8006e64 <vApplicationGetTimerTaskMemory+0x30>)
 8006e4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e52:	601a      	str	r2, [r3, #0]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20002094 	.word	0x20002094
 8006e64:	200020f0 	.word	0x200020f0

08006e68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f103 0208 	add.w	r2, r3, #8
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f103 0208 	add.w	r2, r3, #8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f103 0208 	add.w	r2, r3, #8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]
}
 8006efe:	bf00      	nop
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d103      	bne.n	8006f2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e00c      	b.n	8006f44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e002      	b.n	8006f38 <vListInsert+0x2e>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d2f6      	bcs.n	8006f32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6892      	ldr	r2, [r2, #8]
 8006f92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6852      	ldr	r2, [r2, #4]
 8006f9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d103      	bne.n	8006fb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	1e5a      	subs	r2, r3, #1
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ffa:	f002 f84b 	bl	8009094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	441a      	add	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	3b01      	subs	r3, #1
 800702c:	68f9      	ldr	r1, [r7, #12]
 800702e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	441a      	add	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	22ff      	movs	r2, #255	; 0xff
 800703e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d114      	bne.n	800707a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01a      	beq.n	800708e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3310      	adds	r3, #16
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f903 	bl	8008268 <xTaskRemoveFromEventList>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d012      	beq.n	800708e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007068:	4b0c      	ldr	r3, [pc, #48]	; (800709c <xQueueGenericReset+0xcc>)
 800706a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	e009      	b.n	800708e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3310      	adds	r3, #16
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fef2 	bl	8006e68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3324      	adds	r3, #36	; 0x24
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff feed 	bl	8006e68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800708e:	f002 f831 	bl	80090f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007092:	2301      	movs	r3, #1
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	e000ed04 	.word	0xe000ed04

080070a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	; 0x38
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <xQueueGenericCreateStatic+0x52>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <xQueueGenericCreateStatic+0x56>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueGenericCreateStatic+0x58>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	623b      	str	r3, [r7, #32]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <xQueueGenericCreateStatic+0x7e>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <xQueueGenericCreateStatic+0x82>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <xQueueGenericCreateStatic+0x84>
 8007122:	2300      	movs	r3, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	61fb      	str	r3, [r7, #28]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800713e:	2350      	movs	r3, #80	; 0x50
 8007140:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b50      	cmp	r3, #80	; 0x50
 8007146:	d00a      	beq.n	800715e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	61bb      	str	r3, [r7, #24]
}
 800715a:	bf00      	nop
 800715c:	e7fe      	b.n	800715c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800715e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00d      	beq.n	8007186 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007172:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	4613      	mov	r3, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f805 	bl	8007190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007188:	4618      	mov	r0, r3
 800718a:	3730      	adds	r7, #48	; 0x30
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071be:	2101      	movs	r1, #1
 80071c0:	69b8      	ldr	r0, [r7, #24]
 80071c2:	f7ff ff05 	bl	8006fd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08e      	sub	sp, #56	; 0x38
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueGenericSend+0x32>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <xQueueGenericSend+0x40>
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <xQueueGenericSend+0x44>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <xQueueGenericSend+0x46>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <xQueueGenericSend+0x60>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d103      	bne.n	8007246 <xQueueGenericSend+0x6e>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <xQueueGenericSend+0x72>
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <xQueueGenericSend+0x74>
 800724a:	2300      	movs	r3, #0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xQueueGenericSend+0x8e>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	623b      	str	r3, [r7, #32]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007266:	f001 f9bd 	bl	80085e4 <xTaskGetSchedulerState>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <xQueueGenericSend+0x9e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <xQueueGenericSend+0xa2>
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <xQueueGenericSend+0xa4>
 800727a:	2300      	movs	r3, #0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <xQueueGenericSend+0xbe>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	61fb      	str	r3, [r7, #28]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007296:	f001 fefd 	bl	8009094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d302      	bcc.n	80072ac <xQueueGenericSend+0xd4>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d129      	bne.n	8007300 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fa0b 	bl	80076cc <prvCopyDataToQueue>
 80072b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d010      	beq.n	80072e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	3324      	adds	r3, #36	; 0x24
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 ffcf 	bl	8008268 <xTaskRemoveFromEventList>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d013      	beq.n	80072f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072d0:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <xQueueGenericSend+0x1f8>)
 80072d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	e00a      	b.n	80072f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072e8:	4b39      	ldr	r3, [pc, #228]	; (80073d0 <xQueueGenericSend+0x1f8>)
 80072ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072f8:	f001 fefc 	bl	80090f4 <vPortExitCritical>
				return pdPASS;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e063      	b.n	80073c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007306:	f001 fef5 	bl	80090f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800730a:	2300      	movs	r3, #0
 800730c:	e05c      	b.n	80073c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4618      	mov	r0, r3
 800731a:	f001 f809 	bl	8008330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007322:	f001 fee7 	bl	80090f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007326:	f000 fd7b 	bl	8007e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800732a:	f001 feb3 	bl	8009094 <vPortEnterCritical>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007334:	b25b      	sxtb	r3, r3
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d103      	bne.n	8007344 <xQueueGenericSend+0x16c>
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734a:	b25b      	sxtb	r3, r3
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d103      	bne.n	800735a <xQueueGenericSend+0x182>
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800735a:	f001 fecb 	bl	80090f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800735e:	1d3a      	adds	r2, r7, #4
 8007360:	f107 0314 	add.w	r3, r7, #20
 8007364:	4611      	mov	r1, r2
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fff8 	bl	800835c <xTaskCheckForTimeOut>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d124      	bne.n	80073bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007374:	f000 faa2 	bl	80078bc <prvIsQueueFull>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d018      	beq.n	80073b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	3310      	adds	r3, #16
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f000 ff1e 	bl	80081c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800738c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800738e:	f000 fa2d 	bl	80077ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007392:	f000 fd53 	bl	8007e3c <xTaskResumeAll>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	f47f af7c 	bne.w	8007296 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <xQueueGenericSend+0x1f8>)
 80073a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	e772      	b.n	8007296 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073b2:	f000 fa1b 	bl	80077ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073b6:	f000 fd41 	bl	8007e3c <xTaskResumeAll>
 80073ba:	e76c      	b.n	8007296 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073be:	f000 fa15 	bl	80077ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073c2:	f000 fd3b 	bl	8007e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3738      	adds	r7, #56	; 0x38
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b090      	sub	sp, #64	; 0x40
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <xQueueGenericSendFromISR+0x3c>
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <xQueueGenericSendFromISR+0x40>
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <xQueueGenericSendFromISR+0x42>
 8007414:	2300      	movs	r3, #0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d103      	bne.n	800743e <xQueueGenericSendFromISR+0x6a>
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <xQueueGenericSendFromISR+0x6e>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <xQueueGenericSendFromISR+0x70>
 8007442:	2300      	movs	r3, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	623b      	str	r3, [r7, #32]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800745e:	f001 fefb 	bl	8009258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007462:	f3ef 8211 	mrs	r2, BASEPRI
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61fa      	str	r2, [r7, #28]
 8007478:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800747a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <xQueueGenericSendFromISR+0xbc>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d12f      	bne.n	80074f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074a6:	f000 f911 	bl	80076cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d112      	bne.n	80074da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d016      	beq.n	80074ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	3324      	adds	r3, #36	; 0x24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fed1 	bl	8008268 <xTaskRemoveFromEventList>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e007      	b.n	80074ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074de:	3301      	adds	r3, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	b25a      	sxtb	r2, r3
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074ea:	2301      	movs	r3, #1
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80074ee:	e001      	b.n	80074f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007502:	4618      	mov	r0, r3
 8007504:	3740      	adds	r7, #64	; 0x40
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007518:	2300      	movs	r3, #0
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <xQueueReceive+0x30>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	623b      	str	r3, [r7, #32]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <xQueueReceive+0x3e>
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <xQueueReceive+0x42>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <xQueueReceive+0x44>
 800754e:	2300      	movs	r3, #0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xQueueReceive+0x5e>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	61fb      	str	r3, [r7, #28]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800756a:	f001 f83b 	bl	80085e4 <xTaskGetSchedulerState>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <xQueueReceive+0x6e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <xQueueReceive+0x72>
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <xQueueReceive+0x74>
 800757e:	2300      	movs	r3, #0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <xQueueReceive+0x8e>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	61bb      	str	r3, [r7, #24]
}
 8007596:	bf00      	nop
 8007598:	e7fe      	b.n	8007598 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800759a:	f001 fd7b 	bl	8009094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01f      	beq.n	80075ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ae:	f000 f8f7 	bl	80077a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	1e5a      	subs	r2, r3, #1
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00f      	beq.n	80075e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	3310      	adds	r3, #16
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fe4e 	bl	8008268 <xTaskRemoveFromEventList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075d2:	4b3d      	ldr	r3, [pc, #244]	; (80076c8 <xQueueReceive+0x1bc>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075e2:	f001 fd87 	bl	80090f4 <vPortExitCritical>
				return pdPASS;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e069      	b.n	80076be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f0:	f001 fd80 	bl	80090f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e062      	b.n	80076be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075fe:	f107 0310 	add.w	r3, r7, #16
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fe94 	bl	8008330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007608:	2301      	movs	r3, #1
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800760c:	f001 fd72 	bl	80090f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007610:	f000 fc06 	bl	8007e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007614:	f001 fd3e 	bl	8009094 <vPortEnterCritical>
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800761e:	b25b      	sxtb	r3, r3
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d103      	bne.n	800762e <xQueueReceive+0x122>
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007634:	b25b      	sxtb	r3, r3
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d103      	bne.n	8007644 <xQueueReceive+0x138>
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007644:	f001 fd56 	bl	80090f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007648:	1d3a      	adds	r2, r7, #4
 800764a:	f107 0310 	add.w	r3, r7, #16
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fe83 	bl	800835c <xTaskCheckForTimeOut>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d123      	bne.n	80076a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800765c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800765e:	f000 f917 	bl	8007890 <prvIsQueueEmpty>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	3324      	adds	r3, #36	; 0x24
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fda9 	bl	80081c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007678:	f000 f8b8 	bl	80077ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800767c:	f000 fbde 	bl	8007e3c <xTaskResumeAll>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d189      	bne.n	800759a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007686:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <xQueueReceive+0x1bc>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	e780      	b.n	800759a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769a:	f000 f8a7 	bl	80077ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800769e:	f000 fbcd 	bl	8007e3c <xTaskResumeAll>
 80076a2:	e77a      	b.n	800759a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a6:	f000 f8a1 	bl	80077ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076aa:	f000 fbc7 	bl	8007e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b0:	f000 f8ee 	bl	8007890 <prvIsQueueEmpty>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f43f af6f 	beq.w	800759a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3730      	adds	r7, #48	; 0x30
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10d      	bne.n	8007706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d14d      	bne.n	800778e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 ff92 	bl	8008620 <xTaskPriorityDisinherit>
 80076fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	e043      	b.n	800778e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d119      	bne.n	8007740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6858      	ldr	r0, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	461a      	mov	r2, r3
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	f001 fff2 	bl	8009700 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d32b      	bcc.n	800778e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	e026      	b.n	800778e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68d8      	ldr	r0, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	461a      	mov	r2, r3
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	f001 ffd8 	bl	8009700 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007758:	425b      	negs	r3, r3
 800775a:	441a      	add	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d207      	bcs.n	800777c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	425b      	negs	r3, r3
 8007776:	441a      	add	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d105      	bne.n	800778e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	3b01      	subs	r3, #1
 800778c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007796:	697b      	ldr	r3, [r7, #20]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	441a      	add	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d303      	bcc.n	80077d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68d9      	ldr	r1, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	461a      	mov	r2, r3
 80077de:	6838      	ldr	r0, [r7, #0]
 80077e0:	f001 ff8e 	bl	8009700 <memcpy>
	}
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077f4:	f001 fc4e 	bl	8009094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007800:	e011      	b.n	8007826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d012      	beq.n	8007830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3324      	adds	r3, #36	; 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fd2a 	bl	8008268 <xTaskRemoveFromEventList>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800781a:	f000 fe01 	bl	8008420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	3b01      	subs	r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	dce9      	bgt.n	8007802 <prvUnlockQueue+0x16>
 800782e:	e000      	b.n	8007832 <prvUnlockQueue+0x46>
					break;
 8007830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800783a:	f001 fc5b 	bl	80090f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800783e:	f001 fc29 	bl	8009094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800784a:	e011      	b.n	8007870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d012      	beq.n	800787a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3310      	adds	r3, #16
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fd05 	bl	8008268 <xTaskRemoveFromEventList>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007864:	f000 fddc 	bl	8008420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	3b01      	subs	r3, #1
 800786c:	b2db      	uxtb	r3, r3
 800786e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	dce9      	bgt.n	800784c <prvUnlockQueue+0x60>
 8007878:	e000      	b.n	800787c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800787a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	22ff      	movs	r2, #255	; 0xff
 8007880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007884:	f001 fc36 	bl	80090f4 <vPortExitCritical>
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007898:	f001 fbfc 	bl	8009094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e001      	b.n	80078ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ae:	f001 fc21 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 80078b2:	68fb      	ldr	r3, [r7, #12]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078c4:	f001 fbe6 	bl	8009094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d102      	bne.n	80078da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e001      	b.n	80078de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078de:	f001 fc09 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e014      	b.n	8007926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078fc:	4a0f      	ldr	r2, [pc, #60]	; (800793c <vQueueAddToRegistry+0x50>)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10b      	bne.n	8007920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007908:	490c      	ldr	r1, [pc, #48]	; (800793c <vQueueAddToRegistry+0x50>)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007912:	4a0a      	ldr	r2, [pc, #40]	; (800793c <vQueueAddToRegistry+0x50>)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4413      	add	r3, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800791e:	e006      	b.n	800792e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b07      	cmp	r3, #7
 800792a:	d9e7      	bls.n	80078fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	200024f0 	.word	0x200024f0

08007940 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007950:	f001 fba0 	bl	8009094 <vPortEnterCritical>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800795a:	b25b      	sxtb	r3, r3
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d103      	bne.n	800796a <vQueueWaitForMessageRestricted+0x2a>
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007970:	b25b      	sxtb	r3, r3
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d103      	bne.n	8007980 <vQueueWaitForMessageRestricted+0x40>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007980:	f001 fbb8 	bl	80090f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	d106      	bne.n	800799a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	3324      	adds	r3, #36	; 0x24
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fc3b 	bl	8008210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800799a:	6978      	ldr	r0, [r7, #20]
 800799c:	f7ff ff26 	bl	80077ec <prvUnlockQueue>
	}
 80079a0:	bf00      	nop
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08e      	sub	sp, #56	; 0x38
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	623b      	str	r3, [r7, #32]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <xTaskCreateStatic+0x46>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	61fb      	str	r3, [r7, #28]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079ee:	235c      	movs	r3, #92	; 0x5c
 80079f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b5c      	cmp	r3, #92	; 0x5c
 80079f6:	d00a      	beq.n	8007a0e <xTaskCreateStatic+0x66>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	61bb      	str	r3, [r7, #24]
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01e      	beq.n	8007a54 <xTaskCreateStatic+0xac>
 8007a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01b      	beq.n	8007a54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	9302      	str	r3, [sp, #8]
 8007a36:	f107 0314 	add.w	r3, r7, #20
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f850 	bl	8007aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a4e:	f000 f8dd 	bl	8007c0c <prvAddNewTaskToReadyList>
 8007a52:	e001      	b.n	8007a58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a58:	697b      	ldr	r3, [r7, #20]
	}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3728      	adds	r7, #40	; 0x28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b08c      	sub	sp, #48	; 0x30
 8007a66:	af04      	add	r7, sp, #16
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 fc2e 	bl	80092d8 <pvPortMalloc>
 8007a7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00e      	beq.n	8007aa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a84:	205c      	movs	r0, #92	; 0x5c
 8007a86:	f001 fc27 	bl	80092d8 <pvPortMalloc>
 8007a8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30
 8007a98:	e005      	b.n	8007aa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a9a:	6978      	ldr	r0, [r7, #20]
 8007a9c:	f001 fce8 	bl	8009470 <vPortFree>
 8007aa0:	e001      	b.n	8007aa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d017      	beq.n	8007adc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ab4:	88fa      	ldrh	r2, [r7, #6]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9303      	str	r3, [sp, #12]
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	9302      	str	r3, [sp, #8]
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f80e 	bl	8007aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ad0:	69f8      	ldr	r0, [r7, #28]
 8007ad2:	f000 f89b 	bl	8007c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	e002      	b.n	8007ae2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	461a      	mov	r2, r3
 8007b04:	21a5      	movs	r1, #165	; 0xa5
 8007b06:	f001 fe09 	bl	800971c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b14:	3b01      	subs	r3, #1
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f023 0307 	bic.w	r3, r3, #7
 8007b22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	617b      	str	r3, [r7, #20]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01f      	beq.n	8007b8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61fb      	str	r3, [r7, #28]
 8007b4e:	e012      	b.n	8007b76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	7819      	ldrb	r1, [r3, #0]
 8007b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3334      	adds	r3, #52	; 0x34
 8007b60:	460a      	mov	r2, r1
 8007b62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d006      	beq.n	8007b7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	2b0f      	cmp	r3, #15
 8007b7a:	d9e9      	bls.n	8007b50 <prvInitialiseNewTask+0x64>
 8007b7c:	e000      	b.n	8007b80 <prvInitialiseNewTask+0x94>
			{
				break;
 8007b7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b88:	e003      	b.n	8007b92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	2b37      	cmp	r3, #55	; 0x37
 8007b96:	d901      	bls.n	8007b9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b98:	2337      	movs	r3, #55	; 0x37
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	2200      	movs	r2, #0
 8007bac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff f978 	bl	8006ea8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	3318      	adds	r3, #24
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff f973 	bl	8006ea8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	2200      	movs	r2, #0
 8007bdc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	68f9      	ldr	r1, [r7, #12]
 8007bea:	69b8      	ldr	r0, [r7, #24]
 8007bec:	f001 f928 	bl	8008e40 <pxPortInitialiseStack>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c02:	bf00      	nop
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c14:	f001 fa3e 	bl	8009094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c18:	4b2d      	ldr	r3, [pc, #180]	; (8007cd0 <prvAddNewTaskToReadyList+0xc4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	4a2c      	ldr	r2, [pc, #176]	; (8007cd0 <prvAddNewTaskToReadyList+0xc4>)
 8007c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c22:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <prvAddNewTaskToReadyList+0xc8>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c2a:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <prvAddNewTaskToReadyList+0xc8>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c30:	4b27      	ldr	r3, [pc, #156]	; (8007cd0 <prvAddNewTaskToReadyList+0xc4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d110      	bne.n	8007c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c38:	f000 fc16 	bl	8008468 <prvInitialiseTaskLists>
 8007c3c:	e00d      	b.n	8007c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c3e:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <prvAddNewTaskToReadyList+0xcc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c46:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <prvAddNewTaskToReadyList+0xc8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d802      	bhi.n	8007c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c54:	4a1f      	ldr	r2, [pc, #124]	; (8007cd4 <prvAddNewTaskToReadyList+0xc8>)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c5a:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <prvAddNewTaskToReadyList+0xd0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	4a1e      	ldr	r2, [pc, #120]	; (8007cdc <prvAddNewTaskToReadyList+0xd0>)
 8007c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c64:	4b1d      	ldr	r3, [pc, #116]	; (8007cdc <prvAddNewTaskToReadyList+0xd0>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c70:	4b1b      	ldr	r3, [pc, #108]	; (8007ce0 <prvAddNewTaskToReadyList+0xd4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d903      	bls.n	8007c80 <prvAddNewTaskToReadyList+0x74>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <prvAddNewTaskToReadyList+0xd4>)
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4a15      	ldr	r2, [pc, #84]	; (8007ce4 <prvAddNewTaskToReadyList+0xd8>)
 8007c8e:	441a      	add	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3304      	adds	r3, #4
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7ff f913 	bl	8006ec2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c9c:	f001 fa2a 	bl	80090f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ca0:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <prvAddNewTaskToReadyList+0xcc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00e      	beq.n	8007cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <prvAddNewTaskToReadyList+0xc8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d207      	bcs.n	8007cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <prvAddNewTaskToReadyList+0xdc>)
 8007cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20002a04 	.word	0x20002a04
 8007cd4:	20002530 	.word	0x20002530
 8007cd8:	20002a10 	.word	0x20002a10
 8007cdc:	20002a20 	.word	0x20002a20
 8007ce0:	20002a0c 	.word	0x20002a0c
 8007ce4:	20002534 	.word	0x20002534
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d017      	beq.n	8007d2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <vTaskDelay+0x60>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <vTaskDelay+0x30>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d1c:	f000 f880 	bl	8007e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d20:	2100      	movs	r1, #0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fcea 	bl	80086fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d28:	f000 f888 	bl	8007e3c <xTaskResumeAll>
 8007d2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d107      	bne.n	8007d44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <vTaskDelay+0x64>)
 8007d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20002a2c 	.word	0x20002a2c
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08a      	sub	sp, #40	; 0x28
 8007d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d62:	463a      	mov	r2, r7
 8007d64:	1d39      	adds	r1, r7, #4
 8007d66:	f107 0308 	add.w	r3, r7, #8
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff f848 	bl	8006e00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	9202      	str	r2, [sp, #8]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	460a      	mov	r2, r1
 8007d82:	4921      	ldr	r1, [pc, #132]	; (8007e08 <vTaskStartScheduler+0xb4>)
 8007d84:	4821      	ldr	r0, [pc, #132]	; (8007e0c <vTaskStartScheduler+0xb8>)
 8007d86:	f7ff fe0f 	bl	80079a8 <xTaskCreateStatic>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4a20      	ldr	r2, [pc, #128]	; (8007e10 <vTaskStartScheduler+0xbc>)
 8007d8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d90:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <vTaskStartScheduler+0xbc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	e001      	b.n	8007da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d102      	bne.n	8007dae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007da8:	f000 fcfc 	bl	80087a4 <xTimerCreateTimerTask>
 8007dac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d116      	bne.n	8007de2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	613b      	str	r3, [r7, #16]
}
 8007dc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc8:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <vTaskStartScheduler+0xc0>)
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295
 8007dce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <vTaskStartScheduler+0xc4>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd6:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <vTaskStartScheduler+0xc8>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ddc:	f001 f8b8 	bl	8008f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007de0:	e00e      	b.n	8007e00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d10a      	bne.n	8007e00 <vTaskStartScheduler+0xac>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	60fb      	str	r3, [r7, #12]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <vTaskStartScheduler+0xaa>
}
 8007e00:	bf00      	nop
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	0800a07c 	.word	0x0800a07c
 8007e0c:	08008439 	.word	0x08008439
 8007e10:	20002a28 	.word	0x20002a28
 8007e14:	20002a24 	.word	0x20002a24
 8007e18:	20002a10 	.word	0x20002a10
 8007e1c:	20002a08 	.word	0x20002a08

08007e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e24:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <vTaskSuspendAll+0x18>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	4a03      	ldr	r2, [pc, #12]	; (8007e38 <vTaskSuspendAll+0x18>)
 8007e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	20002a2c 	.word	0x20002a2c

08007e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e4a:	4b42      	ldr	r3, [pc, #264]	; (8007f54 <xTaskResumeAll+0x118>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <xTaskResumeAll+0x2c>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	603b      	str	r3, [r7, #0]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e68:	f001 f914 	bl	8009094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e6c:	4b39      	ldr	r3, [pc, #228]	; (8007f54 <xTaskResumeAll+0x118>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	4a38      	ldr	r2, [pc, #224]	; (8007f54 <xTaskResumeAll+0x118>)
 8007e74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e76:	4b37      	ldr	r3, [pc, #220]	; (8007f54 <xTaskResumeAll+0x118>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d162      	bne.n	8007f44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e7e:	4b36      	ldr	r3, [pc, #216]	; (8007f58 <xTaskResumeAll+0x11c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d05e      	beq.n	8007f44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e86:	e02f      	b.n	8007ee8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e88:	4b34      	ldr	r3, [pc, #208]	; (8007f5c <xTaskResumeAll+0x120>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3318      	adds	r3, #24
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff f871 	bl	8006f7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f86c 	bl	8006f7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea8:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <xTaskResumeAll+0x124>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d903      	bls.n	8007eb8 <xTaskResumeAll+0x7c>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	4a2a      	ldr	r2, [pc, #168]	; (8007f60 <xTaskResumeAll+0x124>)
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4a27      	ldr	r2, [pc, #156]	; (8007f64 <xTaskResumeAll+0x128>)
 8007ec6:	441a      	add	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f7fe fff7 	bl	8006ec2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed8:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <xTaskResumeAll+0x12c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d302      	bcc.n	8007ee8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ee2:	4b22      	ldr	r3, [pc, #136]	; (8007f6c <xTaskResumeAll+0x130>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <xTaskResumeAll+0x120>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1cb      	bne.n	8007e88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ef6:	f000 fb55 	bl	80085a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007efa:	4b1d      	ldr	r3, [pc, #116]	; (8007f70 <xTaskResumeAll+0x134>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d010      	beq.n	8007f28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f06:	f000 f847 	bl	8007f98 <xTaskIncrementTick>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f10:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <xTaskResumeAll+0x130>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f1      	bne.n	8007f06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <xTaskResumeAll+0x134>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f28:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <xTaskResumeAll+0x130>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <xTaskResumeAll+0x138>)
 8007f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f44:	f001 f8d6 	bl	80090f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f48:	68bb      	ldr	r3, [r7, #8]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20002a2c 	.word	0x20002a2c
 8007f58:	20002a04 	.word	0x20002a04
 8007f5c:	200029c4 	.word	0x200029c4
 8007f60:	20002a0c 	.word	0x20002a0c
 8007f64:	20002534 	.word	0x20002534
 8007f68:	20002530 	.word	0x20002530
 8007f6c:	20002a18 	.word	0x20002a18
 8007f70:	20002a14 	.word	0x20002a14
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <xTaskGetTickCount+0x1c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f84:	687b      	ldr	r3, [r7, #4]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20002a08 	.word	0x20002a08

08007f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa2:	4b4f      	ldr	r3, [pc, #316]	; (80080e0 <xTaskIncrementTick+0x148>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f040 808f 	bne.w	80080ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fac:	4b4d      	ldr	r3, [pc, #308]	; (80080e4 <xTaskIncrementTick+0x14c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fb4:	4a4b      	ldr	r2, [pc, #300]	; (80080e4 <xTaskIncrementTick+0x14c>)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d120      	bne.n	8008002 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fc0:	4b49      	ldr	r3, [pc, #292]	; (80080e8 <xTaskIncrementTick+0x150>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	603b      	str	r3, [r7, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xTaskIncrementTick+0x46>
 8007fe0:	4b41      	ldr	r3, [pc, #260]	; (80080e8 <xTaskIncrementTick+0x150>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	4b41      	ldr	r3, [pc, #260]	; (80080ec <xTaskIncrementTick+0x154>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a3f      	ldr	r2, [pc, #252]	; (80080e8 <xTaskIncrementTick+0x150>)
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	4a3f      	ldr	r2, [pc, #252]	; (80080ec <xTaskIncrementTick+0x154>)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	4b3e      	ldr	r3, [pc, #248]	; (80080f0 <xTaskIncrementTick+0x158>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	4a3d      	ldr	r2, [pc, #244]	; (80080f0 <xTaskIncrementTick+0x158>)
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	f000 fad1 	bl	80085a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008002:	4b3c      	ldr	r3, [pc, #240]	; (80080f4 <xTaskIncrementTick+0x15c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	d349      	bcc.n	80080a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800800c:	4b36      	ldr	r3, [pc, #216]	; (80080e8 <xTaskIncrementTick+0x150>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008016:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <xTaskIncrementTick+0x15c>)
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	601a      	str	r2, [r3, #0]
					break;
 800801e:	e03f      	b.n	80080a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008020:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <xTaskIncrementTick+0x150>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	429a      	cmp	r2, r3
 8008036:	d203      	bcs.n	8008040 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008038:	4a2e      	ldr	r2, [pc, #184]	; (80080f4 <xTaskIncrementTick+0x15c>)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800803e:	e02f      	b.n	80080a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	3304      	adds	r3, #4
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe ff99 	bl	8006f7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	3318      	adds	r3, #24
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe ff90 	bl	8006f7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008060:	4b25      	ldr	r3, [pc, #148]	; (80080f8 <xTaskIncrementTick+0x160>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d903      	bls.n	8008070 <xTaskIncrementTick+0xd8>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	4a22      	ldr	r2, [pc, #136]	; (80080f8 <xTaskIncrementTick+0x160>)
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4a1f      	ldr	r2, [pc, #124]	; (80080fc <xTaskIncrementTick+0x164>)
 800807e:	441a      	add	r2, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f7fe ff1b 	bl	8006ec2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4b1b      	ldr	r3, [pc, #108]	; (8008100 <xTaskIncrementTick+0x168>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008096:	429a      	cmp	r2, r3
 8008098:	d3b8      	bcc.n	800800c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800809a:	2301      	movs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800809e:	e7b5      	b.n	800800c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080a0:	4b17      	ldr	r3, [pc, #92]	; (8008100 <xTaskIncrementTick+0x168>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	4915      	ldr	r1, [pc, #84]	; (80080fc <xTaskIncrementTick+0x164>)
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d901      	bls.n	80080bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80080b8:	2301      	movs	r3, #1
 80080ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080bc:	4b11      	ldr	r3, [pc, #68]	; (8008104 <xTaskIncrementTick+0x16c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	e004      	b.n	80080d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080ca:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <xTaskIncrementTick+0x170>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3301      	adds	r3, #1
 80080d0:	4a0d      	ldr	r2, [pc, #52]	; (8008108 <xTaskIncrementTick+0x170>)
 80080d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080d4:	697b      	ldr	r3, [r7, #20]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20002a2c 	.word	0x20002a2c
 80080e4:	20002a08 	.word	0x20002a08
 80080e8:	200029bc 	.word	0x200029bc
 80080ec:	200029c0 	.word	0x200029c0
 80080f0:	20002a1c 	.word	0x20002a1c
 80080f4:	20002a24 	.word	0x20002a24
 80080f8:	20002a0c 	.word	0x20002a0c
 80080fc:	20002534 	.word	0x20002534
 8008100:	20002530 	.word	0x20002530
 8008104:	20002a18 	.word	0x20002a18
 8008108:	20002a14 	.word	0x20002a14

0800810c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008112:	4b28      	ldr	r3, [pc, #160]	; (80081b4 <vTaskSwitchContext+0xa8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800811a:	4b27      	ldr	r3, [pc, #156]	; (80081b8 <vTaskSwitchContext+0xac>)
 800811c:	2201      	movs	r2, #1
 800811e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008120:	e041      	b.n	80081a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008122:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <vTaskSwitchContext+0xac>)
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008128:	4b24      	ldr	r3, [pc, #144]	; (80081bc <vTaskSwitchContext+0xb0>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	e010      	b.n	8008152 <vTaskSwitchContext+0x46>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <vTaskSwitchContext+0x40>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	607b      	str	r3, [r7, #4]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <vTaskSwitchContext+0x3e>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3b01      	subs	r3, #1
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	491b      	ldr	r1, [pc, #108]	; (80081c0 <vTaskSwitchContext+0xb4>)
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0e4      	beq.n	8008130 <vTaskSwitchContext+0x24>
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <vTaskSwitchContext+0xb4>)
 8008172:	4413      	add	r3, r2
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	605a      	str	r2, [r3, #4]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	3308      	adds	r3, #8
 8008188:	429a      	cmp	r2, r3
 800818a:	d104      	bne.n	8008196 <vTaskSwitchContext+0x8a>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	4a09      	ldr	r2, [pc, #36]	; (80081c4 <vTaskSwitchContext+0xb8>)
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	4a06      	ldr	r2, [pc, #24]	; (80081bc <vTaskSwitchContext+0xb0>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6013      	str	r3, [r2, #0]
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20002a2c 	.word	0x20002a2c
 80081b8:	20002a18 	.word	0x20002a18
 80081bc:	20002a0c 	.word	0x20002a0c
 80081c0:	20002534 	.word	0x20002534
 80081c4:	20002530 	.word	0x20002530

080081c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	60fb      	str	r3, [r7, #12]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081ee:	4b07      	ldr	r3, [pc, #28]	; (800820c <vTaskPlaceOnEventList+0x44>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3318      	adds	r3, #24
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fe fe87 	bl	8006f0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081fc:	2101      	movs	r1, #1
 80081fe:	6838      	ldr	r0, [r7, #0]
 8008200:	f000 fa7c 	bl	80086fc <prvAddCurrentTaskToDelayedList>
}
 8008204:	bf00      	nop
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20002530 	.word	0x20002530

08008210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	617b      	str	r3, [r7, #20]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008238:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <vTaskPlaceOnEventListRestricted+0x54>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3318      	adds	r3, #24
 800823e:	4619      	mov	r1, r3
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f7fe fe3e 	bl	8006ec2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800824c:	f04f 33ff 	mov.w	r3, #4294967295
 8008250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	68b8      	ldr	r0, [r7, #8]
 8008256:	f000 fa51 	bl	80086fc <prvAddCurrentTaskToDelayedList>
	}
 800825a:	bf00      	nop
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20002530 	.word	0x20002530

08008268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	60fb      	str	r3, [r7, #12]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	3318      	adds	r3, #24
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fe6f 	bl	8006f7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800829e:	4b1e      	ldr	r3, [pc, #120]	; (8008318 <xTaskRemoveFromEventList+0xb0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d11d      	bne.n	80082e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fe66 	bl	8006f7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b4:	4b19      	ldr	r3, [pc, #100]	; (800831c <xTaskRemoveFromEventList+0xb4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d903      	bls.n	80082c4 <xTaskRemoveFromEventList+0x5c>
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <xTaskRemoveFromEventList+0xb4>)
 80082c2:	6013      	str	r3, [r2, #0]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4a13      	ldr	r2, [pc, #76]	; (8008320 <xTaskRemoveFromEventList+0xb8>)
 80082d2:	441a      	add	r2, r3
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f7fe fdf1 	bl	8006ec2 <vListInsertEnd>
 80082e0:	e005      	b.n	80082ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	3318      	adds	r3, #24
 80082e6:	4619      	mov	r1, r3
 80082e8:	480e      	ldr	r0, [pc, #56]	; (8008324 <xTaskRemoveFromEventList+0xbc>)
 80082ea:	f7fe fdea 	bl	8006ec2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <xTaskRemoveFromEventList+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d905      	bls.n	8008308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082fc:	2301      	movs	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008300:	4b0a      	ldr	r3, [pc, #40]	; (800832c <xTaskRemoveFromEventList+0xc4>)
 8008302:	2201      	movs	r2, #1
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	e001      	b.n	800830c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800830c:	697b      	ldr	r3, [r7, #20]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20002a2c 	.word	0x20002a2c
 800831c:	20002a0c 	.word	0x20002a0c
 8008320:	20002534 	.word	0x20002534
 8008324:	200029c4 	.word	0x200029c4
 8008328:	20002530 	.word	0x20002530
 800832c:	20002a18 	.word	0x20002a18

08008330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008338:	4b06      	ldr	r3, [pc, #24]	; (8008354 <vTaskInternalSetTimeOutState+0x24>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <vTaskInternalSetTimeOutState+0x28>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	605a      	str	r2, [r3, #4]
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	20002a1c 	.word	0x20002a1c
 8008358:	20002a08 	.word	0x20002a08

0800835c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	613b      	str	r3, [r7, #16]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	60fb      	str	r3, [r7, #12]
}
 800839a:	bf00      	nop
 800839c:	e7fe      	b.n	800839c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800839e:	f000 fe79 	bl	8009094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083a2:	4b1d      	ldr	r3, [pc, #116]	; (8008418 <xTaskCheckForTimeOut+0xbc>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d102      	bne.n	80083c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083bc:	2300      	movs	r3, #0
 80083be:	61fb      	str	r3, [r7, #28]
 80083c0:	e023      	b.n	800840a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	4b15      	ldr	r3, [pc, #84]	; (800841c <xTaskCheckForTimeOut+0xc0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d007      	beq.n	80083de <xTaskCheckForTimeOut+0x82>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d302      	bcc.n	80083de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	e015      	b.n	800840a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d20b      	bcs.n	8008400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff ff9b 	bl	8008330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083fa:	2300      	movs	r3, #0
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	e004      	b.n	800840a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008406:	2301      	movs	r3, #1
 8008408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800840a:	f000 fe73 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 800840e:	69fb      	ldr	r3, [r7, #28]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3720      	adds	r7, #32
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20002a08 	.word	0x20002a08
 800841c:	20002a1c 	.word	0x20002a1c

08008420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008424:	4b03      	ldr	r3, [pc, #12]	; (8008434 <vTaskMissedYield+0x14>)
 8008426:	2201      	movs	r2, #1
 8008428:	601a      	str	r2, [r3, #0]
}
 800842a:	bf00      	nop
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20002a18 	.word	0x20002a18

08008438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008440:	f000 f852 	bl	80084e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <prvIdleTask+0x28>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d9f9      	bls.n	8008440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <prvIdleTask+0x2c>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800845c:	e7f0      	b.n	8008440 <prvIdleTask+0x8>
 800845e:	bf00      	nop
 8008460:	20002534 	.word	0x20002534
 8008464:	e000ed04 	.word	0xe000ed04

08008468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800846e:	2300      	movs	r3, #0
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	e00c      	b.n	800848e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4a12      	ldr	r2, [pc, #72]	; (80084c8 <prvInitialiseTaskLists+0x60>)
 8008480:	4413      	add	r3, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fcf0 	bl	8006e68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3301      	adds	r3, #1
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b37      	cmp	r3, #55	; 0x37
 8008492:	d9ef      	bls.n	8008474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008494:	480d      	ldr	r0, [pc, #52]	; (80084cc <prvInitialiseTaskLists+0x64>)
 8008496:	f7fe fce7 	bl	8006e68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800849a:	480d      	ldr	r0, [pc, #52]	; (80084d0 <prvInitialiseTaskLists+0x68>)
 800849c:	f7fe fce4 	bl	8006e68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084a0:	480c      	ldr	r0, [pc, #48]	; (80084d4 <prvInitialiseTaskLists+0x6c>)
 80084a2:	f7fe fce1 	bl	8006e68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084a6:	480c      	ldr	r0, [pc, #48]	; (80084d8 <prvInitialiseTaskLists+0x70>)
 80084a8:	f7fe fcde 	bl	8006e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084ac:	480b      	ldr	r0, [pc, #44]	; (80084dc <prvInitialiseTaskLists+0x74>)
 80084ae:	f7fe fcdb 	bl	8006e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <prvInitialiseTaskLists+0x78>)
 80084b4:	4a05      	ldr	r2, [pc, #20]	; (80084cc <prvInitialiseTaskLists+0x64>)
 80084b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084b8:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <prvInitialiseTaskLists+0x7c>)
 80084ba:	4a05      	ldr	r2, [pc, #20]	; (80084d0 <prvInitialiseTaskLists+0x68>)
 80084bc:	601a      	str	r2, [r3, #0]
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20002534 	.word	0x20002534
 80084cc:	20002994 	.word	0x20002994
 80084d0:	200029a8 	.word	0x200029a8
 80084d4:	200029c4 	.word	0x200029c4
 80084d8:	200029d8 	.word	0x200029d8
 80084dc:	200029f0 	.word	0x200029f0
 80084e0:	200029bc 	.word	0x200029bc
 80084e4:	200029c0 	.word	0x200029c0

080084e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084ee:	e019      	b.n	8008524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084f0:	f000 fdd0 	bl	8009094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f4:	4b10      	ldr	r3, [pc, #64]	; (8008538 <prvCheckTasksWaitingTermination+0x50>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3304      	adds	r3, #4
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fd3b 	bl	8006f7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008506:	4b0d      	ldr	r3, [pc, #52]	; (800853c <prvCheckTasksWaitingTermination+0x54>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3b01      	subs	r3, #1
 800850c:	4a0b      	ldr	r2, [pc, #44]	; (800853c <prvCheckTasksWaitingTermination+0x54>)
 800850e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <prvCheckTasksWaitingTermination+0x58>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3b01      	subs	r3, #1
 8008516:	4a0a      	ldr	r2, [pc, #40]	; (8008540 <prvCheckTasksWaitingTermination+0x58>)
 8008518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800851a:	f000 fdeb 	bl	80090f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f810 	bl	8008544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008524:	4b06      	ldr	r3, [pc, #24]	; (8008540 <prvCheckTasksWaitingTermination+0x58>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e1      	bne.n	80084f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200029d8 	.word	0x200029d8
 800853c:	20002a04 	.word	0x20002a04
 8008540:	200029ec 	.word	0x200029ec

08008544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008552:	2b00      	cmp	r3, #0
 8008554:	d108      	bne.n	8008568 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	4618      	mov	r0, r3
 800855c:	f000 ff88 	bl	8009470 <vPortFree>
				vPortFree( pxTCB );
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 ff85 	bl	8009470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008566:	e018      	b.n	800859a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800856e:	2b01      	cmp	r3, #1
 8008570:	d103      	bne.n	800857a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 ff7c 	bl	8009470 <vPortFree>
	}
 8008578:	e00f      	b.n	800859a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008580:	2b02      	cmp	r3, #2
 8008582:	d00a      	beq.n	800859a <prvDeleteTCB+0x56>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	60fb      	str	r3, [r7, #12]
}
 8008596:	bf00      	nop
 8008598:	e7fe      	b.n	8008598 <prvDeleteTCB+0x54>
	}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085aa:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <prvResetNextTaskUnblockTime+0x38>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <prvResetNextTaskUnblockTime+0x3c>)
 80085b6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085bc:	e008      	b.n	80085d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <prvResetNextTaskUnblockTime+0x38>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	4a04      	ldr	r2, [pc, #16]	; (80085e0 <prvResetNextTaskUnblockTime+0x3c>)
 80085ce:	6013      	str	r3, [r2, #0]
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	200029bc 	.word	0x200029bc
 80085e0:	20002a24 	.word	0x20002a24

080085e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <xTaskGetSchedulerState+0x34>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085f2:	2301      	movs	r3, #1
 80085f4:	607b      	str	r3, [r7, #4]
 80085f6:	e008      	b.n	800860a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <xTaskGetSchedulerState+0x38>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008600:	2302      	movs	r3, #2
 8008602:	607b      	str	r3, [r7, #4]
 8008604:	e001      	b.n	800860a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008606:	2300      	movs	r3, #0
 8008608:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800860a:	687b      	ldr	r3, [r7, #4]
	}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	20002a10 	.word	0x20002a10
 800861c:	20002a2c 	.word	0x20002a2c

08008620 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d056      	beq.n	80086e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008636:	4b2e      	ldr	r3, [pc, #184]	; (80086f0 <xTaskPriorityDisinherit+0xd0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	429a      	cmp	r2, r3
 800863e:	d00a      	beq.n	8008656 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	60bb      	str	r3, [r7, #8]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008678:	1e5a      	subs	r2, r3, #1
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008686:	429a      	cmp	r2, r3
 8008688:	d02c      	beq.n	80086e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868e:	2b00      	cmp	r3, #0
 8008690:	d128      	bne.n	80086e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	3304      	adds	r3, #4
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fc70 	bl	8006f7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <xTaskPriorityDisinherit+0xd4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d903      	bls.n	80086c4 <xTaskPriorityDisinherit+0xa4>
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	4a0c      	ldr	r2, [pc, #48]	; (80086f4 <xTaskPriorityDisinherit+0xd4>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <xTaskPriorityDisinherit+0xd8>)
 80086d2:	441a      	add	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fe fbf1 	bl	8006ec2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086e0:	2301      	movs	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086e4:	697b      	ldr	r3, [r7, #20]
	}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20002530 	.word	0x20002530
 80086f4:	20002a0c 	.word	0x20002a0c
 80086f8:	20002534 	.word	0x20002534

080086fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008706:	4b21      	ldr	r3, [pc, #132]	; (800878c <prvAddCurrentTaskToDelayedList+0x90>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800870c:	4b20      	ldr	r3, [pc, #128]	; (8008790 <prvAddCurrentTaskToDelayedList+0x94>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3304      	adds	r3, #4
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fc32 	bl	8006f7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871e:	d10a      	bne.n	8008736 <prvAddCurrentTaskToDelayedList+0x3a>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008726:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <prvAddCurrentTaskToDelayedList+0x94>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3304      	adds	r3, #4
 800872c:	4619      	mov	r1, r3
 800872e:	4819      	ldr	r0, [pc, #100]	; (8008794 <prvAddCurrentTaskToDelayedList+0x98>)
 8008730:	f7fe fbc7 	bl	8006ec2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008734:	e026      	b.n	8008784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4413      	add	r3, r2
 800873c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800873e:	4b14      	ldr	r3, [pc, #80]	; (8008790 <prvAddCurrentTaskToDelayedList+0x94>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	429a      	cmp	r2, r3
 800874c:	d209      	bcs.n	8008762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800874e:	4b12      	ldr	r3, [pc, #72]	; (8008798 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <prvAddCurrentTaskToDelayedList+0x94>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3304      	adds	r3, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7fe fbd5 	bl	8006f0a <vListInsert>
}
 8008760:	e010      	b.n	8008784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008762:	4b0e      	ldr	r3, [pc, #56]	; (800879c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <prvAddCurrentTaskToDelayedList+0x94>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3304      	adds	r3, #4
 800876c:	4619      	mov	r1, r3
 800876e:	4610      	mov	r0, r2
 8008770:	f7fe fbcb 	bl	8006f0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008774:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	429a      	cmp	r2, r3
 800877c:	d202      	bcs.n	8008784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6013      	str	r3, [r2, #0]
}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20002a08 	.word	0x20002a08
 8008790:	20002530 	.word	0x20002530
 8008794:	200029f0 	.word	0x200029f0
 8008798:	200029c0 	.word	0x200029c0
 800879c:	200029bc 	.word	0x200029bc
 80087a0:	20002a24 	.word	0x20002a24

080087a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087ae:	f000 fb07 	bl	8008dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087b2:	4b1c      	ldr	r3, [pc, #112]	; (8008824 <xTimerCreateTimerTask+0x80>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d021      	beq.n	80087fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087c2:	1d3a      	adds	r2, r7, #4
 80087c4:	f107 0108 	add.w	r1, r7, #8
 80087c8:	f107 030c 	add.w	r3, r7, #12
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fb31 	bl	8006e34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	9202      	str	r2, [sp, #8]
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	2302      	movs	r3, #2
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	2300      	movs	r3, #0
 80087e2:	460a      	mov	r2, r1
 80087e4:	4910      	ldr	r1, [pc, #64]	; (8008828 <xTimerCreateTimerTask+0x84>)
 80087e6:	4811      	ldr	r0, [pc, #68]	; (800882c <xTimerCreateTimerTask+0x88>)
 80087e8:	f7ff f8de 	bl	80079a8 <xTaskCreateStatic>
 80087ec:	4603      	mov	r3, r0
 80087ee:	4a10      	ldr	r2, [pc, #64]	; (8008830 <xTimerCreateTimerTask+0x8c>)
 80087f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <xTimerCreateTimerTask+0x8c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087fa:	2301      	movs	r3, #1
 80087fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	613b      	str	r3, [r7, #16]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800881a:	697b      	ldr	r3, [r7, #20]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20002a60 	.word	0x20002a60
 8008828:	0800a084 	.word	0x0800a084
 800882c:	08008969 	.word	0x08008969
 8008830:	20002a64 	.word	0x20002a64

08008834 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008842:	2300      	movs	r3, #0
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xTimerGenericCommand+0x2e>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	623b      	str	r3, [r7, #32]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008862:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <xTimerGenericCommand+0x98>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d02a      	beq.n	80088c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b05      	cmp	r3, #5
 800887a:	dc18      	bgt.n	80088ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800887c:	f7ff feb2 	bl	80085e4 <xTaskGetSchedulerState>
 8008880:	4603      	mov	r3, r0
 8008882:	2b02      	cmp	r3, #2
 8008884:	d109      	bne.n	800889a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008886:	4b11      	ldr	r3, [pc, #68]	; (80088cc <xTimerGenericCommand+0x98>)
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	f107 0110 	add.w	r1, r7, #16
 800888e:	2300      	movs	r3, #0
 8008890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008892:	f7fe fca1 	bl	80071d8 <xQueueGenericSend>
 8008896:	6278      	str	r0, [r7, #36]	; 0x24
 8008898:	e012      	b.n	80088c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <xTimerGenericCommand+0x98>)
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f107 0110 	add.w	r1, r7, #16
 80088a2:	2300      	movs	r3, #0
 80088a4:	2200      	movs	r2, #0
 80088a6:	f7fe fc97 	bl	80071d8 <xQueueGenericSend>
 80088aa:	6278      	str	r0, [r7, #36]	; 0x24
 80088ac:	e008      	b.n	80088c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088ae:	4b07      	ldr	r3, [pc, #28]	; (80088cc <xTimerGenericCommand+0x98>)
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	f107 0110 	add.w	r1, r7, #16
 80088b6:	2300      	movs	r3, #0
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	f7fe fd8b 	bl	80073d4 <xQueueGenericSendFromISR>
 80088be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3728      	adds	r7, #40	; 0x28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20002a60 	.word	0x20002a60

080088d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088da:	4b22      	ldr	r3, [pc, #136]	; (8008964 <prvProcessExpiredTimer+0x94>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fb47 	bl	8006f7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d022      	beq.n	8008942 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	18d1      	adds	r1, r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	6978      	ldr	r0, [r7, #20]
 800890a:	f000 f8d1 	bl	8008ab0 <prvInsertTimerInActiveList>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01f      	beq.n	8008954 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008914:	2300      	movs	r3, #0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	2300      	movs	r3, #0
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	2100      	movs	r1, #0
 800891e:	6978      	ldr	r0, [r7, #20]
 8008920:	f7ff ff88 	bl	8008834 <xTimerGenericCommand>
 8008924:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d113      	bne.n	8008954 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	60fb      	str	r3, [r7, #12]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008948:	f023 0301 	bic.w	r3, r3, #1
 800894c:	b2da      	uxtb	r2, r3
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	6978      	ldr	r0, [r7, #20]
 800895a:	4798      	blx	r3
}
 800895c:	bf00      	nop
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20002a58 	.word	0x20002a58

08008968 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008970:	f107 0308 	add.w	r3, r7, #8
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f857 	bl	8008a28 <prvGetNextExpireTime>
 800897a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4619      	mov	r1, r3
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f803 	bl	800898c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008986:	f000 f8d5 	bl	8008b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800898a:	e7f1      	b.n	8008970 <prvTimerTask+0x8>

0800898c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008996:	f7ff fa43 	bl	8007e20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800899a:	f107 0308 	add.w	r3, r7, #8
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 f866 	bl	8008a70 <prvSampleTimeNow>
 80089a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d130      	bne.n	8008a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <prvProcessTimerOrBlockTask+0x3c>
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d806      	bhi.n	80089c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089ba:	f7ff fa3f 	bl	8007e3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff ff85 	bl	80088d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089c6:	e024      	b.n	8008a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d008      	beq.n	80089e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <prvProcessTimerOrBlockTask+0x90>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <prvProcessTimerOrBlockTask+0x50>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <prvProcessTimerOrBlockTask+0x52>
 80089dc:	2300      	movs	r3, #0
 80089de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089e0:	4b0f      	ldr	r3, [pc, #60]	; (8008a20 <prvProcessTimerOrBlockTask+0x94>)
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4619      	mov	r1, r3
 80089ee:	f7fe ffa7 	bl	8007940 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089f2:	f7ff fa23 	bl	8007e3c <xTaskResumeAll>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <prvProcessTimerOrBlockTask+0x98>)
 80089fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	f3bf 8f6f 	isb	sy
}
 8008a0c:	e001      	b.n	8008a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a0e:	f7ff fa15 	bl	8007e3c <xTaskResumeAll>
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20002a5c 	.word	0x20002a5c
 8008a20:	20002a60 	.word	0x20002a60
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a30:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <prvGetNextExpireTime+0x44>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <prvGetNextExpireTime+0x16>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	e000      	b.n	8008a40 <prvGetNextExpireTime+0x18>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a4c:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <prvGetNextExpireTime+0x44>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e001      	b.n	8008a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20002a58 	.word	0x20002a58

08008a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a78:	f7ff fa7e 	bl	8007f78 <xTaskGetTickCount>
 8008a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <prvSampleTimeNow+0x3c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d205      	bcs.n	8008a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a88:	f000 f936 	bl	8008cf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	e002      	b.n	8008a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a9a:	4a04      	ldr	r2, [pc, #16]	; (8008aac <prvSampleTimeNow+0x3c>)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20002a68 	.word	0x20002a68

08008ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d812      	bhi.n	8008afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d302      	bcc.n	8008aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	e01b      	b.n	8008b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008aea:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <prvInsertTimerInActiveList+0x7c>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fe fa08 	bl	8006f0a <vListInsert>
 8008afa:	e012      	b.n	8008b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d206      	bcs.n	8008b12 <prvInsertTimerInActiveList+0x62>
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e007      	b.n	8008b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b12:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <prvInsertTimerInActiveList+0x80>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3304      	adds	r3, #4
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f7fe f9f4 	bl	8006f0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b22:	697b      	ldr	r3, [r7, #20]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20002a5c 	.word	0x20002a5c
 8008b30:	20002a58 	.word	0x20002a58

08008b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08e      	sub	sp, #56	; 0x38
 8008b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b3a:	e0ca      	b.n	8008cd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da18      	bge.n	8008b74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b42:	1d3b      	adds	r3, r7, #4
 8008b44:	3304      	adds	r3, #4
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	61fb      	str	r3, [r7, #28]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6a:	6850      	ldr	r0, [r2, #4]
 8008b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6e:	6892      	ldr	r2, [r2, #8]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f2c0 80aa 	blt.w	8008cd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d004      	beq.n	8008b92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe f9f5 	bl	8006f7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b92:	463b      	mov	r3, r7
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff ff6b 	bl	8008a70 <prvSampleTimeNow>
 8008b9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b09      	cmp	r3, #9
 8008ba0:	f200 8097 	bhi.w	8008cd2 <prvProcessReceivedCommands+0x19e>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <prvProcessReceivedCommands+0x78>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bd5 	.word	0x08008bd5
 8008bb4:	08008bd5 	.word	0x08008bd5
 8008bb8:	08008c49 	.word	0x08008c49
 8008bbc:	08008c5d 	.word	0x08008c5d
 8008bc0:	08008ca7 	.word	0x08008ca7
 8008bc4:	08008bd5 	.word	0x08008bd5
 8008bc8:	08008bd5 	.word	0x08008bd5
 8008bcc:	08008c49 	.word	0x08008c49
 8008bd0:	08008c5d 	.word	0x08008c5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	18d1      	adds	r1, r2, r3
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf4:	f7ff ff5c 	bl	8008ab0 <prvInsertTimerInActiveList>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d069      	beq.n	8008cd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d05e      	beq.n	8008cd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	441a      	add	r2, r3
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	2300      	movs	r3, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c26:	f7ff fe05 	bl	8008834 <xTimerGenericCommand>
 8008c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d14f      	bne.n	8008cd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	61bb      	str	r3, [r7, #24]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c4e:	f023 0301 	bic.w	r3, r3, #1
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c5a:	e03a      	b.n	8008cd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c62:	f043 0301 	orr.w	r3, r3, #1
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	617b      	str	r3, [r7, #20]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	699a      	ldr	r2, [r3, #24]
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	18d1      	adds	r1, r2, r3
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca0:	f7ff ff06 	bl	8008ab0 <prvInsertTimerInActiveList>
					break;
 8008ca4:	e015      	b.n	8008cd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d103      	bne.n	8008cbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cb6:	f000 fbdb 	bl	8009470 <vPortFree>
 8008cba:	e00a      	b.n	8008cd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008cce:	e000      	b.n	8008cd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008cd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cd2:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <prvProcessReceivedCommands+0x1c0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	1d39      	adds	r1, r7, #4
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe fc16 	bl	800750c <xQueueReceive>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f47f af2a 	bne.w	8008b3c <prvProcessReceivedCommands+0x8>
	}
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	3730      	adds	r7, #48	; 0x30
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20002a60 	.word	0x20002a60

08008cf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cfe:	e048      	b.n	8008d92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d00:	4b2d      	ldr	r3, [pc, #180]	; (8008db8 <prvSwitchTimerLists+0xc0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d0a:	4b2b      	ldr	r3, [pc, #172]	; (8008db8 <prvSwitchTimerLists+0xc0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe f92f 	bl	8006f7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d02e      	beq.n	8008d92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d90e      	bls.n	8008d64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d52:	4b19      	ldr	r3, [pc, #100]	; (8008db8 <prvSwitchTimerLists+0xc0>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	f7fe f8d4 	bl	8006f0a <vListInsert>
 8008d62:	e016      	b.n	8008d92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d64:	2300      	movs	r3, #0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff fd60 	bl	8008834 <xTimerGenericCommand>
 8008d74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	603b      	str	r3, [r7, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <prvSwitchTimerLists+0xc0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1b1      	bne.n	8008d00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <prvSwitchTimerLists+0xc0>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008da2:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <prvSwitchTimerLists+0xc4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a04      	ldr	r2, [pc, #16]	; (8008db8 <prvSwitchTimerLists+0xc0>)
 8008da8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008daa:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <prvSwitchTimerLists+0xc4>)
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	6013      	str	r3, [r2, #0]
}
 8008db0:	bf00      	nop
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20002a58 	.word	0x20002a58
 8008dbc:	20002a5c 	.word	0x20002a5c

08008dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008dc6:	f000 f965 	bl	8009094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008dca:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <prvCheckForValidListAndQueue+0x60>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d120      	bne.n	8008e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008dd2:	4814      	ldr	r0, [pc, #80]	; (8008e24 <prvCheckForValidListAndQueue+0x64>)
 8008dd4:	f7fe f848 	bl	8006e68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008dd8:	4813      	ldr	r0, [pc, #76]	; (8008e28 <prvCheckForValidListAndQueue+0x68>)
 8008dda:	f7fe f845 	bl	8006e68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008dde:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <prvCheckForValidListAndQueue+0x6c>)
 8008de0:	4a10      	ldr	r2, [pc, #64]	; (8008e24 <prvCheckForValidListAndQueue+0x64>)
 8008de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008de4:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <prvCheckForValidListAndQueue+0x70>)
 8008de6:	4a10      	ldr	r2, [pc, #64]	; (8008e28 <prvCheckForValidListAndQueue+0x68>)
 8008de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008dea:	2300      	movs	r3, #0
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4b11      	ldr	r3, [pc, #68]	; (8008e34 <prvCheckForValidListAndQueue+0x74>)
 8008df0:	4a11      	ldr	r2, [pc, #68]	; (8008e38 <prvCheckForValidListAndQueue+0x78>)
 8008df2:	2110      	movs	r1, #16
 8008df4:	200a      	movs	r0, #10
 8008df6:	f7fe f953 	bl	80070a0 <xQueueGenericCreateStatic>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	4a08      	ldr	r2, [pc, #32]	; (8008e20 <prvCheckForValidListAndQueue+0x60>)
 8008dfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <prvCheckForValidListAndQueue+0x60>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <prvCheckForValidListAndQueue+0x60>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	490b      	ldr	r1, [pc, #44]	; (8008e3c <prvCheckForValidListAndQueue+0x7c>)
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fd6c 	bl	80078ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e14:	f000 f96e 	bl	80090f4 <vPortExitCritical>
}
 8008e18:	bf00      	nop
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	20002a60 	.word	0x20002a60
 8008e24:	20002a30 	.word	0x20002a30
 8008e28:	20002a44 	.word	0x20002a44
 8008e2c:	20002a58 	.word	0x20002a58
 8008e30:	20002a5c 	.word	0x20002a5c
 8008e34:	20002b0c 	.word	0x20002b0c
 8008e38:	20002a6c 	.word	0x20002a6c
 8008e3c:	0800a08c 	.word	0x0800a08c

08008e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3b04      	subs	r3, #4
 8008e50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3b04      	subs	r3, #4
 8008e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f023 0201 	bic.w	r2, r3, #1
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e70:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <pxPortInitialiseStack+0x64>)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3b14      	subs	r3, #20
 8008e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f06f 0202 	mvn.w	r2, #2
 8008e8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3b20      	subs	r3, #32
 8008e94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e96:	68fb      	ldr	r3, [r7, #12]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	08008ea9 	.word	0x08008ea9

08008ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008eb2:	4b12      	ldr	r3, [pc, #72]	; (8008efc <prvTaskExitError+0x54>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eba:	d00a      	beq.n	8008ed2 <prvTaskExitError+0x2a>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	60fb      	str	r3, [r7, #12]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <prvTaskExitError+0x28>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60bb      	str	r3, [r7, #8]
}
 8008ee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ee6:	bf00      	nop
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0fc      	beq.n	8008ee8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	2000000c 	.word	0x2000000c

08008f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <pxCurrentTCBConst2>)
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	6808      	ldr	r0, [r1, #0]
 8008f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0a:	f380 8809 	msr	PSP, r0
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8811 	msr	BASEPRI, r0
 8008f1a:	4770      	bx	lr
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst2>:
 8008f20:	20002530 	.word	0x20002530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f28:	4808      	ldr	r0, [pc, #32]	; (8008f4c <prvPortStartFirstTask+0x24>)
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f380 8808 	msr	MSP, r0
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8814 	msr	CONTROL, r0
 8008f3a:	b662      	cpsie	i
 8008f3c:	b661      	cpsie	f
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	df00      	svc	0
 8008f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f4a:	bf00      	nop
 8008f4c:	e000ed08 	.word	0xe000ed08

08008f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f56:	4b46      	ldr	r3, [pc, #280]	; (8009070 <xPortStartScheduler+0x120>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a46      	ldr	r2, [pc, #280]	; (8009074 <xPortStartScheduler+0x124>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10a      	bne.n	8008f76 <xPortStartScheduler+0x26>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	613b      	str	r3, [r7, #16]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f76:	4b3e      	ldr	r3, [pc, #248]	; (8009070 <xPortStartScheduler+0x120>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a3f      	ldr	r2, [pc, #252]	; (8009078 <xPortStartScheduler+0x128>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d10a      	bne.n	8008f96 <xPortStartScheduler+0x46>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f96:	4b39      	ldr	r3, [pc, #228]	; (800907c <xPortStartScheduler+0x12c>)
 8008f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	22ff      	movs	r2, #255	; 0xff
 8008fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	4b31      	ldr	r3, [pc, #196]	; (8009080 <xPortStartScheduler+0x130>)
 8008fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fbe:	4b31      	ldr	r3, [pc, #196]	; (8009084 <xPortStartScheduler+0x134>)
 8008fc0:	2207      	movs	r2, #7
 8008fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fc4:	e009      	b.n	8008fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008fc6:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <xPortStartScheduler+0x134>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	4a2d      	ldr	r2, [pc, #180]	; (8009084 <xPortStartScheduler+0x134>)
 8008fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d0ef      	beq.n	8008fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fe6:	4b27      	ldr	r3, [pc, #156]	; (8009084 <xPortStartScheduler+0x134>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1c3 0307 	rsb	r3, r3, #7
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d00a      	beq.n	8009008 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60bb      	str	r3, [r7, #8]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009008:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <xPortStartScheduler+0x134>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <xPortStartScheduler+0x134>)
 8009010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009012:	4b1c      	ldr	r3, [pc, #112]	; (8009084 <xPortStartScheduler+0x134>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800901a:	4a1a      	ldr	r2, [pc, #104]	; (8009084 <xPortStartScheduler+0x134>)
 800901c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009026:	4b18      	ldr	r3, [pc, #96]	; (8009088 <xPortStartScheduler+0x138>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a17      	ldr	r2, [pc, #92]	; (8009088 <xPortStartScheduler+0x138>)
 800902c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <xPortStartScheduler+0x138>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a14      	ldr	r2, [pc, #80]	; (8009088 <xPortStartScheduler+0x138>)
 8009038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800903c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800903e:	f000 f8dd 	bl	80091fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <xPortStartScheduler+0x13c>)
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009048:	f000 f8fc 	bl	8009244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800904c:	4b10      	ldr	r3, [pc, #64]	; (8009090 <xPortStartScheduler+0x140>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a0f      	ldr	r2, [pc, #60]	; (8009090 <xPortStartScheduler+0x140>)
 8009052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009058:	f7ff ff66 	bl	8008f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800905c:	f7ff f856 	bl	800810c <vTaskSwitchContext>
	prvTaskExitError();
 8009060:	f7ff ff22 	bl	8008ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	e000ed00 	.word	0xe000ed00
 8009074:	410fc271 	.word	0x410fc271
 8009078:	410fc270 	.word	0x410fc270
 800907c:	e000e400 	.word	0xe000e400
 8009080:	20002b5c 	.word	0x20002b5c
 8009084:	20002b60 	.word	0x20002b60
 8009088:	e000ed20 	.word	0xe000ed20
 800908c:	2000000c 	.word	0x2000000c
 8009090:	e000ef34 	.word	0xe000ef34

08009094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	607b      	str	r3, [r7, #4]
}
 80090ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <vPortEnterCritical+0x58>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3301      	adds	r3, #1
 80090b4:	4a0d      	ldr	r2, [pc, #52]	; (80090ec <vPortEnterCritical+0x58>)
 80090b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <vPortEnterCritical+0x58>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d10f      	bne.n	80090e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <vPortEnterCritical+0x5c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	603b      	str	r3, [r7, #0]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <vPortEnterCritical+0x4a>
	}
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	2000000c 	.word	0x2000000c
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090fa:	4b12      	ldr	r3, [pc, #72]	; (8009144 <vPortExitCritical+0x50>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10a      	bne.n	8009118 <vPortExitCritical+0x24>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	607b      	str	r3, [r7, #4]
}
 8009114:	bf00      	nop
 8009116:	e7fe      	b.n	8009116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <vPortExitCritical+0x50>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3b01      	subs	r3, #1
 800911e:	4a09      	ldr	r2, [pc, #36]	; (8009144 <vPortExitCritical+0x50>)
 8009120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <vPortExitCritical+0x50>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <vPortExitCritical+0x42>
 800912a:	2300      	movs	r3, #0
 800912c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	f383 8811 	msr	BASEPRI, r3
}
 8009134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	2000000c 	.word	0x2000000c
	...

08009150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009150:	f3ef 8009 	mrs	r0, PSP
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <pxCurrentTCBConst>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	f01e 0f10 	tst.w	lr, #16
 8009160:	bf08      	it	eq
 8009162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	6010      	str	r0, [r2, #0]
 800916c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009174:	f380 8811 	msr	BASEPRI, r0
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f7fe ffc4 	bl	800810c <vTaskSwitchContext>
 8009184:	f04f 0000 	mov.w	r0, #0
 8009188:	f380 8811 	msr	BASEPRI, r0
 800918c:	bc09      	pop	{r0, r3}
 800918e:	6819      	ldr	r1, [r3, #0]
 8009190:	6808      	ldr	r0, [r1, #0]
 8009192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009196:	f01e 0f10 	tst.w	lr, #16
 800919a:	bf08      	it	eq
 800919c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091a0:	f380 8809 	msr	PSP, r0
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w

080091b0 <pxCurrentTCBConst>:
 80091b0:	20002530 	.word	0x20002530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop

080091b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	607b      	str	r3, [r7, #4]
}
 80091d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091d2:	f7fe fee1 	bl	8007f98 <xTaskIncrementTick>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <xPortSysTickHandler+0x40>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f383 8811 	msr	BASEPRI, r3
}
 80091ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <vPortSetupTimerInterrupt+0x38>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <vPortSetupTimerInterrupt+0x3c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a0a      	ldr	r2, [pc, #40]	; (800923c <vPortSetupTimerInterrupt+0x40>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	099b      	lsrs	r3, r3, #6
 8009218:	4a09      	ldr	r2, [pc, #36]	; (8009240 <vPortSetupTimerInterrupt+0x44>)
 800921a:	3b01      	subs	r3, #1
 800921c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800921e:	4b04      	ldr	r3, [pc, #16]	; (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009220:	2207      	movs	r2, #7
 8009222:	601a      	str	r2, [r3, #0]
}
 8009224:	bf00      	nop
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	e000e010 	.word	0xe000e010
 8009234:	e000e018 	.word	0xe000e018
 8009238:	20000000 	.word	0x20000000
 800923c:	10624dd3 	.word	0x10624dd3
 8009240:	e000e014 	.word	0xe000e014

08009244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009254 <vPortEnableVFP+0x10>
 8009248:	6801      	ldr	r1, [r0, #0]
 800924a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800924e:	6001      	str	r1, [r0, #0]
 8009250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009252:	bf00      	nop
 8009254:	e000ed88 	.word	0xe000ed88

08009258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800925e:	f3ef 8305 	mrs	r3, IPSR
 8009262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d914      	bls.n	8009294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800926a:	4a17      	ldr	r2, [pc, #92]	; (80092c8 <vPortValidateInterruptPriority+0x70>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009274:	4b15      	ldr	r3, [pc, #84]	; (80092cc <vPortValidateInterruptPriority+0x74>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	7afa      	ldrb	r2, [r7, #11]
 800927a:	429a      	cmp	r2, r3
 800927c:	d20a      	bcs.n	8009294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	607b      	str	r3, [r7, #4]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009294:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <vPortValidateInterruptPriority+0x78>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800929c:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <vPortValidateInterruptPriority+0x7c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d90a      	bls.n	80092ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	603b      	str	r3, [r7, #0]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <vPortValidateInterruptPriority+0x60>
	}
 80092ba:	bf00      	nop
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	e000e3f0 	.word	0xe000e3f0
 80092cc:	20002b5c 	.word	0x20002b5c
 80092d0:	e000ed0c 	.word	0xe000ed0c
 80092d4:	20002b60 	.word	0x20002b60

080092d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092e4:	f7fe fd9c 	bl	8007e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092e8:	4b5b      	ldr	r3, [pc, #364]	; (8009458 <pvPortMalloc+0x180>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092f0:	f000 f920 	bl	8009534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092f4:	4b59      	ldr	r3, [pc, #356]	; (800945c <pvPortMalloc+0x184>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4013      	ands	r3, r2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 8093 	bne.w	8009428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01d      	beq.n	8009344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009308:	2208      	movs	r2, #8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d014      	beq.n	8009344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f023 0307 	bic.w	r3, r3, #7
 8009320:	3308      	adds	r3, #8
 8009322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <pvPortMalloc+0x6c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d06e      	beq.n	8009428 <pvPortMalloc+0x150>
 800934a:	4b45      	ldr	r3, [pc, #276]	; (8009460 <pvPortMalloc+0x188>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d869      	bhi.n	8009428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009354:	4b43      	ldr	r3, [pc, #268]	; (8009464 <pvPortMalloc+0x18c>)
 8009356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009358:	4b42      	ldr	r3, [pc, #264]	; (8009464 <pvPortMalloc+0x18c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800935e:	e004      	b.n	800936a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d903      	bls.n	800937c <pvPortMalloc+0xa4>
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f1      	bne.n	8009360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800937c:	4b36      	ldr	r3, [pc, #216]	; (8009458 <pvPortMalloc+0x180>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	429a      	cmp	r2, r3
 8009384:	d050      	beq.n	8009428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2208      	movs	r2, #8
 800938c:	4413      	add	r3, r2
 800938e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	2308      	movs	r3, #8
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d91f      	bls.n	80093e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <pvPortMalloc+0xf8>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	613b      	str	r3, [r7, #16]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	1ad2      	subs	r2, r2, r3
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093e2:	69b8      	ldr	r0, [r7, #24]
 80093e4:	f000 f908 	bl	80095f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093e8:	4b1d      	ldr	r3, [pc, #116]	; (8009460 <pvPortMalloc+0x188>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	4a1b      	ldr	r2, [pc, #108]	; (8009460 <pvPortMalloc+0x188>)
 80093f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <pvPortMalloc+0x188>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <pvPortMalloc+0x190>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d203      	bcs.n	800940a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009402:	4b17      	ldr	r3, [pc, #92]	; (8009460 <pvPortMalloc+0x188>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a18      	ldr	r2, [pc, #96]	; (8009468 <pvPortMalloc+0x190>)
 8009408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <pvPortMalloc+0x184>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	431a      	orrs	r2, r3
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <pvPortMalloc+0x194>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	4a11      	ldr	r2, [pc, #68]	; (800946c <pvPortMalloc+0x194>)
 8009426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009428:	f7fe fd08 	bl	8007e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <pvPortMalloc+0x174>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	60fb      	str	r3, [r7, #12]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <pvPortMalloc+0x172>
	return pvReturn;
 800944c:	69fb      	ldr	r3, [r7, #28]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3728      	adds	r7, #40	; 0x28
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	2000676c 	.word	0x2000676c
 800945c:	20006780 	.word	0x20006780
 8009460:	20006770 	.word	0x20006770
 8009464:	20006764 	.word	0x20006764
 8009468:	20006774 	.word	0x20006774
 800946c:	20006778 	.word	0x20006778

08009470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d04d      	beq.n	800951e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009482:	2308      	movs	r3, #8
 8009484:	425b      	negs	r3, r3
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4413      	add	r3, r2
 800948a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	4b24      	ldr	r3, [pc, #144]	; (8009528 <vPortFree+0xb8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4013      	ands	r3, r2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <vPortFree+0x44>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60fb      	str	r3, [r7, #12]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <vPortFree+0x62>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60bb      	str	r3, [r7, #8]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <vPortFree+0xb8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4013      	ands	r3, r2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01e      	beq.n	800951e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11a      	bne.n	800951e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <vPortFree+0xb8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	43db      	mvns	r3, r3
 80094f2:	401a      	ands	r2, r3
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094f8:	f7fe fc92 	bl	8007e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <vPortFree+0xbc>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4413      	add	r3, r2
 8009506:	4a09      	ldr	r2, [pc, #36]	; (800952c <vPortFree+0xbc>)
 8009508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800950a:	6938      	ldr	r0, [r7, #16]
 800950c:	f000 f874 	bl	80095f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009510:	4b07      	ldr	r3, [pc, #28]	; (8009530 <vPortFree+0xc0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3301      	adds	r3, #1
 8009516:	4a06      	ldr	r2, [pc, #24]	; (8009530 <vPortFree+0xc0>)
 8009518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800951a:	f7fe fc8f 	bl	8007e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800951e:	bf00      	nop
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20006780 	.word	0x20006780
 800952c:	20006770 	.word	0x20006770
 8009530:	2000677c 	.word	0x2000677c

08009534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800953a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800953e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009540:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <prvHeapInit+0xac>)
 8009542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3307      	adds	r3, #7
 8009552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0307 	bic.w	r3, r3, #7
 800955a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	4a1f      	ldr	r2, [pc, #124]	; (80095e0 <prvHeapInit+0xac>)
 8009564:	4413      	add	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800956c:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <prvHeapInit+0xb0>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009572:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <prvHeapInit+0xb0>)
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4413      	add	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009580:	2208      	movs	r2, #8
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <prvHeapInit+0xb4>)
 8009594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009596:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <prvHeapInit+0xb4>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800959e:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <prvHeapInit+0xb4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095b4:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <prvHeapInit+0xb4>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <prvHeapInit+0xb8>)
 80095c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <prvHeapInit+0xbc>)
 80095ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095cc:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <prvHeapInit+0xc0>)
 80095ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20002b64 	.word	0x20002b64
 80095e4:	20006764 	.word	0x20006764
 80095e8:	2000676c 	.word	0x2000676c
 80095ec:	20006774 	.word	0x20006774
 80095f0:	20006770 	.word	0x20006770
 80095f4:	20006780 	.word	0x20006780

080095f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <prvInsertBlockIntoFreeList+0xac>)
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	e002      	b.n	800960c <prvInsertBlockIntoFreeList+0x14>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d8f7      	bhi.n	8009606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4413      	add	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d108      	bne.n	800963a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	441a      	add	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d118      	bne.n	8009680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d00d      	beq.n	8009676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	441a      	add	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e008      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e003      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	429a      	cmp	r2, r3
 800968e:	d002      	beq.n	8009696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20006764 	.word	0x20006764
 80096a8:	2000676c 	.word	0x2000676c

080096ac <__errno>:
 80096ac:	4b01      	ldr	r3, [pc, #4]	; (80096b4 <__errno+0x8>)
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000010 	.word	0x20000010

080096b8 <__libc_init_array>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	4d0d      	ldr	r5, [pc, #52]	; (80096f0 <__libc_init_array+0x38>)
 80096bc:	4c0d      	ldr	r4, [pc, #52]	; (80096f4 <__libc_init_array+0x3c>)
 80096be:	1b64      	subs	r4, r4, r5
 80096c0:	10a4      	asrs	r4, r4, #2
 80096c2:	2600      	movs	r6, #0
 80096c4:	42a6      	cmp	r6, r4
 80096c6:	d109      	bne.n	80096dc <__libc_init_array+0x24>
 80096c8:	4d0b      	ldr	r5, [pc, #44]	; (80096f8 <__libc_init_array+0x40>)
 80096ca:	4c0c      	ldr	r4, [pc, #48]	; (80096fc <__libc_init_array+0x44>)
 80096cc:	f000 fc8e 	bl	8009fec <_init>
 80096d0:	1b64      	subs	r4, r4, r5
 80096d2:	10a4      	asrs	r4, r4, #2
 80096d4:	2600      	movs	r6, #0
 80096d6:	42a6      	cmp	r6, r4
 80096d8:	d105      	bne.n	80096e6 <__libc_init_array+0x2e>
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e0:	4798      	blx	r3
 80096e2:	3601      	adds	r6, #1
 80096e4:	e7ee      	b.n	80096c4 <__libc_init_array+0xc>
 80096e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ea:	4798      	blx	r3
 80096ec:	3601      	adds	r6, #1
 80096ee:	e7f2      	b.n	80096d6 <__libc_init_array+0x1e>
 80096f0:	0800a240 	.word	0x0800a240
 80096f4:	0800a240 	.word	0x0800a240
 80096f8:	0800a240 	.word	0x0800a240
 80096fc:	0800a244 	.word	0x0800a244

08009700 <memcpy>:
 8009700:	440a      	add	r2, r1
 8009702:	4291      	cmp	r1, r2
 8009704:	f100 33ff 	add.w	r3, r0, #4294967295
 8009708:	d100      	bne.n	800970c <memcpy+0xc>
 800970a:	4770      	bx	lr
 800970c:	b510      	push	{r4, lr}
 800970e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009716:	4291      	cmp	r1, r2
 8009718:	d1f9      	bne.n	800970e <memcpy+0xe>
 800971a:	bd10      	pop	{r4, pc}

0800971c <memset>:
 800971c:	4402      	add	r2, r0
 800971e:	4603      	mov	r3, r0
 8009720:	4293      	cmp	r3, r2
 8009722:	d100      	bne.n	8009726 <memset+0xa>
 8009724:	4770      	bx	lr
 8009726:	f803 1b01 	strb.w	r1, [r3], #1
 800972a:	e7f9      	b.n	8009720 <memset+0x4>

0800972c <siprintf>:
 800972c:	b40e      	push	{r1, r2, r3}
 800972e:	b500      	push	{lr}
 8009730:	b09c      	sub	sp, #112	; 0x70
 8009732:	ab1d      	add	r3, sp, #116	; 0x74
 8009734:	9002      	str	r0, [sp, #8]
 8009736:	9006      	str	r0, [sp, #24]
 8009738:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800973c:	4809      	ldr	r0, [pc, #36]	; (8009764 <siprintf+0x38>)
 800973e:	9107      	str	r1, [sp, #28]
 8009740:	9104      	str	r1, [sp, #16]
 8009742:	4909      	ldr	r1, [pc, #36]	; (8009768 <siprintf+0x3c>)
 8009744:	f853 2b04 	ldr.w	r2, [r3], #4
 8009748:	9105      	str	r1, [sp, #20]
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	a902      	add	r1, sp, #8
 8009750:	f000 f868 	bl	8009824 <_svfiprintf_r>
 8009754:	9b02      	ldr	r3, [sp, #8]
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
 800975a:	b01c      	add	sp, #112	; 0x70
 800975c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009760:	b003      	add	sp, #12
 8009762:	4770      	bx	lr
 8009764:	20000010 	.word	0x20000010
 8009768:	ffff0208 	.word	0xffff0208

0800976c <__ssputs_r>:
 800976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009770:	688e      	ldr	r6, [r1, #8]
 8009772:	429e      	cmp	r6, r3
 8009774:	4682      	mov	sl, r0
 8009776:	460c      	mov	r4, r1
 8009778:	4690      	mov	r8, r2
 800977a:	461f      	mov	r7, r3
 800977c:	d838      	bhi.n	80097f0 <__ssputs_r+0x84>
 800977e:	898a      	ldrh	r2, [r1, #12]
 8009780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009784:	d032      	beq.n	80097ec <__ssputs_r+0x80>
 8009786:	6825      	ldr	r5, [r4, #0]
 8009788:	6909      	ldr	r1, [r1, #16]
 800978a:	eba5 0901 	sub.w	r9, r5, r1
 800978e:	6965      	ldr	r5, [r4, #20]
 8009790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009798:	3301      	adds	r3, #1
 800979a:	444b      	add	r3, r9
 800979c:	106d      	asrs	r5, r5, #1
 800979e:	429d      	cmp	r5, r3
 80097a0:	bf38      	it	cc
 80097a2:	461d      	movcc	r5, r3
 80097a4:	0553      	lsls	r3, r2, #21
 80097a6:	d531      	bpl.n	800980c <__ssputs_r+0xa0>
 80097a8:	4629      	mov	r1, r5
 80097aa:	f000 fb55 	bl	8009e58 <_malloc_r>
 80097ae:	4606      	mov	r6, r0
 80097b0:	b950      	cbnz	r0, 80097c8 <__ssputs_r+0x5c>
 80097b2:	230c      	movs	r3, #12
 80097b4:	f8ca 3000 	str.w	r3, [sl]
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
 80097c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c8:	6921      	ldr	r1, [r4, #16]
 80097ca:	464a      	mov	r2, r9
 80097cc:	f7ff ff98 	bl	8009700 <memcpy>
 80097d0:	89a3      	ldrh	r3, [r4, #12]
 80097d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	6126      	str	r6, [r4, #16]
 80097de:	6165      	str	r5, [r4, #20]
 80097e0:	444e      	add	r6, r9
 80097e2:	eba5 0509 	sub.w	r5, r5, r9
 80097e6:	6026      	str	r6, [r4, #0]
 80097e8:	60a5      	str	r5, [r4, #8]
 80097ea:	463e      	mov	r6, r7
 80097ec:	42be      	cmp	r6, r7
 80097ee:	d900      	bls.n	80097f2 <__ssputs_r+0x86>
 80097f0:	463e      	mov	r6, r7
 80097f2:	6820      	ldr	r0, [r4, #0]
 80097f4:	4632      	mov	r2, r6
 80097f6:	4641      	mov	r1, r8
 80097f8:	f000 faa8 	bl	8009d4c <memmove>
 80097fc:	68a3      	ldr	r3, [r4, #8]
 80097fe:	1b9b      	subs	r3, r3, r6
 8009800:	60a3      	str	r3, [r4, #8]
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	4433      	add	r3, r6
 8009806:	6023      	str	r3, [r4, #0]
 8009808:	2000      	movs	r0, #0
 800980a:	e7db      	b.n	80097c4 <__ssputs_r+0x58>
 800980c:	462a      	mov	r2, r5
 800980e:	f000 fb97 	bl	8009f40 <_realloc_r>
 8009812:	4606      	mov	r6, r0
 8009814:	2800      	cmp	r0, #0
 8009816:	d1e1      	bne.n	80097dc <__ssputs_r+0x70>
 8009818:	6921      	ldr	r1, [r4, #16]
 800981a:	4650      	mov	r0, sl
 800981c:	f000 fab0 	bl	8009d80 <_free_r>
 8009820:	e7c7      	b.n	80097b2 <__ssputs_r+0x46>
	...

08009824 <_svfiprintf_r>:
 8009824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009828:	4698      	mov	r8, r3
 800982a:	898b      	ldrh	r3, [r1, #12]
 800982c:	061b      	lsls	r3, r3, #24
 800982e:	b09d      	sub	sp, #116	; 0x74
 8009830:	4607      	mov	r7, r0
 8009832:	460d      	mov	r5, r1
 8009834:	4614      	mov	r4, r2
 8009836:	d50e      	bpl.n	8009856 <_svfiprintf_r+0x32>
 8009838:	690b      	ldr	r3, [r1, #16]
 800983a:	b963      	cbnz	r3, 8009856 <_svfiprintf_r+0x32>
 800983c:	2140      	movs	r1, #64	; 0x40
 800983e:	f000 fb0b 	bl	8009e58 <_malloc_r>
 8009842:	6028      	str	r0, [r5, #0]
 8009844:	6128      	str	r0, [r5, #16]
 8009846:	b920      	cbnz	r0, 8009852 <_svfiprintf_r+0x2e>
 8009848:	230c      	movs	r3, #12
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	e0d1      	b.n	80099f6 <_svfiprintf_r+0x1d2>
 8009852:	2340      	movs	r3, #64	; 0x40
 8009854:	616b      	str	r3, [r5, #20]
 8009856:	2300      	movs	r3, #0
 8009858:	9309      	str	r3, [sp, #36]	; 0x24
 800985a:	2320      	movs	r3, #32
 800985c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009860:	f8cd 800c 	str.w	r8, [sp, #12]
 8009864:	2330      	movs	r3, #48	; 0x30
 8009866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a10 <_svfiprintf_r+0x1ec>
 800986a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800986e:	f04f 0901 	mov.w	r9, #1
 8009872:	4623      	mov	r3, r4
 8009874:	469a      	mov	sl, r3
 8009876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800987a:	b10a      	cbz	r2, 8009880 <_svfiprintf_r+0x5c>
 800987c:	2a25      	cmp	r2, #37	; 0x25
 800987e:	d1f9      	bne.n	8009874 <_svfiprintf_r+0x50>
 8009880:	ebba 0b04 	subs.w	fp, sl, r4
 8009884:	d00b      	beq.n	800989e <_svfiprintf_r+0x7a>
 8009886:	465b      	mov	r3, fp
 8009888:	4622      	mov	r2, r4
 800988a:	4629      	mov	r1, r5
 800988c:	4638      	mov	r0, r7
 800988e:	f7ff ff6d 	bl	800976c <__ssputs_r>
 8009892:	3001      	adds	r0, #1
 8009894:	f000 80aa 	beq.w	80099ec <_svfiprintf_r+0x1c8>
 8009898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800989a:	445a      	add	r2, fp
 800989c:	9209      	str	r2, [sp, #36]	; 0x24
 800989e:	f89a 3000 	ldrb.w	r3, [sl]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80a2 	beq.w	80099ec <_svfiprintf_r+0x1c8>
 80098a8:	2300      	movs	r3, #0
 80098aa:	f04f 32ff 	mov.w	r2, #4294967295
 80098ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098b2:	f10a 0a01 	add.w	sl, sl, #1
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	9307      	str	r3, [sp, #28]
 80098ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098be:	931a      	str	r3, [sp, #104]	; 0x68
 80098c0:	4654      	mov	r4, sl
 80098c2:	2205      	movs	r2, #5
 80098c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c8:	4851      	ldr	r0, [pc, #324]	; (8009a10 <_svfiprintf_r+0x1ec>)
 80098ca:	f7f6 fc89 	bl	80001e0 <memchr>
 80098ce:	9a04      	ldr	r2, [sp, #16]
 80098d0:	b9d8      	cbnz	r0, 800990a <_svfiprintf_r+0xe6>
 80098d2:	06d0      	lsls	r0, r2, #27
 80098d4:	bf44      	itt	mi
 80098d6:	2320      	movmi	r3, #32
 80098d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098dc:	0711      	lsls	r1, r2, #28
 80098de:	bf44      	itt	mi
 80098e0:	232b      	movmi	r3, #43	; 0x2b
 80098e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098e6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ea:	2b2a      	cmp	r3, #42	; 0x2a
 80098ec:	d015      	beq.n	800991a <_svfiprintf_r+0xf6>
 80098ee:	9a07      	ldr	r2, [sp, #28]
 80098f0:	4654      	mov	r4, sl
 80098f2:	2000      	movs	r0, #0
 80098f4:	f04f 0c0a 	mov.w	ip, #10
 80098f8:	4621      	mov	r1, r4
 80098fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098fe:	3b30      	subs	r3, #48	; 0x30
 8009900:	2b09      	cmp	r3, #9
 8009902:	d94e      	bls.n	80099a2 <_svfiprintf_r+0x17e>
 8009904:	b1b0      	cbz	r0, 8009934 <_svfiprintf_r+0x110>
 8009906:	9207      	str	r2, [sp, #28]
 8009908:	e014      	b.n	8009934 <_svfiprintf_r+0x110>
 800990a:	eba0 0308 	sub.w	r3, r0, r8
 800990e:	fa09 f303 	lsl.w	r3, r9, r3
 8009912:	4313      	orrs	r3, r2
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	46a2      	mov	sl, r4
 8009918:	e7d2      	b.n	80098c0 <_svfiprintf_r+0x9c>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	1d19      	adds	r1, r3, #4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	9103      	str	r1, [sp, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	bfbb      	ittet	lt
 8009926:	425b      	neglt	r3, r3
 8009928:	f042 0202 	orrlt.w	r2, r2, #2
 800992c:	9307      	strge	r3, [sp, #28]
 800992e:	9307      	strlt	r3, [sp, #28]
 8009930:	bfb8      	it	lt
 8009932:	9204      	strlt	r2, [sp, #16]
 8009934:	7823      	ldrb	r3, [r4, #0]
 8009936:	2b2e      	cmp	r3, #46	; 0x2e
 8009938:	d10c      	bne.n	8009954 <_svfiprintf_r+0x130>
 800993a:	7863      	ldrb	r3, [r4, #1]
 800993c:	2b2a      	cmp	r3, #42	; 0x2a
 800993e:	d135      	bne.n	80099ac <_svfiprintf_r+0x188>
 8009940:	9b03      	ldr	r3, [sp, #12]
 8009942:	1d1a      	adds	r2, r3, #4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	9203      	str	r2, [sp, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfb8      	it	lt
 800994c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009950:	3402      	adds	r4, #2
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a20 <_svfiprintf_r+0x1fc>
 8009958:	7821      	ldrb	r1, [r4, #0]
 800995a:	2203      	movs	r2, #3
 800995c:	4650      	mov	r0, sl
 800995e:	f7f6 fc3f 	bl	80001e0 <memchr>
 8009962:	b140      	cbz	r0, 8009976 <_svfiprintf_r+0x152>
 8009964:	2340      	movs	r3, #64	; 0x40
 8009966:	eba0 000a 	sub.w	r0, r0, sl
 800996a:	fa03 f000 	lsl.w	r0, r3, r0
 800996e:	9b04      	ldr	r3, [sp, #16]
 8009970:	4303      	orrs	r3, r0
 8009972:	3401      	adds	r4, #1
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997a:	4826      	ldr	r0, [pc, #152]	; (8009a14 <_svfiprintf_r+0x1f0>)
 800997c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009980:	2206      	movs	r2, #6
 8009982:	f7f6 fc2d 	bl	80001e0 <memchr>
 8009986:	2800      	cmp	r0, #0
 8009988:	d038      	beq.n	80099fc <_svfiprintf_r+0x1d8>
 800998a:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <_svfiprintf_r+0x1f4>)
 800998c:	bb1b      	cbnz	r3, 80099d6 <_svfiprintf_r+0x1b2>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	3307      	adds	r3, #7
 8009992:	f023 0307 	bic.w	r3, r3, #7
 8009996:	3308      	adds	r3, #8
 8009998:	9303      	str	r3, [sp, #12]
 800999a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999c:	4433      	add	r3, r6
 800999e:	9309      	str	r3, [sp, #36]	; 0x24
 80099a0:	e767      	b.n	8009872 <_svfiprintf_r+0x4e>
 80099a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80099a6:	460c      	mov	r4, r1
 80099a8:	2001      	movs	r0, #1
 80099aa:	e7a5      	b.n	80098f8 <_svfiprintf_r+0xd4>
 80099ac:	2300      	movs	r3, #0
 80099ae:	3401      	adds	r4, #1
 80099b0:	9305      	str	r3, [sp, #20]
 80099b2:	4619      	mov	r1, r3
 80099b4:	f04f 0c0a 	mov.w	ip, #10
 80099b8:	4620      	mov	r0, r4
 80099ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099be:	3a30      	subs	r2, #48	; 0x30
 80099c0:	2a09      	cmp	r2, #9
 80099c2:	d903      	bls.n	80099cc <_svfiprintf_r+0x1a8>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0c5      	beq.n	8009954 <_svfiprintf_r+0x130>
 80099c8:	9105      	str	r1, [sp, #20]
 80099ca:	e7c3      	b.n	8009954 <_svfiprintf_r+0x130>
 80099cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80099d0:	4604      	mov	r4, r0
 80099d2:	2301      	movs	r3, #1
 80099d4:	e7f0      	b.n	80099b8 <_svfiprintf_r+0x194>
 80099d6:	ab03      	add	r3, sp, #12
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	462a      	mov	r2, r5
 80099dc:	4b0f      	ldr	r3, [pc, #60]	; (8009a1c <_svfiprintf_r+0x1f8>)
 80099de:	a904      	add	r1, sp, #16
 80099e0:	4638      	mov	r0, r7
 80099e2:	f3af 8000 	nop.w
 80099e6:	1c42      	adds	r2, r0, #1
 80099e8:	4606      	mov	r6, r0
 80099ea:	d1d6      	bne.n	800999a <_svfiprintf_r+0x176>
 80099ec:	89ab      	ldrh	r3, [r5, #12]
 80099ee:	065b      	lsls	r3, r3, #25
 80099f0:	f53f af2c 	bmi.w	800984c <_svfiprintf_r+0x28>
 80099f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099f6:	b01d      	add	sp, #116	; 0x74
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	ab03      	add	r3, sp, #12
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	462a      	mov	r2, r5
 8009a02:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <_svfiprintf_r+0x1f8>)
 8009a04:	a904      	add	r1, sp, #16
 8009a06:	4638      	mov	r0, r7
 8009a08:	f000 f87a 	bl	8009b00 <_printf_i>
 8009a0c:	e7eb      	b.n	80099e6 <_svfiprintf_r+0x1c2>
 8009a0e:	bf00      	nop
 8009a10:	0800a204 	.word	0x0800a204
 8009a14:	0800a20e 	.word	0x0800a20e
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	0800976d 	.word	0x0800976d
 8009a20:	0800a20a 	.word	0x0800a20a

08009a24 <_printf_common>:
 8009a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a28:	4616      	mov	r6, r2
 8009a2a:	4699      	mov	r9, r3
 8009a2c:	688a      	ldr	r2, [r1, #8]
 8009a2e:	690b      	ldr	r3, [r1, #16]
 8009a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	bfb8      	it	lt
 8009a38:	4613      	movlt	r3, r2
 8009a3a:	6033      	str	r3, [r6, #0]
 8009a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a40:	4607      	mov	r7, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	b10a      	cbz	r2, 8009a4a <_printf_common+0x26>
 8009a46:	3301      	adds	r3, #1
 8009a48:	6033      	str	r3, [r6, #0]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	0699      	lsls	r1, r3, #26
 8009a4e:	bf42      	ittt	mi
 8009a50:	6833      	ldrmi	r3, [r6, #0]
 8009a52:	3302      	addmi	r3, #2
 8009a54:	6033      	strmi	r3, [r6, #0]
 8009a56:	6825      	ldr	r5, [r4, #0]
 8009a58:	f015 0506 	ands.w	r5, r5, #6
 8009a5c:	d106      	bne.n	8009a6c <_printf_common+0x48>
 8009a5e:	f104 0a19 	add.w	sl, r4, #25
 8009a62:	68e3      	ldr	r3, [r4, #12]
 8009a64:	6832      	ldr	r2, [r6, #0]
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	42ab      	cmp	r3, r5
 8009a6a:	dc26      	bgt.n	8009aba <_printf_common+0x96>
 8009a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a70:	1e13      	subs	r3, r2, #0
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	bf18      	it	ne
 8009a76:	2301      	movne	r3, #1
 8009a78:	0692      	lsls	r2, r2, #26
 8009a7a:	d42b      	bmi.n	8009ad4 <_printf_common+0xb0>
 8009a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a80:	4649      	mov	r1, r9
 8009a82:	4638      	mov	r0, r7
 8009a84:	47c0      	blx	r8
 8009a86:	3001      	adds	r0, #1
 8009a88:	d01e      	beq.n	8009ac8 <_printf_common+0xa4>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	68e5      	ldr	r5, [r4, #12]
 8009a8e:	6832      	ldr	r2, [r6, #0]
 8009a90:	f003 0306 	and.w	r3, r3, #6
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	bf08      	it	eq
 8009a98:	1aad      	subeq	r5, r5, r2
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	6922      	ldr	r2, [r4, #16]
 8009a9e:	bf0c      	ite	eq
 8009aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aa4:	2500      	movne	r5, #0
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	bfc4      	itt	gt
 8009aaa:	1a9b      	subgt	r3, r3, r2
 8009aac:	18ed      	addgt	r5, r5, r3
 8009aae:	2600      	movs	r6, #0
 8009ab0:	341a      	adds	r4, #26
 8009ab2:	42b5      	cmp	r5, r6
 8009ab4:	d11a      	bne.n	8009aec <_printf_common+0xc8>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	e008      	b.n	8009acc <_printf_common+0xa8>
 8009aba:	2301      	movs	r3, #1
 8009abc:	4652      	mov	r2, sl
 8009abe:	4649      	mov	r1, r9
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	47c0      	blx	r8
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d103      	bne.n	8009ad0 <_printf_common+0xac>
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	e7c6      	b.n	8009a62 <_printf_common+0x3e>
 8009ad4:	18e1      	adds	r1, r4, r3
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	2030      	movs	r0, #48	; 0x30
 8009ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ade:	4422      	add	r2, r4
 8009ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ae8:	3302      	adds	r3, #2
 8009aea:	e7c7      	b.n	8009a7c <_printf_common+0x58>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4622      	mov	r2, r4
 8009af0:	4649      	mov	r1, r9
 8009af2:	4638      	mov	r0, r7
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d0e6      	beq.n	8009ac8 <_printf_common+0xa4>
 8009afa:	3601      	adds	r6, #1
 8009afc:	e7d9      	b.n	8009ab2 <_printf_common+0x8e>
	...

08009b00 <_printf_i>:
 8009b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	7e0f      	ldrb	r7, [r1, #24]
 8009b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b08:	2f78      	cmp	r7, #120	; 0x78
 8009b0a:	4691      	mov	r9, r2
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	469a      	mov	sl, r3
 8009b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b16:	d807      	bhi.n	8009b28 <_printf_i+0x28>
 8009b18:	2f62      	cmp	r7, #98	; 0x62
 8009b1a:	d80a      	bhi.n	8009b32 <_printf_i+0x32>
 8009b1c:	2f00      	cmp	r7, #0
 8009b1e:	f000 80d8 	beq.w	8009cd2 <_printf_i+0x1d2>
 8009b22:	2f58      	cmp	r7, #88	; 0x58
 8009b24:	f000 80a3 	beq.w	8009c6e <_printf_i+0x16e>
 8009b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b30:	e03a      	b.n	8009ba8 <_printf_i+0xa8>
 8009b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b36:	2b15      	cmp	r3, #21
 8009b38:	d8f6      	bhi.n	8009b28 <_printf_i+0x28>
 8009b3a:	a101      	add	r1, pc, #4	; (adr r1, 8009b40 <_printf_i+0x40>)
 8009b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b40:	08009b99 	.word	0x08009b99
 8009b44:	08009bad 	.word	0x08009bad
 8009b48:	08009b29 	.word	0x08009b29
 8009b4c:	08009b29 	.word	0x08009b29
 8009b50:	08009b29 	.word	0x08009b29
 8009b54:	08009b29 	.word	0x08009b29
 8009b58:	08009bad 	.word	0x08009bad
 8009b5c:	08009b29 	.word	0x08009b29
 8009b60:	08009b29 	.word	0x08009b29
 8009b64:	08009b29 	.word	0x08009b29
 8009b68:	08009b29 	.word	0x08009b29
 8009b6c:	08009cb9 	.word	0x08009cb9
 8009b70:	08009bdd 	.word	0x08009bdd
 8009b74:	08009c9b 	.word	0x08009c9b
 8009b78:	08009b29 	.word	0x08009b29
 8009b7c:	08009b29 	.word	0x08009b29
 8009b80:	08009cdb 	.word	0x08009cdb
 8009b84:	08009b29 	.word	0x08009b29
 8009b88:	08009bdd 	.word	0x08009bdd
 8009b8c:	08009b29 	.word	0x08009b29
 8009b90:	08009b29 	.word	0x08009b29
 8009b94:	08009ca3 	.word	0x08009ca3
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	1d1a      	adds	r2, r3, #4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	602a      	str	r2, [r5, #0]
 8009ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e0a3      	b.n	8009cf4 <_printf_i+0x1f4>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	6829      	ldr	r1, [r5, #0]
 8009bb0:	0606      	lsls	r6, r0, #24
 8009bb2:	f101 0304 	add.w	r3, r1, #4
 8009bb6:	d50a      	bpl.n	8009bce <_printf_i+0xce>
 8009bb8:	680e      	ldr	r6, [r1, #0]
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	2e00      	cmp	r6, #0
 8009bbe:	da03      	bge.n	8009bc8 <_printf_i+0xc8>
 8009bc0:	232d      	movs	r3, #45	; 0x2d
 8009bc2:	4276      	negs	r6, r6
 8009bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bc8:	485e      	ldr	r0, [pc, #376]	; (8009d44 <_printf_i+0x244>)
 8009bca:	230a      	movs	r3, #10
 8009bcc:	e019      	b.n	8009c02 <_printf_i+0x102>
 8009bce:	680e      	ldr	r6, [r1, #0]
 8009bd0:	602b      	str	r3, [r5, #0]
 8009bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bd6:	bf18      	it	ne
 8009bd8:	b236      	sxthne	r6, r6
 8009bda:	e7ef      	b.n	8009bbc <_printf_i+0xbc>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	1d19      	adds	r1, r3, #4
 8009be2:	6029      	str	r1, [r5, #0]
 8009be4:	0601      	lsls	r1, r0, #24
 8009be6:	d501      	bpl.n	8009bec <_printf_i+0xec>
 8009be8:	681e      	ldr	r6, [r3, #0]
 8009bea:	e002      	b.n	8009bf2 <_printf_i+0xf2>
 8009bec:	0646      	lsls	r6, r0, #25
 8009bee:	d5fb      	bpl.n	8009be8 <_printf_i+0xe8>
 8009bf0:	881e      	ldrh	r6, [r3, #0]
 8009bf2:	4854      	ldr	r0, [pc, #336]	; (8009d44 <_printf_i+0x244>)
 8009bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bf6:	bf0c      	ite	eq
 8009bf8:	2308      	moveq	r3, #8
 8009bfa:	230a      	movne	r3, #10
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c02:	6865      	ldr	r5, [r4, #4]
 8009c04:	60a5      	str	r5, [r4, #8]
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	bfa2      	ittt	ge
 8009c0a:	6821      	ldrge	r1, [r4, #0]
 8009c0c:	f021 0104 	bicge.w	r1, r1, #4
 8009c10:	6021      	strge	r1, [r4, #0]
 8009c12:	b90e      	cbnz	r6, 8009c18 <_printf_i+0x118>
 8009c14:	2d00      	cmp	r5, #0
 8009c16:	d04d      	beq.n	8009cb4 <_printf_i+0x1b4>
 8009c18:	4615      	mov	r5, r2
 8009c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c22:	5dc7      	ldrb	r7, [r0, r7]
 8009c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c28:	4637      	mov	r7, r6
 8009c2a:	42bb      	cmp	r3, r7
 8009c2c:	460e      	mov	r6, r1
 8009c2e:	d9f4      	bls.n	8009c1a <_printf_i+0x11a>
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d10b      	bne.n	8009c4c <_printf_i+0x14c>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	07de      	lsls	r6, r3, #31
 8009c38:	d508      	bpl.n	8009c4c <_printf_i+0x14c>
 8009c3a:	6923      	ldr	r3, [r4, #16]
 8009c3c:	6861      	ldr	r1, [r4, #4]
 8009c3e:	4299      	cmp	r1, r3
 8009c40:	bfde      	ittt	le
 8009c42:	2330      	movle	r3, #48	; 0x30
 8009c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c4c:	1b52      	subs	r2, r2, r5
 8009c4e:	6122      	str	r2, [r4, #16]
 8009c50:	f8cd a000 	str.w	sl, [sp]
 8009c54:	464b      	mov	r3, r9
 8009c56:	aa03      	add	r2, sp, #12
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	f7ff fee2 	bl	8009a24 <_printf_common>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d14c      	bne.n	8009cfe <_printf_i+0x1fe>
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295
 8009c68:	b004      	add	sp, #16
 8009c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6e:	4835      	ldr	r0, [pc, #212]	; (8009d44 <_printf_i+0x244>)
 8009c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c74:	6829      	ldr	r1, [r5, #0]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c7c:	6029      	str	r1, [r5, #0]
 8009c7e:	061d      	lsls	r5, r3, #24
 8009c80:	d514      	bpl.n	8009cac <_printf_i+0x1ac>
 8009c82:	07df      	lsls	r7, r3, #31
 8009c84:	bf44      	itt	mi
 8009c86:	f043 0320 	orrmi.w	r3, r3, #32
 8009c8a:	6023      	strmi	r3, [r4, #0]
 8009c8c:	b91e      	cbnz	r6, 8009c96 <_printf_i+0x196>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	f023 0320 	bic.w	r3, r3, #32
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	2310      	movs	r3, #16
 8009c98:	e7b0      	b.n	8009bfc <_printf_i+0xfc>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	f043 0320 	orr.w	r3, r3, #32
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	2378      	movs	r3, #120	; 0x78
 8009ca4:	4828      	ldr	r0, [pc, #160]	; (8009d48 <_printf_i+0x248>)
 8009ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009caa:	e7e3      	b.n	8009c74 <_printf_i+0x174>
 8009cac:	0659      	lsls	r1, r3, #25
 8009cae:	bf48      	it	mi
 8009cb0:	b2b6      	uxthmi	r6, r6
 8009cb2:	e7e6      	b.n	8009c82 <_printf_i+0x182>
 8009cb4:	4615      	mov	r5, r2
 8009cb6:	e7bb      	b.n	8009c30 <_printf_i+0x130>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	6826      	ldr	r6, [r4, #0]
 8009cbc:	6961      	ldr	r1, [r4, #20]
 8009cbe:	1d18      	adds	r0, r3, #4
 8009cc0:	6028      	str	r0, [r5, #0]
 8009cc2:	0635      	lsls	r5, r6, #24
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	d501      	bpl.n	8009ccc <_printf_i+0x1cc>
 8009cc8:	6019      	str	r1, [r3, #0]
 8009cca:	e002      	b.n	8009cd2 <_printf_i+0x1d2>
 8009ccc:	0670      	lsls	r0, r6, #25
 8009cce:	d5fb      	bpl.n	8009cc8 <_printf_i+0x1c8>
 8009cd0:	8019      	strh	r1, [r3, #0]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	4615      	mov	r5, r2
 8009cd8:	e7ba      	b.n	8009c50 <_printf_i+0x150>
 8009cda:	682b      	ldr	r3, [r5, #0]
 8009cdc:	1d1a      	adds	r2, r3, #4
 8009cde:	602a      	str	r2, [r5, #0]
 8009ce0:	681d      	ldr	r5, [r3, #0]
 8009ce2:	6862      	ldr	r2, [r4, #4]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f7f6 fa7a 	bl	80001e0 <memchr>
 8009cec:	b108      	cbz	r0, 8009cf2 <_printf_i+0x1f2>
 8009cee:	1b40      	subs	r0, r0, r5
 8009cf0:	6060      	str	r0, [r4, #4]
 8009cf2:	6863      	ldr	r3, [r4, #4]
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfc:	e7a8      	b.n	8009c50 <_printf_i+0x150>
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	462a      	mov	r2, r5
 8009d02:	4649      	mov	r1, r9
 8009d04:	4640      	mov	r0, r8
 8009d06:	47d0      	blx	sl
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d0ab      	beq.n	8009c64 <_printf_i+0x164>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	079b      	lsls	r3, r3, #30
 8009d10:	d413      	bmi.n	8009d3a <_printf_i+0x23a>
 8009d12:	68e0      	ldr	r0, [r4, #12]
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	4298      	cmp	r0, r3
 8009d18:	bfb8      	it	lt
 8009d1a:	4618      	movlt	r0, r3
 8009d1c:	e7a4      	b.n	8009c68 <_printf_i+0x168>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4632      	mov	r2, r6
 8009d22:	4649      	mov	r1, r9
 8009d24:	4640      	mov	r0, r8
 8009d26:	47d0      	blx	sl
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d09b      	beq.n	8009c64 <_printf_i+0x164>
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	68e3      	ldr	r3, [r4, #12]
 8009d30:	9903      	ldr	r1, [sp, #12]
 8009d32:	1a5b      	subs	r3, r3, r1
 8009d34:	42ab      	cmp	r3, r5
 8009d36:	dcf2      	bgt.n	8009d1e <_printf_i+0x21e>
 8009d38:	e7eb      	b.n	8009d12 <_printf_i+0x212>
 8009d3a:	2500      	movs	r5, #0
 8009d3c:	f104 0619 	add.w	r6, r4, #25
 8009d40:	e7f5      	b.n	8009d2e <_printf_i+0x22e>
 8009d42:	bf00      	nop
 8009d44:	0800a215 	.word	0x0800a215
 8009d48:	0800a226 	.word	0x0800a226

08009d4c <memmove>:
 8009d4c:	4288      	cmp	r0, r1
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	eb01 0402 	add.w	r4, r1, r2
 8009d54:	d902      	bls.n	8009d5c <memmove+0x10>
 8009d56:	4284      	cmp	r4, r0
 8009d58:	4623      	mov	r3, r4
 8009d5a:	d807      	bhi.n	8009d6c <memmove+0x20>
 8009d5c:	1e43      	subs	r3, r0, #1
 8009d5e:	42a1      	cmp	r1, r4
 8009d60:	d008      	beq.n	8009d74 <memmove+0x28>
 8009d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6a:	e7f8      	b.n	8009d5e <memmove+0x12>
 8009d6c:	4402      	add	r2, r0
 8009d6e:	4601      	mov	r1, r0
 8009d70:	428a      	cmp	r2, r1
 8009d72:	d100      	bne.n	8009d76 <memmove+0x2a>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d7e:	e7f7      	b.n	8009d70 <memmove+0x24>

08009d80 <_free_r>:
 8009d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d82:	2900      	cmp	r1, #0
 8009d84:	d044      	beq.n	8009e10 <_free_r+0x90>
 8009d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d8a:	9001      	str	r0, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009d92:	bfb8      	it	lt
 8009d94:	18e4      	addlt	r4, r4, r3
 8009d96:	f000 f913 	bl	8009fc0 <__malloc_lock>
 8009d9a:	4a1e      	ldr	r2, [pc, #120]	; (8009e14 <_free_r+0x94>)
 8009d9c:	9801      	ldr	r0, [sp, #4]
 8009d9e:	6813      	ldr	r3, [r2, #0]
 8009da0:	b933      	cbnz	r3, 8009db0 <_free_r+0x30>
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	6014      	str	r4, [r2, #0]
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dac:	f000 b90e 	b.w	8009fcc <__malloc_unlock>
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	d908      	bls.n	8009dc6 <_free_r+0x46>
 8009db4:	6825      	ldr	r5, [r4, #0]
 8009db6:	1961      	adds	r1, r4, r5
 8009db8:	428b      	cmp	r3, r1
 8009dba:	bf01      	itttt	eq
 8009dbc:	6819      	ldreq	r1, [r3, #0]
 8009dbe:	685b      	ldreq	r3, [r3, #4]
 8009dc0:	1949      	addeq	r1, r1, r5
 8009dc2:	6021      	streq	r1, [r4, #0]
 8009dc4:	e7ed      	b.n	8009da2 <_free_r+0x22>
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	b10b      	cbz	r3, 8009dd0 <_free_r+0x50>
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	d9fa      	bls.n	8009dc6 <_free_r+0x46>
 8009dd0:	6811      	ldr	r1, [r2, #0]
 8009dd2:	1855      	adds	r5, r2, r1
 8009dd4:	42a5      	cmp	r5, r4
 8009dd6:	d10b      	bne.n	8009df0 <_free_r+0x70>
 8009dd8:	6824      	ldr	r4, [r4, #0]
 8009dda:	4421      	add	r1, r4
 8009ddc:	1854      	adds	r4, r2, r1
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	6011      	str	r1, [r2, #0]
 8009de2:	d1e0      	bne.n	8009da6 <_free_r+0x26>
 8009de4:	681c      	ldr	r4, [r3, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	6053      	str	r3, [r2, #4]
 8009dea:	4421      	add	r1, r4
 8009dec:	6011      	str	r1, [r2, #0]
 8009dee:	e7da      	b.n	8009da6 <_free_r+0x26>
 8009df0:	d902      	bls.n	8009df8 <_free_r+0x78>
 8009df2:	230c      	movs	r3, #12
 8009df4:	6003      	str	r3, [r0, #0]
 8009df6:	e7d6      	b.n	8009da6 <_free_r+0x26>
 8009df8:	6825      	ldr	r5, [r4, #0]
 8009dfa:	1961      	adds	r1, r4, r5
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	bf04      	itt	eq
 8009e00:	6819      	ldreq	r1, [r3, #0]
 8009e02:	685b      	ldreq	r3, [r3, #4]
 8009e04:	6063      	str	r3, [r4, #4]
 8009e06:	bf04      	itt	eq
 8009e08:	1949      	addeq	r1, r1, r5
 8009e0a:	6021      	streq	r1, [r4, #0]
 8009e0c:	6054      	str	r4, [r2, #4]
 8009e0e:	e7ca      	b.n	8009da6 <_free_r+0x26>
 8009e10:	b003      	add	sp, #12
 8009e12:	bd30      	pop	{r4, r5, pc}
 8009e14:	20006784 	.word	0x20006784

08009e18 <sbrk_aligned>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	4e0e      	ldr	r6, [pc, #56]	; (8009e54 <sbrk_aligned+0x3c>)
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	6831      	ldr	r1, [r6, #0]
 8009e20:	4605      	mov	r5, r0
 8009e22:	b911      	cbnz	r1, 8009e2a <sbrk_aligned+0x12>
 8009e24:	f000 f8bc 	bl	8009fa0 <_sbrk_r>
 8009e28:	6030      	str	r0, [r6, #0]
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	f000 f8b7 	bl	8009fa0 <_sbrk_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d00a      	beq.n	8009e4c <sbrk_aligned+0x34>
 8009e36:	1cc4      	adds	r4, r0, #3
 8009e38:	f024 0403 	bic.w	r4, r4, #3
 8009e3c:	42a0      	cmp	r0, r4
 8009e3e:	d007      	beq.n	8009e50 <sbrk_aligned+0x38>
 8009e40:	1a21      	subs	r1, r4, r0
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 f8ac 	bl	8009fa0 <_sbrk_r>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d101      	bne.n	8009e50 <sbrk_aligned+0x38>
 8009e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e50:	4620      	mov	r0, r4
 8009e52:	bd70      	pop	{r4, r5, r6, pc}
 8009e54:	20006788 	.word	0x20006788

08009e58 <_malloc_r>:
 8009e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5c:	1ccd      	adds	r5, r1, #3
 8009e5e:	f025 0503 	bic.w	r5, r5, #3
 8009e62:	3508      	adds	r5, #8
 8009e64:	2d0c      	cmp	r5, #12
 8009e66:	bf38      	it	cc
 8009e68:	250c      	movcc	r5, #12
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	db01      	blt.n	8009e74 <_malloc_r+0x1c>
 8009e70:	42a9      	cmp	r1, r5
 8009e72:	d905      	bls.n	8009e80 <_malloc_r+0x28>
 8009e74:	230c      	movs	r3, #12
 8009e76:	603b      	str	r3, [r7, #0]
 8009e78:	2600      	movs	r6, #0
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	4e2e      	ldr	r6, [pc, #184]	; (8009f3c <_malloc_r+0xe4>)
 8009e82:	f000 f89d 	bl	8009fc0 <__malloc_lock>
 8009e86:	6833      	ldr	r3, [r6, #0]
 8009e88:	461c      	mov	r4, r3
 8009e8a:	bb34      	cbnz	r4, 8009eda <_malloc_r+0x82>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7ff ffc2 	bl	8009e18 <sbrk_aligned>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	4604      	mov	r4, r0
 8009e98:	d14d      	bne.n	8009f36 <_malloc_r+0xde>
 8009e9a:	6834      	ldr	r4, [r6, #0]
 8009e9c:	4626      	mov	r6, r4
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	d140      	bne.n	8009f24 <_malloc_r+0xcc>
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	eb04 0803 	add.w	r8, r4, r3
 8009eac:	f000 f878 	bl	8009fa0 <_sbrk_r>
 8009eb0:	4580      	cmp	r8, r0
 8009eb2:	d13a      	bne.n	8009f2a <_malloc_r+0xd2>
 8009eb4:	6821      	ldr	r1, [r4, #0]
 8009eb6:	3503      	adds	r5, #3
 8009eb8:	1a6d      	subs	r5, r5, r1
 8009eba:	f025 0503 	bic.w	r5, r5, #3
 8009ebe:	3508      	adds	r5, #8
 8009ec0:	2d0c      	cmp	r5, #12
 8009ec2:	bf38      	it	cc
 8009ec4:	250c      	movcc	r5, #12
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4638      	mov	r0, r7
 8009eca:	f7ff ffa5 	bl	8009e18 <sbrk_aligned>
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d02b      	beq.n	8009f2a <_malloc_r+0xd2>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	442b      	add	r3, r5
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	e00e      	b.n	8009ef8 <_malloc_r+0xa0>
 8009eda:	6822      	ldr	r2, [r4, #0]
 8009edc:	1b52      	subs	r2, r2, r5
 8009ede:	d41e      	bmi.n	8009f1e <_malloc_r+0xc6>
 8009ee0:	2a0b      	cmp	r2, #11
 8009ee2:	d916      	bls.n	8009f12 <_malloc_r+0xba>
 8009ee4:	1961      	adds	r1, r4, r5
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	6025      	str	r5, [r4, #0]
 8009eea:	bf18      	it	ne
 8009eec:	6059      	strne	r1, [r3, #4]
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	bf08      	it	eq
 8009ef2:	6031      	streq	r1, [r6, #0]
 8009ef4:	5162      	str	r2, [r4, r5]
 8009ef6:	604b      	str	r3, [r1, #4]
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f104 060b 	add.w	r6, r4, #11
 8009efe:	f000 f865 	bl	8009fcc <__malloc_unlock>
 8009f02:	f026 0607 	bic.w	r6, r6, #7
 8009f06:	1d23      	adds	r3, r4, #4
 8009f08:	1af2      	subs	r2, r6, r3
 8009f0a:	d0b6      	beq.n	8009e7a <_malloc_r+0x22>
 8009f0c:	1b9b      	subs	r3, r3, r6
 8009f0e:	50a3      	str	r3, [r4, r2]
 8009f10:	e7b3      	b.n	8009e7a <_malloc_r+0x22>
 8009f12:	6862      	ldr	r2, [r4, #4]
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	bf0c      	ite	eq
 8009f18:	6032      	streq	r2, [r6, #0]
 8009f1a:	605a      	strne	r2, [r3, #4]
 8009f1c:	e7ec      	b.n	8009ef8 <_malloc_r+0xa0>
 8009f1e:	4623      	mov	r3, r4
 8009f20:	6864      	ldr	r4, [r4, #4]
 8009f22:	e7b2      	b.n	8009e8a <_malloc_r+0x32>
 8009f24:	4634      	mov	r4, r6
 8009f26:	6876      	ldr	r6, [r6, #4]
 8009f28:	e7b9      	b.n	8009e9e <_malloc_r+0x46>
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	603b      	str	r3, [r7, #0]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	f000 f84c 	bl	8009fcc <__malloc_unlock>
 8009f34:	e7a1      	b.n	8009e7a <_malloc_r+0x22>
 8009f36:	6025      	str	r5, [r4, #0]
 8009f38:	e7de      	b.n	8009ef8 <_malloc_r+0xa0>
 8009f3a:	bf00      	nop
 8009f3c:	20006784 	.word	0x20006784

08009f40 <_realloc_r>:
 8009f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	4680      	mov	r8, r0
 8009f46:	4614      	mov	r4, r2
 8009f48:	460e      	mov	r6, r1
 8009f4a:	b921      	cbnz	r1, 8009f56 <_realloc_r+0x16>
 8009f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f50:	4611      	mov	r1, r2
 8009f52:	f7ff bf81 	b.w	8009e58 <_malloc_r>
 8009f56:	b92a      	cbnz	r2, 8009f64 <_realloc_r+0x24>
 8009f58:	f7ff ff12 	bl	8009d80 <_free_r>
 8009f5c:	4625      	mov	r5, r4
 8009f5e:	4628      	mov	r0, r5
 8009f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f64:	f000 f838 	bl	8009fd8 <_malloc_usable_size_r>
 8009f68:	4284      	cmp	r4, r0
 8009f6a:	4607      	mov	r7, r0
 8009f6c:	d802      	bhi.n	8009f74 <_realloc_r+0x34>
 8009f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f72:	d812      	bhi.n	8009f9a <_realloc_r+0x5a>
 8009f74:	4621      	mov	r1, r4
 8009f76:	4640      	mov	r0, r8
 8009f78:	f7ff ff6e 	bl	8009e58 <_malloc_r>
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0ed      	beq.n	8009f5e <_realloc_r+0x1e>
 8009f82:	42bc      	cmp	r4, r7
 8009f84:	4622      	mov	r2, r4
 8009f86:	4631      	mov	r1, r6
 8009f88:	bf28      	it	cs
 8009f8a:	463a      	movcs	r2, r7
 8009f8c:	f7ff fbb8 	bl	8009700 <memcpy>
 8009f90:	4631      	mov	r1, r6
 8009f92:	4640      	mov	r0, r8
 8009f94:	f7ff fef4 	bl	8009d80 <_free_r>
 8009f98:	e7e1      	b.n	8009f5e <_realloc_r+0x1e>
 8009f9a:	4635      	mov	r5, r6
 8009f9c:	e7df      	b.n	8009f5e <_realloc_r+0x1e>
	...

08009fa0 <_sbrk_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d06      	ldr	r5, [pc, #24]	; (8009fbc <_sbrk_r+0x1c>)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4608      	mov	r0, r1
 8009faa:	602b      	str	r3, [r5, #0]
 8009fac:	f7f6 ff98 	bl	8000ee0 <_sbrk>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_sbrk_r+0x1a>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_sbrk_r+0x1a>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	2000678c 	.word	0x2000678c

08009fc0 <__malloc_lock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__malloc_lock+0x8>)
 8009fc2:	f000 b811 	b.w	8009fe8 <__retarget_lock_acquire_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20006790 	.word	0x20006790

08009fcc <__malloc_unlock>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	; (8009fd4 <__malloc_unlock+0x8>)
 8009fce:	f000 b80c 	b.w	8009fea <__retarget_lock_release_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	20006790 	.word	0x20006790

08009fd8 <_malloc_usable_size_r>:
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f18      	subs	r0, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfbc      	itt	lt
 8009fe2:	580b      	ldrlt	r3, [r1, r0]
 8009fe4:	18c0      	addlt	r0, r0, r3
 8009fe6:	4770      	bx	lr

08009fe8 <__retarget_lock_acquire_recursive>:
 8009fe8:	4770      	bx	lr

08009fea <__retarget_lock_release_recursive>:
 8009fea:	4770      	bx	lr

08009fec <_init>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr

08009ff8 <_fini>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr
