
minibot32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009d78  08009d78  00019d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f68  08009f68  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f70  08009f70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f70  08009f70  00019f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f74  08009f74  00019f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00006700  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006710  20006710  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a95  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005685  00000000  00000000  00041ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  00047160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00048bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ea0  00000000  00000000  0004a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022254  00000000  00000000  00073258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db2ac  00000000  00000000  000954ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00170758  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069cc  00000000  00000000  001707a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d60 	.word	0x08009d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009d60 	.word	0x08009d60

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_CAN1_Init+0xc8>)
 80004dc:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <MX_CAN1_Init+0xcc>)
 80004de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e2:	2206      	movs	r2, #6
 80004e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_CAN1_Init+0xc8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_CAN1_Init+0xc8>)
 80004f4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80004f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_CAN1_Init+0xc8>)
 80004fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000500:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_CAN1_Init+0xc8>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_CAN1_Init+0xc8>)
 800050a:	2201      	movs	r2, #1
 800050c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_CAN1_Init+0xc8>)
 8000510:	2200      	movs	r2, #0
 8000512:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_CAN1_Init+0xc8>)
 8000516:	2200      	movs	r2, #0
 8000518:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_CAN1_Init+0xc8>)
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_CAN1_Init+0xc8>)
 8000522:	2201      	movs	r2, #1
 8000524:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <MX_CAN1_Init+0xc8>)
 8000528:	f002 f8d4 	bl	80026d4 <HAL_CAN_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000532:	f000 fb07 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_CAN1_Init+0xc8>)
 8000560:	f002 f9b4 	bl	80028cc <HAL_CAN_ConfigFilter>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_CAN1_Init+0x9a>
  {
  	Error_Handler();
 800056a:	f000 faeb 	bl	8000b44 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_CAN1_Init+0xc8>)
 8000570:	f002 fa8c 	bl	8002a8c <HAL_CAN_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_CAN1_Init+0xaa>
	Error_Handler();
 800057a:	f000 fae3 	bl	8000b44 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1,
 800057e:	f648 4102 	movw	r1, #35842	; 0x8c02
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_CAN1_Init+0xc8>)
 8000584:	f002 fbd6 	bl	8002d34 <HAL_CAN_ActivateNotification>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0xbe>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
	Error_Handler();
 800058e:	f000 fad9 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <HAL_CAN_MspInit+0x84>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d12c      	bne.n	8000620 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_CAN_MspInit+0x88>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000610:	2309      	movs	r3, #9
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_CAN_MspInit+0x8c>)
 800061c:	f003 fb78 	bl	8003d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40006400 	.word	0x40006400
 800062c:	40023800 	.word	0x40023800
 8000630:	40020400 	.word	0x40020400

08000634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_DMA_Init+0x78>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1a      	ldr	r2, [pc, #104]	; (80006ac <MX_DMA_Init+0x78>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_DMA_Init+0x78>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_DMA_Init+0x78>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <MX_DMA_Init+0x78>)
 8000660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_DMA_Init+0x78>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2105      	movs	r1, #5
 8000676:	200c      	movs	r0, #12
 8000678:	f002 fc3a 	bl	8002ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800067c:	200c      	movs	r0, #12
 800067e:	f002 fc53 	bl	8002f28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2105      	movs	r1, #5
 8000686:	2010      	movs	r0, #16
 8000688:	f002 fc32 	bl	8002ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800068c:	2010      	movs	r0, #16
 800068e:	f002 fc4b 	bl	8002f28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	203a      	movs	r0, #58	; 0x3a
 8000698:	f002 fc2a 	bl	8002ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800069c:	203a      	movs	r0, #58	; 0x3a
 800069e:	f002 fc43 	bl	8002f28 <HAL_NVIC_EnableIRQ>

}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <MX_FREERTOS_Init+0x88>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4820      	ldr	r0, [pc, #128]	; (800073c <MX_FREERTOS_Init+0x8c>)
 80006ba:	f006 fe11 	bl	80072e0 <osThreadNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <MX_FREERTOS_Init+0x90>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* creation of OutputsTask */
  OutputsTaskHandle = osThreadNew(StartOutputsTask, NULL, &OutputsTask_attributes);
 80006c4:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <MX_FREERTOS_Init+0x94>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	481f      	ldr	r0, [pc, #124]	; (8000748 <MX_FREERTOS_Init+0x98>)
 80006ca:	f006 fe09 	bl	80072e0 <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_FREERTOS_Init+0x9c>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of InputsTask */
  InputsTaskHandle = osThreadNew(StartInputsTask, NULL, &InputsTask_attributes);
 80006d4:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_FREERTOS_Init+0xa0>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	481e      	ldr	r0, [pc, #120]	; (8000754 <MX_FREERTOS_Init+0xa4>)
 80006da:	f006 fe01 	bl	80072e0 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <MX_FREERTOS_Init+0xa8>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartServoTask, NULL, &ServoTask_attributes);
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <MX_FREERTOS_Init+0xac>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	481d      	ldr	r0, [pc, #116]	; (8000760 <MX_FREERTOS_Init+0xb0>)
 80006ea:	f006 fdf9 	bl	80072e0 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_FREERTOS_Init+0xb4>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of UartWiFiTask */
  UartWiFiTaskHandle = osThreadNew(StartUartWiFiTask, NULL, &UartWiFiTask_attributes);
 80006f4:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_FREERTOS_Init+0xb8>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <MX_FREERTOS_Init+0xbc>)
 80006fa:	f006 fdf1 	bl	80072e0 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_FREERTOS_Init+0xc0>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of CanDriversTask */
  CanDriversTaskHandle = osThreadNew(StartCanDriversTask, NULL, &CanDriversTask_attributes);
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_FREERTOS_Init+0xc4>)
 8000706:	2100      	movs	r1, #0
 8000708:	481b      	ldr	r0, [pc, #108]	; (8000778 <MX_FREERTOS_Init+0xc8>)
 800070a:	f006 fde9 	bl	80072e0 <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <MX_FREERTOS_Init+0xcc>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 8000714:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <MX_FREERTOS_Init+0xd0>)
 8000716:	2100      	movs	r1, #0
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <MX_FREERTOS_Init+0xd4>)
 800071a:	f006 fde1 	bl	80072e0 <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a19      	ldr	r2, [pc, #100]	; (8000788 <MX_FREERTOS_Init+0xd8>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of MissionsTask */
  MissionsTaskHandle = osThreadNew(StartMissionsTask, NULL, &MissionsTask_attributes);
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <MX_FREERTOS_Init+0xdc>)
 8000726:	2100      	movs	r1, #0
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <MX_FREERTOS_Init+0xe0>)
 800072a:	f006 fdd9 	bl	80072e0 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_FREERTOS_Init+0xe4>)
 8000732:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	08009df8 	.word	0x08009df8
 800073c:	08000799 	.word	0x08000799
 8000740:	200000bc 	.word	0x200000bc
 8000744:	08009e1c 	.word	0x08009e1c
 8000748:	08001dcd 	.word	0x08001dcd
 800074c:	2000031c 	.word	0x2000031c
 8000750:	08009e40 	.word	0x08009e40
 8000754:	08001c25 	.word	0x08001c25
 8000758:	2000057c 	.word	0x2000057c
 800075c:	08009e64 	.word	0x08009e64
 8000760:	08001e95 	.word	0x08001e95
 8000764:	200007dc 	.word	0x200007dc
 8000768:	08009e88 	.word	0x08009e88
 800076c:	08001ea5 	.word	0x08001ea5
 8000770:	20000a3c 	.word	0x20000a3c
 8000774:	08009eac 	.word	0x08009eac
 8000778:	080019cd 	.word	0x080019cd
 800077c:	20000e9c 	.word	0x20000e9c
 8000780:	08009ed0 	.word	0x08009ed0
 8000784:	080018e1 	.word	0x080018e1
 8000788:	200010fc 	.word	0x200010fc
 800078c:	08009ef4 	.word	0x08009ef4
 8000790:	08001dc1 	.word	0x08001dc1
 8000794:	2000155c 	.word	0x2000155c

08000798 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a4:	f006 fe2e 	bl	8007404 <osDelay>
 80007a8:	e7fa      	b.n	80007a0 <StartDefaultTask+0x8>
	...

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b7d      	ldr	r3, [pc, #500]	; (80009bc <MX_GPIO_Init+0x210>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a7c      	ldr	r2, [pc, #496]	; (80009bc <MX_GPIO_Init+0x210>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b7a      	ldr	r3, [pc, #488]	; (80009bc <MX_GPIO_Init+0x210>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b76      	ldr	r3, [pc, #472]	; (80009bc <MX_GPIO_Init+0x210>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a75      	ldr	r2, [pc, #468]	; (80009bc <MX_GPIO_Init+0x210>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b73      	ldr	r3, [pc, #460]	; (80009bc <MX_GPIO_Init+0x210>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b6f      	ldr	r3, [pc, #444]	; (80009bc <MX_GPIO_Init+0x210>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a6e      	ldr	r2, [pc, #440]	; (80009bc <MX_GPIO_Init+0x210>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b6c      	ldr	r3, [pc, #432]	; (80009bc <MX_GPIO_Init+0x210>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b68      	ldr	r3, [pc, #416]	; (80009bc <MX_GPIO_Init+0x210>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a67      	ldr	r2, [pc, #412]	; (80009bc <MX_GPIO_Init+0x210>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b65      	ldr	r3, [pc, #404]	; (80009bc <MX_GPIO_Init+0x210>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b61      	ldr	r3, [pc, #388]	; (80009bc <MX_GPIO_Init+0x210>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a60      	ldr	r2, [pc, #384]	; (80009bc <MX_GPIO_Init+0x210>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b5e      	ldr	r3, [pc, #376]	; (80009bc <MX_GPIO_Init+0x210>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b5a      	ldr	r3, [pc, #360]	; (80009bc <MX_GPIO_Init+0x210>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a59      	ldr	r2, [pc, #356]	; (80009bc <MX_GPIO_Init+0x210>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b57      	ldr	r3, [pc, #348]	; (80009bc <MX_GPIO_Init+0x210>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2132      	movs	r1, #50	; 0x32
 800086e:	4854      	ldr	r0, [pc, #336]	; (80009c0 <MX_GPIO_Init+0x214>)
 8000870:	f003 fbea 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800087a:	4852      	ldr	r0, [pc, #328]	; (80009c4 <MX_GPIO_Init+0x218>)
 800087c:	f003 fbe4 	bl	8004048 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f24c 0103 	movw	r1, #49155	; 0xc003
 8000886:	4850      	ldr	r0, [pc, #320]	; (80009c8 <MX_GPIO_Init+0x21c>)
 8000888:	f003 fbde 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800088c:	2201      	movs	r2, #1
 800088e:	f64f 7180 	movw	r1, #65408	; 0xff80
 8000892:	484e      	ldr	r0, [pc, #312]	; (80009cc <MX_GPIO_Init+0x220>)
 8000894:	f003 fbd8 	bl	8004048 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800089e:	484c      	ldr	r0, [pc, #304]	; (80009d0 <MX_GPIO_Init+0x224>)
 80008a0:	f003 fbd2 	bl	8004048 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008a4:	237e      	movs	r3, #126	; 0x7e
 80008a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4845      	ldr	r0, [pc, #276]	; (80009cc <MX_GPIO_Init+0x220>)
 80008b8:	f003 fa2a 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	483b      	ldr	r0, [pc, #236]	; (80009c0 <MX_GPIO_Init+0x214>)
 80008d2:	f003 fa1d 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008d6:	2332      	movs	r3, #50	; 0x32
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4834      	ldr	r0, [pc, #208]	; (80009c0 <MX_GPIO_Init+0x214>)
 80008ee:	f003 fa0f 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80008f2:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80008f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	482e      	ldr	r0, [pc, #184]	; (80009c4 <MX_GPIO_Init+0x218>)
 800090c:	f003 fa00 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8000910:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4827      	ldr	r0, [pc, #156]	; (80009c8 <MX_GPIO_Init+0x21c>)
 800092a:	f003 f9f1 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800092e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000932:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_GPIO_Init+0x220>)
 8000948:	f003 f9e2 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800094c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000950:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <MX_GPIO_Init+0x224>)
 8000966:	f003 f9d3 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000980:	f003 f9c6 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000984:	23ff      	movs	r3, #255	; 0xff
 8000986:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_GPIO_Init+0x224>)
 8000998:	f003 f9ba 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800099c:	2338      	movs	r3, #56	; 0x38
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_GPIO_Init+0x21c>)
 80009b0:	f003 f9ae 	bl	8003d10 <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020c00 	.word	0x40020c00

080009d4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_IWDG_Init+0x2c>)
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <MX_IWDG_Init+0x30>)
 80009dc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_IWDG_Init+0x2c>)
 80009e0:	2203      	movs	r2, #3
 80009e2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_IWDG_Init+0x2c>)
 80009e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009ea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_IWDG_Init+0x2c>)
 80009ee:	f003 fb44 	bl	800407a <HAL_IWDG_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80009f8:	f000 f8a4 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200019bc 	.word	0x200019bc
 8000a04:	40003000 	.word	0x40003000

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f001 fe20 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f81a 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f7ff feca 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a18:	f7ff fe0c 	bl	8000634 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a1c:	f000 fb3e 	bl	800109c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a20:	f000 fb66 	bl	80010f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a24:	f000 fb8e 	bl	8001144 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000a28:	f000 f9a8 	bl	8000d7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a2c:	f000 fa3e 	bl	8000eac <MX_TIM4_Init>
  MX_IWDG_Init();
 8000a30:	f7ff ffd0 	bl	80009d4 <MX_IWDG_Init>
  MX_CAN1_Init();
 8000a34:	f7ff fd4e 	bl	80004d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a38:	f006 fc08 	bl	800724c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a3c:	f7ff fe38 	bl	80006b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a40:	f006 fc28 	bl	8007294 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x3c>
	...

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f009 f97a 	bl	8009d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac0:	23a8      	movs	r3, #168	; 0xa8
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 fb25 	bl	8004120 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000adc:	f000 f832 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2105      	movs	r1, #5
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fd86 	bl	8004610 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b0a:	f000 f81b 	bl	8000b44 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3750      	adds	r7, #80	; 0x50
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b32:	f001 fdaf 	bl	8002694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	210f      	movs	r1, #15
 8000b92:	f06f 0001 	mvn.w	r0, #1
 8000b96:	f002 f9ab 	bl	8002ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_InitTick+0xe4>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <HAL_InitTick+0xe4>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_InitTick+0xe4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd4:	f107 0210 	add.w	r2, r7, #16
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 ff36 	bl	8004a50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d103      	bne.n	8000bf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bee:	f003 ff07 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8000bf2:	6378      	str	r0, [r7, #52]	; 0x34
 8000bf4:	e004      	b.n	8000c00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bf6:	f003 ff03 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <HAL_InitTick+0xe8>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	0c9b      	lsrs	r3, r3, #18
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_InitTick+0xec>)
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_InitTick+0xf0>)
 8000c12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_InitTick+0xec>)
 8000c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_InitTick+0xec>)
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_InitTick+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_InitTick+0xec>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_InitTick+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_InitTick+0xec>)
 8000c36:	f003 ff3d 	bl	8004ab4 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11b      	bne.n	8000c80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <HAL_InitTick+0xec>)
 8000c4a:	f003 ff83 	bl	8004b54 <HAL_TIM_Base_Start_IT>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d111      	bne.n	8000c80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c5c:	2036      	movs	r0, #54	; 0x36
 8000c5e:	f002 f963 	bl	8002f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d808      	bhi.n	8000c7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2036      	movs	r0, #54	; 0x36
 8000c6e:	f002 f93f 	bl	8002ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_InitTick+0xf4>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	e002      	b.n	8000c80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3738      	adds	r7, #56	; 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	200019c8 	.word	0x200019c8
 8000c98:	40001000 	.word	0x40001000
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA1_Stream1_IRQHandler+0x10>)
 8000cd2:	f002 facf 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20001c2c 	.word	0x20001c2c

08000ce0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ce6:	f002 fac5 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20001bcc 	.word	0x20001bcc

08000cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <USART1_IRQHandler+0x10>)
 8000cfa:	f005 f971 	bl	8005fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20001aa0 	.word	0x20001aa0

08000d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART2_IRQHandler+0x10>)
 8000d0e:	f005 f967 	bl	8005fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20001ae4 	.word	0x20001ae4

08000d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART3_IRQHandler+0x10>)
 8000d22:	f005 f95d 	bl	8005fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20001b28 	.word	0x20001b28

08000d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM6_DAC_IRQHandler+0x10>)
 8000d36:	f004 f9b5 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200019c8 	.word	0x200019c8

08000d44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <DMA2_Stream2_IRQHandler+0x10>)
 8000d4a:	f002 fa93 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20001b6c 	.word	0x20001b6c

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000dae:	4a3e      	ldr	r2, [pc, #248]	; (8000ea8 <MX_TIM3_Init+0x12c>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000db4:	f240 3247 	movw	r2, #839	; 0x347
 8000db8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000dc0:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000dc2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000dc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd4:	4833      	ldr	r0, [pc, #204]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000dd6:	f003 fe6d 	bl	8004ab4 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000de0:	f7ff feb0 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	4619      	mov	r1, r3
 8000df0:	482c      	ldr	r0, [pc, #176]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000df2:	f004 fb21 	bl	8005438 <HAL_TIM_ConfigClockSource>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000dfc:	f7ff fea2 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e00:	4828      	ldr	r0, [pc, #160]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000e02:	f003 ff17 	bl	8004c34 <HAL_TIM_PWM_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e0c:	f7ff fe9a 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4821      	ldr	r0, [pc, #132]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000e20:	f004 ff0a 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e2a:	f7ff fe8b 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2e:	2360      	movs	r3, #96	; 0x60
 8000e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	4619      	mov	r1, r3
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000e46:	f004 fa35 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e50:	f7ff fe78 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2204      	movs	r2, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000e5c:	f004 fa2a 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000e66:	f7ff fe6d 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000e72:	f004 fa1f 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000e7c:	f7ff fe62 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	220c      	movs	r2, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000e88:	f004 fa14 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000e92:	f7ff fe57 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM3_Init+0x128>)
 8000e98:	f000 f8c6 	bl	8001028 <HAL_TIM_MspPostInit>

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20001a10 	.word	0x20001a10
 8000ea8:	40000400 	.word	0x40000400

08000eac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2224      	movs	r2, #36	; 0x24
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f008 ff48 	bl	8009d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <MX_TIM4_Init+0xa4>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000f1a:	f004 f81d 	bl	8004f58 <HAL_TIM_Encoder_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f24:	f7ff fe0e 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_TIM4_Init+0xa0>)
 8000f36:	f004 fe7f 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000f40:	f7ff fe00 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	3730      	adds	r7, #48	; 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20001a58 	.word	0x20001a58
 8000f50:	40000800 	.word	0x40000800

08000f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_TIM_Base_MspInit+0x3c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10d      	bne.n	8000f82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_TIM_Base_MspInit+0x40>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <HAL_TIM_Base_MspInit+0x40>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_TIM_Base_MspInit+0x40>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40000400 	.word	0x40000400
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_TIM_Encoder_MspInit+0x84>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12b      	bne.n	8001012 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff2:	23c0      	movs	r3, #192	; 0xc0
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001002:	2302      	movs	r3, #2
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_TIM_Encoder_MspInit+0x8c>)
 800100e:	f002 fe7f 	bl	8003d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40000800 	.word	0x40000800
 8001020:	40023800 	.word	0x40023800
 8001024:	40020400 	.word	0x40020400

08001028 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <HAL_TIM_MspPostInit+0x68>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d11e      	bne.n	8001088 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_TIM_MspPostInit+0x6c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001066:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800106a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_TIM_MspPostInit+0x70>)
 8001084:	f002 fe44 	bl	8003d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40000400 	.word	0x40000400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020800 	.word	0x40020800

0800109c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_USART1_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010d4:	f004 fe40 	bl	8005d58 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f7ff fd31 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20001aa0 	.word	0x20001aa0
 80010ec:	40011000 	.word	0x40011000

080010f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_USART2_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_USART2_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_USART2_UART_Init+0x4c>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_USART2_UART_Init+0x4c>)
 8001128:	f004 fe16 	bl	8005d58 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f7ff fd07 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20001ae4 	.word	0x20001ae4
 8001140:	40004400 	.word	0x40004400

08001144 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART3_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART3_UART_Init+0x4c>)
 800117c:	f004 fdec 	bl	8005d58 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f7ff fcdd 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20001b28 	.word	0x20001b28
 8001194:	40004800 	.word	0x40004800

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a9d      	ldr	r2, [pc, #628]	; (800142c <HAL_UART_MspInit+0x294>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d163      	bne.n	8001282 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
 80011be:	4b9c      	ldr	r3, [pc, #624]	; (8001430 <HAL_UART_MspInit+0x298>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a9b      	ldr	r2, [pc, #620]	; (8001430 <HAL_UART_MspInit+0x298>)
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b99      	ldr	r3, [pc, #612]	; (8001430 <HAL_UART_MspInit+0x298>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	623b      	str	r3, [r7, #32]
 80011d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	4b95      	ldr	r3, [pc, #596]	; (8001430 <HAL_UART_MspInit+0x298>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a94      	ldr	r2, [pc, #592]	; (8001430 <HAL_UART_MspInit+0x298>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_UART_MspInit+0x298>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001204:	2307      	movs	r3, #7
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4889      	ldr	r0, [pc, #548]	; (8001434 <HAL_UART_MspInit+0x29c>)
 8001210:	f002 fd7e 	bl	8003d10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001216:	4a89      	ldr	r2, [pc, #548]	; (800143c <HAL_UART_MspInit+0x2a4>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800121a:	4b87      	ldr	r3, [pc, #540]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 800121c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001220:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b85      	ldr	r3, [pc, #532]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b83      	ldr	r3, [pc, #524]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b82      	ldr	r3, [pc, #520]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001236:	4b80      	ldr	r3, [pc, #512]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123c:	4b7e      	ldr	r3, [pc, #504]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001242:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001248:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124e:	4b7a      	ldr	r3, [pc, #488]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001254:	4878      	ldr	r0, [pc, #480]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001256:	f001 fe75 	bl	8002f44 <HAL_DMA_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001260:	f7ff fc70 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a74      	ldr	r2, [pc, #464]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
 800126a:	4a73      	ldr	r2, [pc, #460]	; (8001438 <HAL_UART_MspInit+0x2a0>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2105      	movs	r1, #5
 8001274:	2025      	movs	r0, #37	; 0x25
 8001276:	f001 fe3b 	bl	8002ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800127a:	2025      	movs	r0, #37	; 0x25
 800127c:	f001 fe54 	bl	8002f28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001280:	e0cf      	b.n	8001422 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6e      	ldr	r2, [pc, #440]	; (8001440 <HAL_UART_MspInit+0x2a8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d162      	bne.n	8001352 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	4b67      	ldr	r3, [pc, #412]	; (8001430 <HAL_UART_MspInit+0x298>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a66      	ldr	r2, [pc, #408]	; (8001430 <HAL_UART_MspInit+0x298>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b64      	ldr	r3, [pc, #400]	; (8001430 <HAL_UART_MspInit+0x298>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	4b60      	ldr	r3, [pc, #384]	; (8001430 <HAL_UART_MspInit+0x298>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <HAL_UART_MspInit+0x298>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <HAL_UART_MspInit+0x298>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c4:	230c      	movs	r3, #12
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d4:	2307      	movs	r3, #7
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	4855      	ldr	r0, [pc, #340]	; (8001434 <HAL_UART_MspInit+0x29c>)
 80012e0:	f002 fd16 	bl	8003d10 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012e4:	4b57      	ldr	r3, [pc, #348]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 80012e6:	4a58      	ldr	r2, [pc, #352]	; (8001448 <HAL_UART_MspInit+0x2b0>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012ea:	4b56      	ldr	r3, [pc, #344]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 80012ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 8001300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001304:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800130c:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001324:	4847      	ldr	r0, [pc, #284]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 8001326:	f001 fe0d 	bl	8002f44 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001330:	f7ff fc08 	bl	8000b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a43      	ldr	r2, [pc, #268]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
 800133a:	4a42      	ldr	r2, [pc, #264]	; (8001444 <HAL_UART_MspInit+0x2ac>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2105      	movs	r1, #5
 8001344:	2026      	movs	r0, #38	; 0x26
 8001346:	f001 fdd3 	bl	8002ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800134a:	2026      	movs	r0, #38	; 0x26
 800134c:	f001 fdec 	bl	8002f28 <HAL_NVIC_EnableIRQ>
}
 8001350:	e067      	b.n	8001422 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a3d      	ldr	r2, [pc, #244]	; (800144c <HAL_UART_MspInit+0x2b4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d162      	bne.n	8001422 <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <HAL_UART_MspInit+0x298>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_UART_MspInit+0x298>)
 8001366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <HAL_UART_MspInit+0x298>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_UART_MspInit+0x298>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <HAL_UART_MspInit+0x298>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6313      	str	r3, [r2, #48]	; 0x30
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_UART_MspInit+0x298>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001394:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a6:	2307      	movs	r3, #7
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4827      	ldr	r0, [pc, #156]	; (8001450 <HAL_UART_MspInit+0x2b8>)
 80013b2:	f002 fcad 	bl	8003d10 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_UART_MspInit+0x2c0>)
 80013ba:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 80013f8:	f001 fda4 	bl	8002f44 <HAL_DMA_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001402:	f7ff fb9f 	bl	8000b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 800140a:	639a      	str	r2, [r3, #56]	; 0x38
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_UART_MspInit+0x2bc>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2105      	movs	r1, #5
 8001416:	2027      	movs	r0, #39	; 0x27
 8001418:	f001 fd6a 	bl	8002ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800141c:	2027      	movs	r0, #39	; 0x27
 800141e:	f001 fd83 	bl	8002f28 <HAL_NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3738      	adds	r7, #56	; 0x38
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40011000 	.word	0x40011000
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000
 8001438:	20001b6c 	.word	0x20001b6c
 800143c:	40026440 	.word	0x40026440
 8001440:	40004400 	.word	0x40004400
 8001444:	20001bcc 	.word	0x20001bcc
 8001448:	40026088 	.word	0x40026088
 800144c:	40004800 	.word	0x40004800
 8001450:	40020400 	.word	0x40020400
 8001454:	20001c2c 	.word	0x20001c2c
 8001458:	40026028 	.word	0x40026028

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001462:	490e      	ldr	r1, [pc, #56]	; (800149c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001478:	4c0b      	ldr	r4, [pc, #44]	; (80014a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001486:	f7ff fc67 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f008 fc2f 	bl	8009cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff fabb 	bl	8000a08 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014a0:	08009f78 	.word	0x08009f78
  ldr r2, =_sbss
 80014a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014a8:	20006710 	.word	0x20006710

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>

080014ae <_ZN16KeyaLKTechDriverC1Emmm>:
 *      Author: user
 */

#include <KeyaLKTechDriver.h>

KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, uint32_t stdId = 0)
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]
{
	_axis = axis;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	621a      	str	r2, [r3, #32]
	_canTxHeader.ExtId = extId;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	605a      	str	r2, [r3, #4]
	_canTxHeader.StdId = stdId;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	601a      	str	r2, [r3, #0]
	_canTxHeader.RTR = CAN_RTR_DATA;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
	_canTxHeader.DLC = 8;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2208      	movs	r2, #8
 80014d8:	611a      	str	r2, [r3, #16]
	_canTxHeader.TransmitGlobalTime = DISABLE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	751a      	strb	r2, [r3, #20]
	if (extId)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <_ZN16KeyaLKTechDriverC1Emmm+0x40>
	{
		_canTxHeader.IDE = CAN_ID_EXT;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2204      	movs	r2, #4
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e002      	b.n	80014f4 <_ZN16KeyaLKTechDriverC1Emmm+0x46>
	}
	else
	{
		_canTxHeader.IDE = CAN_ID_STD;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
	}
}
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_ZN16KeyaLKTechDriverC1Em>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis) : KeyaLKTechDriver::KeyaLKTechDriver(extId, axis, 0){}
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t stdId) : KeyaLKTechDriver::KeyaLKTechDriver(0, 0, stdId){}
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffcb 	bl	80014ae <_ZN16KeyaLKTechDriverC1Emmm>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_ZN16KeyaLKTechDriver8setSpeedEl>:

uint8_t KeyaLKTechDriver::setSpeed(int32_t speed)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
	if (_axis)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d021      	beq.n	8001578 <_ZN16KeyaLKTechDriver8setSpeedEl+0x56>
	{
		_canData[0] = 0x23;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2223      	movs	r2, #35	; 0x23
 8001538:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2220      	movs	r2, #32
 8001544:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	76da      	strb	r2, [r3, #27]
		_canData[4] = speed >> 24;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	161b      	asrs	r3, r3, #24
 8001554:	b2da      	uxtb	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	771a      	strb	r2, [r3, #28]
		_canData[5] = speed >> 16;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	141b      	asrs	r3, r3, #16
 800155e:	b2da      	uxtb	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	775a      	strb	r2, [r3, #29]
		_canData[6] = speed >> 8;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	121b      	asrs	r3, r3, #8
 8001568:	b2da      	uxtb	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	779a      	strb	r2, [r3, #30]
		_canData[7] = speed;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	77da      	strb	r2, [r3, #31]
 8001576:	e01e      	b.n	80015b6 <_ZN16KeyaLKTechDriver8setSpeedEl+0x94>
	}
	else
	{
		_canData[0] = 0xA2;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	22a2      	movs	r2, #162	; 0xa2
 800157c:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	76da      	strb	r2, [r3, #27]
		_canData[4] = speed;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	771a      	strb	r2, [r3, #28]
		_canData[5] = speed >> 8;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	121b      	asrs	r3, r3, #8
 800159c:	b2da      	uxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	775a      	strb	r2, [r3, #29]
		_canData[6] = speed >> 16;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	141b      	asrs	r3, r3, #16
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	779a      	strb	r2, [r3, #30]
		_canData[7] = speed >> 24;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	161b      	asrs	r3, r3, #24
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	77da      	strb	r2, [r3, #31]
		_canData[5] = *((uint8_t *)(&speed)+1);
		_canData[6] = *((uint8_t *)(&speed)+2);
		_canData[7] = *((uint8_t *)(&speed)+3);*/
	}

	return KeyaLKTechDriver::sendData();
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8ce 	bl	8001758 <_ZN16KeyaLKTechDriver8sendDataEv>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_ZN16KeyaLKTechDriver4stopEv>:

uint8_t KeyaLKTechDriver::stop()
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01a      	beq.n	800160c <_ZN16KeyaLKTechDriver4stopEv+0x46>
		_canData[0] = 0x23;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2223      	movs	r2, #35	; 0x23
 80015da:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	77da      	strb	r2, [r3, #31]
 800160a:	e017      	b.n	800163c <_ZN16KeyaLKTechDriver4stopEv+0x76>
	} else {
		_canData[0] = 0x81;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2281      	movs	r2, #129	; 0x81
 8001610:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	77da      	strb	r2, [r3, #31]
	}

	return KeyaLKTechDriver::sendData();
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f88b 	bl	8001758 <_ZN16KeyaLKTechDriver8sendDataEv>
 8001642:	4603      	mov	r3, r0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN16KeyaLKTechDriver6enableEv>:

uint8_t KeyaLKTechDriver::enable()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (_axis) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01a      	beq.n	8001692 <_ZN16KeyaLKTechDriver6enableEv+0x46>
		_canData[0] = 0x23;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2223      	movs	r2, #35	; 0x23
 8001660:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x0D;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	220d      	movs	r2, #13
 8001666:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	77da      	strb	r2, [r3, #31]
 8001690:	e017      	b.n	80016c2 <_ZN16KeyaLKTechDriver6enableEv+0x76>
	} else {
		_canData[0] = 0x88;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2288      	movs	r2, #136	; 0x88
 8001696:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	77da      	strb	r2, [r3, #31]
	}

	return KeyaLKTechDriver::sendData();
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f848 	bl	8001758 <_ZN16KeyaLKTechDriver8sendDataEv>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZN16KeyaLKTechDriver7disableEv>:

uint8_t KeyaLKTechDriver::disable()
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01a      	beq.n	8001718 <_ZN16KeyaLKTechDriver7disableEv+0x46>
		_canData[0] = 0x23;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2223      	movs	r2, #35	; 0x23
 80016e6:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x0C;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	220c      	movs	r2, #12
 80016ec:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x20;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	769a      	strb	r2, [r3, #26]
		_canData[3] = _axis;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	77da      	strb	r2, [r3, #31]
 8001716:	e017      	b.n	8001748 <_ZN16KeyaLKTechDriver7disableEv+0x76>
	} else {
		_canData[0] = 0x80;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	761a      	strb	r2, [r3, #24]
		_canData[1] = 0x00;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	765a      	strb	r2, [r3, #25]
		_canData[2] = 0x00;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	769a      	strb	r2, [r3, #26]
		_canData[3] = 0x00;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	76da      	strb	r2, [r3, #27]
		_canData[4] = 0x00;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	771a      	strb	r2, [r3, #28]
		_canData[5] = 0x00;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	775a      	strb	r2, [r3, #29]
		_canData[6] = 0x00;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	779a      	strb	r2, [r3, #30]
		_canData[7] = 0x00;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	77da      	strb	r2, [r3, #31]
	}

	return KeyaLKTechDriver::sendData();
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f805 	bl	8001758 <_ZN16KeyaLKTechDriver8sendDataEv>
 800174e:	4603      	mov	r3, r0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZN16KeyaLKTechDriver8sendDataEv>:

uint8_t KeyaLKTechDriver::sendData()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return CanMsgSend(&_canTxHeader, _canData);
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3318      	adds	r3, #24
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f000 f8fd 	bl	8001968 <CanMsgSend>
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZN5ServoC1EP17TIM_HandleTypeDefm>:
 *      Author: user
 */

#include "Servo.h"

Servo::Servo(TIM_HandleTypeDef *htim, uint32_t timChannel)
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
{
	_htim = htim;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	601a      	str	r2, [r3, #0]
	_timChannel = timChannel;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_ZN5Servo8setAngleEl>:
uint8_t Servo::setAngle(int32_t angle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(_htim, _timChannel);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f003 fa97 	bl	8004ce8 <HAL_TIM_PWM_Start>
	TIM3->CCR1 = Servo::map(angle, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_W, SERVO_MAX_W);
 80017ba:	f240 7399 	movw	r3, #1945	; 0x799
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80017ca:	2200      	movs	r2, #0
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f828 	bl	8001824 <_ZN5Servo3mapEiiiii>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <_ZN5Servo8setAngleEl+0x80>)
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
	uint32_t comp = Servo::map(angle, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_W, SERVO_MAX_W);
 80017da:	f240 7399 	movw	r3, #1945	; 0x799
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80017ea:	2200      	movs	r2, #0
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f818 	bl	8001824 <_ZN5Servo3mapEiiiii>
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
	//__HAL_TIM_SET_COMPARE(_htim, _timChannel, comp);
	_angle = angle;
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
	osDelay(5000);
 80017fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8001802:	f005 fdff 	bl	8007404 <osDelay>
	HAL_TIM_PWM_Stop(_htim, _timChannel);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f003 fb31 	bl	8004e78 <HAL_TIM_PWM_Stop>
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40000400 	.word	0x40000400

08001824 <_ZN5Servo3mapEiiiii>:
	HAL_TIM_PWM_Stop(_htim, _timChannel);
	return 1;
}

int Servo::map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	69f9      	ldr	r1, [r7, #28]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	1a8a      	subs	r2, r1, r2
 800183e:	fb03 f202 	mul.w	r2, r3, r2
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	1acb      	subs	r3, r1, r3
 8001848:	fb92 f2f3 	sdiv	r2, r2, r3
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	4413      	add	r3, r2
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db12      	blt.n	80018d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	490a      	ldr	r1, [pc, #40]	; (80018dc <__NVIC_DisableIRQ+0x44>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	3320      	adds	r3, #32
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018c4:	f3bf 8f4f 	dsb	sy
}
 80018c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018ca:	f3bf 8f6f 	isb	sy
}
 80018ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <StartCanTask>:
uint8_t RxData[8] = { 0, };
uint32_t TxMailbox = 0;
CanDataRecvTypeDef canDataRecv;
CanDataSendTypeDef prevCanData;

void StartCanTask(void *argument) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		static uint32_t err_count = 0;
		if (NewCanMsg == CAN_GET_MSG_OK) {
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <StartCanTask+0x5c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <StartCanTask+0x30>
			NewCanMsg = CAN_GET_MSG_WAIT;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <StartCanTask+0x5c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
			err_count = 0;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <StartCanTask+0x60>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
			//globData.error.driver_conn = 0;
			CanMsgRead(&canDataRecv);
 8001908:	480e      	ldr	r0, [pc, #56]	; (8001944 <StartCanTask+0x64>)
 800190a:	f000 f81d 	bl	8001948 <CanMsgRead>
 800190e:	e011      	b.n	8001934 <StartCanTask+0x54>
		}
		else if (NewCanMsg == CAN_GET_MSG_ERROR) {
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <StartCanTask+0x5c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <StartCanTask+0x54>
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "CAN error\r\n", 11, 100);
			err_count++;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <StartCanTask+0x60>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <StartCanTask+0x60>)
 800192c:	6013      	str	r3, [r2, #0]
				globData.drv_cpu_temp = 0;
				globData.motor1_temp = 0;
				globData.motor2_temp = 0;
				globData.voltage = 0;*/
			}
			NewCanMsg = CAN_GET_MSG_WAIT;
 800192e:	4b03      	ldr	r3, [pc, #12]	; (800193c <StartCanTask+0x5c>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f005 fd65 	bl	8007404 <osDelay>
	}
 800193a:	e7d5      	b.n	80018e8 <StartCanTask+0x8>
 800193c:	20001c8c 	.word	0x20001c8c
 8001940:	20001c9c 	.word	0x20001c9c
 8001944:	20001c94 	.word	0x20001c94

08001948 <CanMsgRead>:
}

uint8_t CanMsgRead(CanDataRecvTypeDef *canDataRecv) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

	NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001950:	2014      	movs	r0, #20
 8001952:	f7ff ffa1 	bl	8001898 <__NVIC_DisableIRQ>
			//RxData[7]; //data L fault of motor 2
			diagMsg.motor1 = *(DriverErrMsgTypeDef*)&RxData[4];
			diagMsg.motor2 = *(DriverErrMsgTypeDef*)&RxData[6];
		}
	}*/
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001956:	2014      	movs	r0, #20
 8001958:	f7ff ff80 	bl	800185c <__NVIC_EnableIRQ>
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <CanMsgSend>:


uint8_t CanMsgSend(CAN_TxHeaderTypeDef *TxHeader, uint8_t canData[]) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]

	if (TxHeader->ExtId != 0 || TxHeader->StdId != 0)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <CanMsgSend+0x1a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01b      	beq.n	80019ba <CanMsgSend+0x52>
	{
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8001982:	4810      	ldr	r0, [pc, #64]	; (80019c4 <CanMsgSend+0x5c>)
 8001984:	f001 f9a1 	bl	8002cca <HAL_CAN_GetTxMailboxesFreeLevel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d000      	beq.n	800199a <CanMsgSend+0x32>
 8001998:	e7f3      	b.n	8001982 <CanMsgSend+0x1a>
		if (HAL_CAN_AddTxMessage(&hcan1, TxHeader, canData, &TxMailbox) != HAL_OK) {
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <CanMsgSend+0x60>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4808      	ldr	r0, [pc, #32]	; (80019c4 <CanMsgSend+0x5c>)
 80019a2:	f001 f8b7 	bl	8002b14 <HAL_CAN_AddTxMessage>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <CanMsgSend+0x52>
			//HAL_UART_Transmit(&huart1, (uint8_t*) "no_trans\r\n", 10, 100);
			return 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <CanMsgSend+0x54>
		}
	}
	return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000002c 	.word	0x2000002c
 80019c8:	20001c90 	.word	0x20001c90

080019cc <StartCanDriversTask>:
extern TIM_HandleTypeDef htim3;
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartCanDriversTask(void *argument)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b09c      	sub	sp, #112	; 0x70
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	Servo servo1(&htim3, TIM_CHANNEL_1);
 80019d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019d8:	2200      	movs	r2, #0
 80019da:	494a      	ldr	r1, [pc, #296]	; (8001b04 <StartCanDriversTask+0x138>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fecb 	bl	8001778 <_ZN5ServoC1EP17TIM_HandleTypeDefm>

	KeyaLKTechDriver DriverFB(0x140 + DRIVER1_LKTECH_ID);
 80019e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e6:	f240 1141 	movw	r1, #321	; 0x141
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd89 	bl	8001502 <_ZN16KeyaLKTechDriverC1Em>
	KeyaLKTechDriver DriverLR(0x140 + DRIVER2_LKTECH_ID);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fd82 	bl	8001502 <_ZN16KeyaLKTechDriverC1Em>
	osDelay(1000);
 80019fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a02:	f005 fcff 	bl	8007404 <osDelay>
	DriverFB.disable();
 8001a06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fe61 	bl	80016d2 <_ZN16KeyaLKTechDriver7disableEv>
	DriverLR.disable();
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fe5c 	bl	80016d2 <_ZN16KeyaLKTechDriver7disableEv>
	for(;;)
	{
		int32_t speed = 30000;
 8001a1a:	f247 5330 	movw	r3, #30000	; 0x7530
 8001a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
		DriverFB.setSpeed(-speed);
 8001a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a22:	425a      	negs	r2, r3
 8001a24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fd79 	bl	8001522 <_ZN16KeyaLKTechDriver8setSpeedEl>
		osDelay(3000);
 8001a30:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a34:	f005 fce6 	bl	8007404 <osDelay>
		speed = 90000;
 8001a38:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <StartCanDriversTask+0x13c>)
 8001a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
		DriverFB.setSpeed(speed);
 8001a3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fd6d 	bl	8001522 <_ZN16KeyaLKTechDriver8setSpeedEl>
		DriverLR.stop();
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fdba 	bl	80015c6 <_ZN16KeyaLKTechDriver4stopEv>
		DriverLR.disable();
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fe3b 	bl	80016d2 <_ZN16KeyaLKTechDriver7disableEv>
		osDelay(3000);
 8001a5c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a60:	f005 fcd0 	bl	8007404 <osDelay>
		DriverFB.stop();
 8001a64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fdac 	bl	80015c6 <_ZN16KeyaLKTechDriver4stopEv>
		DriverLR.enable();
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fdea 	bl	800164c <_ZN16KeyaLKTechDriver6enableEv>
		osDelay(3000);
 8001a78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a7c:	f005 fcc2 	bl	8007404 <osDelay>
		DriverFB.disable();
 8001a80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fe24 	bl	80016d2 <_ZN16KeyaLKTechDriver7disableEv>
		DriverLR.setSpeed(speed);
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fd46 	bl	8001522 <_ZN16KeyaLKTechDriver8setSpeedEl>
		osDelay(3000);
 8001a96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a9a:	f005 fcb3 	bl	8007404 <osDelay>
		DriverFB.enable();
 8001a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fdd2 	bl	800164c <_ZN16KeyaLKTechDriver6enableEv>
		servo1.setAngle(0);
 8001aa8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe76 	bl	80017a0 <_ZN5Servo8setAngleEl>
		osDelay(1000);
 8001ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab8:	f005 fca4 	bl	8007404 <osDelay>
		servo1.setAngle(90);
 8001abc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ac0:	215a      	movs	r1, #90	; 0x5a
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fe6c 	bl	80017a0 <_ZN5Servo8setAngleEl>
		osDelay(1000);
 8001ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001acc:	f005 fc9a 	bl	8007404 <osDelay>
		servo1.setAngle(180);
 8001ad0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ad4:	21b4      	movs	r1, #180	; 0xb4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fe62 	bl	80017a0 <_ZN5Servo8setAngleEl>
		osDelay(1000);
 8001adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae0:	f005 fc90 	bl	8007404 <osDelay>
		servo1.setAngle(270);
 8001ae4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ae8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fe57 	bl	80017a0 <_ZN5Servo8setAngleEl>
		osDelay(5000);
 8001af2:	f241 3088 	movw	r0, #5000	; 0x1388
 8001af6:	f005 fc85 	bl	8007404 <osDelay>

		osDelay(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f005 fc82 	bl	8007404 <osDelay>
	}
 8001b00:	e78b      	b.n	8001a1a <StartCanDriversTask+0x4e>
 8001b02:	bf00      	nop
 8001b04:	20001a10 	.word	0x20001a10
 8001b08:	00015f90 	.word	0x00015f90

08001b0c <flashWriteData>:
 */

#include "flash_data.h"

uint32_t flashWriteData(MinibotConfigTypeDef *configData)
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <flashWriteData+0xc8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <flashWriteData+0xc8>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <flashWriteData+0xc8>)
 8001b22:	2207      	movs	r2, #7
 8001b24:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <flashWriteData+0xc8>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	60da      	str	r2, [r3, #12]
	//EraseInitStruct.Banks = FLASH_BANK_1;
	uint32_t Address = START_ADDR;
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <flashWriteData+0xcc>)
 8001b2e:	61fb      	str	r3, [r7, #28]
	uint32_t SectorError = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 8001b34:	f001 fe5c 	bl	80037f0 <HAL_FLASH_Unlock>
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <flashWriteData+0xc8>)
 8001b40:	f001 ffc4 	bl	8003acc <HAL_FLASHEx_Erase>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <flashWriteData+0x52>
		uint32_t er = HAL_FLASH_GetError();
 8001b54:	f001 fe7e 	bl	8003854 <HAL_FLASH_GetError>
 8001b58:	6138      	str	r0, [r7, #16]
		return er;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	e035      	b.n	8001bca <flashWriteData+0xbe>
	}
	osDelay(20);
 8001b5e:	2014      	movs	r0, #20
 8001b60:	f005 fc50 	bl	8007404 <osDelay>
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0d      	cmp	r3, #13
 8001b6c:	d827      	bhi.n	8001bbe <flashWriteData+0xb2>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *(((uint32_t*)configData)+i)) != HAL_OK)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	461c      	mov	r4, r3
 8001b7c:	4615      	mov	r5, r2
 8001b7e:	4622      	mov	r2, r4
 8001b80:	462b      	mov	r3, r5
 8001b82:	69f9      	ldr	r1, [r7, #28]
 8001b84:	2002      	movs	r0, #2
 8001b86:	f001 fddf 	bl	8003748 <HAL_FLASH_Program>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <flashWriteData+0x9e>
		{
			uint32_t er = HAL_FLASH_GetError();
 8001b9a:	f001 fe5b 	bl	8003854 <HAL_FLASH_GetError>
 8001b9e:	6178      	str	r0, [r7, #20]
			osDelay(50);
 8001ba0:	2032      	movs	r0, #50	; 0x32
 8001ba2:	f005 fc2f 	bl	8007404 <osDelay>
			return er;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	e00f      	b.n	8001bca <flashWriteData+0xbe>
		}
		Address += 4;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	61fb      	str	r3, [r7, #28]
		osDelay(2);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f005 fc27 	bl	8007404 <osDelay>
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	e7d4      	b.n	8001b68 <flashWriteData+0x5c>
	}
	osDelay(10);
 8001bbe:	200a      	movs	r0, #10
 8001bc0:	f005 fc20 	bl	8007404 <osDelay>
	HAL_FLASH_Lock();
 8001bc4:	f001 fe36 	bl	8003834 <HAL_FLASH_Lock>
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20001ca0 	.word	0x20001ca0
 8001bd8:	08060000 	.word	0x08060000

08001bdc <flashReadData>:
uint32_t flashReadData(MinibotConfigTypeDef *configData)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	uint32_t Address = START_ADDR;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <flashReadData+0x44>)
 8001be6:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b0d      	cmp	r3, #13
 8001bf0:	d80d      	bhi.n	8001c0e <flashReadData+0x32>
		*(((uint32_t*)configData)+i) = *(uint32_t*)Address;
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	440b      	add	r3, r1
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	601a      	str	r2, [r3, #0]
		Address += 4;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3304      	adds	r3, #4
 8001c04:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < sizeof(*configData)/4; i++) {
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	e7ee      	b.n	8001bec <flashReadData+0x10>
	}
	osDelay(10);
 8001c0e:	200a      	movs	r0, #10
 8001c10:	f005 fbf8 	bl	8007404 <osDelay>
	return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	08060000 	.word	0x08060000

08001c24 <StartInputsTask>:
#include "minibot_config.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartInputsTask(void *argument)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8001c2c:	4b5f      	ldr	r3, [pc, #380]	; (8001dac <StartInputsTask+0x188>)
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <StartInputsTask+0x20>
 8001c38:	4a5d      	ldr	r2, [pc, #372]	; (8001db0 <StartInputsTask+0x18c>)
 8001c3a:	7f13      	ldrb	r3, [r2, #28]
 8001c3c:	f36f 0300 	bfc	r3, #0, #1
 8001c40:	7713      	strb	r3, [r2, #28]
 8001c42:	e004      	b.n	8001c4e <StartInputsTask+0x2a>
 8001c44:	4a5a      	ldr	r2, [pc, #360]	; (8001db0 <StartInputsTask+0x18c>)
 8001c46:	7f13      	ldrb	r3, [r2, #28]
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	7713      	strb	r3, [r2, #28]
		IN_X03 ? (globData.sens.limit_sw2 = 0) : (globData.sens.limit_sw2 = 1);
 8001c4e:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <StartInputsTask+0x190>)
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <StartInputsTask+0x42>
 8001c5a:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <StartInputsTask+0x18c>)
 8001c5c:	7f13      	ldrb	r3, [r2, #28]
 8001c5e:	f36f 0341 	bfc	r3, #1, #1
 8001c62:	7713      	strb	r3, [r2, #28]
 8001c64:	e004      	b.n	8001c70 <StartInputsTask+0x4c>
 8001c66:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <StartInputsTask+0x18c>)
 8001c68:	7f13      	ldrb	r3, [r2, #28]
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	7713      	strb	r3, [r2, #28]
		IN_X04 ? (globData.sens.button_manual_mode = 0) : (globData.sens.button_manual_mode = 1);
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <StartInputsTask+0x190>)
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <StartInputsTask+0x64>
 8001c7c:	4a4c      	ldr	r2, [pc, #304]	; (8001db0 <StartInputsTask+0x18c>)
 8001c7e:	7f13      	ldrb	r3, [r2, #28]
 8001c80:	f36f 0382 	bfc	r3, #2, #1
 8001c84:	7713      	strb	r3, [r2, #28]
 8001c86:	e004      	b.n	8001c92 <StartInputsTask+0x6e>
 8001c88:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <StartInputsTask+0x18c>)
 8001c8a:	7f13      	ldrb	r3, [r2, #28]
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	7713      	strb	r3, [r2, #28]
		IN_X05 ? (globData.sens.button_motor1_forw = 0) : (globData.sens.button_motor1_forw= 1);
 8001c92:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <StartInputsTask+0x190>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <StartInputsTask+0x86>
 8001c9e:	4a44      	ldr	r2, [pc, #272]	; (8001db0 <StartInputsTask+0x18c>)
 8001ca0:	7f13      	ldrb	r3, [r2, #28]
 8001ca2:	f36f 03c3 	bfc	r3, #3, #1
 8001ca6:	7713      	strb	r3, [r2, #28]
 8001ca8:	e004      	b.n	8001cb4 <StartInputsTask+0x90>
 8001caa:	4a41      	ldr	r2, [pc, #260]	; (8001db0 <StartInputsTask+0x18c>)
 8001cac:	7f13      	ldrb	r3, [r2, #28]
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	7713      	strb	r3, [r2, #28]
		IN_X06 ? (globData.sens.button_motor1_back= 0) : (globData.sens.button_motor1_back = 1);
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <StartInputsTask+0x190>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <StartInputsTask+0xa8>
 8001cc0:	4a3b      	ldr	r2, [pc, #236]	; (8001db0 <StartInputsTask+0x18c>)
 8001cc2:	7f13      	ldrb	r3, [r2, #28]
 8001cc4:	f36f 1304 	bfc	r3, #4, #1
 8001cc8:	7713      	strb	r3, [r2, #28]
 8001cca:	e004      	b.n	8001cd6 <StartInputsTask+0xb2>
 8001ccc:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <StartInputsTask+0x18c>)
 8001cce:	7f13      	ldrb	r3, [r2, #28]
 8001cd0:	f043 0310 	orr.w	r3, r3, #16
 8001cd4:	7713      	strb	r3, [r2, #28]
		IN_X07 ? (globData.sens.button_motor2_forw = 0) : (globData.sens.button_motor2_forw = 1);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <StartInputsTask+0x190>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <StartInputsTask+0xca>
 8001ce2:	4a33      	ldr	r2, [pc, #204]	; (8001db0 <StartInputsTask+0x18c>)
 8001ce4:	7f13      	ldrb	r3, [r2, #28]
 8001ce6:	f36f 1345 	bfc	r3, #5, #1
 8001cea:	7713      	strb	r3, [r2, #28]
 8001cec:	e004      	b.n	8001cf8 <StartInputsTask+0xd4>
 8001cee:	4a30      	ldr	r2, [pc, #192]	; (8001db0 <StartInputsTask+0x18c>)
 8001cf0:	7f13      	ldrb	r3, [r2, #28]
 8001cf2:	f043 0320 	orr.w	r3, r3, #32
 8001cf6:	7713      	strb	r3, [r2, #28]
		IN_X08 ? (globData.sens.button_motor2_back = 0) : (globData.sens.button_motor2_back = 1);
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <StartInputsTask+0x190>)
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <StartInputsTask+0xec>
 8001d04:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <StartInputsTask+0x18c>)
 8001d06:	7f13      	ldrb	r3, [r2, #28]
 8001d08:	f36f 1386 	bfc	r3, #6, #1
 8001d0c:	7713      	strb	r3, [r2, #28]
 8001d0e:	e004      	b.n	8001d1a <StartInputsTask+0xf6>
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <StartInputsTask+0x18c>)
 8001d12:	7f13      	ldrb	r3, [r2, #28]
 8001d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d18:	7713      	strb	r3, [r2, #28]
		IN_X09 ? (globData.sens.button_start = 0) : (globData.sens.button_start = 1);
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <StartInputsTask+0x194>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <StartInputsTask+0x10e>
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <StartInputsTask+0x18c>)
 8001d28:	7f13      	ldrb	r3, [r2, #28]
 8001d2a:	f36f 13c7 	bfc	r3, #7, #1
 8001d2e:	7713      	strb	r3, [r2, #28]
 8001d30:	e004      	b.n	8001d3c <StartInputsTask+0x118>
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <StartInputsTask+0x18c>)
 8001d34:	7f13      	ldrb	r3, [r2, #28]
 8001d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3a:	7713      	strb	r3, [r2, #28]
		IN_X10 ? (globData.sens.button_pause = 0) : (globData.sens.button_pause = 1);
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <StartInputsTask+0x194>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <StartInputsTask+0x130>
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <StartInputsTask+0x18c>)
 8001d4a:	7f53      	ldrb	r3, [r2, #29]
 8001d4c:	f36f 0300 	bfc	r3, #0, #1
 8001d50:	7753      	strb	r3, [r2, #29]
 8001d52:	e004      	b.n	8001d5e <StartInputsTask+0x13a>
 8001d54:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <StartInputsTask+0x18c>)
 8001d56:	7f53      	ldrb	r3, [r2, #29]
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	7753      	strb	r3, [r2, #29]
		IN_X11 ? (globData.sens.button_stop = 0) : (globData.sens.button_stop = 1);
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <StartInputsTask+0x194>)
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <StartInputsTask+0x152>
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <StartInputsTask+0x18c>)
 8001d6c:	7f53      	ldrb	r3, [r2, #29]
 8001d6e:	f36f 0341 	bfc	r3, #1, #1
 8001d72:	7753      	strb	r3, [r2, #29]
 8001d74:	e004      	b.n	8001d80 <StartInputsTask+0x15c>
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <StartInputsTask+0x18c>)
 8001d78:	7f53      	ldrb	r3, [r2, #29]
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	7753      	strb	r3, [r2, #29]
		IN_X12 ? (globData.sens.button8 = 0) : (globData.sens.button8 = 1);
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <StartInputsTask+0x198>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <StartInputsTask+0x174>
 8001d8c:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <StartInputsTask+0x18c>)
 8001d8e:	7f53      	ldrb	r3, [r2, #29]
 8001d90:	f36f 0382 	bfc	r3, #2, #1
 8001d94:	7753      	strb	r3, [r2, #29]
 8001d96:	e004      	b.n	8001da2 <StartInputsTask+0x17e>
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <StartInputsTask+0x18c>)
 8001d9a:	7f53      	ldrb	r3, [r2, #29]
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	7753      	strb	r3, [r2, #29]
		osDelay(1);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f005 fb2e 	bl	8007404 <osDelay>
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8001da8:	e740      	b.n	8001c2c <StartInputsTask+0x8>
 8001daa:	bf00      	nop
 8001dac:	40020800 	.word	0x40020800
 8001db0:	20000054 	.word	0x20000054
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020c00 	.word	0x40020c00

08001dc0 <StartMissionsTask>:
#include "mission.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartMissionsTask(void *argument)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

	for(;;)
 8001dc8:	e7fe      	b.n	8001dc8 <StartMissionsTask+0x8>
	...

08001dcc <StartOutputsTask>:

//extern IWDG_HandleTypeDef hiwdg;


void StartOutputsTask(void *argument)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001dd4:	4807      	ldr	r0, [pc, #28]	; (8001df4 <StartOutputsTask+0x28>)
 8001dd6:	f002 f992 	bl	80040fe <HAL_IWDG_Refresh>
		SetOutputs();
 8001dda:	f000 f80f 	bl	8001dfc <SetOutputs>
		if (globData.LEDB) LedBlink();
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <StartOutputsTask+0x2c>)
 8001de0:	795b      	ldrb	r3, [r3, #5]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <StartOutputsTask+0x1e>
 8001de6:	f000 f811 	bl	8001e0c <LedBlink>
		osDelay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f005 fb0a 	bl	8007404 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 8001df0:	e7f0      	b.n	8001dd4 <StartOutputsTask+0x8>
 8001df2:	bf00      	nop
 8001df4:	200019bc 	.word	0x200019bc
 8001df8:	20000054 	.word	0x20000054

08001dfc <SetOutputs>:
	}
}

void SetOutputs()
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <LedBlink>:

void LedBlink() {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
			3   //LEDB_ERROR
	};

	static int32_t ledb_active_time = 0;
	static int32_t ledb_repeats = 0;
	ledb_repeats = ledb_rep[globData.LEDB];
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <LedBlink+0x70>)
 8001e14:	795b      	ldrb	r3, [r3, #5]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <LedBlink+0x74>)
 8001e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <LedBlink+0x78>)
 8001e22:	601a      	str	r2, [r3, #0]
	ledb_active_time = ledb_time[globData.LEDB];
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <LedBlink+0x70>)
 8001e26:	795b      	ldrb	r3, [r3, #5]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <LedBlink+0x7c>)
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <LedBlink+0x80>)
 8001e34:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ledb_repeats; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <LedBlink+0x78>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	da14      	bge.n	8001e6e <LedBlink+0x62>
	{
		osDelay(ledb_active_time);
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <LedBlink+0x80>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f005 fadb 	bl	8007404 <osDelay>
		Y05_ON;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <LedBlink+0x84>)
 8001e50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e54:	619a      	str	r2, [r3, #24]
		osDelay(ledb_active_time);
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <LedBlink+0x80>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 fad2 	bl	8007404 <osDelay>
		Y05_OFF;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <LedBlink+0x84>)
 8001e62:	2210      	movs	r2, #16
 8001e64:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < ledb_repeats; i++)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	e7e5      	b.n	8001e3a <LedBlink+0x2e>
	}
	globData.LEDB = 0;
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <LedBlink+0x70>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	715a      	strb	r2, [r3, #5]
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000054 	.word	0x20000054
 8001e80:	08009f48 	.word	0x08009f48
 8001e84:	20001cb8 	.word	0x20001cb8
 8001e88:	08009f30 	.word	0x08009f30
 8001e8c:	20001cb4 	.word	0x20001cb4
 8001e90:	40020800 	.word	0x40020800

08001e94 <StartServoTask>:
#include "servo_control.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartServoTask(void *argument)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	
	for(;;)
	{
		osDelay(100);
 8001e9c:	2064      	movs	r0, #100	; 0x64
 8001e9e:	f005 fab1 	bl	8007404 <osDelay>
 8001ea2:	e7fb      	b.n	8001e9c <StartServoTask+0x8>

08001ea4 <StartUartWiFiTask>:
StatusMsgTypeDef statusMsg;
JobMsgTypeDef jobMsg;
StmConfigTypeDef stmConf;

void StartUartWiFiTask(void *argument)
{
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8001eac:	2264      	movs	r2, #100	; 0x64
 8001eae:	4964      	ldr	r1, [pc, #400]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001eb0:	4864      	ldr	r0, [pc, #400]	; (8002044 <StartUartWiFiTask+0x1a0>)
 8001eb2:	f004 f830 	bl	8005f16 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8001eb6:	4b64      	ldr	r3, [pc, #400]	; (8002048 <StartUartWiFiTask+0x1a4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b62      	ldr	r3, [pc, #392]	; (8002048 <StartUartWiFiTask+0x1a4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0208 	bic.w	r2, r2, #8
 8001ec4:	601a      	str	r2, [r3, #0]
	ConfigInit();
 8001ec6:	f000 f993 	bl	80021f0 <ConfigInit>
	for(;;)
	{
		if ((new_wifi_data && wifi_uart_buff[2] == WIFI_CONTROL_ID)
 8001eca:	4b60      	ldr	r3, [pc, #384]	; (800204c <StartUartWiFiTask+0x1a8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0fb      	beq.n	8001eca <StartUartWiFiTask+0x26>
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001ed4:	789b      	ldrb	r3, [r3, #2]
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d1f7      	bne.n	8001eca <StartUartWiFiTask+0x26>
				&& wifi_uart_buff[0] == START_MSG0 && wifi_uart_buff[1] == START_MSG1) {
 8001eda:	4b59      	ldr	r3, [pc, #356]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b84      	cmp	r3, #132	; 0x84
 8001ee0:	d1f3      	bne.n	8001eca <StartUartWiFiTask+0x26>
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	2b53      	cmp	r3, #83	; 0x53
 8001ee8:	d1ef      	bne.n	8001eca <StartUartWiFiTask+0x26>
			enum WIFI_MSG_ID MSG_ID = (WIFI_MSG_ID)wifi_uart_buff[3];
 8001eea:	4b55      	ldr	r3, [pc, #340]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	73fb      	strb	r3, [r7, #15]
			if (MSG_ID == WIFI_GET_STATUS) {
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d117      	bne.n	8001f26 <StartUartWiFiTask+0x82>
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001ef6:	4b52      	ldr	r3, [pc, #328]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001ef8:	79dc      	ldrb	r4, [r3, #7]
						!= calculateCS(wifi_uart_buff, RECEV_MSG_CS_BYTE_NUM)) {
 8001efa:	2107      	movs	r1, #7
 8001efc:	4850      	ldr	r0, [pc, #320]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001efe:	f000 f957 	bl	80021b0 <calculateCS>
 8001f02:	4603      	mov	r3, r0
 8001f04:	429c      	cmp	r4, r3
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <StartUartWiFiTask+0x7c>
					globData.cs_err++;
 8001f12:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001f1c:	711a      	strb	r2, [r3, #4]
 8001f1e:	e086      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
				else {
					SendStatus();
 8001f20:	f000 f89c 	bl	800205c <SendStatus>
 8001f24:	e083      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_SET_MANUAL_COM) {
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d117      	bne.n	8001f5c <StartUartWiFiTask+0xb8>
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001f2c:	4b44      	ldr	r3, [pc, #272]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001f2e:	79dc      	ldrb	r4, [r3, #7]
						!= calculateCS(wifi_uart_buff, RECEV_MSG_CS_BYTE_NUM)) {
 8001f30:	2107      	movs	r1, #7
 8001f32:	4843      	ldr	r0, [pc, #268]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001f34:	f000 f93c 	bl	80021b0 <calculateCS>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	429c      	cmp	r4, r3
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <StartUartWiFiTask+0xb2>
					globData.cs_err++;
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001f4a:	791b      	ldrb	r3, [r3, #4]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001f52:	711a      	strb	r2, [r3, #4]
 8001f54:	e06b      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
				else {
					SetManual();
 8001f56:	f000 f8c1 	bl	80020dc <SetManual>
 8001f5a:	e068      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_SET_JOB) {
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d121      	bne.n	8001fa6 <StartUartWiFiTask+0x102>
				if (wifi_uart_buff[sizeof(JobMsgTypeDef) - 1]
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001f64:	7ddc      	ldrb	r4, [r3, #23]
						!= calculateCS(wifi_uart_buff, sizeof(JobMsgTypeDef) - 1)) {
 8001f66:	2117      	movs	r1, #23
 8001f68:	4835      	ldr	r0, [pc, #212]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001f6a:	f000 f921 	bl	80021b0 <calculateCS>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	429c      	cmp	r4, r3
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[sizeof(JobMsgTypeDef) - 1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <StartUartWiFiTask+0xe8>
					globData.cs_err++;
 8001f7e:	4b34      	ldr	r3, [pc, #208]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001f88:	711a      	strb	r2, [r3, #4]
 8001f8a:	e050      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
				else {
					jobMsg = *(JobMsgTypeDef*) wifi_uart_buff;
 8001f8c:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001f8e:	4a31      	ldr	r2, [pc, #196]	; (8002054 <StartUartWiFiTask+0x1b0>)
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f9c:	e884 0003 	stmia.w	r4, {r0, r1}
					SetJob();
 8001fa0:	f000 f8a4 	bl	80020ec <SetJob>
 8001fa4:	e043      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_GET_STM_CONFIG) {
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d117      	bne.n	8001fdc <StartUartWiFiTask+0x138>
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001fae:	79dc      	ldrb	r4, [r3, #7]
						!= calculateCS(wifi_uart_buff, RECEV_MSG_CS_BYTE_NUM)) {
 8001fb0:	2107      	movs	r1, #7
 8001fb2:	4823      	ldr	r0, [pc, #140]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001fb4:	f000 f8fc 	bl	80021b0 <calculateCS>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	429c      	cmp	r4, r3
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
				if (wifi_uart_buff[RECEV_MSG_CS_BYTE_NUM]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <StartUartWiFiTask+0x132>
					globData.cs_err++;
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001fca:	791b      	ldrb	r3, [r3, #4]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8001fd2:	711a      	strb	r2, [r3, #4]
 8001fd4:	e02b      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
				else {
					GetSTMConfig();
 8001fd6:	f000 f8b7 	bl	8002148 <GetSTMConfig>
 8001fda:	e028      	b.n	800202e <StartUartWiFiTask+0x18a>
				}
			}
			else if (MSG_ID == WIFI_SET_STM_CONFIG) {
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d125      	bne.n	800202e <StartUartWiFiTask+0x18a>
				if (wifi_uart_buff[sizeof(StmConfigTypeDef)-1] != calculateCS(wifi_uart_buff, sizeof(StmConfigTypeDef)-1)) {
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001fe4:	f893 403f 	ldrb.w	r4, [r3, #63]	; 0x3f
 8001fe8:	213f      	movs	r1, #63	; 0x3f
 8001fea:	4815      	ldr	r0, [pc, #84]	; (8002040 <StartUartWiFiTask+0x19c>)
 8001fec:	f000 f8e0 	bl	80021b0 <calculateCS>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <StartUartWiFiTask+0x16a>
					globData.cs_err++;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <StartUartWiFiTask+0x1ac>)
 8002002:	791b      	ldrb	r3, [r3, #4]
 8002004:	3301      	adds	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <StartUartWiFiTask+0x1ac>)
 800200a:	711a      	strb	r2, [r3, #4]
 800200c:	e00f      	b.n	800202e <StartUartWiFiTask+0x18a>
				} else {
					stmConf = *(StmConfigTypeDef*)wifi_uart_buff;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <StartUartWiFiTask+0x19c>)
 8002010:	4a11      	ldr	r2, [pc, #68]	; (8002058 <StartUartWiFiTask+0x1b4>)
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
 8002016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002022:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002026:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					ConfigUpdate();
 800202a:	f000 f92b 	bl	8002284 <ConfigUpdate>
				}
			}
			new_wifi_data = 0;
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <StartUartWiFiTask+0x1a8>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
			memset(wifi_uart_buff, 0, 100);
 8002034:	2264      	movs	r2, #100	; 0x64
 8002036:	2100      	movs	r1, #0
 8002038:	4801      	ldr	r0, [pc, #4]	; (8002040 <StartUartWiFiTask+0x19c>)
 800203a:	f007 fe89 	bl	8009d50 <memset>
			}
		}*/

		//osDelay(1000);
		//SendStatus(); //for test
	}
 800203e:	e744      	b.n	8001eca <StartUartWiFiTask+0x26>
 8002040:	20001cc0 	.word	0x20001cc0
 8002044:	20001aa0 	.word	0x20001aa0
 8002048:	20001b6c 	.word	0x20001b6c
 800204c:	20001cbc 	.word	0x20001cbc
 8002050:	20000054 	.word	0x20000054
 8002054:	20001d44 	.word	0x20001d44
 8002058:	20001d5c 	.word	0x20001d5c

0800205c <SendStatus>:
}

void SendStatus()
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	statusMsg.start_msg0 = START_MSG0;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <SendStatus+0x74>)
 8002062:	2284      	movs	r2, #132	; 0x84
 8002064:	701a      	strb	r2, [r3, #0]
	statusMsg.start_msg1 = START_MSG1;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <SendStatus+0x74>)
 8002068:	2253      	movs	r2, #83	; 0x53
 800206a:	705a      	strb	r2, [r3, #1]
	statusMsg.control_id = WIFI_CONTROL_ID;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <SendStatus+0x74>)
 800206e:	2264      	movs	r2, #100	; 0x64
 8002070:	709a      	strb	r2, [r3, #2]
	statusMsg.msg_id = WIFI_GET_STATUS;
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <SendStatus+0x74>)
 8002074:	2201      	movs	r2, #1
 8002076:	70da      	strb	r2, [r3, #3]
	statusMsg.cs_errors = globData.cs_err;
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <SendStatus+0x78>)
 800207a:	791a      	ldrb	r2, [r3, #4]
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <SendStatus+0x74>)
 800207e:	775a      	strb	r2, [r3, #29]
	statusMsg.temp1 = globData.temp1;
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <SendStatus+0x78>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <SendStatus+0x74>)
 8002086:	6053      	str	r3, [r2, #4]
	statusMsg.temp2 = globData.temp2;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <SendStatus+0x78>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <SendStatus+0x74>)
 800208e:	6093      	str	r3, [r2, #8]
	statusMsg.temp3 = globData.temp3;
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <SendStatus+0x78>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <SendStatus+0x74>)
 8002096:	60d3      	str	r3, [r2, #12]
	statusMsg.sens = globData.sens;
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <SendStatus+0x74>)
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <SendStatus+0x78>)
 800209c:	8b9b      	ldrh	r3, [r3, #28]
 800209e:	8213      	strh	r3, [r2, #16]
	statusMsg.cycles_count = globData.cycles_count;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <SendStatus+0x78>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SendStatus+0x74>)
 80020a6:	6153      	str	r3, [r2, #20]
	statusMsg.cycles_set = globData.cycles_set;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <SendStatus+0x78>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <SendStatus+0x74>)
 80020ae:	6193      	str	r3, [r2, #24]
	statusMsg.CS = calculateCS((uint8_t *)&statusMsg, sizeof(statusMsg)-1);
 80020b0:	211f      	movs	r1, #31
 80020b2:	4807      	ldr	r0, [pc, #28]	; (80020d0 <SendStatus+0x74>)
 80020b4:	f000 f87c 	bl	80021b0 <calculateCS>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SendStatus+0x74>)
 80020be:	77da      	strb	r2, [r3, #31]
	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&txt1, sizeof(txt1), 100);
	*/
	//////////////////////////


	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&statusMsg, sizeof(statusMsg), 100);
 80020c0:	2364      	movs	r3, #100	; 0x64
 80020c2:	2220      	movs	r2, #32
 80020c4:	4902      	ldr	r1, [pc, #8]	; (80020d0 <SendStatus+0x74>)
 80020c6:	4804      	ldr	r0, [pc, #16]	; (80020d8 <SendStatus+0x7c>)
 80020c8:	f003 fe93 	bl	8005df2 <HAL_UART_Transmit>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20001d24 	.word	0x20001d24
 80020d4:	20000054 	.word	0x20000054
 80020d8:	20001aa0 	.word	0x20001aa0

080020dc <SetManual>:

void SetManual()
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SetJob>:

void SetJob()
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
	if (jobMsg.comm == JOB_START)
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <SetJob+0x54>)
 80020f2:	791b      	ldrb	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10f      	bne.n	8002118 <SetJob+0x2c>
	{
		globData.volume = jobMsg.volume;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <SetJob+0x54>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <SetJob+0x58>)
 80020fe:	6293      	str	r3, [r2, #40]	; 0x28
		globData.time_hold = jobMsg.time_hold;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <SetJob+0x54>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <SetJob+0x58>)
 8002106:	62d3      	str	r3, [r2, #44]	; 0x2c
		globData.cycles_set = jobMsg.cycles;
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <SetJob+0x54>)
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <SetJob+0x58>)
 800210e:	6253      	str	r3, [r2, #36]	; 0x24
		globData.heat_on = 1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <SetJob+0x58>)
 8002112:	2201      	movs	r2, #1
 8002114:	615a      	str	r2, [r3, #20]
 8002116:	e00a      	b.n	800212e <SetJob+0x42>
	}
	else if (jobMsg.comm != JOB_PAUSE || jobMsg.comm != JOB_RESUME)
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <SetJob+0x54>)
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d103      	bne.n	8002128 <SetJob+0x3c>
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <SetJob+0x54>)
 8002122:	791b      	ldrb	r3, [r3, #4]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d002      	beq.n	800212e <SetJob+0x42>
	{
		globData.heat_on = 0;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <SetJob+0x58>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
	}
	globData.current_status = jobMsg.comm;
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <SetJob+0x54>)
 8002130:	791a      	ldrb	r2, [r3, #4]
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SetJob+0x58>)
 8002134:	701a      	strb	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20001d44 	.word	0x20001d44
 8002144:	20000054 	.word	0x20000054

08002148 <GetSTMConfig>:

void GetSTMConfig()
{
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	af00      	add	r7, sp, #0
	stmConf.start_msg0 = START_MSG0;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <GetSTMConfig+0x5c>)
 800214e:	2284      	movs	r2, #132	; 0x84
 8002150:	701a      	strb	r2, [r3, #0]
	stmConf.start_msg1 = START_MSG1;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <GetSTMConfig+0x5c>)
 8002154:	2253      	movs	r2, #83	; 0x53
 8002156:	705a      	strb	r2, [r3, #1]
	stmConf.control_id = WIFI_CONTROL_ID;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <GetSTMConfig+0x5c>)
 800215a:	2264      	movs	r2, #100	; 0x64
 800215c:	709a      	strb	r2, [r3, #2]
	stmConf.msg_id = WIFI_GET_STM_CONFIG;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <GetSTMConfig+0x5c>)
 8002160:	2203      	movs	r2, #3
 8002162:	70da      	strb	r2, [r3, #3]
	stmConf.termConfig = minibotConfig;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <GetSTMConfig+0x5c>)
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <GetSTMConfig+0x60>)
 8002168:	1d1c      	adds	r4, r3, #4
 800216a:	4615      	mov	r5, r2
 800216c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002178:	e895 0003 	ldmia.w	r5, {r0, r1}
 800217c:	e884 0003 	stmia.w	r4, {r0, r1}
	stmConf.CS = calculateCS((uint8_t *)&stmConf, sizeof(StmConfigTypeDef)-1);
 8002180:	213f      	movs	r1, #63	; 0x3f
 8002182:	4808      	ldr	r0, [pc, #32]	; (80021a4 <GetSTMConfig+0x5c>)
 8002184:	f000 f814 	bl	80021b0 <calculateCS>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <GetSTMConfig+0x5c>)
 800218e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&stmConf, sizeof(StmConfigTypeDef), 100);
 8002192:	2364      	movs	r3, #100	; 0x64
 8002194:	2240      	movs	r2, #64	; 0x40
 8002196:	4903      	ldr	r1, [pc, #12]	; (80021a4 <GetSTMConfig+0x5c>)
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <GetSTMConfig+0x64>)
 800219a:	f003 fe2a 	bl	8005df2 <HAL_UART_Transmit>
}
 800219e:	bf00      	nop
 80021a0:	bdb0      	pop	{r4, r5, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20001d5c 	.word	0x20001d5c
 80021a8:	20000084 	.word	0x20000084
 80021ac:	20001aa0 	.word	0x20001aa0

080021b0 <calculateCS>:

uint8_t calculateCS(uint8_t *msg, int msg_size) {
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint8_t cs = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	da0a      	bge.n	80021e0 <calculateCS+0x30>
  {
    cs+=msg[i];
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4413      	add	r3, r2
 80021d6:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3301      	adds	r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	e7f0      	b.n	80021c2 <calculateCS+0x12>
  }
  return cs;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <ConfigInit>:

void ConfigInit()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	flashReadData(&minibotConfig);
 80021f4:	481f      	ldr	r0, [pc, #124]	; (8002274 <ConfigInit+0x84>)
 80021f6:	f7ff fcf1 	bl	8001bdc <flashReadData>
	if (minibotConfig.flash_init != FLASH_INIT)
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <ConfigInit+0x84>)
 80021fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002200:	2b44      	cmp	r3, #68	; 0x44
 8002202:	d034      	beq.n	800226e <ConfigInit+0x7e>
	{
		minibotConfig.volume_per_rev = 100.0;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <ConfigInit+0x84>)
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <ConfigInit+0x88>)
 8002208:	601a      	str	r2, [r3, #0]
		minibotConfig.volume = 10.0;
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <ConfigInit+0x84>)
 800220c:	4a1b      	ldr	r2, [pc, #108]	; (800227c <ConfigInit+0x8c>)
 800220e:	619a      	str	r2, [r3, #24]
		minibotConfig.motor1_speed = 1000;
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <ConfigInit+0x84>)
 8002212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002216:	605a      	str	r2, [r3, #4]
		minibotConfig.motor1_acc = 500;
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <ConfigInit+0x84>)
 800221a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800221e:	609a      	str	r2, [r3, #8]
		minibotConfig.motor2_speed = 1000;
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <ConfigInit+0x84>)
 8002222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002226:	60da      	str	r2, [r3, #12]
		minibotConfig.motor2_acc = 500;
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <ConfigInit+0x84>)
 800222a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800222e:	611a      	str	r2, [r3, #16]
		minibotConfig.time_hold = 10;
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <ConfigInit+0x84>)
 8002232:	220a      	movs	r2, #10
 8002234:	615a      	str	r2, [r3, #20]
		minibotConfig.temp1 = 30.0;
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <ConfigInit+0x84>)
 8002238:	4a11      	ldr	r2, [pc, #68]	; (8002280 <ConfigInit+0x90>)
 800223a:	61da      	str	r2, [r3, #28]
		minibotConfig.temp2 = 30.0;
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <ConfigInit+0x84>)
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <ConfigInit+0x90>)
 8002240:	621a      	str	r2, [r3, #32]
		minibotConfig.temp3 = 30.0;
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <ConfigInit+0x84>)
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <ConfigInit+0x90>)
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
		minibotConfig.Kp = 1.0;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <ConfigInit+0x84>)
 800224a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
		minibotConfig.Ki = 1.0;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <ConfigInit+0x84>)
 8002252:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
		minibotConfig.Kd = 1.0;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <ConfigInit+0x84>)
 800225a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
		minibotConfig.bitParams.ind = 1;
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <ConfigInit+0x84>)
 8002262:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	}
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000084 	.word	0x20000084
 8002278:	42c80000 	.word	0x42c80000
 800227c:	41200000 	.word	0x41200000
 8002280:	41f00000 	.word	0x41f00000

08002284 <ConfigUpdate>:

int ConfigUpdate()
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
	int err = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.volume_per_rev > 0) {
 800228e:	4b8d      	ldr	r3, [pc, #564]	; (80024c4 <ConfigUpdate+0x240>)
 8002290:	edd3 7a01 	vldr	s15, [r3, #4]
 8002294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	dd04      	ble.n	80022a8 <ConfigUpdate+0x24>
		minibotConfig.volume_per_rev = stmConf.termConfig.volume_per_rev;
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <ConfigUpdate+0x240>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a89      	ldr	r2, [pc, #548]	; (80024c8 <ConfigUpdate+0x244>)
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e002      	b.n	80022ae <ConfigUpdate+0x2a>
	}
	else err++;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3301      	adds	r3, #1
 80022ac:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.volume > 0) {
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <ConfigUpdate+0x240>)
 80022b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80022b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022bc:	dd04      	ble.n	80022c8 <ConfigUpdate+0x44>
		minibotConfig.volume = stmConf.termConfig.volume;
 80022be:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <ConfigUpdate+0x240>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a81      	ldr	r2, [pc, #516]	; (80024c8 <ConfigUpdate+0x244>)
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	e002      	b.n	80022ce <ConfigUpdate+0x4a>
	}
	else err++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3301      	adds	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor1_speed > 0 && stmConf.termConfig.motor1_speed < 5000)
 80022ce:	4b7d      	ldr	r3, [pc, #500]	; (80024c4 <ConfigUpdate+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <ConfigUpdate+0x68>
 80022d6:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <ConfigUpdate+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f241 3287 	movw	r2, #4999	; 0x1387
 80022de:	4293      	cmp	r3, r2
 80022e0:	d804      	bhi.n	80022ec <ConfigUpdate+0x68>
	{
		minibotConfig.motor1_speed = stmConf.termConfig.motor1_speed;
 80022e2:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <ConfigUpdate+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4a78      	ldr	r2, [pc, #480]	; (80024c8 <ConfigUpdate+0x244>)
 80022e8:	6053      	str	r3, [r2, #4]
 80022ea:	e002      	b.n	80022f2 <ConfigUpdate+0x6e>
	}
	else err++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor1_acc > 0 && stmConf.termConfig.motor1_acc < 5000)
 80022f2:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <ConfigUpdate+0x240>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <ConfigUpdate+0x8c>
 80022fa:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <ConfigUpdate+0x240>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8002302:	4293      	cmp	r3, r2
 8002304:	d804      	bhi.n	8002310 <ConfigUpdate+0x8c>
	{
		minibotConfig.motor1_acc= stmConf.termConfig.motor1_acc;
 8002306:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <ConfigUpdate+0x240>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4a6f      	ldr	r2, [pc, #444]	; (80024c8 <ConfigUpdate+0x244>)
 800230c:	6093      	str	r3, [r2, #8]
 800230e:	e002      	b.n	8002316 <ConfigUpdate+0x92>
	}
	else err++;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3301      	adds	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor2_speed > 0 && stmConf.termConfig.motor2_speed < 5000) {
 8002316:	4b6b      	ldr	r3, [pc, #428]	; (80024c4 <ConfigUpdate+0x240>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <ConfigUpdate+0xb0>
 800231e:	4b69      	ldr	r3, [pc, #420]	; (80024c4 <ConfigUpdate+0x240>)
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f241 3287 	movw	r2, #4999	; 0x1387
 8002326:	4293      	cmp	r3, r2
 8002328:	d804      	bhi.n	8002334 <ConfigUpdate+0xb0>
		minibotConfig.motor2_speed = stmConf.termConfig.motor2_speed;
 800232a:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <ConfigUpdate+0x240>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	4a66      	ldr	r2, [pc, #408]	; (80024c8 <ConfigUpdate+0x244>)
 8002330:	60d3      	str	r3, [r2, #12]
 8002332:	e002      	b.n	800233a <ConfigUpdate+0xb6>
	}
	else err++;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3301      	adds	r3, #1
 8002338:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor2_acc > 0 && stmConf.termConfig.motor2_acc < 5000) {
 800233a:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <ConfigUpdate+0x240>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <ConfigUpdate+0xd4>
 8002342:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <ConfigUpdate+0x240>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f241 3287 	movw	r2, #4999	; 0x1387
 800234a:	4293      	cmp	r3, r2
 800234c:	d804      	bhi.n	8002358 <ConfigUpdate+0xd4>
		minibotConfig.motor2_acc = stmConf.termConfig.motor2_acc;
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <ConfigUpdate+0x240>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4a5d      	ldr	r2, [pc, #372]	; (80024c8 <ConfigUpdate+0x244>)
 8002354:	6113      	str	r3, [r2, #16]
 8002356:	e002      	b.n	800235e <ConfigUpdate+0xda>
	}
	else err++;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.motor2_acc > 0 && stmConf.termConfig.motor2_acc < 5000) {
 800235e:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <ConfigUpdate+0x240>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <ConfigUpdate+0xf8>
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <ConfigUpdate+0x240>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f241 3287 	movw	r2, #4999	; 0x1387
 800236e:	4293      	cmp	r3, r2
 8002370:	d804      	bhi.n	800237c <ConfigUpdate+0xf8>
		minibotConfig.motor2_acc = stmConf.termConfig.motor2_acc;
 8002372:	4b54      	ldr	r3, [pc, #336]	; (80024c4 <ConfigUpdate+0x240>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4a54      	ldr	r2, [pc, #336]	; (80024c8 <ConfigUpdate+0x244>)
 8002378:	6113      	str	r3, [r2, #16]
 800237a:	e002      	b.n	8002382 <ConfigUpdate+0xfe>
	}
	else err++;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.time_hold > 0) {
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <ConfigUpdate+0x240>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <ConfigUpdate+0x110>
		minibotConfig.time_hold = stmConf.termConfig.time_hold;
 800238a:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <ConfigUpdate+0x240>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	4a4e      	ldr	r2, [pc, #312]	; (80024c8 <ConfigUpdate+0x244>)
 8002390:	6153      	str	r3, [r2, #20]
 8002392:	e002      	b.n	800239a <ConfigUpdate+0x116>
	}
	else err++;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.temp1 > 0 && stmConf.termConfig.temp1 < 500) {
 800239a:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <ConfigUpdate+0x240>)
 800239c:	edd3 7a08 	vldr	s15, [r3, #32]
 80023a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	dd0e      	ble.n	80023c8 <ConfigUpdate+0x144>
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <ConfigUpdate+0x240>)
 80023ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80023b0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80024cc <ConfigUpdate+0x248>
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d504      	bpl.n	80023c8 <ConfigUpdate+0x144>
		minibotConfig.temp1 = stmConf.termConfig.temp1;
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <ConfigUpdate+0x240>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a41      	ldr	r2, [pc, #260]	; (80024c8 <ConfigUpdate+0x244>)
 80023c4:	61d3      	str	r3, [r2, #28]
 80023c6:	e002      	b.n	80023ce <ConfigUpdate+0x14a>
	}
	else err++;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3301      	adds	r3, #1
 80023cc:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.temp2 > 0 && stmConf.termConfig.temp2 < 500) {
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <ConfigUpdate+0x240>)
 80023d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	dd0e      	ble.n	80023fc <ConfigUpdate+0x178>
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <ConfigUpdate+0x240>)
 80023e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023e4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80024cc <ConfigUpdate+0x248>
 80023e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f0:	d504      	bpl.n	80023fc <ConfigUpdate+0x178>
		minibotConfig.temp2 = stmConf.termConfig.temp2;
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <ConfigUpdate+0x240>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	4a34      	ldr	r2, [pc, #208]	; (80024c8 <ConfigUpdate+0x244>)
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	e002      	b.n	8002402 <ConfigUpdate+0x17e>
	}
	else err++;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.temp3 > 0 && stmConf.termConfig.temp3 < 500) {
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <ConfigUpdate+0x240>)
 8002404:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	dd0e      	ble.n	8002430 <ConfigUpdate+0x1ac>
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <ConfigUpdate+0x240>)
 8002414:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002418:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80024cc <ConfigUpdate+0x248>
 800241c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	d504      	bpl.n	8002430 <ConfigUpdate+0x1ac>
		minibotConfig.temp3 = stmConf.termConfig.temp3;
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <ConfigUpdate+0x240>)
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <ConfigUpdate+0x244>)
 800242c:	6253      	str	r3, [r2, #36]	; 0x24
 800242e:	e002      	b.n	8002436 <ConfigUpdate+0x1b2>
	}
	else err++;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.Kp > 0) {
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <ConfigUpdate+0x240>)
 8002438:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800243c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002444:	dd04      	ble.n	8002450 <ConfigUpdate+0x1cc>
		minibotConfig.Kp = stmConf.termConfig.Kp;
 8002446:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <ConfigUpdate+0x240>)
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <ConfigUpdate+0x244>)
 800244c:	6293      	str	r3, [r2, #40]	; 0x28
 800244e:	e002      	b.n	8002456 <ConfigUpdate+0x1d2>
	}
	else err++;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.Ki > 0) {
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <ConfigUpdate+0x240>)
 8002458:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800245c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	dd04      	ble.n	8002470 <ConfigUpdate+0x1ec>
		minibotConfig.Ki = stmConf.termConfig.Ki;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <ConfigUpdate+0x240>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <ConfigUpdate+0x244>)
 800246c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800246e:	e002      	b.n	8002476 <ConfigUpdate+0x1f2>
	}
	else err++;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3301      	adds	r3, #1
 8002474:	607b      	str	r3, [r7, #4]
	if (stmConf.termConfig.Kd > 0) {
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <ConfigUpdate+0x240>)
 8002478:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800247c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	dd04      	ble.n	8002490 <ConfigUpdate+0x20c>
		minibotConfig.Kd = stmConf.termConfig.Kd;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <ConfigUpdate+0x240>)
 8002488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248a:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <ConfigUpdate+0x244>)
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	e002      	b.n	8002496 <ConfigUpdate+0x212>
	}
	else err++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3301      	adds	r3, #1
 8002494:	607b      	str	r3, [r7, #4]
	if (err)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <ConfigUpdate+0x222>
	{
		globData.LEDB = LEDB_ERROR;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <ConfigUpdate+0x24c>)
 800249e:	2205      	movs	r2, #5
 80024a0:	715a      	strb	r2, [r3, #5]
		return err;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	e00a      	b.n	80024bc <ConfigUpdate+0x238>
	}
	minibotConfig.flash_init = FLASH_INIT;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <ConfigUpdate+0x244>)
 80024a8:	2244      	movs	r2, #68	; 0x44
 80024aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	flashWriteData(&minibotConfig);
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <ConfigUpdate+0x244>)
 80024b0:	f7ff fb2c 	bl	8001b0c <flashWriteData>
	globData.LEDB = LEDB_FLASH_OK;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <ConfigUpdate+0x24c>)
 80024b6:	2204      	movs	r2, #4
 80024b8:	715a      	strb	r2, [r3, #5]
	return 0;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20001d5c 	.word	0x20001d5c
 80024c8:	20000084 	.word	0x20000084
 80024cc:	43fa0000 	.word	0x43fa0000
 80024d0:	20000054 	.word	0x20000054

080024d4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(&huart1);
 80024dc:	4842      	ldr	r0, [pc, #264]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 80024de:	f004 f82b 	bl	8006538 <HAL_UART_GetError>
 80024e2:	61f8      	str	r0, [r7, #28]
	switch (er) {
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d863      	bhi.n	80025b4 <HAL_UART_ErrorCallback+0xe0>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <HAL_UART_ErrorCallback+0x20>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002535 	.word	0x08002535
 80024f8:	08002553 	.word	0x08002553
 80024fc:	080025b5 	.word	0x080025b5
 8002500:	08002571 	.word	0x08002571
 8002504:	080025b5 	.word	0x080025b5
 8002508:	080025b5 	.word	0x080025b5
 800250c:	080025b5 	.word	0x080025b5
 8002510:	0800258f 	.word	0x0800258f
 8002514:	080025b5 	.word	0x080025b5
 8002518:	080025b5 	.word	0x080025b5
 800251c:	080025b5 	.word	0x080025b5
 8002520:	080025b5 	.word	0x080025b5
 8002524:	080025b5 	.word	0x080025b5
 8002528:	080025b5 	.word	0x080025b5
 800252c:	080025b5 	.word	0x080025b5
 8002530:	080025ad 	.word	0x080025ad
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(&huart1);
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002550:	e031      	b.n	80025b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(&huart1);
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800256e:	e022      	b.n	80025b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(&huart1);
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800258c:	e013      	b.n	80025b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80025aa:	e004      	b.n	80025b6 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80025b2:	e000      	b.n	80025b6 <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 80025b4:	bf00      	nop
	}
	if (huart->Instance == WIFI_UART_Ins) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <HAL_UART_ErrorCallback+0x118>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10f      	bne.n	80025e0 <HAL_UART_ErrorCallback+0x10c>
		new_wifi_data = 1;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_UART_ErrorCallback+0x11c>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff,
 80025c6:	2264      	movs	r2, #100	; 0x64
 80025c8:	490a      	ldr	r1, [pc, #40]	; (80025f4 <HAL_UART_ErrorCallback+0x120>)
 80025ca:	4807      	ldr	r0, [pc, #28]	; (80025e8 <HAL_UART_ErrorCallback+0x114>)
 80025cc:	f003 fca3 	bl	8005f16 <HAL_UARTEx_ReceiveToIdle_DMA>
				sizeof(wifi_uart_buff));
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_UART_ErrorCallback+0x124>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_UART_ErrorCallback+0x124>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0208 	bic.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
	}
}
 80025e0:	bf00      	nop
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20001aa0 	.word	0x20001aa0
 80025ec:	40011000 	.word	0x40011000
 80025f0:	20001cbc 	.word	0x20001cbc
 80025f4:	20001cc0 	.word	0x20001cc0
 80025f8:	20001b6c 	.word	0x20001b6c

080025fc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == WIFI_UART_Ins) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0b      	ldr	r2, [pc, #44]	; (800263c <HAL_UARTEx_RxEventCallback+0x40>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10f      	bne.n	8002632 <HAL_UARTEx_RxEventCallback+0x36>
		new_wifi_data = 1;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_UARTEx_RxEventCallback+0x44>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8002618:	2264      	movs	r2, #100	; 0x64
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_UARTEx_RxEventCallback+0x48>)
 800261c:	480a      	ldr	r0, [pc, #40]	; (8002648 <HAL_UARTEx_RxEventCallback+0x4c>)
 800261e:	f003 fc7a 	bl	8005f16 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_UARTEx_RxEventCallback+0x50>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_UARTEx_RxEventCallback+0x50>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0208 	bic.w	r2, r2, #8
 8002630:	601a      	str	r2, [r3, #0]
	}
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40011000 	.word	0x40011000
 8002640:	20001cbc 	.word	0x20001cbc
 8002644:	20001cc0 	.word	0x20001cc0
 8002648:	20001aa0 	.word	0x20001aa0
 800264c:	20001b6c 	.word	0x20001b6c

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <HAL_Init+0x40>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_Init+0x40>)
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_Init+0x40>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 fc2e 	bl	8002eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267e:	200f      	movs	r0, #15
 8002680:	f7fe fa92 	bl	8000ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002684:	f7fe fa64 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00

08002694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_IncTick+0x20>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_IncTick+0x24>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_IncTick+0x24>)
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000008 	.word	0x20000008
 80026b8:	20001d9c 	.word	0x20001d9c

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20001d9c 	.word	0x20001d9c

080026d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0ed      	b.n	80028c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fd ff56 	bl	80005a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7ff ffd8 	bl	80026bc <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800270e:	e012      	b.n	8002736 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002710:	f7ff ffd4 	bl	80026bc <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b0a      	cmp	r3, #10
 800271c:	d90b      	bls.n	8002736 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2205      	movs	r2, #5
 800272e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0c5      	b.n	80028c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0e5      	beq.n	8002710 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0202 	bic.w	r2, r2, #2
 8002752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002754:	f7ff ffb2 	bl	80026bc <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800275a:	e012      	b.n	8002782 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800275c:	f7ff ffae 	bl	80026bc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b0a      	cmp	r3, #10
 8002768:	d90b      	bls.n	8002782 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2205      	movs	r2, #5
 800277a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e09f      	b.n	80028c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e5      	bne.n	800275c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7e1b      	ldrb	r3, [r3, #24]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e007      	b.n	80027ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7e5b      	ldrb	r3, [r3, #25]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d108      	bne.n	80027d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e007      	b.n	80027e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e9b      	ldrb	r3, [r3, #26]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d108      	bne.n	80027fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e007      	b.n	800280e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0220 	bic.w	r2, r2, #32
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7edb      	ldrb	r3, [r3, #27]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0210 	bic.w	r2, r2, #16
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e007      	b.n	8002838 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0210 	orr.w	r2, r2, #16
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7f1b      	ldrb	r3, [r3, #28]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d108      	bne.n	8002852 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0208 	orr.w	r2, r2, #8
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e007      	b.n	8002862 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0208 	bic.w	r2, r2, #8
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7f5b      	ldrb	r3, [r3, #29]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d108      	bne.n	800287c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0204 	orr.w	r2, r2, #4
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e007      	b.n	800288c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0204 	bic.w	r2, r2, #4
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	ea42 0103 	orr.w	r1, r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d003      	beq.n	80028f2 <HAL_CAN_ConfigFilter+0x26>
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	f040 80be 	bne.w	8002a6e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_CAN_ConfigFilter+0x1bc>)
 80028f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800290c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	431a      	orrs	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2201      	movs	r2, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	401a      	ands	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d123      	bne.n	800299c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002976:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3248      	adds	r2, #72	; 0x48
 800297c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002990:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002992:	6979      	ldr	r1, [r7, #20]
 8002994:	3348      	adds	r3, #72	; 0x48
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d122      	bne.n	80029ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3248      	adds	r2, #72	; 0x48
 80029ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029e0:	6979      	ldr	r1, [r7, #20]
 80029e2:	3348      	adds	r3, #72	; 0x48
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	401a      	ands	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a04:	e007      	b.n	8002a16 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a30:	e007      	b.n	8002a42 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a60:	f023 0201 	bic.w	r2, r3, #1
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e006      	b.n	8002a7c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40006400 	.word	0x40006400

08002a8c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d12e      	bne.n	8002afe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7ff fe00 	bl	80026bc <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002abe:	e012      	b.n	8002ae6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ac0:	f7ff fdfc 	bl	80026bc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b0a      	cmp	r3, #10
 8002acc:	d90b      	bls.n	8002ae6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2205      	movs	r2, #5
 8002ade:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e012      	b.n	8002b0c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e5      	bne.n	8002ac0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e006      	b.n	8002b0c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b28:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b32:	7ffb      	ldrb	r3, [r7, #31]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d003      	beq.n	8002b40 <HAL_CAN_AddTxMessage+0x2c>
 8002b38:	7ffb      	ldrb	r3, [r7, #31]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	f040 80b8 	bne.w	8002cb0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80a0 	beq.w	8002ca0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	0e1b      	lsrs	r3, r3, #24
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d907      	bls.n	8002b80 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e09e      	b.n	8002cbe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b80:	2201      	movs	r2, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	409a      	lsls	r2, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	6809      	ldr	r1, [r1, #0]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	440b      	add	r3, r1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e00f      	b.n	8002bce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bb8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bc2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	440b      	add	r3, r1
 8002bcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3318      	adds	r3, #24
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	440b      	add	r3, r1
 8002bde:	3304      	adds	r3, #4
 8002be0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	7d1b      	ldrb	r3, [r3, #20]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d111      	bne.n	8002c0e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3318      	adds	r3, #24
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	6811      	ldr	r1, [r2, #0]
 8002bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3318      	adds	r3, #24
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	440b      	add	r3, r1
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3307      	adds	r3, #7
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	061a      	lsls	r2, r3, #24
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3306      	adds	r3, #6
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3305      	adds	r3, #5
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	3204      	adds	r2, #4
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	4610      	mov	r0, r2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	ea43 0200 	orr.w	r2, r3, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	440b      	add	r3, r1
 8002c40:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3303      	adds	r3, #3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	061a      	lsls	r2, r3, #24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3302      	adds	r3, #2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	4313      	orrs	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	4610      	mov	r0, r2
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	6811      	ldr	r1, [r2, #0]
 8002c6c:	ea43 0200 	orr.w	r2, r3, r0
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	440b      	add	r3, r1
 8002c76:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3318      	adds	r3, #24
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	4413      	add	r3, r2
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	6811      	ldr	r1, [r2, #0]
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3318      	adds	r3, #24
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	440b      	add	r3, r1
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e00e      	b.n	8002cbe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e006      	b.n	8002cbe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cdc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d11d      	bne.n	8002d26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3301      	adds	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d44:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d002      	beq.n	8002d52 <HAL_CAN_ActivateNotification+0x1e>
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d109      	bne.n	8002d66 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6959      	ldr	r1, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e006      	b.n	8002d74 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <__NVIC_SetPriorityGrouping>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_EnableIRQ>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0b      	blt.n	8002e0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4907      	ldr	r1, [pc, #28]	; (8002e1c <__NVIC_EnableIRQ+0x38>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	; (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff4c 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f02:	f7ff ff61 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	6978      	ldr	r0, [r7, #20]
 8002f0e:	f7ff ffb1 	bl	8002e74 <NVIC_EncodePriority>
 8002f12:	4602      	mov	r2, r0
 8002f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ff80 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f20:	bf00      	nop
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff54 	bl	8002de4 <__NVIC_EnableIRQ>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7ff fbb4 	bl	80026bc <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e099      	b.n	8003094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f80:	e00f      	b.n	8002fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f82:	f7ff fb9b 	bl	80026bc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d908      	bls.n	8002fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e078      	b.n	8003094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e8      	bne.n	8002f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_DMA_Init+0x158>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	4313      	orrs	r3, r2
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b04      	cmp	r3, #4
 8003034:	d117      	bne.n	8003066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fb01 	bl	8003650 <DMA_CheckFifoParam>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003062:	2301      	movs	r3, #1
 8003064:	e016      	b.n	8003094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fab8 	bl	80035e4 <DMA_CalcBaseAndBitshift>
 8003074:	4603      	mov	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	223f      	movs	r2, #63	; 0x3f
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	f010803f 	.word	0xf010803f

080030a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Start_IT+0x26>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e040      	b.n	8003148 <HAL_DMA_Start_IT+0xa8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d12f      	bne.n	800313a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa4a 	bl	8003588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	223f      	movs	r2, #63	; 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0216 	orr.w	r2, r2, #22
 800310e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e005      	b.n	8003146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800315e:	f7ff faad 	bl	80026bc <HAL_GetTick>
 8003162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d008      	beq.n	8003182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e052      	b.n	8003228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0216 	bic.w	r2, r2, #22
 8003190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_DMA_Abort+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0208 	bic.w	r2, r2, #8
 80031c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d2:	e013      	b.n	80031fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d4:	f7ff fa72 	bl	80026bc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d90c      	bls.n	80031fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2203      	movs	r2, #3
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e015      	b.n	8003228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e4      	bne.n	80031d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	223f      	movs	r2, #63	; 0x3f
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e00c      	b.n	8003268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2205      	movs	r2, #5
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003280:	4b8e      	ldr	r3, [pc, #568]	; (80034bc <HAL_DMA_IRQHandler+0x248>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a8e      	ldr	r2, [pc, #568]	; (80034c0 <HAL_DMA_IRQHandler+0x24c>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	0a9b      	lsrs	r3, r3, #10
 800328c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	2208      	movs	r2, #8
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01a      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2208      	movs	r2, #8
 80032ce:	409a      	lsls	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2201      	movs	r2, #1
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	2204      	movs	r2, #4
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d012      	beq.n	800334c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2204      	movs	r2, #4
 800333a:	409a      	lsls	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2210      	movs	r2, #16
 8003352:	409a      	lsls	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d043      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03c      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2210      	movs	r2, #16
 8003370:	409a      	lsls	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d108      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d024      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
 80033a2:	e01f      	b.n	80033e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0208 	bic.w	r2, r2, #8
 80033d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2220      	movs	r2, #32
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 808f 	beq.w	8003514 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8087 	beq.w	8003514 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	2220      	movs	r2, #32
 800340c:	409a      	lsls	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b05      	cmp	r3, #5
 800341c:	d136      	bne.n	800348c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0216 	bic.w	r2, r2, #22
 800342c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_DMA_IRQHandler+0x1da>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0208 	bic.w	r2, r2, #8
 800345c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	223f      	movs	r2, #63	; 0x3f
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347e:	2b00      	cmp	r3, #0
 8003480:	d07e      	beq.n	8003580 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
        }
        return;
 800348a:	e079      	b.n	8003580 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01d      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10d      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d031      	beq.n	8003514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e02c      	b.n	8003514 <HAL_DMA_IRQHandler+0x2a0>
 80034ba:	bf00      	nop
 80034bc:	20000000 	.word	0x20000000
 80034c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d023      	beq.n	8003514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
 80034d4:	e01e      	b.n	8003514 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0210 	bic.w	r2, r2, #16
 80034f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	2b00      	cmp	r3, #0
 800351a:	d032      	beq.n	8003582 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d022      	beq.n	800356e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2205      	movs	r2, #5
 800352c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3301      	adds	r3, #1
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	d307      	bcc.n	800355c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f2      	bne.n	8003540 <HAL_DMA_IRQHandler+0x2cc>
 800355a:	e000      	b.n	800355e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800355c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e000      	b.n	8003582 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003580:	bf00      	nop
    }
  }
}
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d108      	bne.n	80035c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035c6:	e007      	b.n	80035d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	3b10      	subs	r3, #16
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <DMA_CalcBaseAndBitshift+0x64>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <DMA_CalcBaseAndBitshift+0x68>)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d909      	bls.n	8003626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	1d1a      	adds	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	; 0x58
 8003624:	e007      	b.n	8003636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	aaaaaaab 	.word	0xaaaaaaab
 800364c:	08009f60 	.word	0x08009f60

08003650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11f      	bne.n	80036aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d856      	bhi.n	800371e <DMA_CheckFifoParam+0xce>
 8003670:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <DMA_CheckFifoParam+0x28>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	08003689 	.word	0x08003689
 800367c:	0800369b 	.word	0x0800369b
 8003680:	08003689 	.word	0x08003689
 8003684:	0800371f 	.word	0x0800371f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d046      	beq.n	8003722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003698:	e043      	b.n	8003722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036a2:	d140      	bne.n	8003726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e03d      	b.n	8003726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b2:	d121      	bne.n	80036f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d837      	bhi.n	800372a <DMA_CheckFifoParam+0xda>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <DMA_CheckFifoParam+0x70>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036d7 	.word	0x080036d7
 80036c8:	080036d1 	.word	0x080036d1
 80036cc:	080036e9 	.word	0x080036e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      break;
 80036d4:	e030      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d025      	beq.n	800372e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e022      	b.n	800372e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f0:	d11f      	bne.n	8003732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036f6:	e01c      	b.n	8003732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d903      	bls.n	8003706 <DMA_CheckFifoParam+0xb6>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d003      	beq.n	800370c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003704:	e018      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      break;
 800370a:	e015      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e00b      	b.n	8003736 <DMA_CheckFifoParam+0xe6>
      break;
 800371e:	bf00      	nop
 8003720:	e00a      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
 8003724:	e008      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 8003726:	bf00      	nop
 8003728:	e006      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e004      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;   
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
    }
  } 
  
  return status; 
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HAL_FLASH_Program+0xa0>)
 800375c:	7e1b      	ldrb	r3, [r3, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_FLASH_Program+0x1e>
 8003762:	2302      	movs	r3, #2
 8003764:	e03b      	b.n	80037de <HAL_FLASH_Program+0x96>
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_FLASH_Program+0xa0>)
 8003768:	2201      	movs	r2, #1
 800376a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800376c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003770:	f000 f87c 	bl	800386c <FLASH_WaitForLastOperation>
 8003774:	4603      	mov	r3, r0
 8003776:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d12b      	bne.n	80037d6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003784:	783b      	ldrb	r3, [r7, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	68b8      	ldr	r0, [r7, #8]
 800378a:	f000 f927 	bl	80039dc <FLASH_Program_Byte>
 800378e:	e016      	b.n	80037be <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003796:	883b      	ldrh	r3, [r7, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	68b8      	ldr	r0, [r7, #8]
 800379c:	f000 f8fa 	bl	8003994 <FLASH_Program_HalfWord>
 80037a0:	e00d      	b.n	80037be <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d105      	bne.n	80037b4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4619      	mov	r1, r3
 80037ac:	68b8      	ldr	r0, [r7, #8]
 80037ae:	f000 f8cf 	bl	8003950 <FLASH_Program_Word>
 80037b2:	e004      	b.n	80037be <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80037b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b8:	68b8      	ldr	r0, [r7, #8]
 80037ba:	f000 f897 	bl	80038ec <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037c2:	f000 f853 	bl	800386c <FLASH_WaitForLastOperation>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_FLASH_Program+0xa4>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4a07      	ldr	r2, [pc, #28]	; (80037ec <HAL_FLASH_Program+0xa4>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <HAL_FLASH_Program+0xa0>)
 80037d8:	2200      	movs	r2, #0
 80037da:	761a      	strb	r2, [r3, #24]
  
  return status;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20001da0 	.word	0x20001da0
 80037ec:	40023c00 	.word	0x40023c00

080037f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_FLASH_Unlock+0x38>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da0b      	bge.n	800381a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_FLASH_Unlock+0x38>)
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_FLASH_Unlock+0x3c>)
 8003806:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <HAL_FLASH_Unlock+0x38>)
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_FLASH_Unlock+0x40>)
 800380c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_FLASH_Unlock+0x38>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	da01      	bge.n	800381a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800381a:	79fb      	ldrb	r3, [r7, #7]
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40023c00 	.word	0x40023c00
 800382c:	45670123 	.word	0x45670123
 8003830:	cdef89ab 	.word	0xcdef89ab

08003834 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_FLASH_Lock+0x1c>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_FLASH_Lock+0x1c>)
 800383e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003842:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40023c00 	.word	0x40023c00

08003854 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_FLASH_GetError+0x14>)
 800385a:	69db      	ldr	r3, [r3, #28]
}  
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20001da0 	.word	0x20001da0

0800386c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <FLASH_WaitForLastOperation+0x78>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800387e:	f7fe ff1d 	bl	80026bc <HAL_GetTick>
 8003882:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003884:	e010      	b.n	80038a8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d00c      	beq.n	80038a8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <FLASH_WaitForLastOperation+0x38>
 8003894:	f7fe ff12 	bl	80026bc <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d201      	bcs.n	80038a8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e019      	b.n	80038dc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <FLASH_WaitForLastOperation+0x7c>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e8      	bne.n	8003886 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <FLASH_WaitForLastOperation+0x7c>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <FLASH_WaitForLastOperation+0x7c>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <FLASH_WaitForLastOperation+0x7c>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80038d2:	f000 f8a5 	bl	8003a20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
  
}  
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20001da0 	.word	0x20001da0
 80038e8:	40023c00 	.word	0x40023c00

080038ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <FLASH_Program_DoubleWord+0x60>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	4a13      	ldr	r2, [pc, #76]	; (800394c <FLASH_Program_DoubleWord+0x60>)
 80038fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003902:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <FLASH_Program_DoubleWord+0x60>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	4a10      	ldr	r2, [pc, #64]	; (800394c <FLASH_Program_DoubleWord+0x60>)
 800390a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800390e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <FLASH_Program_DoubleWord+0x60>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <FLASH_Program_DoubleWord+0x60>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003922:	f3bf 8f6f 	isb	sy
}
 8003926:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	000a      	movs	r2, r1
 8003936:	2300      	movs	r3, #0
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	3104      	adds	r1, #4
 800393c:	4613      	mov	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40023c00 	.word	0x40023c00

08003950 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <FLASH_Program_Word+0x40>)
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <FLASH_Program_Word+0x40>)
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <FLASH_Program_Word+0x40>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <FLASH_Program_Word+0x40>)
 800396c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003970:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <FLASH_Program_Word+0x40>)
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	4a06      	ldr	r2, [pc, #24]	; (8003990 <FLASH_Program_Word+0x40>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	601a      	str	r2, [r3, #0]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40023c00 	.word	0x40023c00

08003994 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <FLASH_Program_HalfWord+0x44>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <FLASH_Program_HalfWord+0x44>)
 80039a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <FLASH_Program_HalfWord+0x44>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <FLASH_Program_HalfWord+0x44>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <FLASH_Program_HalfWord+0x44>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	4a06      	ldr	r2, [pc, #24]	; (80039d8 <FLASH_Program_HalfWord+0x44>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	801a      	strh	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40023c00 	.word	0x40023c00

080039dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <FLASH_Program_Byte+0x40>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <FLASH_Program_Byte+0x40>)
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <FLASH_Program_Byte+0x40>)
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <FLASH_Program_Byte+0x40>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <FLASH_Program_Byte+0x40>)
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	4a06      	ldr	r2, [pc, #24]	; (8003a1c <FLASH_Program_Byte+0x40>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	701a      	strb	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00

08003a20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f043 0310 	orr.w	r3, r3, #16
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a3a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a3e:	2210      	movs	r2, #16
 8003a40:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f043 0308 	orr.w	r3, r3, #8
 8003a56:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a58:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003a94:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f043 0320 	orr.w	r3, r3, #32
 8003ab0:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <FLASH_SetErrorCode+0xa8>)
 8003ab2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <FLASH_SetErrorCode+0xa4>)
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	60da      	str	r2, [r3, #12]
  }
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40023c00 	.word	0x40023c00
 8003ac8:	20001da0 	.word	0x20001da0

08003acc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ade:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_FLASHEx_Erase+0xd8>)
 8003ae0:	7e1b      	ldrb	r3, [r3, #24]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_FLASHEx_Erase+0x1e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e058      	b.n	8003b9c <HAL_FLASHEx_Erase+0xd0>
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_FLASHEx_Erase+0xd8>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003af0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003af4:	f7ff feba 	bl	800386c <FLASH_WaitForLastOperation>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d148      	bne.n	8003b94 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d115      	bne.n	8003b3e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f000 f844 	bl	8003bac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b28:	f7ff fea0 	bl	800386c <FLASH_WaitForLastOperation>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003b30:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_FLASHEx_Erase+0xdc>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_FLASHEx_Erase+0xdc>)
 8003b36:	f023 0304 	bic.w	r3, r3, #4
 8003b3a:	6113      	str	r3, [r2, #16]
 8003b3c:	e028      	b.n	8003b90 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	e01c      	b.n	8003b80 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68b8      	ldr	r0, [r7, #8]
 8003b50:	f000 f850 	bl	8003bf4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b58:	f7ff fe88 	bl	800386c <FLASH_WaitForLastOperation>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_FLASHEx_Erase+0xdc>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <HAL_FLASHEx_Erase+0xdc>)
 8003b66:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003b6a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	601a      	str	r2, [r3, #0]
          break;
 8003b78:	e00a      	b.n	8003b90 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3da      	bcc.n	8003b46 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003b90:	f000 f878 	bl	8003c84 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_FLASHEx_Erase+0xd8>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	761a      	strb	r2, [r3, #24]

  return status;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20001da0 	.word	0x20001da0
 8003ba8:	40023c00 	.word	0x40023c00

08003bac <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <FLASH_MassErase+0x44>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <FLASH_MassErase+0x44>)
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <FLASH_MassErase+0x44>)
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <FLASH_MassErase+0x44>)
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <FLASH_MassErase+0x44>)
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <FLASH_MassErase+0x44>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6113      	str	r3, [r2, #16]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40023c00 	.word	0x40023c00

08003bf4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e010      	b.n	8003c32 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d103      	bne.n	8003c1e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e009      	b.n	8003c32 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d103      	bne.n	8003c2c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e002      	b.n	8003c32 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003c2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	490f      	ldr	r1, [pc, #60]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <FLASH_Erase_Sector+0x8c>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	6113      	str	r3, [r2, #16]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003c9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c9e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003ca6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d017      	beq.n	8003d00 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cda:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003ce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <FLASH_FlushCaches+0x88>)
 8003cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cfe:	6013      	str	r3, [r2, #0]
  }
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023c00 	.word	0x40023c00

08003d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	e16b      	b.n	8004004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	f040 815a 	bne.w	8003ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d005      	beq.n	8003d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d130      	bne.n	8003dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 0201 	and.w	r2, r3, #1
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d017      	beq.n	8003e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2203      	movs	r2, #3
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d123      	bne.n	8003e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3208      	adds	r2, #8
 8003e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	220f      	movs	r2, #15
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	08da      	lsrs	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3208      	adds	r2, #8
 8003e4e:	69b9      	ldr	r1, [r7, #24]
 8003e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0203 	and.w	r2, r3, #3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80b4 	beq.w	8003ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	4b60      	ldr	r3, [pc, #384]	; (800401c <HAL_GPIO_Init+0x30c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	4a5f      	ldr	r2, [pc, #380]	; (800401c <HAL_GPIO_Init+0x30c>)
 8003ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_GPIO_Init+0x30c>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	; (8004020 <HAL_GPIO_Init+0x310>)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	3302      	adds	r3, #2
 8003eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_GPIO_Init+0x314>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <HAL_GPIO_Init+0x226>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	; (8004028 <HAL_GPIO_Init+0x318>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d025      	beq.n	8003f32 <HAL_GPIO_Init+0x222>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_GPIO_Init+0x31c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <HAL_GPIO_Init+0x21e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4f      	ldr	r2, [pc, #316]	; (8004030 <HAL_GPIO_Init+0x320>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d019      	beq.n	8003f2a <HAL_GPIO_Init+0x21a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4e      	ldr	r2, [pc, #312]	; (8004034 <HAL_GPIO_Init+0x324>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_GPIO_Init+0x216>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4d      	ldr	r2, [pc, #308]	; (8004038 <HAL_GPIO_Init+0x328>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00d      	beq.n	8003f22 <HAL_GPIO_Init+0x212>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4c      	ldr	r2, [pc, #304]	; (800403c <HAL_GPIO_Init+0x32c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <HAL_GPIO_Init+0x20e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a4b      	ldr	r2, [pc, #300]	; (8004040 <HAL_GPIO_Init+0x330>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_GPIO_Init+0x20a>
 8003f16:	2307      	movs	r3, #7
 8003f18:	e00e      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	e00c      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e00a      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f22:	2305      	movs	r3, #5
 8003f24:	e008      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f26:	2304      	movs	r3, #4
 8003f28:	e006      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e004      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f36:	2300      	movs	r3, #0
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	4093      	lsls	r3, r2
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f48:	4935      	ldr	r1, [pc, #212]	; (8004020 <HAL_GPIO_Init+0x310>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a32      	ldr	r2, [pc, #200]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b30      	ldr	r3, [pc, #192]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003faa:	4b26      	ldr	r3, [pc, #152]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <HAL_GPIO_Init+0x334>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	f67f ae90 	bls.w	8003d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40021c00 	.word	0x40021c00
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004064:	e003      	b.n	800406e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	041a      	lsls	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e034      	b.n	80040f6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004094:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f245 5255 	movw	r2, #21845	; 0x5555
 800409e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6852      	ldr	r2, [r2, #4]
 80040a8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80040b4:	f7fe fb02 	bl	80026bc <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80040ba:	e00f      	b.n	80040dc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80040bc:	f7fe fafe 	bl	80026bc <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b31      	cmp	r3, #49	; 0x31
 80040c8:	d908      	bls.n	80040dc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e00c      	b.n	80040f6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e8      	bne.n	80040bc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80040f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800410e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e267      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d075      	beq.n	800422a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b04      	cmp	r3, #4
 8004148:	d00c      	beq.n	8004164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b85      	ldr	r3, [pc, #532]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004152:	2b08      	cmp	r3, #8
 8004154:	d112      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004156:	4b82      	ldr	r3, [pc, #520]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004162:	d10b      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	4b7e      	ldr	r3, [pc, #504]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d05b      	beq.n	8004228 <HAL_RCC_OscConfig+0x108>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d157      	bne.n	8004228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e242      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d106      	bne.n	8004194 <HAL_RCC_OscConfig+0x74>
 8004186:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a75      	ldr	r2, [pc, #468]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e01d      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x98>
 800419e:	4b70      	ldr	r3, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6f      	ldr	r2, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b6d      	ldr	r3, [pc, #436]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6c      	ldr	r2, [pc, #432]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 80041b8:	4b69      	ldr	r3, [pc, #420]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a68      	ldr	r2, [pc, #416]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b66      	ldr	r3, [pc, #408]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a65      	ldr	r2, [pc, #404]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fe fa70 	bl	80026bc <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fe fa6c 	bl	80026bc <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e207      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	4b5b      	ldr	r3, [pc, #364]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0xc0>
 80041fe:	e014      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fe fa5c 	bl	80026bc <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe fa58 	bl	80026bc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1f3      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	4b51      	ldr	r3, [pc, #324]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0xe8>
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d063      	beq.n	80042fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004236:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800424a:	2b08      	cmp	r3, #8
 800424c:	d11c      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e1c7      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4937      	ldr	r1, [pc, #220]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004286:	e03a      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004290:	4b34      	ldr	r3, [pc, #208]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fe fa11 	bl	80026bc <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429e:	f7fe fa0d 	bl	80026bc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e1a8      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042bc:	4b28      	ldr	r3, [pc, #160]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4925      	ldr	r1, [pc, #148]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe f9f0 	bl	80026bc <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fe f9ec 	bl	80026bc <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e187      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d036      	beq.n	8004378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_RCC_OscConfig+0x248>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fe f9d0 	bl	80026bc <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004320:	f7fe f9cc 	bl	80026bc <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e167      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x200>
 800433e:	e01b      	b.n	8004378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_RCC_OscConfig+0x248>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fe f9b9 	bl	80026bc <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	e00e      	b.n	800436c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434e:	f7fe f9b5 	bl	80026bc <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d907      	bls.n	800436c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e150      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b88      	ldr	r3, [pc, #544]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ea      	bne.n	800434e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8097 	beq.w	80044b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b81      	ldr	r3, [pc, #516]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b7d      	ldr	r3, [pc, #500]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a7c      	ldr	r2, [pc, #496]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b7a      	ldr	r3, [pc, #488]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b77      	ldr	r3, [pc, #476]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b74      	ldr	r3, [pc, #464]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a73      	ldr	r2, [pc, #460]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fe f975 	bl	80026bc <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fe f971 	bl	80026bc <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e10c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b6a      	ldr	r3, [pc, #424]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x2ea>
 80043fc:	4b64      	ldr	r3, [pc, #400]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a63      	ldr	r2, [pc, #396]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	e01c      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b05      	cmp	r3, #5
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x30c>
 8004412:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a5e      	ldr	r2, [pc, #376]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	6713      	str	r3, [r2, #112]	; 0x70
 800441e:	4b5c      	ldr	r3, [pc, #368]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	4a5b      	ldr	r2, [pc, #364]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	; 0x70
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800442c:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a57      	ldr	r2, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
 8004438:	4b55      	ldr	r3, [pc, #340]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a54      	ldr	r2, [pc, #336]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fe f936 	bl	80026bc <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fe f932 	bl	80026bc <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0cb      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b49      	ldr	r3, [pc, #292]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCC_OscConfig+0x334>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004478:	f7fe f920 	bl	80026bc <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fe f91c 	bl	80026bc <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0b5      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004496:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ee      	bne.n	8004480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a1 	beq.w	8004600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d05c      	beq.n	8004584 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d141      	bne.n	8004556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCC_OscConfig+0x478>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fe f8f0 	bl	80026bc <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe f8ec 	bl	80026bc <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e087      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	019b      	lsls	r3, r3, #6
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	491b      	ldr	r1, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x478>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fe f8c5 	bl	80026bc <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004536:	f7fe f8c1 	bl	80026bc <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e05c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x416>
 8004554:	e054      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCC_OscConfig+0x478>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe f8ae 	bl	80026bc <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe f8aa 	bl	80026bc <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e045      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x444>
 8004582:	e03d      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e038      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004590:	40023800 	.word	0x40023800
 8004594:	40007000 	.word	0x40007000
 8004598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x4ec>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d028      	beq.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d121      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d11a      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800

08004610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0cc      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d90c      	bls.n	800464c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b65      	ldr	r3, [pc, #404]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0b8      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004664:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800466e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800467c:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a52      	ldr	r2, [pc, #328]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b50      	ldr	r3, [pc, #320]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	494d      	ldr	r1, [pc, #308]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d044      	beq.n	8004730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e067      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4934      	ldr	r1, [pc, #208]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004700:	f7fd ffdc 	bl	80026bc <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fd ffd8 	bl	80026bc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e04f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d20c      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e032      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4916      	ldr	r1, [pc, #88]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	490e      	ldr	r1, [pc, #56]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004796:	f000 f821 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490a      	ldr	r1, [pc, #40]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fc f9f6 	bl	8000ba8 <HAL_InitTick>

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00
 80047cc:	40023800 	.word	0x40023800
 80047d0:	08009f18 	.word	0x08009f18
 80047d4:	20000000 	.word	0x20000000
 80047d8:	20000004 	.word	0x20000004

080047dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b094      	sub	sp, #80	; 0x50
 80047e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44
 80047e8:	2300      	movs	r3, #0
 80047ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ec:	2300      	movs	r3, #0
 80047ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f4:	4b79      	ldr	r3, [pc, #484]	; (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d00d      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x40>
 8004800:	2b08      	cmp	r3, #8
 8004802:	f200 80e1 	bhi.w	80049c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x34>
 800480a:	2b04      	cmp	r3, #4
 800480c:	d003      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x3a>
 800480e:	e0db      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b73      	ldr	r3, [pc, #460]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004814:	e0db      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004816:	4b73      	ldr	r3, [pc, #460]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800481a:	e0d8      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800481c:	4b6f      	ldr	r3, [pc, #444]	; (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004824:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004826:	4b6d      	ldr	r3, [pc, #436]	; (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	2200      	movs	r2, #0
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
 800483c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	633b      	str	r3, [r7, #48]	; 0x30
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
 800484a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800484e:	4622      	mov	r2, r4
 8004850:	462b      	mov	r3, r5
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	0159      	lsls	r1, r3, #5
 800485c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004860:	0150      	lsls	r0, r2, #5
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4621      	mov	r1, r4
 8004868:	1a51      	subs	r1, r2, r1
 800486a:	6139      	str	r1, [r7, #16]
 800486c:	4629      	mov	r1, r5
 800486e:	eb63 0301 	sbc.w	r3, r3, r1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004880:	4659      	mov	r1, fp
 8004882:	018b      	lsls	r3, r1, #6
 8004884:	4651      	mov	r1, sl
 8004886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800488a:	4651      	mov	r1, sl
 800488c:	018a      	lsls	r2, r1, #6
 800488e:	4651      	mov	r1, sl
 8004890:	ebb2 0801 	subs.w	r8, r2, r1
 8004894:	4659      	mov	r1, fp
 8004896:	eb63 0901 	sbc.w	r9, r3, r1
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ae:	4690      	mov	r8, r2
 80048b0:	4699      	mov	r9, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	eb18 0303 	adds.w	r3, r8, r3
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	462b      	mov	r3, r5
 80048bc:	eb49 0303 	adc.w	r3, r9, r3
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ce:	4629      	mov	r1, r5
 80048d0:	024b      	lsls	r3, r1, #9
 80048d2:	4621      	mov	r1, r4
 80048d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d8:	4621      	mov	r1, r4
 80048da:	024a      	lsls	r2, r1, #9
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e2:	2200      	movs	r2, #0
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048ec:	f7fb fc70 	bl	80001d0 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f8:	e058      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	2200      	movs	r2, #0
 8004902:	4618      	mov	r0, r3
 8004904:	4611      	mov	r1, r2
 8004906:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	f04f 0000 	mov.w	r0, #0
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	0159      	lsls	r1, r3, #5
 8004922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004926:	0150      	lsls	r0, r2, #5
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4641      	mov	r1, r8
 800492e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004932:	4649      	mov	r1, r9
 8004934:	eb63 0b01 	sbc.w	fp, r3, r1
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800494c:	ebb2 040a 	subs.w	r4, r2, sl
 8004950:	eb63 050b 	sbc.w	r5, r3, fp
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	00eb      	lsls	r3, r5, #3
 800495e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004962:	00e2      	lsls	r2, r4, #3
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	4643      	mov	r3, r8
 800496a:	18e3      	adds	r3, r4, r3
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	464b      	mov	r3, r9
 8004970:	eb45 0303 	adc.w	r3, r5, r3
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004982:	4629      	mov	r1, r5
 8004984:	028b      	lsls	r3, r1, #10
 8004986:	4621      	mov	r1, r4
 8004988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800498c:	4621      	mov	r1, r4
 800498e:	028a      	lsls	r2, r1, #10
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004996:	2200      	movs	r2, #0
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	61fa      	str	r2, [r7, #28]
 800499c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a0:	f7fb fc16 	bl	80001d0 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4613      	mov	r3, r2
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049c6:	e002      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3750      	adds	r7, #80	; 0x50
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	00f42400 	.word	0x00f42400
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000000 	.word	0x20000000

08004a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a04:	f7ff fff0 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0a9b      	lsrs	r3, r3, #10
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4903      	ldr	r1, [pc, #12]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	08009f28 	.word	0x08009f28

08004a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a2c:	f7ff ffdc 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0b5b      	lsrs	r3, r3, #13
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4903      	ldr	r1, [pc, #12]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	08009f28 	.word	0x08009f28

08004a50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	220f      	movs	r2, #15
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_RCC_GetClockConfig+0x5c>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0203 	and.w	r2, r3, #3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_RCC_GetClockConfig+0x5c>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <HAL_RCC_GetClockConfig+0x5c>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_GetClockConfig+0x5c>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <HAL_RCC_GetClockConfig+0x60>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0207 	and.w	r2, r3, #7
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	601a      	str	r2, [r3, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40023c00 	.word	0x40023c00

08004ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e041      	b.n	8004b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc fa3a 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f000 fd90 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d001      	beq.n	8004b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e04e      	b.n	8004c0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a23      	ldr	r2, [pc, #140]	; (8004c18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d022      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x80>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d01d      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x80>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d018      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x80>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x80>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x80>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x80>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d111      	bne.n	8004bf8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d010      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	e007      	b.n	8004c08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40000c00 	.word	0x40000c00
 8004c28:	40010400 	.word	0x40010400
 8004c2c:	40014000 	.word	0x40014000
 8004c30:	40001800 	.word	0x40001800

08004c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f839 	bl	8004cd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fcd0 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_TIM_PWM_Start+0x24>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e022      	b.n	8004d52 <HAL_TIM_PWM_Start+0x6a>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d109      	bne.n	8004d26 <HAL_TIM_PWM_Start+0x3e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e015      	b.n	8004d52 <HAL_TIM_PWM_Start+0x6a>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d109      	bne.n	8004d40 <HAL_TIM_PWM_Start+0x58>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e008      	b.n	8004d52 <HAL_TIM_PWM_Start+0x6a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e07c      	b.n	8004e54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x82>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	e013      	b.n	8004d92 <HAL_TIM_PWM_Start+0xaa>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x92>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	e00b      	b.n	8004d92 <HAL_TIM_PWM_Start+0xaa>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start+0xa2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	e003      	b.n	8004d92 <HAL_TIM_PWM_Start+0xaa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2201      	movs	r2, #1
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 ff26 	bl	8005bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2d      	ldr	r2, [pc, #180]	; (8004e5c <HAL_TIM_PWM_Start+0x174>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIM_PWM_Start+0xcc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2c      	ldr	r2, [pc, #176]	; (8004e60 <HAL_TIM_PWM_Start+0x178>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_PWM_Start+0xd0>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_TIM_PWM_Start+0xd2>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a22      	ldr	r2, [pc, #136]	; (8004e5c <HAL_TIM_PWM_Start+0x174>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d022      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x136>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d01d      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x136>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_TIM_PWM_Start+0x17c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d018      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x136>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_TIM_PWM_Start+0x180>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x136>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <HAL_TIM_PWM_Start+0x184>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x136>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <HAL_TIM_PWM_Start+0x178>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x136>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <HAL_TIM_PWM_Start+0x188>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x136>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <HAL_TIM_PWM_Start+0x18c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d111      	bne.n	8004e42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b06      	cmp	r3, #6
 8004e2e:	d010      	beq.n	8004e52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	e007      	b.n	8004e52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40001800 	.word	0x40001800

08004e78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 feae 	bl	8005bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2e      	ldr	r2, [pc, #184]	; (8004f50 <HAL_TIM_PWM_Stop+0xd8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_PWM_Stop+0x2c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2d      	ldr	r2, [pc, #180]	; (8004f54 <HAL_TIM_PWM_Stop+0xdc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_PWM_Stop+0x30>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_PWM_Stop+0x32>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d017      	beq.n	8004ede <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a1a      	ldr	r2, [r3, #32]
 8004eb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_TIM_PWM_Stop+0x66>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <HAL_TIM_PWM_Stop+0x66>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <HAL_TIM_PWM_Stop+0x96>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <HAL_TIM_PWM_Stop+0x96>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Stop+0xa6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1c:	e013      	b.n	8004f46 <HAL_TIM_PWM_Stop+0xce>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Stop+0xb6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f2c:	e00b      	b.n	8004f46 <HAL_TIM_PWM_Stop+0xce>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Stop+0xc6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f3c:	e003      	b.n	8004f46 <HAL_TIM_PWM_Stop+0xce>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40010400 	.word	0x40010400

08004f58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e097      	b.n	800509c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fc f809 	bl	8000f98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9c:	f023 0307 	bic.w	r3, r3, #7
 8004fa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f000 fb33 	bl	8005618 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	4313      	orrs	r3, r2
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ff8:	f023 030c 	bic.w	r3, r3, #12
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	4313      	orrs	r3, r2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	011a      	lsls	r2, r3, #4
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	031b      	lsls	r3, r3, #12
 8005028:	4313      	orrs	r3, r2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4313      	orrs	r3, r2
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0202 	mvn.w	r2, #2
 80050d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa77 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa69 	bl	80055c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fa7a 	bl	80055ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b04      	cmp	r3, #4
 800510c:	d122      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d11b      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0204 	mvn.w	r2, #4
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa4d 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa3f 	bl	80055c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa50 	bl	80055ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b08      	cmp	r3, #8
 8005160:	d122      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d11b      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0208 	mvn.w	r2, #8
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2204      	movs	r2, #4
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa23 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa15 	bl	80055c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa26 	bl	80055ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d122      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d11b      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0210 	mvn.w	r2, #16
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2208      	movs	r2, #8
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f9f9 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9eb 	bl	80055c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f9fc 	bl	80055ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0201 	mvn.w	r2, #1
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fb fc7c 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fd78 	bl	8005d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9c1 	bl	8005602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b20      	cmp	r3, #32
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0220 	mvn.w	r2, #32
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fd42 	bl	8005d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e0ae      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	f200 809f 	bhi.w	8005420 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	08005421 	.word	0x08005421
 80052f0:	08005421 	.word	0x08005421
 80052f4:	08005421 	.word	0x08005421
 80052f8:	0800535d 	.word	0x0800535d
 80052fc:	08005421 	.word	0x08005421
 8005300:	08005421 	.word	0x08005421
 8005304:	08005421 	.word	0x08005421
 8005308:	0800539f 	.word	0x0800539f
 800530c:	08005421 	.word	0x08005421
 8005310:	08005421 	.word	0x08005421
 8005314:	08005421 	.word	0x08005421
 8005318:	080053df 	.word	0x080053df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fa18 	bl	8005758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6999      	ldr	r1, [r3, #24]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	619a      	str	r2, [r3, #24]
      break;
 800535a:	e064      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa68 	bl	8005838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	021a      	lsls	r2, r3, #8
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	619a      	str	r2, [r3, #24]
      break;
 800539c:	e043      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fabd 	bl	8005924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0208 	orr.w	r2, r2, #8
 80053b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0204 	bic.w	r2, r2, #4
 80053c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69d9      	ldr	r1, [r3, #28]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	61da      	str	r2, [r3, #28]
      break;
 80053dc:	e023      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fb11 	bl	8005a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69d9      	ldr	r1, [r3, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	021a      	lsls	r2, r3, #8
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	61da      	str	r2, [r3, #28]
      break;
 800541e:	e002      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	75fb      	strb	r3, [r7, #23]
      break;
 8005424:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIM_ConfigClockSource+0x1c>
 8005450:	2302      	movs	r3, #2
 8005452:	e0b4      	b.n	80055be <HAL_TIM_ConfigClockSource+0x186>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548c:	d03e      	beq.n	800550c <HAL_TIM_ConfigClockSource+0xd4>
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005492:	f200 8087 	bhi.w	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	f000 8086 	beq.w	80055aa <HAL_TIM_ConfigClockSource+0x172>
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a2:	d87f      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b70      	cmp	r3, #112	; 0x70
 80054a6:	d01a      	beq.n	80054de <HAL_TIM_ConfigClockSource+0xa6>
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d87b      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d050      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0x11a>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d877      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d03c      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0xfa>
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d873      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d058      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x13a>
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d86f      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d064      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054c8:	2b30      	cmp	r3, #48	; 0x30
 80054ca:	d86b      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d060      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d867      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d05c      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d05a      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054dc:	e062      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6899      	ldr	r1, [r3, #8]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f000 fb5d 	bl	8005bac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
      break;
 800550a:	e04f      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f000 fb46 	bl	8005bac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552e:	609a      	str	r2, [r3, #8]
      break;
 8005530:	e03c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	461a      	mov	r2, r3
 8005540:	f000 faba 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2150      	movs	r1, #80	; 0x50
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fb13 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 8005550:	e02c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	461a      	mov	r2, r3
 8005560:	f000 fad9 	bl	8005b16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2160      	movs	r1, #96	; 0x60
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fb03 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 8005570:	e01c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	461a      	mov	r2, r3
 8005580:	f000 fa9a 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	4618      	mov	r0, r3
 800558c:	f000 faf3 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 8005590:	e00c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f000 faea 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 80055a2:	e003      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
      break;
 80055a8:	e000      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a40      	ldr	r2, [pc, #256]	; (800572c <TIM_Base_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a3d      	ldr	r2, [pc, #244]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3c      	ldr	r2, [pc, #240]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3b      	ldr	r2, [pc, #236]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3a      	ldr	r2, [pc, #232]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2f      	ldr	r2, [pc, #188]	; (800572c <TIM_Base_SetConfig+0x114>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d02b      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d027      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d023      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01f      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01b      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d017      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <TIM_Base_SetConfig+0x128>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d013      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a27      	ldr	r2, [pc, #156]	; (8005744 <TIM_Base_SetConfig+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00f      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <TIM_Base_SetConfig+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00b      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a25      	ldr	r2, [pc, #148]	; (800574c <TIM_Base_SetConfig+0x134>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a24      	ldr	r2, [pc, #144]	; (8005750 <TIM_Base_SetConfig+0x138>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a23      	ldr	r2, [pc, #140]	; (8005754 <TIM_Base_SetConfig+0x13c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <TIM_Base_SetConfig+0x114>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <TIM_Base_SetConfig+0x124>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	615a      	str	r2, [r3, #20]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800
 800574c:	40001800 	.word	0x40001800
 8005750:	40001c00 	.word	0x40001c00
 8005754:	40002000 	.word	0x40002000

08005758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 0302 	bic.w	r3, r3, #2
 80057a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a20      	ldr	r2, [pc, #128]	; (8005830 <TIM_OC1_SetConfig+0xd8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC1_SetConfig+0x64>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <TIM_OC1_SetConfig+0xdc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10c      	bne.n	80057d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0308 	bic.w	r3, r3, #8
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <TIM_OC1_SetConfig+0xd8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC1_SetConfig+0x8e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a14      	ldr	r2, [pc, #80]	; (8005834 <TIM_OC1_SetConfig+0xdc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d111      	bne.n	800580a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40010000 	.word	0x40010000
 8005834:	40010400 	.word	0x40010400

08005838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f023 0210 	bic.w	r2, r3, #16
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0320 	bic.w	r3, r3, #32
 8005882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a22      	ldr	r2, [pc, #136]	; (800591c <TIM_OC2_SetConfig+0xe4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC2_SetConfig+0x68>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a21      	ldr	r2, [pc, #132]	; (8005920 <TIM_OC2_SetConfig+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10d      	bne.n	80058bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <TIM_OC2_SetConfig+0xe4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC2_SetConfig+0x94>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a16      	ldr	r2, [pc, #88]	; (8005920 <TIM_OC2_SetConfig+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d113      	bne.n	80058f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40010400 	.word	0x40010400

08005924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800596c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <TIM_OC3_SetConfig+0xe0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_OC3_SetConfig+0x66>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <TIM_OC3_SetConfig+0xe4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10d      	bne.n	80059a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a16      	ldr	r2, [pc, #88]	; (8005a04 <TIM_OC3_SetConfig+0xe0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC3_SetConfig+0x92>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <TIM_OC3_SetConfig+0xe4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d113      	bne.n	80059de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	621a      	str	r2, [r3, #32]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40010400 	.word	0x40010400

08005a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	031b      	lsls	r3, r3, #12
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a12      	ldr	r2, [pc, #72]	; (8005ab0 <TIM_OC4_SetConfig+0xa4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC4_SetConfig+0x68>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <TIM_OC4_SetConfig+0xa8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d109      	bne.n	8005a88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	019b      	lsls	r3, r3, #6
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40010400 	.word	0x40010400

08005ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 030a 	bic.w	r3, r3, #10
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b087      	sub	sp, #28
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0210 	bic.w	r2, r3, #16
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	031b      	lsls	r3, r3, #12
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f043 0307 	orr.w	r3, r3, #7
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2201      	movs	r2, #1
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1a      	ldr	r2, [r3, #32]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	401a      	ands	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	431a      	orrs	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e05a      	b.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9c:	d01d      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40010400 	.word	0x40010400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40001800 	.word	0x40001800

08005d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e03f      	b.n	8005dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb fa0a 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2224      	movs	r2, #36	; 0x24
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 ff9d 	bl	8006cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695a      	ldr	r2, [r3, #20]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b08a      	sub	sp, #40	; 0x28
 8005df6:	af02      	add	r7, sp, #8
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d17c      	bne.n	8005f0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_UART_Transmit+0x2c>
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e075      	b.n	8005f0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_UART_Transmit+0x3e>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e06e      	b.n	8005f0e <HAL_UART_Transmit+0x11c>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2221      	movs	r2, #33	; 0x21
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e46:	f7fc fc39 	bl	80026bc <HAL_GetTick>
 8005e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	88fa      	ldrh	r2, [r7, #6]
 8005e56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e60:	d108      	bne.n	8005e74 <HAL_UART_Transmit+0x82>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	e003      	b.n	8005e7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e84:	e02a      	b.n	8005edc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2180      	movs	r1, #128	; 0x80
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fc55 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e036      	b.n	8005f0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	3302      	adds	r3, #2
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e007      	b.n	8005ece <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	781a      	ldrb	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1cf      	bne.n	8005e86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2200      	movs	r2, #0
 8005eee:	2140      	movs	r1, #64	; 0x40
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 fc25 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e006      	b.n	8005f0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e000      	b.n	8005f0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
  }
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b08c      	sub	sp, #48	; 0x30
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	4613      	mov	r3, r2
 8005f22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d152      	bne.n	8005fd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e04b      	b.n	8005fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e044      	b.n	8005fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fc5a 	bl	800681c <UART_Start_Receive_DMA>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d12c      	bne.n	8005fd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d125      	bne.n	8005fca <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f043 0310 	orr.w	r3, r3, #16
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb4:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6a39      	ldr	r1, [r7, #32]
 8005fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005fc8:	e002      	b.n	8005fd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fd4:	e000      	b.n	8005fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3730      	adds	r7, #48	; 0x30
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b0ba      	sub	sp, #232	; 0xe8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006006:	2300      	movs	r3, #0
 8006008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800600c:	2300      	movs	r3, #0
 800600e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800601e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10f      	bne.n	8006046 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <HAL_UART_IRQHandler+0x66>
 8006032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fd91 	bl	8006b66 <UART_Receive_IT>
      return;
 8006044:	e256      	b.n	80064f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80de 	beq.w	800620c <HAL_UART_IRQHandler+0x22c>
 8006050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006060:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80d1 	beq.w	800620c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <HAL_UART_IRQHandler+0xae>
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f043 0201 	orr.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00b      	beq.n	80060b2 <HAL_UART_IRQHandler+0xd2>
 800609a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f043 0202 	orr.w	r2, r3, #2
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <HAL_UART_IRQHandler+0xf6>
 80060be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0204 	orr.w	r2, r3, #4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <HAL_UART_IRQHandler+0x126>
 80060e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d105      	bne.n	80060fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f043 0208 	orr.w	r2, r3, #8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 81ed 	beq.w	80064ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_UART_IRQHandler+0x14e>
 800611c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fd1c 	bl	8006b66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	bf0c      	ite	eq
 800613c:	2301      	moveq	r3, #1
 800613e:	2300      	movne	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <HAL_UART_IRQHandler+0x17a>
 8006152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d04f      	beq.n	80061fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fc24 	bl	80069a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d141      	bne.n	80061f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3314      	adds	r3, #20
 8006196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800619a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800619e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1d9      	bne.n	800616e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d013      	beq.n	80061ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	4a7d      	ldr	r2, [pc, #500]	; (80063bc <HAL_UART_IRQHandler+0x3dc>)
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fd f82e 	bl	8003230 <HAL_DMA_Abort_IT>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061e4:	4610      	mov	r0, r2
 80061e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	e00e      	b.n	8006208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fc f972 	bl	80024d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	e00a      	b.n	8006208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fc f96e 	bl	80024d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	e006      	b.n	8006208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fc f96a 	bl	80024d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006206:	e170      	b.n	80064ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	bf00      	nop
    return;
 800620a:	e16e      	b.n	80064ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	2b01      	cmp	r3, #1
 8006212:	f040 814a 	bne.w	80064aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 8143 	beq.w	80064aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 813c 	beq.w	80064aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	f040 80b4 	bne.w	80063c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8140 	beq.w	80064ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006276:	429a      	cmp	r2, r3
 8006278:	f080 8139 	bcs.w	80064ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006282:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628e:	f000 8088 	beq.w	80063a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1d9      	bne.n	8006292 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3314      	adds	r3, #20
 80062fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006302:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006306:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800630a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e1      	bne.n	80062de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3314      	adds	r3, #20
 8006320:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800632a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800632c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800633e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006340:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800634c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e3      	bne.n	800631a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006372:	f023 0310 	bic.w	r3, r3, #16
 8006376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006384:	65ba      	str	r2, [r7, #88]	; 0x58
 8006386:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800638a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e3      	bne.n	8006360 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	4618      	mov	r0, r3
 800639e:	f7fc fed7 	bl	8003150 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fc f922 	bl	80025fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063b8:	e099      	b.n	80064ee <HAL_UART_IRQHandler+0x50e>
 80063ba:	bf00      	nop
 80063bc:	08006a6f 	.word	0x08006a6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 808b 	beq.w	80064f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8086 	beq.w	80064f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800640a:	647a      	str	r2, [r7, #68]	; 0x44
 800640c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e3      	bne.n	80063e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3314      	adds	r3, #20
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	623b      	str	r3, [r7, #32]
   return(result);
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3314      	adds	r3, #20
 800643e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006442:	633a      	str	r2, [r7, #48]	; 0x30
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e3      	bne.n	800641e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	330c      	adds	r3, #12
 800646a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	60fb      	str	r3, [r7, #12]
   return(result);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0310 	bic.w	r3, r3, #16
 800647a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006488:	61fa      	str	r2, [r7, #28]
 800648a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	69b9      	ldr	r1, [r7, #24]
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	617b      	str	r3, [r7, #20]
   return(result);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e3      	bne.n	8006464 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800649c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fc f8aa 	bl	80025fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064a8:	e023      	b.n	80064f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <HAL_UART_IRQHandler+0x4ea>
 80064b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fae7 	bl	8006a96 <UART_Transmit_IT>
    return;
 80064c8:	e014      	b.n	80064f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00e      	beq.n	80064f4 <HAL_UART_IRQHandler+0x514>
 80064d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fb27 	bl	8006b36 <UART_EndTransmit_IT>
    return;
 80064e8:	e004      	b.n	80064f4 <HAL_UART_IRQHandler+0x514>
    return;
 80064ea:	bf00      	nop
 80064ec:	e002      	b.n	80064f4 <HAL_UART_IRQHandler+0x514>
      return;
 80064ee:	bf00      	nop
 80064f0:	e000      	b.n	80064f4 <HAL_UART_IRQHandler+0x514>
      return;
 80064f2:	bf00      	nop
  }
}
 80064f4:	37e8      	adds	r7, #232	; 0xe8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop

080064fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b09c      	sub	sp, #112	; 0x70
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d172      	bne.n	8006652 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800656c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656e:	2200      	movs	r2, #0
 8006570:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006588:	66bb      	str	r3, [r7, #104]	; 0x68
 800658a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006592:	65ba      	str	r2, [r7, #88]	; 0x58
 8006594:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	667b      	str	r3, [r7, #100]	; 0x64
 80065be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065c6:	647a      	str	r2, [r7, #68]	; 0x44
 80065c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	623b      	str	r3, [r7, #32]
   return(result);
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f0:	663b      	str	r3, [r7, #96]	; 0x60
 80065f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065fa:	633a      	str	r2, [r7, #48]	; 0x30
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800660e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	2b01      	cmp	r3, #1
 800661c:	d119      	bne.n	8006652 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	60fb      	str	r3, [r7, #12]
   return(result);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f023 0310 	bic.w	r3, r3, #16
 8006634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800663e:	61fa      	str	r2, [r7, #28]
 8006640:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	69b9      	ldr	r1, [r7, #24]
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	617b      	str	r3, [r7, #20]
   return(result);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e5      	bne.n	800661e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	2b01      	cmp	r3, #1
 8006658:	d106      	bne.n	8006668 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800665e:	4619      	mov	r1, r3
 8006660:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006662:	f7fb ffcb 	bl	80025fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006666:	e002      	b.n	800666e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006668:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800666a:	f7ff ff51 	bl	8006510 <HAL_UART_RxCpltCallback>
}
 800666e:	bf00      	nop
 8006670:	3770      	adds	r7, #112	; 0x70
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	2b01      	cmp	r3, #1
 800668a:	d108      	bne.n	800669e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	4619      	mov	r1, r3
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f7fb ffb0 	bl	80025fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800669c:	e002      	b.n	80066a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff ff40 	bl	8006524 <HAL_UART_RxHalfCpltCallback>
}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b21      	cmp	r3, #33	; 0x21
 80066de:	d108      	bne.n	80066f2 <UART_DMAError+0x46>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80066ec:	68b8      	ldr	r0, [r7, #8]
 80066ee:	f000 f933 	bl	8006958 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b22      	cmp	r3, #34	; 0x22
 8006712:	d108      	bne.n	8006726 <UART_DMAError+0x7a>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2200      	movs	r2, #0
 800671e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006720:	68b8      	ldr	r0, [r7, #8]
 8006722:	f000 f941 	bl	80069a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f043 0210 	orr.w	r2, r3, #16
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f7fb fece 	bl	80024d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b090      	sub	sp, #64	; 0x40
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006750:	e050      	b.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d04c      	beq.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800675a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <UART_WaitOnFlagUntilTimeout+0x30>
 8006760:	f7fb ffac 	bl	80026bc <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676c:	429a      	cmp	r2, r3
 800676e:	d241      	bcs.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006790:	637a      	str	r2, [r7, #52]	; 0x34
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e5      	bne.n	8006770 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3314      	adds	r3, #20
 80067aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	613b      	str	r3, [r7, #16]
   return(result);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f023 0301 	bic.w	r3, r3, #1
 80067ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3314      	adds	r3, #20
 80067c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067c4:	623a      	str	r2, [r7, #32]
 80067c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	69f9      	ldr	r1, [r7, #28]
 80067ca:	6a3a      	ldr	r2, [r7, #32]
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e5      	bne.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e00f      	b.n	8006814 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	429a      	cmp	r2, r3
 8006810:	d09f      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3740      	adds	r7, #64	; 0x40
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b098      	sub	sp, #96	; 0x60
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2222      	movs	r2, #34	; 0x22
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	4a40      	ldr	r2, [pc, #256]	; (800694c <UART_Start_Receive_DMA+0x130>)
 800684a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	4a3f      	ldr	r2, [pc, #252]	; (8006950 <UART_Start_Receive_DMA+0x134>)
 8006852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	4a3e      	ldr	r2, [pc, #248]	; (8006954 <UART_Start_Receive_DMA+0x138>)
 800685a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	2200      	movs	r2, #0
 8006862:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	f7fc fc10 	bl	80030a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d019      	beq.n	80068da <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80068c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80068cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80068d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3314      	adds	r3, #20
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	f043 0301 	orr.w	r3, r3, #1
 80068f0:	657b      	str	r3, [r7, #84]	; 0x54
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3314      	adds	r3, #20
 80068f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3314      	adds	r3, #20
 8006914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	617b      	str	r3, [r7, #20]
   return(result);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800692e:	627a      	str	r2, [r7, #36]	; 0x24
 8006930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6a39      	ldr	r1, [r7, #32]
 8006934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	61fb      	str	r3, [r7, #28]
   return(result);
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3760      	adds	r7, #96	; 0x60
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08006551 	.word	0x08006551
 8006950:	08006677 	.word	0x08006677
 8006954:	080066ad 	.word	0x080066ad

08006958 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b089      	sub	sp, #36	; 0x24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	61ba      	str	r2, [r7, #24]
 8006982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6979      	ldr	r1, [r7, #20]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800699c:	bf00      	nop
 800699e:	3724      	adds	r7, #36	; 0x24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b095      	sub	sp, #84	; 0x54
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069d0:	643a      	str	r2, [r7, #64]	; 0x40
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3314      	adds	r3, #20
 80069ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f023 0301 	bic.w	r3, r3, #1
 80069fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3314      	adds	r3, #20
 8006a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e5      	bne.n	80069e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d119      	bne.n	8006a54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f023 0310 	bic.w	r3, r3, #16
 8006a36:	647b      	str	r3, [r7, #68]	; 0x44
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a40:	61ba      	str	r2, [r7, #24]
 8006a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6979      	ldr	r1, [r7, #20]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e5      	bne.n	8006a20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a62:	bf00      	nop
 8006a64:	3754      	adds	r7, #84	; 0x54
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7fb fd23 	bl	80024d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b21      	cmp	r3, #33	; 0x21
 8006aa8:	d13e      	bne.n	8006b28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab2:	d114      	bne.n	8006ade <UART_Transmit_IT+0x48>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d110      	bne.n	8006ade <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	1c9a      	adds	r2, r3, #2
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	621a      	str	r2, [r3, #32]
 8006adc:	e008      	b.n	8006af0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	1c59      	adds	r1, r3, #1
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6211      	str	r1, [r2, #32]
 8006ae8:	781a      	ldrb	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4619      	mov	r1, r3
 8006afe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10f      	bne.n	8006b24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e000      	b.n	8006b2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
  }
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff fcd0 	bl	80064fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b08c      	sub	sp, #48	; 0x30
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b22      	cmp	r3, #34	; 0x22
 8006b78:	f040 80ab 	bne.w	8006cd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b84:	d117      	bne.n	8006bb6 <UART_Receive_IT+0x50>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d113      	bne.n	8006bb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	1c9a      	adds	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb4:	e026      	b.n	8006c04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc8:	d007      	beq.n	8006bda <UART_Receive_IT+0x74>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <UART_Receive_IT+0x82>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	e008      	b.n	8006bfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4619      	mov	r1, r3
 8006c12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d15a      	bne.n	8006cce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0220 	bic.w	r2, r2, #32
 8006c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0201 	bic.w	r2, r2, #1
 8006c46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d135      	bne.n	8006cc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f023 0310 	bic.w	r3, r3, #16
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7e:	623a      	str	r2, [r7, #32]
 8006c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	6a3a      	ldr	r2, [r7, #32]
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e5      	bne.n	8006c5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d10a      	bne.n	8006cb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7fb fc9d 	bl	80025fc <HAL_UARTEx_RxEventCallback>
 8006cc2:	e002      	b.n	8006cca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fc23 	bl	8006510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e002      	b.n	8006cd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006cd2:	2302      	movs	r3, #2
  }
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3730      	adds	r7, #48	; 0x30
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce0:	b0c0      	sub	sp, #256	; 0x100
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	68d9      	ldr	r1, [r3, #12]
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	ea40 0301 	orr.w	r3, r0, r1
 8006d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d34:	f021 010c 	bic.w	r1, r1, #12
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d42:	430b      	orrs	r3, r1
 8006d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d56:	6999      	ldr	r1, [r3, #24]
 8006d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	ea40 0301 	orr.w	r3, r0, r1
 8006d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b8f      	ldr	r3, [pc, #572]	; (8006fa8 <UART_SetConfig+0x2cc>)
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d005      	beq.n	8006d7c <UART_SetConfig+0xa0>
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b8d      	ldr	r3, [pc, #564]	; (8006fac <UART_SetConfig+0x2d0>)
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d104      	bne.n	8006d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fd fe54 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 8006d80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d84:	e003      	b.n	8006d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d86:	f7fd fe3b 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8006d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d98:	f040 810c 	bne.w	8006fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006da0:	2200      	movs	r2, #0
 8006da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dae:	4622      	mov	r2, r4
 8006db0:	462b      	mov	r3, r5
 8006db2:	1891      	adds	r1, r2, r2
 8006db4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006db6:	415b      	adcs	r3, r3
 8006db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	eb12 0801 	adds.w	r8, r2, r1
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	eb43 0901 	adc.w	r9, r3, r1
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dde:	4690      	mov	r8, r2
 8006de0:	4699      	mov	r9, r3
 8006de2:	4623      	mov	r3, r4
 8006de4:	eb18 0303 	adds.w	r3, r8, r3
 8006de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dec:	462b      	mov	r3, r5
 8006dee:	eb49 0303 	adc.w	r3, r9, r3
 8006df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	18db      	adds	r3, r3, r3
 8006e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e10:	4613      	mov	r3, r2
 8006e12:	eb42 0303 	adc.w	r3, r2, r3
 8006e16:	657b      	str	r3, [r7, #84]	; 0x54
 8006e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e20:	f7f9 f9d6 	bl	80001d0 <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4b61      	ldr	r3, [pc, #388]	; (8006fb0 <UART_SetConfig+0x2d4>)
 8006e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	011c      	lsls	r4, r3, #4
 8006e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e44:	4642      	mov	r2, r8
 8006e46:	464b      	mov	r3, r9
 8006e48:	1891      	adds	r1, r2, r2
 8006e4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e4c:	415b      	adcs	r3, r3
 8006e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e54:	4641      	mov	r1, r8
 8006e56:	eb12 0a01 	adds.w	sl, r2, r1
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e74:	4692      	mov	sl, r2
 8006e76:	469b      	mov	fp, r3
 8006e78:	4643      	mov	r3, r8
 8006e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8006e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e82:	464b      	mov	r3, r9
 8006e84:	eb4b 0303 	adc.w	r3, fp, r3
 8006e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	18db      	adds	r3, r3, r3
 8006ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	eb42 0303 	adc.w	r3, r2, r3
 8006eac:	647b      	str	r3, [r7, #68]	; 0x44
 8006eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006eb6:	f7f9 f98b 	bl	80001d0 <__aeabi_uldivmod>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4b3b      	ldr	r3, [pc, #236]	; (8006fb0 <UART_SetConfig+0x2d4>)
 8006ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	2264      	movs	r2, #100	; 0x64
 8006eca:	fb02 f303 	mul.w	r3, r2, r3
 8006ece:	1acb      	subs	r3, r1, r3
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ed6:	4b36      	ldr	r3, [pc, #216]	; (8006fb0 <UART_SetConfig+0x2d4>)
 8006ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ee4:	441c      	add	r4, r3
 8006ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ef8:	4642      	mov	r2, r8
 8006efa:	464b      	mov	r3, r9
 8006efc:	1891      	adds	r1, r2, r2
 8006efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f00:	415b      	adcs	r3, r3
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f08:	4641      	mov	r1, r8
 8006f0a:	1851      	adds	r1, r2, r1
 8006f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8006f0e:	4649      	mov	r1, r9
 8006f10:	414b      	adcs	r3, r1
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f20:	4659      	mov	r1, fp
 8006f22:	00cb      	lsls	r3, r1, #3
 8006f24:	4651      	mov	r1, sl
 8006f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f2a:	4651      	mov	r1, sl
 8006f2c:	00ca      	lsls	r2, r1, #3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4619      	mov	r1, r3
 8006f32:	4603      	mov	r3, r0
 8006f34:	4642      	mov	r2, r8
 8006f36:	189b      	adds	r3, r3, r2
 8006f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	460a      	mov	r2, r1
 8006f40:	eb42 0303 	adc.w	r3, r2, r3
 8006f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	18db      	adds	r3, r3, r3
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	4613      	mov	r3, r2
 8006f64:	eb42 0303 	adc.w	r3, r2, r3
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f72:	f7f9 f92d 	bl	80001d0 <__aeabi_uldivmod>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <UART_SetConfig+0x2d4>)
 8006f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	2164      	movs	r1, #100	; 0x64
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	3332      	adds	r3, #50	; 0x32
 8006f8e:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <UART_SetConfig+0x2d4>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	f003 0207 	and.w	r2, r3, #7
 8006f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4422      	add	r2, r4
 8006fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fa4:	e105      	b.n	80071b2 <UART_SetConfig+0x4d6>
 8006fa6:	bf00      	nop
 8006fa8:	40011000 	.word	0x40011000
 8006fac:	40011400 	.word	0x40011400
 8006fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	464b      	mov	r3, r9
 8006fca:	1891      	adds	r1, r2, r2
 8006fcc:	6239      	str	r1, [r7, #32]
 8006fce:	415b      	adcs	r3, r3
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	1854      	adds	r4, r2, r1
 8006fda:	4649      	mov	r1, r9
 8006fdc:	eb43 0501 	adc.w	r5, r3, r1
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	00eb      	lsls	r3, r5, #3
 8006fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fee:	00e2      	lsls	r2, r4, #3
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	461d      	mov	r5, r3
 8006ff4:	4643      	mov	r3, r8
 8006ff6:	18e3      	adds	r3, r4, r3
 8006ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ffc:	464b      	mov	r3, r9
 8006ffe:	eb45 0303 	adc.w	r3, r5, r3
 8007002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007022:	4629      	mov	r1, r5
 8007024:	008b      	lsls	r3, r1, #2
 8007026:	4621      	mov	r1, r4
 8007028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800702c:	4621      	mov	r1, r4
 800702e:	008a      	lsls	r2, r1, #2
 8007030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007034:	f7f9 f8cc 	bl	80001d0 <__aeabi_uldivmod>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4b60      	ldr	r3, [pc, #384]	; (80071c0 <UART_SetConfig+0x4e4>)
 800703e:	fba3 2302 	umull	r2, r3, r3, r2
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	011c      	lsls	r4, r3, #4
 8007046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800704a:	2200      	movs	r2, #0
 800704c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	1891      	adds	r1, r2, r2
 800705e:	61b9      	str	r1, [r7, #24]
 8007060:	415b      	adcs	r3, r3
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007068:	4641      	mov	r1, r8
 800706a:	1851      	adds	r1, r2, r1
 800706c:	6139      	str	r1, [r7, #16]
 800706e:	4649      	mov	r1, r9
 8007070:	414b      	adcs	r3, r1
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007080:	4659      	mov	r1, fp
 8007082:	00cb      	lsls	r3, r1, #3
 8007084:	4651      	mov	r1, sl
 8007086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800708a:	4651      	mov	r1, sl
 800708c:	00ca      	lsls	r2, r1, #3
 800708e:	4610      	mov	r0, r2
 8007090:	4619      	mov	r1, r3
 8007092:	4603      	mov	r3, r0
 8007094:	4642      	mov	r2, r8
 8007096:	189b      	adds	r3, r3, r2
 8007098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800709c:	464b      	mov	r3, r9
 800709e:	460a      	mov	r2, r1
 80070a0:	eb42 0303 	adc.w	r3, r2, r3
 80070a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80070b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070c0:	4649      	mov	r1, r9
 80070c2:	008b      	lsls	r3, r1, #2
 80070c4:	4641      	mov	r1, r8
 80070c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ca:	4641      	mov	r1, r8
 80070cc:	008a      	lsls	r2, r1, #2
 80070ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070d2:	f7f9 f87d 	bl	80001d0 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4b39      	ldr	r3, [pc, #228]	; (80071c0 <UART_SetConfig+0x4e4>)
 80070dc:	fba3 1302 	umull	r1, r3, r3, r2
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	2164      	movs	r1, #100	; 0x64
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	3332      	adds	r3, #50	; 0x32
 80070ee:	4a34      	ldr	r2, [pc, #208]	; (80071c0 <UART_SetConfig+0x4e4>)
 80070f0:	fba2 2303 	umull	r2, r3, r2, r3
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070fa:	441c      	add	r4, r3
 80070fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007100:	2200      	movs	r2, #0
 8007102:	673b      	str	r3, [r7, #112]	; 0x70
 8007104:	677a      	str	r2, [r7, #116]	; 0x74
 8007106:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800710a:	4642      	mov	r2, r8
 800710c:	464b      	mov	r3, r9
 800710e:	1891      	adds	r1, r2, r2
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	415b      	adcs	r3, r3
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800711a:	4641      	mov	r1, r8
 800711c:	1851      	adds	r1, r2, r1
 800711e:	6039      	str	r1, [r7, #0]
 8007120:	4649      	mov	r1, r9
 8007122:	414b      	adcs	r3, r1
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007132:	4659      	mov	r1, fp
 8007134:	00cb      	lsls	r3, r1, #3
 8007136:	4651      	mov	r1, sl
 8007138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800713c:	4651      	mov	r1, sl
 800713e:	00ca      	lsls	r2, r1, #3
 8007140:	4610      	mov	r0, r2
 8007142:	4619      	mov	r1, r3
 8007144:	4603      	mov	r3, r0
 8007146:	4642      	mov	r2, r8
 8007148:	189b      	adds	r3, r3, r2
 800714a:	66bb      	str	r3, [r7, #104]	; 0x68
 800714c:	464b      	mov	r3, r9
 800714e:	460a      	mov	r2, r1
 8007150:	eb42 0303 	adc.w	r3, r2, r3
 8007154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	663b      	str	r3, [r7, #96]	; 0x60
 8007160:	667a      	str	r2, [r7, #100]	; 0x64
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	f04f 0300 	mov.w	r3, #0
 800716a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800716e:	4649      	mov	r1, r9
 8007170:	008b      	lsls	r3, r1, #2
 8007172:	4641      	mov	r1, r8
 8007174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007178:	4641      	mov	r1, r8
 800717a:	008a      	lsls	r2, r1, #2
 800717c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007180:	f7f9 f826 	bl	80001d0 <__aeabi_uldivmod>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <UART_SetConfig+0x4e4>)
 800718a:	fba3 1302 	umull	r1, r3, r3, r2
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	2164      	movs	r1, #100	; 0x64
 8007192:	fb01 f303 	mul.w	r3, r1, r3
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	3332      	adds	r3, #50	; 0x32
 800719c:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <UART_SetConfig+0x4e4>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4422      	add	r2, r4
 80071b0:	609a      	str	r2, [r3, #8]
}
 80071b2:	bf00      	nop
 80071b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071b8:	46bd      	mov	sp, r7
 80071ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071be:	bf00      	nop
 80071c0:	51eb851f 	.word	0x51eb851f

080071c4 <__NVIC_SetPriority>:
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	db0a      	blt.n	80071ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	490c      	ldr	r1, [pc, #48]	; (8007210 <__NVIC_SetPriority+0x4c>)
 80071de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e2:	0112      	lsls	r2, r2, #4
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	440b      	add	r3, r1
 80071e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071ec:	e00a      	b.n	8007204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	4908      	ldr	r1, [pc, #32]	; (8007214 <__NVIC_SetPriority+0x50>)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	3b04      	subs	r3, #4
 80071fc:	0112      	lsls	r2, r2, #4
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	440b      	add	r3, r1
 8007202:	761a      	strb	r2, [r3, #24]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	e000e100 	.word	0xe000e100
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <SysTick_Handler+0x1c>)
 800721e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007220:	f001 fcfe 	bl	8008c20 <xTaskGetSchedulerState>
 8007224:	4603      	mov	r3, r0
 8007226:	2b01      	cmp	r3, #1
 8007228:	d001      	beq.n	800722e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800722a:	f002 fae5 	bl	80097f8 <xPortSysTickHandler>
  }
}
 800722e:	bf00      	nop
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	e000e010 	.word	0xe000e010

08007238 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800723c:	2100      	movs	r1, #0
 800723e:	f06f 0004 	mvn.w	r0, #4
 8007242:	f7ff ffbf 	bl	80071c4 <__NVIC_SetPriority>
#endif
}
 8007246:	bf00      	nop
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007252:	f3ef 8305 	mrs	r3, IPSR
 8007256:	603b      	str	r3, [r7, #0]
  return(result);
 8007258:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800725e:	f06f 0305 	mvn.w	r3, #5
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	e00c      	b.n	8007280 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <osKernelInitialize+0x44>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <osKernelInitialize+0x44>)
 8007270:	2201      	movs	r2, #1
 8007272:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007274:	2300      	movs	r3, #0
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	e002      	b.n	8007280 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007280:	687b      	ldr	r3, [r7, #4]
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20001dc0 	.word	0x20001dc0

08007294 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729a:	f3ef 8305 	mrs	r3, IPSR
 800729e:	603b      	str	r3, [r7, #0]
  return(result);
 80072a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80072a6:	f06f 0305 	mvn.w	r3, #5
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	e010      	b.n	80072d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <osKernelStart+0x48>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d109      	bne.n	80072ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072b6:	f7ff ffbf 	bl	8007238 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <osKernelStart+0x48>)
 80072bc:	2202      	movs	r2, #2
 80072be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072c0:	f001 f866 	bl	8008390 <vTaskStartScheduler>
      stat = osOK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	e002      	b.n	80072d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072d0:	687b      	ldr	r3, [r7, #4]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20001dc0 	.word	0x20001dc0

080072e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	; 0x38
 80072e4:	af04      	add	r7, sp, #16
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f0:	f3ef 8305 	mrs	r3, IPSR
 80072f4:	617b      	str	r3, [r7, #20]
  return(result);
 80072f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d17e      	bne.n	80073fa <osThreadNew+0x11a>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d07b      	beq.n	80073fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007302:	2380      	movs	r3, #128	; 0x80
 8007304:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007306:	2318      	movs	r3, #24
 8007308:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800730e:	f04f 33ff 	mov.w	r3, #4294967295
 8007312:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d045      	beq.n	80073a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <osThreadNew+0x48>
        name = attr->name;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <osThreadNew+0x6e>
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b38      	cmp	r3, #56	; 0x38
 8007340:	d805      	bhi.n	800734e <osThreadNew+0x6e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <osThreadNew+0x72>
        return (NULL);
 800734e:	2300      	movs	r3, #0
 8007350:	e054      	b.n	80073fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	089b      	lsrs	r3, r3, #2
 8007360:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00e      	beq.n	8007388 <osThreadNew+0xa8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b5b      	cmp	r3, #91	; 0x5b
 8007370:	d90a      	bls.n	8007388 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007376:	2b00      	cmp	r3, #0
 8007378:	d006      	beq.n	8007388 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <osThreadNew+0xa8>
        mem = 1;
 8007382:	2301      	movs	r3, #1
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e010      	b.n	80073aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10c      	bne.n	80073aa <osThreadNew+0xca>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d108      	bne.n	80073aa <osThreadNew+0xca>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <osThreadNew+0xca>
          mem = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e001      	b.n	80073aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d110      	bne.n	80073d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	6a3a      	ldr	r2, [r7, #32]
 80073c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 fe0c 	bl	8007fe4 <xTaskCreateStatic>
 80073cc:	4603      	mov	r3, r0
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	e013      	b.n	80073fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d110      	bne.n	80073fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fe57 	bl	800809e <xTaskCreate>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d001      	beq.n	80073fa <osThreadNew+0x11a>
            hTask = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073fa:	693b      	ldr	r3, [r7, #16]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3728      	adds	r7, #40	; 0x28
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800740c:	f3ef 8305 	mrs	r3, IPSR
 8007410:	60bb      	str	r3, [r7, #8]
  return(result);
 8007412:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <osDelay+0x1c>
    stat = osErrorISR;
 8007418:	f06f 0305 	mvn.w	r3, #5
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	e007      	b.n	8007430 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <osDelay+0x2c>
      vTaskDelay(ticks);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 ff7c 	bl	8008328 <vTaskDelay>
    }
  }

  return (stat);
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a07      	ldr	r2, [pc, #28]	; (8007468 <vApplicationGetIdleTaskMemory+0x2c>)
 800744c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4a06      	ldr	r2, [pc, #24]	; (800746c <vApplicationGetIdleTaskMemory+0x30>)
 8007452:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	601a      	str	r2, [r3, #0]
}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20001dc4 	.word	0x20001dc4
 800746c:	20001e20 	.word	0x20001e20

08007470 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a07      	ldr	r2, [pc, #28]	; (800749c <vApplicationGetTimerTaskMemory+0x2c>)
 8007480:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4a06      	ldr	r2, [pc, #24]	; (80074a0 <vApplicationGetTimerTaskMemory+0x30>)
 8007486:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800748e:	601a      	str	r2, [r3, #0]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20002020 	.word	0x20002020
 80074a0:	2000207c 	.word	0x2000207c

080074a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 0208 	add.w	r2, r3, #8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f04f 32ff 	mov.w	r2, #4294967295
 80074bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f103 0208 	add.w	r2, r3, #8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f103 0208 	add.w	r2, r3, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d103      	bne.n	8007566 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e00c      	b.n	8007580 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3308      	adds	r3, #8
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	e002      	b.n	8007574 <vListInsert+0x2e>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	429a      	cmp	r2, r3
 800757e:	d2f6      	bcs.n	800756e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]
}
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6892      	ldr	r2, [r2, #8]
 80075ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6852      	ldr	r2, [r2, #4]
 80075d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d103      	bne.n	80075ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	1e5a      	subs	r2, r3, #1
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007636:	f002 f84d 	bl	80096d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	441a      	add	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	3b01      	subs	r3, #1
 8007668:	68f9      	ldr	r1, [r7, #12]
 800766a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800766c:	fb01 f303 	mul.w	r3, r1, r3
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	22ff      	movs	r2, #255	; 0xff
 800767a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d114      	bne.n	80076b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01a      	beq.n	80076ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3310      	adds	r3, #16
 8007698:	4618      	mov	r0, r3
 800769a:	f001 f903 	bl	80088a4 <xTaskRemoveFromEventList>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d012      	beq.n	80076ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <xQueueGenericReset+0xcc>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	e009      	b.n	80076ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3310      	adds	r3, #16
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fef2 	bl	80074a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3324      	adds	r3, #36	; 0x24
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff feed 	bl	80074a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076ca:	f002 f833 	bl	8009734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076ce:	2301      	movs	r3, #1
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08e      	sub	sp, #56	; 0x38
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10a      	bne.n	8007706 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <xQueueGenericCreateStatic+0x52>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <xQueueGenericCreateStatic+0x56>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <xQueueGenericCreateStatic+0x58>
 8007732:	2300      	movs	r3, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	623b      	str	r3, [r7, #32]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <xQueueGenericCreateStatic+0x7e>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <xQueueGenericCreateStatic+0x82>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <xQueueGenericCreateStatic+0x84>
 800775e:	2300      	movs	r3, #0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	61fb      	str	r3, [r7, #28]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800777a:	2350      	movs	r3, #80	; 0x50
 800777c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b50      	cmp	r3, #80	; 0x50
 8007782:	d00a      	beq.n	800779a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	61bb      	str	r3, [r7, #24]
}
 8007796:	bf00      	nop
 8007798:	e7fe      	b.n	8007798 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800779a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4613      	mov	r3, r2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f805 	bl	80077cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3730      	adds	r7, #48	; 0x30
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	e002      	b.n	80077ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077fa:	2101      	movs	r1, #1
 80077fc:	69b8      	ldr	r0, [r7, #24]
 80077fe:	f7ff ff05 	bl	800760c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08e      	sub	sp, #56	; 0x38
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueGenericSend+0x32>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <xQueueGenericSend+0x40>
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <xQueueGenericSend+0x44>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <xQueueGenericSend+0x46>
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <xQueueGenericSend+0x60>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d103      	bne.n	8007882 <xQueueGenericSend+0x6e>
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <xQueueGenericSend+0x72>
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <xQueueGenericSend+0x74>
 8007886:	2300      	movs	r3, #0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	623b      	str	r3, [r7, #32]
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078a2:	f001 f9bd 	bl	8008c20 <xTaskGetSchedulerState>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <xQueueGenericSend+0x9e>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <xQueueGenericSend+0xa2>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <xQueueGenericSend+0xa4>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	61fb      	str	r3, [r7, #28]
}
 80078ce:	bf00      	nop
 80078d0:	e7fe      	b.n	80078d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078d2:	f001 feff 	bl	80096d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <xQueueGenericSend+0xd4>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d129      	bne.n	800793c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ee:	f000 fa0b 	bl	8007d08 <prvCopyDataToQueue>
 80078f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d010      	beq.n	800791e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	3324      	adds	r3, #36	; 0x24
 8007900:	4618      	mov	r0, r3
 8007902:	f000 ffcf 	bl	80088a4 <xTaskRemoveFromEventList>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d013      	beq.n	8007934 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800790c:	4b3f      	ldr	r3, [pc, #252]	; (8007a0c <xQueueGenericSend+0x1f8>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	e00a      	b.n	8007934 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007924:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <xQueueGenericSend+0x1f8>)
 8007926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007934:	f001 fefe 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 8007938:	2301      	movs	r3, #1
 800793a:	e063      	b.n	8007a04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007942:	f001 fef7 	bl	8009734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007946:	2300      	movs	r3, #0
 8007948:	e05c      	b.n	8007a04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007950:	f107 0314 	add.w	r3, r7, #20
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f809 	bl	800896c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800795a:	2301      	movs	r3, #1
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800795e:	f001 fee9 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007962:	f000 fd7b 	bl	800845c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007966:	f001 feb5 	bl	80096d4 <vPortEnterCritical>
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007970:	b25b      	sxtb	r3, r3
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d103      	bne.n	8007980 <xQueueGenericSend+0x16c>
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007986:	b25b      	sxtb	r3, r3
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d103      	bne.n	8007996 <xQueueGenericSend+0x182>
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007996:	f001 fecd 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800799a:	1d3a      	adds	r2, r7, #4
 800799c:	f107 0314 	add.w	r3, r7, #20
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fff8 	bl	8008998 <xTaskCheckForTimeOut>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d124      	bne.n	80079f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b0:	f000 faa2 	bl	8007ef8 <prvIsQueueFull>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d018      	beq.n	80079ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	3310      	adds	r3, #16
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 ff1e 	bl	8008804 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ca:	f000 fa2d 	bl	8007e28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079ce:	f000 fd53 	bl	8008478 <xTaskResumeAll>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f47f af7c 	bne.w	80078d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <xQueueGenericSend+0x1f8>)
 80079dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	e772      	b.n	80078d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ee:	f000 fa1b 	bl	8007e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079f2:	f000 fd41 	bl	8008478 <xTaskResumeAll>
 80079f6:	e76c      	b.n	80078d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079fa:	f000 fa15 	bl	8007e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079fe:	f000 fd3b 	bl	8008478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3738      	adds	r7, #56	; 0x38
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	e000ed04 	.word	0xe000ed04

08007a10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b090      	sub	sp, #64	; 0x40
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <xQueueGenericSendFromISR+0x3c>
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <xQueueGenericSendFromISR+0x40>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <xQueueGenericSendFromISR+0x42>
 8007a50:	2300      	movs	r3, #0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a68:	bf00      	nop
 8007a6a:	e7fe      	b.n	8007a6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d103      	bne.n	8007a7a <xQueueGenericSendFromISR+0x6a>
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <xQueueGenericSendFromISR+0x6e>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <xQueueGenericSendFromISR+0x70>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	623b      	str	r3, [r7, #32]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9a:	f001 fefd 	bl	8009898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a9e:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	61fa      	str	r2, [r7, #28]
 8007ab4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d302      	bcc.n	8007acc <xQueueGenericSendFromISR+0xbc>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d12f      	bne.n	8007b2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ae2:	f000 f911 	bl	8007d08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ae6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d112      	bne.n	8007b16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d016      	beq.n	8007b26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	3324      	adds	r3, #36	; 0x24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fed1 	bl	80088a4 <xTaskRemoveFromEventList>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e007      	b.n	8007b26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	b25a      	sxtb	r2, r3
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b26:	2301      	movs	r3, #1
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b2a:	e001      	b.n	8007b30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3740      	adds	r7, #64	; 0x40
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08c      	sub	sp, #48	; 0x30
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <xQueueReceive+0x30>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	623b      	str	r3, [r7, #32]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <xQueueReceive+0x3e>
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <xQueueReceive+0x42>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <xQueueReceive+0x44>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xQueueReceive+0x5e>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	61fb      	str	r3, [r7, #28]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ba6:	f001 f83b 	bl	8008c20 <xTaskGetSchedulerState>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <xQueueReceive+0x6e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <xQueueReceive+0x72>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <xQueueReceive+0x74>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <xQueueReceive+0x8e>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	61bb      	str	r3, [r7, #24]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bd6:	f001 fd7d 	bl	80096d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01f      	beq.n	8007c26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bea:	f000 f8f7 	bl	8007ddc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	1e5a      	subs	r2, r3, #1
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00f      	beq.n	8007c1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	3310      	adds	r3, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fe4e 	bl	80088a4 <xTaskRemoveFromEventList>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c0e:	4b3d      	ldr	r3, [pc, #244]	; (8007d04 <xQueueReceive+0x1bc>)
 8007c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c1e:	f001 fd89 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e069      	b.n	8007cfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d103      	bne.n	8007c34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c2c:	f001 fd82 	bl	8009734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e062      	b.n	8007cfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c3a:	f107 0310 	add.w	r3, r7, #16
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fe94 	bl	800896c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c44:	2301      	movs	r3, #1
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c48:	f001 fd74 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c4c:	f000 fc06 	bl	800845c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c50:	f001 fd40 	bl	80096d4 <vPortEnterCritical>
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5a:	b25b      	sxtb	r3, r3
 8007c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c60:	d103      	bne.n	8007c6a <xQueueReceive+0x122>
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c70:	b25b      	sxtb	r3, r3
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d103      	bne.n	8007c80 <xQueueReceive+0x138>
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c80:	f001 fd58 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c84:	1d3a      	adds	r2, r7, #4
 8007c86:	f107 0310 	add.w	r3, r7, #16
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 fe83 	bl	8008998 <xTaskCheckForTimeOut>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d123      	bne.n	8007ce0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9a:	f000 f917 	bl	8007ecc <prvIsQueueEmpty>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d017      	beq.n	8007cd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fda9 	bl	8008804 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb4:	f000 f8b8 	bl	8007e28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cb8:	f000 fbde 	bl	8008478 <xTaskResumeAll>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d189      	bne.n	8007bd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cc2:	4b10      	ldr	r3, [pc, #64]	; (8007d04 <xQueueReceive+0x1bc>)
 8007cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	e780      	b.n	8007bd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f000 f8a7 	bl	8007e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cda:	f000 fbcd 	bl	8008478 <xTaskResumeAll>
 8007cde:	e77a      	b.n	8007bd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce2:	f000 f8a1 	bl	8007e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ce6:	f000 fbc7 	bl	8008478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cec:	f000 f8ee 	bl	8007ecc <prvIsQueueEmpty>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f43f af6f 	beq.w	8007bd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3730      	adds	r7, #48	; 0x30
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10d      	bne.n	8007d42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d14d      	bne.n	8007dca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 ff92 	bl	8008c5c <xTaskPriorityDisinherit>
 8007d38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	609a      	str	r2, [r3, #8]
 8007d40:	e043      	b.n	8007dca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d119      	bne.n	8007d7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6858      	ldr	r0, [r3, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	461a      	mov	r2, r3
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	f001 ffee 	bl	8009d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	441a      	add	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d32b      	bcc.n	8007dca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	605a      	str	r2, [r3, #4]
 8007d7a:	e026      	b.n	8007dca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68d8      	ldr	r0, [r3, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	461a      	mov	r2, r3
 8007d86:	68b9      	ldr	r1, [r7, #8]
 8007d88:	f001 ffd4 	bl	8009d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	425b      	negs	r3, r3
 8007d96:	441a      	add	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d207      	bcs.n	8007db8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	425b      	negs	r3, r3
 8007db2:	441a      	add	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d105      	bne.n	8007dca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dd2:	697b      	ldr	r3, [r7, #20]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	441a      	add	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d303      	bcc.n	8007e10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68d9      	ldr	r1, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6838      	ldr	r0, [r7, #0]
 8007e1c:	f001 ff8a 	bl	8009d34 <memcpy>
	}
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e30:	f001 fc50 	bl	80096d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e3c:	e011      	b.n	8007e62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d012      	beq.n	8007e6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3324      	adds	r3, #36	; 0x24
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fd2a 	bl	80088a4 <xTaskRemoveFromEventList>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e56:	f000 fe01 	bl	8008a5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dce9      	bgt.n	8007e3e <prvUnlockQueue+0x16>
 8007e6a:	e000      	b.n	8007e6e <prvUnlockQueue+0x46>
					break;
 8007e6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	22ff      	movs	r2, #255	; 0xff
 8007e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e76:	f001 fc5d 	bl	8009734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e7a:	f001 fc2b 	bl	80096d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e86:	e011      	b.n	8007eac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d012      	beq.n	8007eb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3310      	adds	r3, #16
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fd05 	bl	80088a4 <xTaskRemoveFromEventList>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ea0:	f000 fddc 	bl	8008a5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dce9      	bgt.n	8007e88 <prvUnlockQueue+0x60>
 8007eb4:	e000      	b.n	8007eb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007eb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	22ff      	movs	r2, #255	; 0xff
 8007ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ec0:	f001 fc38 	bl	8009734 <vPortExitCritical>
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ed4:	f001 fbfe 	bl	80096d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e001      	b.n	8007eea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eea:	f001 fc23 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f00:	f001 fbe8 	bl	80096d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d102      	bne.n	8007f16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f10:	2301      	movs	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e001      	b.n	8007f1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f1a:	f001 fc0b 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e014      	b.n	8007f62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f38:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <vQueueAddToRegistry+0x50>)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10b      	bne.n	8007f5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f44:	490c      	ldr	r1, [pc, #48]	; (8007f78 <vQueueAddToRegistry+0x50>)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <vQueueAddToRegistry+0x50>)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	4413      	add	r3, r2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f5a:	e006      	b.n	8007f6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	d9e7      	bls.n	8007f38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	2000247c 	.word	0x2000247c

08007f7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f8c:	f001 fba2 	bl	80096d4 <vPortEnterCritical>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f96:	b25b      	sxtb	r3, r3
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d103      	bne.n	8007fa6 <vQueueWaitForMessageRestricted+0x2a>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d103      	bne.n	8007fbc <vQueueWaitForMessageRestricted+0x40>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fbc:	f001 fbba 	bl	8009734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	3324      	adds	r3, #36	; 0x24
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fc3b 	bl	800884c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fd6:	6978      	ldr	r0, [r7, #20]
 8007fd8:	f7ff ff26 	bl	8007e28 <prvUnlockQueue>
	}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08e      	sub	sp, #56	; 0x38
 8007fe8:	af04      	add	r7, sp, #16
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	623b      	str	r3, [r7, #32]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xTaskCreateStatic+0x46>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	61fb      	str	r3, [r7, #28]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800802a:	235c      	movs	r3, #92	; 0x5c
 800802c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b5c      	cmp	r3, #92	; 0x5c
 8008032:	d00a      	beq.n	800804a <xTaskCreateStatic+0x66>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	61bb      	str	r3, [r7, #24]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800804a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01e      	beq.n	8008090 <xTaskCreateStatic+0xac>
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008060:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	2202      	movs	r2, #2
 8008066:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800806a:	2300      	movs	r3, #0
 800806c:	9303      	str	r3, [sp, #12]
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	9302      	str	r3, [sp, #8]
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 f850 	bl	8008128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800808a:	f000 f8dd 	bl	8008248 <prvAddNewTaskToReadyList>
 800808e:	e001      	b.n	8008094 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008094:	697b      	ldr	r3, [r7, #20]
	}
 8008096:	4618      	mov	r0, r3
 8008098:	3728      	adds	r7, #40	; 0x28
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b08c      	sub	sp, #48	; 0x30
 80080a2:	af04      	add	r7, sp, #16
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080ae:	88fb      	ldrh	r3, [r7, #6]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 fc30 	bl	8009918 <pvPortMalloc>
 80080b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00e      	beq.n	80080de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080c0:	205c      	movs	r0, #92	; 0x5c
 80080c2:	f001 fc29 	bl	8009918 <pvPortMalloc>
 80080c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	631a      	str	r2, [r3, #48]	; 0x30
 80080d4:	e005      	b.n	80080e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080d6:	6978      	ldr	r0, [r7, #20]
 80080d8:	f001 fcea 	bl	8009ab0 <vPortFree>
 80080dc:	e001      	b.n	80080e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d017      	beq.n	8008118 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080f0:	88fa      	ldrh	r2, [r7, #6]
 80080f2:	2300      	movs	r3, #0
 80080f4:	9303      	str	r3, [sp, #12]
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	9302      	str	r3, [sp, #8]
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f80e 	bl	8008128 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800810c:	69f8      	ldr	r0, [r7, #28]
 800810e:	f000 f89b 	bl	8008248 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008112:	2301      	movs	r3, #1
 8008114:	61bb      	str	r3, [r7, #24]
 8008116:	e002      	b.n	800811e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008118:	f04f 33ff 	mov.w	r3, #4294967295
 800811c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800811e:	69bb      	ldr	r3, [r7, #24]
	}
 8008120:	4618      	mov	r0, r3
 8008122:	3720      	adds	r7, #32
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	461a      	mov	r2, r3
 8008140:	21a5      	movs	r1, #165	; 0xa5
 8008142:	f001 fe05 	bl	8009d50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008150:	3b01      	subs	r3, #1
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f023 0307 	bic.w	r3, r3, #7
 800815e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <prvInitialiseNewTask+0x58>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	617b      	str	r3, [r7, #20]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01f      	beq.n	80081c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	e012      	b.n	80081b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	7819      	ldrb	r1, [r3, #0]
 8008194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	3334      	adds	r3, #52	; 0x34
 800819c:	460a      	mov	r2, r1
 800819e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d006      	beq.n	80081ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	3301      	adds	r3, #1
 80081b0:	61fb      	str	r3, [r7, #28]
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2b0f      	cmp	r3, #15
 80081b6:	d9e9      	bls.n	800818c <prvInitialiseNewTask+0x64>
 80081b8:	e000      	b.n	80081bc <prvInitialiseNewTask+0x94>
			{
				break;
 80081ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081c4:	e003      	b.n	80081ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	2b37      	cmp	r3, #55	; 0x37
 80081d2:	d901      	bls.n	80081d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081d4:	2337      	movs	r3, #55	; 0x37
 80081d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	2200      	movs	r2, #0
 80081e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	3304      	adds	r3, #4
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff f978 	bl	80074e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	3318      	adds	r3, #24
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff f973 	bl	80074e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008202:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008212:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	2200      	movs	r2, #0
 8008218:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	68f9      	ldr	r1, [r7, #12]
 8008226:	69b8      	ldr	r0, [r7, #24]
 8008228:	f001 f928 	bl	800947c <pxPortInitialiseStack>
 800822c:	4602      	mov	r2, r0
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800823e:	bf00      	nop
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008250:	f001 fa40 	bl	80096d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008254:	4b2d      	ldr	r3, [pc, #180]	; (800830c <prvAddNewTaskToReadyList+0xc4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3301      	adds	r3, #1
 800825a:	4a2c      	ldr	r2, [pc, #176]	; (800830c <prvAddNewTaskToReadyList+0xc4>)
 800825c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800825e:	4b2c      	ldr	r3, [pc, #176]	; (8008310 <prvAddNewTaskToReadyList+0xc8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008266:	4a2a      	ldr	r2, [pc, #168]	; (8008310 <prvAddNewTaskToReadyList+0xc8>)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800826c:	4b27      	ldr	r3, [pc, #156]	; (800830c <prvAddNewTaskToReadyList+0xc4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d110      	bne.n	8008296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008274:	f000 fc16 	bl	8008aa4 <prvInitialiseTaskLists>
 8008278:	e00d      	b.n	8008296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800827a:	4b26      	ldr	r3, [pc, #152]	; (8008314 <prvAddNewTaskToReadyList+0xcc>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008282:	4b23      	ldr	r3, [pc, #140]	; (8008310 <prvAddNewTaskToReadyList+0xc8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	429a      	cmp	r2, r3
 800828e:	d802      	bhi.n	8008296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008290:	4a1f      	ldr	r2, [pc, #124]	; (8008310 <prvAddNewTaskToReadyList+0xc8>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008296:	4b20      	ldr	r3, [pc, #128]	; (8008318 <prvAddNewTaskToReadyList+0xd0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3301      	adds	r3, #1
 800829c:	4a1e      	ldr	r2, [pc, #120]	; (8008318 <prvAddNewTaskToReadyList+0xd0>)
 800829e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082a0:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <prvAddNewTaskToReadyList+0xd0>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	4b1b      	ldr	r3, [pc, #108]	; (800831c <prvAddNewTaskToReadyList+0xd4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d903      	bls.n	80082bc <prvAddNewTaskToReadyList+0x74>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4a18      	ldr	r2, [pc, #96]	; (800831c <prvAddNewTaskToReadyList+0xd4>)
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4a15      	ldr	r2, [pc, #84]	; (8008320 <prvAddNewTaskToReadyList+0xd8>)
 80082ca:	441a      	add	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f7ff f913 	bl	80074fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082d8:	f001 fa2c 	bl	8009734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <prvAddNewTaskToReadyList+0xcc>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00e      	beq.n	8008302 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082e4:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <prvAddNewTaskToReadyList+0xc8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d207      	bcs.n	8008302 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082f2:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <prvAddNewTaskToReadyList+0xdc>)
 80082f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20002990 	.word	0x20002990
 8008310:	200024bc 	.word	0x200024bc
 8008314:	2000299c 	.word	0x2000299c
 8008318:	200029ac 	.word	0x200029ac
 800831c:	20002998 	.word	0x20002998
 8008320:	200024c0 	.word	0x200024c0
 8008324:	e000ed04 	.word	0xe000ed04

08008328 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d017      	beq.n	800836a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800833a:	4b13      	ldr	r3, [pc, #76]	; (8008388 <vTaskDelay+0x60>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <vTaskDelay+0x30>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	60bb      	str	r3, [r7, #8]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008358:	f000 f880 	bl	800845c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800835c:	2100      	movs	r1, #0
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fcea 	bl	8008d38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008364:	f000 f888 	bl	8008478 <xTaskResumeAll>
 8008368:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d107      	bne.n	8008380 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008370:	4b06      	ldr	r3, [pc, #24]	; (800838c <vTaskDelay+0x64>)
 8008372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008380:	bf00      	nop
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	200029b8 	.word	0x200029b8
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	; 0x28
 8008394:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008396:	2300      	movs	r3, #0
 8008398:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800839e:	463a      	mov	r2, r7
 80083a0:	1d39      	adds	r1, r7, #4
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff f848 	bl	800743c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	9202      	str	r2, [sp, #8]
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	2300      	movs	r3, #0
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	2300      	movs	r3, #0
 80083bc:	460a      	mov	r2, r1
 80083be:	4921      	ldr	r1, [pc, #132]	; (8008444 <vTaskStartScheduler+0xb4>)
 80083c0:	4821      	ldr	r0, [pc, #132]	; (8008448 <vTaskStartScheduler+0xb8>)
 80083c2:	f7ff fe0f 	bl	8007fe4 <xTaskCreateStatic>
 80083c6:	4603      	mov	r3, r0
 80083c8:	4a20      	ldr	r2, [pc, #128]	; (800844c <vTaskStartScheduler+0xbc>)
 80083ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083cc:	4b1f      	ldr	r3, [pc, #124]	; (800844c <vTaskStartScheduler+0xbc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083d4:	2301      	movs	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	e001      	b.n	80083de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d102      	bne.n	80083ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083e4:	f000 fcfc 	bl	8008de0 <xTimerCreateTimerTask>
 80083e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d116      	bne.n	800841e <vTaskStartScheduler+0x8e>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	613b      	str	r3, [r7, #16]
}
 8008402:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008404:	4b12      	ldr	r3, [pc, #72]	; (8008450 <vTaskStartScheduler+0xc0>)
 8008406:	f04f 32ff 	mov.w	r2, #4294967295
 800840a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <vTaskStartScheduler+0xc4>)
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <vTaskStartScheduler+0xc8>)
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008418:	f001 f8ba 	bl	8009590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800841c:	e00e      	b.n	800843c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d10a      	bne.n	800843c <vTaskStartScheduler+0xac>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60fb      	str	r3, [r7, #12]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <vTaskStartScheduler+0xaa>
}
 800843c:	bf00      	nop
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	08009de0 	.word	0x08009de0
 8008448:	08008a75 	.word	0x08008a75
 800844c:	200029b4 	.word	0x200029b4
 8008450:	200029b0 	.word	0x200029b0
 8008454:	2000299c 	.word	0x2000299c
 8008458:	20002994 	.word	0x20002994

0800845c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <vTaskSuspendAll+0x18>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	4a03      	ldr	r2, [pc, #12]	; (8008474 <vTaskSuspendAll+0x18>)
 8008468:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800846a:	bf00      	nop
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	200029b8 	.word	0x200029b8

08008478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008486:	4b42      	ldr	r3, [pc, #264]	; (8008590 <xTaskResumeAll+0x118>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	603b      	str	r3, [r7, #0]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084a4:	f001 f916 	bl	80096d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084a8:	4b39      	ldr	r3, [pc, #228]	; (8008590 <xTaskResumeAll+0x118>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	4a38      	ldr	r2, [pc, #224]	; (8008590 <xTaskResumeAll+0x118>)
 80084b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084b2:	4b37      	ldr	r3, [pc, #220]	; (8008590 <xTaskResumeAll+0x118>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d162      	bne.n	8008580 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084ba:	4b36      	ldr	r3, [pc, #216]	; (8008594 <xTaskResumeAll+0x11c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d05e      	beq.n	8008580 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084c2:	e02f      	b.n	8008524 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c4:	4b34      	ldr	r3, [pc, #208]	; (8008598 <xTaskResumeAll+0x120>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3318      	adds	r3, #24
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff f871 	bl	80075b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3304      	adds	r3, #4
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff f86c 	bl	80075b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e4:	4b2d      	ldr	r3, [pc, #180]	; (800859c <xTaskResumeAll+0x124>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d903      	bls.n	80084f4 <xTaskResumeAll+0x7c>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	4a2a      	ldr	r2, [pc, #168]	; (800859c <xTaskResumeAll+0x124>)
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4a27      	ldr	r2, [pc, #156]	; (80085a0 <xTaskResumeAll+0x128>)
 8008502:	441a      	add	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f7fe fff7 	bl	80074fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008514:	4b23      	ldr	r3, [pc, #140]	; (80085a4 <xTaskResumeAll+0x12c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	429a      	cmp	r2, r3
 800851c:	d302      	bcc.n	8008524 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800851e:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <xTaskResumeAll+0x130>)
 8008520:	2201      	movs	r2, #1
 8008522:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008524:	4b1c      	ldr	r3, [pc, #112]	; (8008598 <xTaskResumeAll+0x120>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1cb      	bne.n	80084c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008532:	f000 fb55 	bl	8008be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008536:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <xTaskResumeAll+0x134>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008542:	f000 f847 	bl	80085d4 <xTaskIncrementTick>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800854c:	4b16      	ldr	r3, [pc, #88]	; (80085a8 <xTaskResumeAll+0x130>)
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3b01      	subs	r3, #1
 8008556:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1f1      	bne.n	8008542 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <xTaskResumeAll+0x134>)
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008564:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <xTaskResumeAll+0x130>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008570:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <xTaskResumeAll+0x138>)
 8008572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008580:	f001 f8d8 	bl	8009734 <vPortExitCritical>

	return xAlreadyYielded;
 8008584:	68bb      	ldr	r3, [r7, #8]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200029b8 	.word	0x200029b8
 8008594:	20002990 	.word	0x20002990
 8008598:	20002950 	.word	0x20002950
 800859c:	20002998 	.word	0x20002998
 80085a0:	200024c0 	.word	0x200024c0
 80085a4:	200024bc 	.word	0x200024bc
 80085a8:	200029a4 	.word	0x200029a4
 80085ac:	200029a0 	.word	0x200029a0
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <xTaskGetTickCount+0x1c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085c0:	687b      	ldr	r3, [r7, #4]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	20002994 	.word	0x20002994

080085d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085de:	4b4f      	ldr	r3, [pc, #316]	; (800871c <xTaskIncrementTick+0x148>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 808f 	bne.w	8008706 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085e8:	4b4d      	ldr	r3, [pc, #308]	; (8008720 <xTaskIncrementTick+0x14c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085f0:	4a4b      	ldr	r2, [pc, #300]	; (8008720 <xTaskIncrementTick+0x14c>)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d120      	bne.n	800863e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085fc:	4b49      	ldr	r3, [pc, #292]	; (8008724 <xTaskIncrementTick+0x150>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <xTaskIncrementTick+0x48>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	603b      	str	r3, [r7, #0]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <xTaskIncrementTick+0x46>
 800861c:	4b41      	ldr	r3, [pc, #260]	; (8008724 <xTaskIncrementTick+0x150>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	4b41      	ldr	r3, [pc, #260]	; (8008728 <xTaskIncrementTick+0x154>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a3f      	ldr	r2, [pc, #252]	; (8008724 <xTaskIncrementTick+0x150>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	4a3f      	ldr	r2, [pc, #252]	; (8008728 <xTaskIncrementTick+0x154>)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	4b3e      	ldr	r3, [pc, #248]	; (800872c <xTaskIncrementTick+0x158>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	4a3d      	ldr	r2, [pc, #244]	; (800872c <xTaskIncrementTick+0x158>)
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	f000 fad1 	bl	8008be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800863e:	4b3c      	ldr	r3, [pc, #240]	; (8008730 <xTaskIncrementTick+0x15c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	429a      	cmp	r2, r3
 8008646:	d349      	bcc.n	80086dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008648:	4b36      	ldr	r3, [pc, #216]	; (8008724 <xTaskIncrementTick+0x150>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d104      	bne.n	800865c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008652:	4b37      	ldr	r3, [pc, #220]	; (8008730 <xTaskIncrementTick+0x15c>)
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	601a      	str	r2, [r3, #0]
					break;
 800865a:	e03f      	b.n	80086dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800865c:	4b31      	ldr	r3, [pc, #196]	; (8008724 <xTaskIncrementTick+0x150>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d203      	bcs.n	800867c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008674:	4a2e      	ldr	r2, [pc, #184]	; (8008730 <xTaskIncrementTick+0x15c>)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800867a:	e02f      	b.n	80086dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3304      	adds	r3, #4
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe ff99 	bl	80075b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	3318      	adds	r3, #24
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe ff90 	bl	80075b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869c:	4b25      	ldr	r3, [pc, #148]	; (8008734 <xTaskIncrementTick+0x160>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d903      	bls.n	80086ac <xTaskIncrementTick+0xd8>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	4a22      	ldr	r2, [pc, #136]	; (8008734 <xTaskIncrementTick+0x160>)
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <xTaskIncrementTick+0x164>)
 80086ba:	441a      	add	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f7fe ff1b 	bl	80074fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086cc:	4b1b      	ldr	r3, [pc, #108]	; (800873c <xTaskIncrementTick+0x168>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d3b8      	bcc.n	8008648 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086d6:	2301      	movs	r3, #1
 80086d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086da:	e7b5      	b.n	8008648 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086dc:	4b17      	ldr	r3, [pc, #92]	; (800873c <xTaskIncrementTick+0x168>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	4915      	ldr	r1, [pc, #84]	; (8008738 <xTaskIncrementTick+0x164>)
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d901      	bls.n	80086f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086f4:	2301      	movs	r3, #1
 80086f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086f8:	4b11      	ldr	r3, [pc, #68]	; (8008740 <xTaskIncrementTick+0x16c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d007      	beq.n	8008710 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e004      	b.n	8008710 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <xTaskIncrementTick+0x170>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3301      	adds	r3, #1
 800870c:	4a0d      	ldr	r2, [pc, #52]	; (8008744 <xTaskIncrementTick+0x170>)
 800870e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008710:	697b      	ldr	r3, [r7, #20]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200029b8 	.word	0x200029b8
 8008720:	20002994 	.word	0x20002994
 8008724:	20002948 	.word	0x20002948
 8008728:	2000294c 	.word	0x2000294c
 800872c:	200029a8 	.word	0x200029a8
 8008730:	200029b0 	.word	0x200029b0
 8008734:	20002998 	.word	0x20002998
 8008738:	200024c0 	.word	0x200024c0
 800873c:	200024bc 	.word	0x200024bc
 8008740:	200029a4 	.word	0x200029a4
 8008744:	200029a0 	.word	0x200029a0

08008748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800874e:	4b28      	ldr	r3, [pc, #160]	; (80087f0 <vTaskSwitchContext+0xa8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008756:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <vTaskSwitchContext+0xac>)
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800875c:	e041      	b.n	80087e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800875e:	4b25      	ldr	r3, [pc, #148]	; (80087f4 <vTaskSwitchContext+0xac>)
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008764:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <vTaskSwitchContext+0xb0>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	e010      	b.n	800878e <vTaskSwitchContext+0x46>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <vTaskSwitchContext+0x40>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vTaskSwitchContext+0x3e>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3b01      	subs	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	491b      	ldr	r1, [pc, #108]	; (80087fc <vTaskSwitchContext+0xb4>)
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0e4      	beq.n	800876c <vTaskSwitchContext+0x24>
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4a13      	ldr	r2, [pc, #76]	; (80087fc <vTaskSwitchContext+0xb4>)
 80087ae:	4413      	add	r3, r2
 80087b0:	60bb      	str	r3, [r7, #8]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	605a      	str	r2, [r3, #4]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3308      	adds	r3, #8
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d104      	bne.n	80087d2 <vTaskSwitchContext+0x8a>
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4a09      	ldr	r2, [pc, #36]	; (8008800 <vTaskSwitchContext+0xb8>)
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4a06      	ldr	r2, [pc, #24]	; (80087f8 <vTaskSwitchContext+0xb0>)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6013      	str	r3, [r2, #0]
}
 80087e2:	bf00      	nop
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	200029b8 	.word	0x200029b8
 80087f4:	200029a4 	.word	0x200029a4
 80087f8:	20002998 	.word	0x20002998
 80087fc:	200024c0 	.word	0x200024c0
 8008800:	200024bc 	.word	0x200024bc

08008804 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	60fb      	str	r3, [r7, #12]
}
 8008826:	bf00      	nop
 8008828:	e7fe      	b.n	8008828 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <vTaskPlaceOnEventList+0x44>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3318      	adds	r3, #24
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fe fe87 	bl	8007546 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008838:	2101      	movs	r1, #1
 800883a:	6838      	ldr	r0, [r7, #0]
 800883c:	f000 fa7c 	bl	8008d38 <prvAddCurrentTaskToDelayedList>
}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	200024bc 	.word	0x200024bc

0800884c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	617b      	str	r3, [r7, #20]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3318      	adds	r3, #24
 800887a:	4619      	mov	r1, r3
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7fe fe3e 	bl	80074fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008888:	f04f 33ff 	mov.w	r3, #4294967295
 800888c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	68b8      	ldr	r0, [r7, #8]
 8008892:	f000 fa51 	bl	8008d38 <prvAddCurrentTaskToDelayedList>
	}
 8008896:	bf00      	nop
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	200024bc 	.word	0x200024bc

080088a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	60fb      	str	r3, [r7, #12]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	3318      	adds	r3, #24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fe6f 	bl	80075b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088da:	4b1e      	ldr	r3, [pc, #120]	; (8008954 <xTaskRemoveFromEventList+0xb0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d11d      	bne.n	800891e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	3304      	adds	r3, #4
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fe66 	bl	80075b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f0:	4b19      	ldr	r3, [pc, #100]	; (8008958 <xTaskRemoveFromEventList+0xb4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d903      	bls.n	8008900 <xTaskRemoveFromEventList+0x5c>
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	4a16      	ldr	r2, [pc, #88]	; (8008958 <xTaskRemoveFromEventList+0xb4>)
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4a13      	ldr	r2, [pc, #76]	; (800895c <xTaskRemoveFromEventList+0xb8>)
 800890e:	441a      	add	r2, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	3304      	adds	r3, #4
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f7fe fdf1 	bl	80074fe <vListInsertEnd>
 800891c:	e005      	b.n	800892a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	3318      	adds	r3, #24
 8008922:	4619      	mov	r1, r3
 8008924:	480e      	ldr	r0, [pc, #56]	; (8008960 <xTaskRemoveFromEventList+0xbc>)
 8008926:	f7fe fdea 	bl	80074fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <xTaskRemoveFromEventList+0xc0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	429a      	cmp	r2, r3
 8008936:	d905      	bls.n	8008944 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008938:	2301      	movs	r3, #1
 800893a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <xTaskRemoveFromEventList+0xc4>)
 800893e:	2201      	movs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	e001      	b.n	8008948 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008948:	697b      	ldr	r3, [r7, #20]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200029b8 	.word	0x200029b8
 8008958:	20002998 	.word	0x20002998
 800895c:	200024c0 	.word	0x200024c0
 8008960:	20002950 	.word	0x20002950
 8008964:	200024bc 	.word	0x200024bc
 8008968:	200029a4 	.word	0x200029a4

0800896c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008974:	4b06      	ldr	r3, [pc, #24]	; (8008990 <vTaskInternalSetTimeOutState+0x24>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <vTaskInternalSetTimeOutState+0x28>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	605a      	str	r2, [r3, #4]
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	200029a8 	.word	0x200029a8
 8008994:	20002994 	.word	0x20002994

08008998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	613b      	str	r3, [r7, #16]
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	60fb      	str	r3, [r7, #12]
}
 80089d6:	bf00      	nop
 80089d8:	e7fe      	b.n	80089d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089da:	f000 fe7b 	bl	80096d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089de:	4b1d      	ldr	r3, [pc, #116]	; (8008a54 <xTaskCheckForTimeOut+0xbc>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f6:	d102      	bne.n	80089fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]
 80089fc:	e023      	b.n	8008a46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b15      	ldr	r3, [pc, #84]	; (8008a58 <xTaskCheckForTimeOut+0xc0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d007      	beq.n	8008a1a <xTaskCheckForTimeOut+0x82>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d302      	bcc.n	8008a1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a14:	2301      	movs	r3, #1
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	e015      	b.n	8008a46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d20b      	bcs.n	8008a3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	1ad2      	subs	r2, r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff ff9b 	bl	800896c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	e004      	b.n	8008a46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a46:	f000 fe75 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8008a4a:	69fb      	ldr	r3, [r7, #28]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3720      	adds	r7, #32
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	20002994 	.word	0x20002994
 8008a58:	200029a8 	.word	0x200029a8

08008a5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <vTaskMissedYield+0x14>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
}
 8008a66:	bf00      	nop
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	200029a4 	.word	0x200029a4

08008a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a7c:	f000 f852 	bl	8008b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <prvIdleTask+0x28>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d9f9      	bls.n	8008a7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <prvIdleTask+0x2c>)
 8008a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a98:	e7f0      	b.n	8008a7c <prvIdleTask+0x8>
 8008a9a:	bf00      	nop
 8008a9c:	200024c0 	.word	0x200024c0
 8008aa0:	e000ed04 	.word	0xe000ed04

08008aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aaa:	2300      	movs	r3, #0
 8008aac:	607b      	str	r3, [r7, #4]
 8008aae:	e00c      	b.n	8008aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4a12      	ldr	r2, [pc, #72]	; (8008b04 <prvInitialiseTaskLists+0x60>)
 8008abc:	4413      	add	r3, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fcf0 	bl	80074a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b37      	cmp	r3, #55	; 0x37
 8008ace:	d9ef      	bls.n	8008ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ad0:	480d      	ldr	r0, [pc, #52]	; (8008b08 <prvInitialiseTaskLists+0x64>)
 8008ad2:	f7fe fce7 	bl	80074a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ad6:	480d      	ldr	r0, [pc, #52]	; (8008b0c <prvInitialiseTaskLists+0x68>)
 8008ad8:	f7fe fce4 	bl	80074a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008adc:	480c      	ldr	r0, [pc, #48]	; (8008b10 <prvInitialiseTaskLists+0x6c>)
 8008ade:	f7fe fce1 	bl	80074a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ae2:	480c      	ldr	r0, [pc, #48]	; (8008b14 <prvInitialiseTaskLists+0x70>)
 8008ae4:	f7fe fcde 	bl	80074a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ae8:	480b      	ldr	r0, [pc, #44]	; (8008b18 <prvInitialiseTaskLists+0x74>)
 8008aea:	f7fe fcdb 	bl	80074a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <prvInitialiseTaskLists+0x78>)
 8008af0:	4a05      	ldr	r2, [pc, #20]	; (8008b08 <prvInitialiseTaskLists+0x64>)
 8008af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <prvInitialiseTaskLists+0x7c>)
 8008af6:	4a05      	ldr	r2, [pc, #20]	; (8008b0c <prvInitialiseTaskLists+0x68>)
 8008af8:	601a      	str	r2, [r3, #0]
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	200024c0 	.word	0x200024c0
 8008b08:	20002920 	.word	0x20002920
 8008b0c:	20002934 	.word	0x20002934
 8008b10:	20002950 	.word	0x20002950
 8008b14:	20002964 	.word	0x20002964
 8008b18:	2000297c 	.word	0x2000297c
 8008b1c:	20002948 	.word	0x20002948
 8008b20:	2000294c 	.word	0x2000294c

08008b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b2a:	e019      	b.n	8008b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b2c:	f000 fdd2 	bl	80096d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b30:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <prvCheckTasksWaitingTermination+0x50>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fd3b 	bl	80075b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b42:	4b0d      	ldr	r3, [pc, #52]	; (8008b78 <prvCheckTasksWaitingTermination+0x54>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	4a0b      	ldr	r2, [pc, #44]	; (8008b78 <prvCheckTasksWaitingTermination+0x54>)
 8008b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <prvCheckTasksWaitingTermination+0x58>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	4a0a      	ldr	r2, [pc, #40]	; (8008b7c <prvCheckTasksWaitingTermination+0x58>)
 8008b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b56:	f000 fded 	bl	8009734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f810 	bl	8008b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b60:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <prvCheckTasksWaitingTermination+0x58>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e1      	bne.n	8008b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20002964 	.word	0x20002964
 8008b78:	20002990 	.word	0x20002990
 8008b7c:	20002978 	.word	0x20002978

08008b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d108      	bne.n	8008ba4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 ff8a 	bl	8009ab0 <vPortFree>
				vPortFree( pxTCB );
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 ff87 	bl	8009ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ba2:	e018      	b.n	8008bd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d103      	bne.n	8008bb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 ff7e 	bl	8009ab0 <vPortFree>
	}
 8008bb4:	e00f      	b.n	8008bd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d00a      	beq.n	8008bd6 <prvDeleteTCB+0x56>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <prvDeleteTCB+0x54>
	}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <prvResetNextTaskUnblockTime+0x38>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <prvResetNextTaskUnblockTime+0x3c>)
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bf8:	e008      	b.n	8008c0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bfa:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <prvResetNextTaskUnblockTime+0x38>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4a04      	ldr	r2, [pc, #16]	; (8008c1c <prvResetNextTaskUnblockTime+0x3c>)
 8008c0a:	6013      	str	r3, [r2, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	20002948 	.word	0x20002948
 8008c1c:	200029b0 	.word	0x200029b0

08008c20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c26:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <xTaskGetSchedulerState+0x34>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e008      	b.n	8008c46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c34:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <xTaskGetSchedulerState+0x38>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	607b      	str	r3, [r7, #4]
 8008c40:	e001      	b.n	8008c46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c42:	2300      	movs	r3, #0
 8008c44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c46:	687b      	ldr	r3, [r7, #4]
	}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	2000299c 	.word	0x2000299c
 8008c58:	200029b8 	.word	0x200029b8

08008c5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d056      	beq.n	8008d20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c72:	4b2e      	ldr	r3, [pc, #184]	; (8008d2c <xTaskPriorityDisinherit+0xd0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d00a      	beq.n	8008c92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	60bb      	str	r3, [r7, #8]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb4:	1e5a      	subs	r2, r3, #1
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d02c      	beq.n	8008d20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d128      	bne.n	8008d20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fc70 	bl	80075b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <xTaskPriorityDisinherit+0xd4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d903      	bls.n	8008d00 <xTaskPriorityDisinherit+0xa4>
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4a0c      	ldr	r2, [pc, #48]	; (8008d30 <xTaskPriorityDisinherit+0xd4>)
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4613      	mov	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4a09      	ldr	r2, [pc, #36]	; (8008d34 <xTaskPriorityDisinherit+0xd8>)
 8008d0e:	441a      	add	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7fe fbf1 	bl	80074fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d20:	697b      	ldr	r3, [r7, #20]
	}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200024bc 	.word	0x200024bc
 8008d30:	20002998 	.word	0x20002998
 8008d34:	200024c0 	.word	0x200024c0

08008d38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d42:	4b21      	ldr	r3, [pc, #132]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d48:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe fc32 	bl	80075b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d10a      	bne.n	8008d72 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d62:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4819      	ldr	r0, [pc, #100]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d6c:	f7fe fbc7 	bl	80074fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d70:	e026      	b.n	8008dc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4413      	add	r3, r2
 8008d78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d7a:	4b14      	ldr	r3, [pc, #80]	; (8008dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d209      	bcs.n	8008d9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8a:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fe fbd5 	bl	8007546 <vListInsert>
}
 8008d9c:	e010      	b.n	8008dc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3304      	adds	r3, #4
 8008da8:	4619      	mov	r1, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	f7fe fbcb 	bl	8007546 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d202      	bcs.n	8008dc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dba:	4a08      	ldr	r2, [pc, #32]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	6013      	str	r3, [r2, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20002994 	.word	0x20002994
 8008dcc:	200024bc 	.word	0x200024bc
 8008dd0:	2000297c 	.word	0x2000297c
 8008dd4:	2000294c 	.word	0x2000294c
 8008dd8:	20002948 	.word	0x20002948
 8008ddc:	200029b0 	.word	0x200029b0

08008de0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	; 0x28
 8008de4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dea:	f000 fb07 	bl	80093fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dee:	4b1c      	ldr	r3, [pc, #112]	; (8008e60 <xTimerCreateTimerTask+0x80>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d021      	beq.n	8008e3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dfe:	1d3a      	adds	r2, r7, #4
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	f107 030c 	add.w	r3, r7, #12
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fe fb31 	bl	8007470 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	9202      	str	r2, [sp, #8]
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	2302      	movs	r3, #2
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	460a      	mov	r2, r1
 8008e20:	4910      	ldr	r1, [pc, #64]	; (8008e64 <xTimerCreateTimerTask+0x84>)
 8008e22:	4811      	ldr	r0, [pc, #68]	; (8008e68 <xTimerCreateTimerTask+0x88>)
 8008e24:	f7ff f8de 	bl	8007fe4 <xTaskCreateStatic>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <xTimerCreateTimerTask+0x8c>)
 8008e2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <xTimerCreateTimerTask+0x8c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e36:	2301      	movs	r3, #1
 8008e38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	613b      	str	r3, [r7, #16]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e56:	697b      	ldr	r3, [r7, #20]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200029ec 	.word	0x200029ec
 8008e64:	08009de8 	.word	0x08009de8
 8008e68:	08008fa5 	.word	0x08008fa5
 8008e6c:	200029f0 	.word	0x200029f0

08008e70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	; 0x28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	623b      	str	r3, [r7, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e9e:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <xTimerGenericCommand+0x98>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d02a      	beq.n	8008efc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	dc18      	bgt.n	8008eea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008eb8:	f7ff feb2 	bl	8008c20 <xTaskGetSchedulerState>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d109      	bne.n	8008ed6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ec2:	4b11      	ldr	r3, [pc, #68]	; (8008f08 <xTimerGenericCommand+0x98>)
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	f107 0110 	add.w	r1, r7, #16
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ece:	f7fe fca1 	bl	8007814 <xQueueGenericSend>
 8008ed2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ed4:	e012      	b.n	8008efc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <xTimerGenericCommand+0x98>)
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	f107 0110 	add.w	r1, r7, #16
 8008ede:	2300      	movs	r3, #0
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f7fe fc97 	bl	8007814 <xQueueGenericSend>
 8008ee6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ee8:	e008      	b.n	8008efc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008eea:	4b07      	ldr	r3, [pc, #28]	; (8008f08 <xTimerGenericCommand+0x98>)
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	f107 0110 	add.w	r1, r7, #16
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	f7fe fd8b 	bl	8007a10 <xQueueGenericSendFromISR>
 8008efa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3728      	adds	r7, #40	; 0x28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	200029ec 	.word	0x200029ec

08008f0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f16:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <prvProcessExpiredTimer+0x94>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fb47 	bl	80075b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d022      	beq.n	8008f7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	699a      	ldr	r2, [r3, #24]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	18d1      	adds	r1, r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	6978      	ldr	r0, [r7, #20]
 8008f46:	f000 f8d1 	bl	80090ec <prvInsertTimerInActiveList>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01f      	beq.n	8008f90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f50:	2300      	movs	r3, #0
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	6978      	ldr	r0, [r7, #20]
 8008f5c:	f7ff ff88 	bl	8008e70 <xTimerGenericCommand>
 8008f60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d113      	bne.n	8008f90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60fb      	str	r3, [r7, #12]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	6978      	ldr	r0, [r7, #20]
 8008f96:	4798      	blx	r3
}
 8008f98:	bf00      	nop
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	200029e4 	.word	0x200029e4

08008fa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f857 	bl	8009064 <prvGetNextExpireTime>
 8008fb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f803 	bl	8008fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fc2:	f000 f8d5 	bl	8009170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fc6:	e7f1      	b.n	8008fac <prvTimerTask+0x8>

08008fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fd2:	f7ff fa43 	bl	800845c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fd6:	f107 0308 	add.w	r3, r7, #8
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f866 	bl	80090ac <prvSampleTimeNow>
 8008fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d130      	bne.n	800904a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <prvProcessTimerOrBlockTask+0x3c>
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d806      	bhi.n	8009004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ff6:	f7ff fa3f 	bl	8008478 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ffa:	68f9      	ldr	r1, [r7, #12]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff ff85 	bl	8008f0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009002:	e024      	b.n	800904e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d008      	beq.n	800901c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800900a:	4b13      	ldr	r3, [pc, #76]	; (8009058 <prvProcessTimerOrBlockTask+0x90>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <prvProcessTimerOrBlockTask+0x50>
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <prvProcessTimerOrBlockTask+0x52>
 8009018:	2300      	movs	r3, #0
 800901a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800901c:	4b0f      	ldr	r3, [pc, #60]	; (800905c <prvProcessTimerOrBlockTask+0x94>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4619      	mov	r1, r3
 800902a:	f7fe ffa7 	bl	8007f7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800902e:	f7ff fa23 	bl	8008478 <xTaskResumeAll>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009038:	4b09      	ldr	r3, [pc, #36]	; (8009060 <prvProcessTimerOrBlockTask+0x98>)
 800903a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	f3bf 8f6f 	isb	sy
}
 8009048:	e001      	b.n	800904e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800904a:	f7ff fa15 	bl	8008478 <xTaskResumeAll>
}
 800904e:	bf00      	nop
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200029e8 	.word	0x200029e8
 800905c:	200029ec 	.word	0x200029ec
 8009060:	e000ed04 	.word	0xe000ed04

08009064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800906c:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <prvGetNextExpireTime+0x44>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <prvGetNextExpireTime+0x16>
 8009076:	2201      	movs	r2, #1
 8009078:	e000      	b.n	800907c <prvGetNextExpireTime+0x18>
 800907a:	2200      	movs	r2, #0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d105      	bne.n	8009094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009088:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <prvGetNextExpireTime+0x44>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	e001      	b.n	8009098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009098:	68fb      	ldr	r3, [r7, #12]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	200029e4 	.word	0x200029e4

080090ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090b4:	f7ff fa7e 	bl	80085b4 <xTaskGetTickCount>
 80090b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090ba:	4b0b      	ldr	r3, [pc, #44]	; (80090e8 <prvSampleTimeNow+0x3c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d205      	bcs.n	80090d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090c4:	f000 f936 	bl	8009334 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e002      	b.n	80090d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090d6:	4a04      	ldr	r2, [pc, #16]	; (80090e8 <prvSampleTimeNow+0x3c>)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	200029f4 	.word	0x200029f4

080090ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090fa:	2300      	movs	r3, #0
 80090fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	429a      	cmp	r2, r3
 8009110:	d812      	bhi.n	8009138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	1ad2      	subs	r2, r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	429a      	cmp	r2, r3
 800911e:	d302      	bcc.n	8009126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009120:	2301      	movs	r3, #1
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e01b      	b.n	800915e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009126:	4b10      	ldr	r3, [pc, #64]	; (8009168 <prvInsertTimerInActiveList+0x7c>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3304      	adds	r3, #4
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7fe fa08 	bl	8007546 <vListInsert>
 8009136:	e012      	b.n	800915e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d206      	bcs.n	800914e <prvInsertTimerInActiveList+0x62>
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d302      	bcc.n	800914e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e007      	b.n	800915e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800914e:	4b07      	ldr	r3, [pc, #28]	; (800916c <prvInsertTimerInActiveList+0x80>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3304      	adds	r3, #4
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f7fe f9f4 	bl	8007546 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800915e:	697b      	ldr	r3, [r7, #20]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	200029e8 	.word	0x200029e8
 800916c:	200029e4 	.word	0x200029e4

08009170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08e      	sub	sp, #56	; 0x38
 8009174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009176:	e0ca      	b.n	800930e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	da18      	bge.n	80091b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800917e:	1d3b      	adds	r3, r7, #4
 8009180:	3304      	adds	r3, #4
 8009182:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	61fb      	str	r3, [r7, #28]
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091a6:	6850      	ldr	r0, [r2, #4]
 80091a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091aa:	6892      	ldr	r2, [r2, #8]
 80091ac:	4611      	mov	r1, r2
 80091ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f2c0 80aa 	blt.w	800930c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	3304      	adds	r3, #4
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe f9f5 	bl	80075b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091ce:	463b      	mov	r3, r7
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff ff6b 	bl	80090ac <prvSampleTimeNow>
 80091d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b09      	cmp	r3, #9
 80091dc:	f200 8097 	bhi.w	800930e <prvProcessReceivedCommands+0x19e>
 80091e0:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <prvProcessReceivedCommands+0x78>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	08009211 	.word	0x08009211
 80091ec:	08009211 	.word	0x08009211
 80091f0:	08009211 	.word	0x08009211
 80091f4:	08009285 	.word	0x08009285
 80091f8:	08009299 	.word	0x08009299
 80091fc:	080092e3 	.word	0x080092e3
 8009200:	08009211 	.word	0x08009211
 8009204:	08009211 	.word	0x08009211
 8009208:	08009285 	.word	0x08009285
 800920c:	08009299 	.word	0x08009299
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	b2da      	uxtb	r2, r3
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	18d1      	adds	r1, r2, r3
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009230:	f7ff ff5c 	bl	80090ec <prvInsertTimerInActiveList>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d069      	beq.n	800930e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b00      	cmp	r3, #0
 800924e:	d05e      	beq.n	800930e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	441a      	add	r2, r3
 8009258:	2300      	movs	r3, #0
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	2300      	movs	r3, #0
 800925e:	2100      	movs	r1, #0
 8009260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009262:	f7ff fe05 	bl	8008e70 <xTimerGenericCommand>
 8009266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d14f      	bne.n	800930e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	61bb      	str	r3, [r7, #24]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800928a:	f023 0301 	bic.w	r3, r3, #1
 800928e:	b2da      	uxtb	r2, r3
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009296:	e03a      	b.n	800930e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	617b      	str	r3, [r7, #20]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	18d1      	adds	r1, r2, r3
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092dc:	f7ff ff06 	bl	80090ec <prvInsertTimerInActiveList>
					break;
 80092e0:	e015      	b.n	800930e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d103      	bne.n	80092f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80092f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f2:	f000 fbdd 	bl	8009ab0 <vPortFree>
 80092f6:	e00a      	b.n	800930e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092fe:	f023 0301 	bic.w	r3, r3, #1
 8009302:	b2da      	uxtb	r2, r3
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800930a:	e000      	b.n	800930e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800930c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800930e:	4b08      	ldr	r3, [pc, #32]	; (8009330 <prvProcessReceivedCommands+0x1c0>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	1d39      	adds	r1, r7, #4
 8009314:	2200      	movs	r2, #0
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fc16 	bl	8007b48 <xQueueReceive>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	f47f af2a 	bne.w	8009178 <prvProcessReceivedCommands+0x8>
	}
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	3730      	adds	r7, #48	; 0x30
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	200029ec 	.word	0x200029ec

08009334 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800933a:	e048      	b.n	80093ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800933c:	4b2d      	ldr	r3, [pc, #180]	; (80093f4 <prvSwitchTimerLists+0xc0>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009346:	4b2b      	ldr	r3, [pc, #172]	; (80093f4 <prvSwitchTimerLists+0xc0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3304      	adds	r3, #4
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe f92f 	bl	80075b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d02e      	beq.n	80093ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	429a      	cmp	r2, r3
 8009380:	d90e      	bls.n	80093a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800938e:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <prvSwitchTimerLists+0xc0>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3304      	adds	r3, #4
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f7fe f8d4 	bl	8007546 <vListInsert>
 800939e:	e016      	b.n	80093ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a0:	2300      	movs	r3, #0
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	2300      	movs	r3, #0
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	2100      	movs	r1, #0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fd60 	bl	8008e70 <xTimerGenericCommand>
 80093b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	603b      	str	r3, [r7, #0]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093ce:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <prvSwitchTimerLists+0xc0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1b1      	bne.n	800933c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093d8:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <prvSwitchTimerLists+0xc0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093de:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <prvSwitchTimerLists+0xc4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a04      	ldr	r2, [pc, #16]	; (80093f4 <prvSwitchTimerLists+0xc0>)
 80093e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093e6:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <prvSwitchTimerLists+0xc4>)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	6013      	str	r3, [r2, #0]
}
 80093ec:	bf00      	nop
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	200029e4 	.word	0x200029e4
 80093f8:	200029e8 	.word	0x200029e8

080093fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009402:	f000 f967 	bl	80096d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009406:	4b15      	ldr	r3, [pc, #84]	; (800945c <prvCheckForValidListAndQueue+0x60>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d120      	bne.n	8009450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800940e:	4814      	ldr	r0, [pc, #80]	; (8009460 <prvCheckForValidListAndQueue+0x64>)
 8009410:	f7fe f848 	bl	80074a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009414:	4813      	ldr	r0, [pc, #76]	; (8009464 <prvCheckForValidListAndQueue+0x68>)
 8009416:	f7fe f845 	bl	80074a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800941a:	4b13      	ldr	r3, [pc, #76]	; (8009468 <prvCheckForValidListAndQueue+0x6c>)
 800941c:	4a10      	ldr	r2, [pc, #64]	; (8009460 <prvCheckForValidListAndQueue+0x64>)
 800941e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009420:	4b12      	ldr	r3, [pc, #72]	; (800946c <prvCheckForValidListAndQueue+0x70>)
 8009422:	4a10      	ldr	r2, [pc, #64]	; (8009464 <prvCheckForValidListAndQueue+0x68>)
 8009424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009426:	2300      	movs	r3, #0
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4b11      	ldr	r3, [pc, #68]	; (8009470 <prvCheckForValidListAndQueue+0x74>)
 800942c:	4a11      	ldr	r2, [pc, #68]	; (8009474 <prvCheckForValidListAndQueue+0x78>)
 800942e:	2110      	movs	r1, #16
 8009430:	200a      	movs	r0, #10
 8009432:	f7fe f953 	bl	80076dc <xQueueGenericCreateStatic>
 8009436:	4603      	mov	r3, r0
 8009438:	4a08      	ldr	r2, [pc, #32]	; (800945c <prvCheckForValidListAndQueue+0x60>)
 800943a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800943c:	4b07      	ldr	r3, [pc, #28]	; (800945c <prvCheckForValidListAndQueue+0x60>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009444:	4b05      	ldr	r3, [pc, #20]	; (800945c <prvCheckForValidListAndQueue+0x60>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	490b      	ldr	r1, [pc, #44]	; (8009478 <prvCheckForValidListAndQueue+0x7c>)
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fd6c 	bl	8007f28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009450:	f000 f970 	bl	8009734 <vPortExitCritical>
}
 8009454:	bf00      	nop
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	200029ec 	.word	0x200029ec
 8009460:	200029bc 	.word	0x200029bc
 8009464:	200029d0 	.word	0x200029d0
 8009468:	200029e4 	.word	0x200029e4
 800946c:	200029e8 	.word	0x200029e8
 8009470:	20002a98 	.word	0x20002a98
 8009474:	200029f8 	.word	0x200029f8
 8009478:	08009df0 	.word	0x08009df0

0800947c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3b04      	subs	r3, #4
 800948c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3b04      	subs	r3, #4
 800949a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f023 0201 	bic.w	r2, r3, #1
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3b04      	subs	r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094ac:	4a0c      	ldr	r2, [pc, #48]	; (80094e0 <pxPortInitialiseStack+0x64>)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3b14      	subs	r3, #20
 80094b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3b04      	subs	r3, #4
 80094c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f06f 0202 	mvn.w	r2, #2
 80094ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3b20      	subs	r3, #32
 80094d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094d2:	68fb      	ldr	r3, [r7, #12]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	080094e5 	.word	0x080094e5

080094e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094ee:	4b12      	ldr	r3, [pc, #72]	; (8009538 <prvTaskExitError+0x54>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d00a      	beq.n	800950e <prvTaskExitError+0x2a>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	60fb      	str	r3, [r7, #12]
}
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <prvTaskExitError+0x28>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60bb      	str	r3, [r7, #8]
}
 8009520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009522:	bf00      	nop
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0fc      	beq.n	8009524 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	2000000c 	.word	0x2000000c
 800953c:	00000000 	.word	0x00000000

08009540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <pxCurrentTCBConst2>)
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	6808      	ldr	r0, [r1, #0]
 8009546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	f380 8809 	msr	PSP, r0
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8811 	msr	BASEPRI, r0
 800955a:	4770      	bx	lr
 800955c:	f3af 8000 	nop.w

08009560 <pxCurrentTCBConst2>:
 8009560:	200024bc 	.word	0x200024bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop

08009568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009568:	4808      	ldr	r0, [pc, #32]	; (800958c <prvPortStartFirstTask+0x24>)
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	6800      	ldr	r0, [r0, #0]
 800956e:	f380 8808 	msr	MSP, r0
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8814 	msr	CONTROL, r0
 800957a:	b662      	cpsie	i
 800957c:	b661      	cpsie	f
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	df00      	svc	0
 8009588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800958a:	bf00      	nop
 800958c:	e000ed08 	.word	0xe000ed08

08009590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009596:	4b46      	ldr	r3, [pc, #280]	; (80096b0 <xPortStartScheduler+0x120>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a46      	ldr	r2, [pc, #280]	; (80096b4 <xPortStartScheduler+0x124>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10a      	bne.n	80095b6 <xPortStartScheduler+0x26>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095b6:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <xPortStartScheduler+0x120>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a3f      	ldr	r2, [pc, #252]	; (80096b8 <xPortStartScheduler+0x128>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d10a      	bne.n	80095d6 <xPortStartScheduler+0x46>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095d6:	4b39      	ldr	r3, [pc, #228]	; (80096bc <xPortStartScheduler+0x12c>)
 80095d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	22ff      	movs	r2, #255	; 0xff
 80095e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4b31      	ldr	r3, [pc, #196]	; (80096c0 <xPortStartScheduler+0x130>)
 80095fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095fe:	4b31      	ldr	r3, [pc, #196]	; (80096c4 <xPortStartScheduler+0x134>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009604:	e009      	b.n	800961a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009606:	4b2f      	ldr	r3, [pc, #188]	; (80096c4 <xPortStartScheduler+0x134>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3b01      	subs	r3, #1
 800960c:	4a2d      	ldr	r2, [pc, #180]	; (80096c4 <xPortStartScheduler+0x134>)
 800960e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	b2db      	uxtb	r3, r3
 8009618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b80      	cmp	r3, #128	; 0x80
 8009624:	d0ef      	beq.n	8009606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009626:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <xPortStartScheduler+0x134>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f1c3 0307 	rsb	r3, r3, #7
 800962e:	2b04      	cmp	r3, #4
 8009630:	d00a      	beq.n	8009648 <xPortStartScheduler+0xb8>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	60bb      	str	r3, [r7, #8]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009648:	4b1e      	ldr	r3, [pc, #120]	; (80096c4 <xPortStartScheduler+0x134>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	4a1d      	ldr	r2, [pc, #116]	; (80096c4 <xPortStartScheduler+0x134>)
 8009650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009652:	4b1c      	ldr	r3, [pc, #112]	; (80096c4 <xPortStartScheduler+0x134>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800965a:	4a1a      	ldr	r2, [pc, #104]	; (80096c4 <xPortStartScheduler+0x134>)
 800965c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	b2da      	uxtb	r2, r3
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009666:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <xPortStartScheduler+0x138>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a17      	ldr	r2, [pc, #92]	; (80096c8 <xPortStartScheduler+0x138>)
 800966c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009672:	4b15      	ldr	r3, [pc, #84]	; (80096c8 <xPortStartScheduler+0x138>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a14      	ldr	r2, [pc, #80]	; (80096c8 <xPortStartScheduler+0x138>)
 8009678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800967c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800967e:	f000 f8dd 	bl	800983c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009682:	4b12      	ldr	r3, [pc, #72]	; (80096cc <xPortStartScheduler+0x13c>)
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009688:	f000 f8fc 	bl	8009884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800968c:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <xPortStartScheduler+0x140>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a0f      	ldr	r2, [pc, #60]	; (80096d0 <xPortStartScheduler+0x140>)
 8009692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009698:	f7ff ff66 	bl	8009568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800969c:	f7ff f854 	bl	8008748 <vTaskSwitchContext>
	prvTaskExitError();
 80096a0:	f7ff ff20 	bl	80094e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	e000ed00 	.word	0xe000ed00
 80096b4:	410fc271 	.word	0x410fc271
 80096b8:	410fc270 	.word	0x410fc270
 80096bc:	e000e400 	.word	0xe000e400
 80096c0:	20002ae8 	.word	0x20002ae8
 80096c4:	20002aec 	.word	0x20002aec
 80096c8:	e000ed20 	.word	0xe000ed20
 80096cc:	2000000c 	.word	0x2000000c
 80096d0:	e000ef34 	.word	0xe000ef34

080096d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	607b      	str	r3, [r7, #4]
}
 80096ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <vPortEnterCritical+0x58>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <vPortEnterCritical+0x58>)
 80096f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096f8:	4b0c      	ldr	r3, [pc, #48]	; (800972c <vPortEnterCritical+0x58>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d10f      	bne.n	8009720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009700:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <vPortEnterCritical+0x5c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <vPortEnterCritical+0x4c>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	603b      	str	r3, [r7, #0]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <vPortEnterCritical+0x4a>
	}
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	2000000c 	.word	0x2000000c
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <vPortExitCritical+0x50>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <vPortExitCritical+0x24>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	607b      	str	r3, [r7, #4]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <vPortExitCritical+0x50>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3b01      	subs	r3, #1
 800975e:	4a09      	ldr	r2, [pc, #36]	; (8009784 <vPortExitCritical+0x50>)
 8009760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <vPortExitCritical+0x50>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <vPortExitCritical+0x42>
 800976a:	2300      	movs	r3, #0
 800976c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	f383 8811 	msr	BASEPRI, r3
}
 8009774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	2000000c 	.word	0x2000000c
	...

08009790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009790:	f3ef 8009 	mrs	r0, PSP
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <pxCurrentTCBConst>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	f01e 0f10 	tst.w	lr, #16
 80097a0:	bf08      	it	eq
 80097a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	6010      	str	r0, [r2, #0]
 80097ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097b4:	f380 8811 	msr	BASEPRI, r0
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f7fe ffc2 	bl	8008748 <vTaskSwitchContext>
 80097c4:	f04f 0000 	mov.w	r0, #0
 80097c8:	f380 8811 	msr	BASEPRI, r0
 80097cc:	bc09      	pop	{r0, r3}
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	6808      	ldr	r0, [r1, #0]
 80097d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d6:	f01e 0f10 	tst.w	lr, #16
 80097da:	bf08      	it	eq
 80097dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097e0:	f380 8809 	msr	PSP, r0
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst>:
 80097f0:	200024bc 	.word	0x200024bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	607b      	str	r3, [r7, #4]
}
 8009810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009812:	f7fe fedf 	bl	80085d4 <xTaskIncrementTick>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <xPortSysTickHandler+0x40>)
 800981e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f383 8811 	msr	BASEPRI, r3
}
 800982e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009840:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <vPortSetupTimerInterrupt+0x34>)
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <vPortSetupTimerInterrupt+0x38>)
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <vPortSetupTimerInterrupt+0x3c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a0a      	ldr	r2, [pc, #40]	; (800987c <vPortSetupTimerInterrupt+0x40>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	4a09      	ldr	r2, [pc, #36]	; (8009880 <vPortSetupTimerInterrupt+0x44>)
 800985a:	3b01      	subs	r3, #1
 800985c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800985e:	4b04      	ldr	r3, [pc, #16]	; (8009870 <vPortSetupTimerInterrupt+0x34>)
 8009860:	2207      	movs	r2, #7
 8009862:	601a      	str	r2, [r3, #0]
}
 8009864:	bf00      	nop
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	e000e010 	.word	0xe000e010
 8009874:	e000e018 	.word	0xe000e018
 8009878:	20000000 	.word	0x20000000
 800987c:	10624dd3 	.word	0x10624dd3
 8009880:	e000e014 	.word	0xe000e014

08009884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009894 <vPortEnableVFP+0x10>
 8009888:	6801      	ldr	r1, [r0, #0]
 800988a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800988e:	6001      	str	r1, [r0, #0]
 8009890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009892:	bf00      	nop
 8009894:	e000ed88 	.word	0xe000ed88

08009898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800989e:	f3ef 8305 	mrs	r3, IPSR
 80098a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b0f      	cmp	r3, #15
 80098a8:	d914      	bls.n	80098d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098aa:	4a17      	ldr	r2, [pc, #92]	; (8009908 <vPortValidateInterruptPriority+0x70>)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4413      	add	r3, r2
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098b4:	4b15      	ldr	r3, [pc, #84]	; (800990c <vPortValidateInterruptPriority+0x74>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	7afa      	ldrb	r2, [r7, #11]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d20a      	bcs.n	80098d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	607b      	str	r3, [r7, #4]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098d4:	4b0e      	ldr	r3, [pc, #56]	; (8009910 <vPortValidateInterruptPriority+0x78>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098dc:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <vPortValidateInterruptPriority+0x7c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d90a      	bls.n	80098fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	603b      	str	r3, [r7, #0]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <vPortValidateInterruptPriority+0x60>
	}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	e000e3f0 	.word	0xe000e3f0
 800990c:	20002ae8 	.word	0x20002ae8
 8009910:	e000ed0c 	.word	0xe000ed0c
 8009914:	20002aec 	.word	0x20002aec

08009918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009920:	2300      	movs	r3, #0
 8009922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009924:	f7fe fd9a 	bl	800845c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009928:	4b5b      	ldr	r3, [pc, #364]	; (8009a98 <pvPortMalloc+0x180>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009930:	f000 f920 	bl	8009b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009934:	4b59      	ldr	r3, [pc, #356]	; (8009a9c <pvPortMalloc+0x184>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4013      	ands	r3, r2
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 8093 	bne.w	8009a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01d      	beq.n	8009984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009948:	2208      	movs	r2, #8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b00      	cmp	r3, #0
 8009958:	d014      	beq.n	8009984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f023 0307 	bic.w	r3, r3, #7
 8009960:	3308      	adds	r3, #8
 8009962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <pvPortMalloc+0x6c>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	617b      	str	r3, [r7, #20]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d06e      	beq.n	8009a68 <pvPortMalloc+0x150>
 800998a:	4b45      	ldr	r3, [pc, #276]	; (8009aa0 <pvPortMalloc+0x188>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	d869      	bhi.n	8009a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009994:	4b43      	ldr	r3, [pc, #268]	; (8009aa4 <pvPortMalloc+0x18c>)
 8009996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009998:	4b42      	ldr	r3, [pc, #264]	; (8009aa4 <pvPortMalloc+0x18c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800999e:	e004      	b.n	80099aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d903      	bls.n	80099bc <pvPortMalloc+0xa4>
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1f1      	bne.n	80099a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099bc:	4b36      	ldr	r3, [pc, #216]	; (8009a98 <pvPortMalloc+0x180>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d050      	beq.n	8009a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2208      	movs	r2, #8
 80099cc:	4413      	add	r3, r2
 80099ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	2308      	movs	r3, #8
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d91f      	bls.n	8009a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4413      	add	r3, r2
 80099ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <pvPortMalloc+0xf8>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	613b      	str	r3, [r7, #16]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a22:	69b8      	ldr	r0, [r7, #24]
 8009a24:	f000 f908 	bl	8009c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a28:	4b1d      	ldr	r3, [pc, #116]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	4a1b      	ldr	r2, [pc, #108]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a36:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	; (8009aa8 <pvPortMalloc+0x190>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d203      	bcs.n	8009a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a42:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <pvPortMalloc+0x190>)
 8009a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <pvPortMalloc+0x184>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	431a      	orrs	r2, r3
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <pvPortMalloc+0x194>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3301      	adds	r3, #1
 8009a64:	4a11      	ldr	r2, [pc, #68]	; (8009aac <pvPortMalloc+0x194>)
 8009a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a68:	f7fe fd06 	bl	8008478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <pvPortMalloc+0x174>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	60fb      	str	r3, [r7, #12]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <pvPortMalloc+0x172>
	return pvReturn;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3728      	adds	r7, #40	; 0x28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	200066f8 	.word	0x200066f8
 8009a9c:	2000670c 	.word	0x2000670c
 8009aa0:	200066fc 	.word	0x200066fc
 8009aa4:	200066f0 	.word	0x200066f0
 8009aa8:	20006700 	.word	0x20006700
 8009aac:	20006704 	.word	0x20006704

08009ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d04d      	beq.n	8009b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ac2:	2308      	movs	r3, #8
 8009ac4:	425b      	negs	r3, r3
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <vPortFree+0xb8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <vPortFree+0x44>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00a      	beq.n	8009b12 <vPortFree+0x62>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	60bb      	str	r3, [r7, #8]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <vPortFree+0xb8>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01e      	beq.n	8009b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d11a      	bne.n	8009b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <vPortFree+0xb8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	43db      	mvns	r3, r3
 8009b32:	401a      	ands	r2, r3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b38:	f7fe fc90 	bl	800845c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <vPortFree+0xbc>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4413      	add	r3, r2
 8009b46:	4a09      	ldr	r2, [pc, #36]	; (8009b6c <vPortFree+0xbc>)
 8009b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b4a:	6938      	ldr	r0, [r7, #16]
 8009b4c:	f000 f874 	bl	8009c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <vPortFree+0xc0>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a06      	ldr	r2, [pc, #24]	; (8009b70 <vPortFree+0xc0>)
 8009b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b5a:	f7fe fc8d 	bl	8008478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b5e:	bf00      	nop
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	2000670c 	.word	0x2000670c
 8009b6c:	200066fc 	.word	0x200066fc
 8009b70:	20006708 	.word	0x20006708

08009b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <prvHeapInit+0xac>)
 8009b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00c      	beq.n	8009ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3307      	adds	r3, #7
 8009b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	4a1f      	ldr	r2, [pc, #124]	; (8009c20 <prvHeapInit+0xac>)
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bac:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <prvHeapInit+0xb0>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <prvHeapInit+0xb0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bd6:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <prvHeapInit+0xb4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <prvHeapInit+0xb4>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <prvHeapInit+0xb8>)
 8009c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <prvHeapInit+0xbc>)
 8009c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c0c:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <prvHeapInit+0xc0>)
 8009c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20002af0 	.word	0x20002af0
 8009c24:	200066f0 	.word	0x200066f0
 8009c28:	200066f8 	.word	0x200066f8
 8009c2c:	20006700 	.word	0x20006700
 8009c30:	200066fc 	.word	0x200066fc
 8009c34:	2000670c 	.word	0x2000670c

08009c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c40:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <prvInsertBlockIntoFreeList+0xac>)
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e002      	b.n	8009c4c <prvInsertBlockIntoFreeList+0x14>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d8f7      	bhi.n	8009c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d108      	bne.n	8009c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	441a      	add	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d118      	bne.n	8009cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d00d      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e008      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e003      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d002      	beq.n	8009cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	200066f0 	.word	0x200066f0
 8009ce8:	200066f8 	.word	0x200066f8

08009cec <__libc_init_array>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4d0d      	ldr	r5, [pc, #52]	; (8009d24 <__libc_init_array+0x38>)
 8009cf0:	4c0d      	ldr	r4, [pc, #52]	; (8009d28 <__libc_init_array+0x3c>)
 8009cf2:	1b64      	subs	r4, r4, r5
 8009cf4:	10a4      	asrs	r4, r4, #2
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	42a6      	cmp	r6, r4
 8009cfa:	d109      	bne.n	8009d10 <__libc_init_array+0x24>
 8009cfc:	4d0b      	ldr	r5, [pc, #44]	; (8009d2c <__libc_init_array+0x40>)
 8009cfe:	4c0c      	ldr	r4, [pc, #48]	; (8009d30 <__libc_init_array+0x44>)
 8009d00:	f000 f82e 	bl	8009d60 <_init>
 8009d04:	1b64      	subs	r4, r4, r5
 8009d06:	10a4      	asrs	r4, r4, #2
 8009d08:	2600      	movs	r6, #0
 8009d0a:	42a6      	cmp	r6, r4
 8009d0c:	d105      	bne.n	8009d1a <__libc_init_array+0x2e>
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d14:	4798      	blx	r3
 8009d16:	3601      	adds	r6, #1
 8009d18:	e7ee      	b.n	8009cf8 <__libc_init_array+0xc>
 8009d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1e:	4798      	blx	r3
 8009d20:	3601      	adds	r6, #1
 8009d22:	e7f2      	b.n	8009d0a <__libc_init_array+0x1e>
 8009d24:	08009f70 	.word	0x08009f70
 8009d28:	08009f70 	.word	0x08009f70
 8009d2c:	08009f70 	.word	0x08009f70
 8009d30:	08009f74 	.word	0x08009f74

08009d34 <memcpy>:
 8009d34:	440a      	add	r2, r1
 8009d36:	4291      	cmp	r1, r2
 8009d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d3c:	d100      	bne.n	8009d40 <memcpy+0xc>
 8009d3e:	4770      	bx	lr
 8009d40:	b510      	push	{r4, lr}
 8009d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d4a:	4291      	cmp	r1, r2
 8009d4c:	d1f9      	bne.n	8009d42 <memcpy+0xe>
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <memset>:
 8009d50:	4402      	add	r2, r0
 8009d52:	4603      	mov	r3, r0
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d100      	bne.n	8009d5a <memset+0xa>
 8009d58:	4770      	bx	lr
 8009d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5e:	e7f9      	b.n	8009d54 <memset+0x4>

08009d60 <_init>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	bf00      	nop
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr

08009d6c <_fini>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr
