
minibot32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009738  08009738  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009740  08009740  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800974c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000679c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200067ac  200067ac  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002233c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000535c  00000000  00000000  0004237c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  000476d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001710  00000000  00000000  00049030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ea9  00000000  00000000  0004a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002127c  00000000  00000000  000735e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dafb6  00000000  00000000  00094865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f81b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006604  00000000  00000000  0016f86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009530 	.word	0x08009530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009530 	.word	0x08009530

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_CAN1_Init+0xc8>)
 80004dc:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <MX_CAN1_Init+0xcc>)
 80004de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e2:	2206      	movs	r2, #6
 80004e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_CAN1_Init+0xc8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_CAN1_Init+0xc8>)
 80004f4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80004f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_CAN1_Init+0xc8>)
 80004fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000500:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_CAN1_Init+0xc8>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_CAN1_Init+0xc8>)
 800050a:	2201      	movs	r2, #1
 800050c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_CAN1_Init+0xc8>)
 8000510:	2200      	movs	r2, #0
 8000512:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_CAN1_Init+0xc8>)
 8000516:	2200      	movs	r2, #0
 8000518:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_CAN1_Init+0xc8>)
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_CAN1_Init+0xc8>)
 8000522:	2201      	movs	r2, #1
 8000524:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <MX_CAN1_Init+0xc8>)
 8000528:	f001 fdea 	bl	8002100 <HAL_CAN_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000532:	f000 fb5f 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_CAN1_Init+0xc8>)
 8000560:	f001 feca 	bl	80022f8 <HAL_CAN_ConfigFilter>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_CAN1_Init+0x9a>
  {
  	Error_Handler();
 800056a:	f000 fb43 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_CAN1_Init+0xc8>)
 8000570:	f001 ffa2 	bl	80024b8 <HAL_CAN_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_CAN1_Init+0xaa>
	Error_Handler();
 800057a:	f000 fb3b 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1,
 800057e:	f648 4102 	movw	r1, #35842	; 0x8c02
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_CAN1_Init+0xc8>)
 8000584:	f002 f8ee 	bl	8002764 <HAL_CAN_ActivateNotification>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0xbe>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
	Error_Handler();
 800058e:	f000 fb31 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <HAL_CAN_MspInit+0xa4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d13c      	bne.n	8000640 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a1f      	ldr	r2, [pc, #124]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000610:	2309      	movs	r3, #9
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <HAL_CAN_MspInit+0xac>)
 800061c:	f002 ffd2 	bl	80035c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2105      	movs	r1, #5
 8000624:	2014      	movs	r0, #20
 8000626:	f002 fba1 	bl	8002d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800062a:	2014      	movs	r0, #20
 800062c:	f002 fbba 	bl	8002da4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	2016      	movs	r0, #22
 8000636:	f002 fb99 	bl	8002d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800063a:	2016      	movs	r0, #22
 800063c:	f002 fbb2 	bl	8002da4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40006400 	.word	0x40006400
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400

08000654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_DMA_Init+0x78>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <MX_DMA_Init+0x78>)
 8000664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_DMA_Init+0x78>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_DMA_Init+0x78>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_DMA_Init+0x78>)
 8000680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_DMA_Init+0x78>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	200c      	movs	r0, #12
 8000698:	f002 fb68 	bl	8002d6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800069c:	200c      	movs	r0, #12
 800069e:	f002 fb81 	bl	8002da4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2010      	movs	r0, #16
 80006a8:	f002 fb60 	bl	8002d6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006ac:	2010      	movs	r0, #16
 80006ae:	f002 fb79 	bl	8002da4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	203a      	movs	r0, #58	; 0x3a
 80006b8:	f002 fb58 	bl	8002d6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006bc:	203a      	movs	r0, #58	; 0x3a
 80006be:	f002 fb71 	bl	8002da4 <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <MX_FREERTOS_Init+0x88>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <MX_FREERTOS_Init+0x8c>)
 80006da:	f006 f9e9 	bl	8006ab0 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <MX_FREERTOS_Init+0x90>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of OutputsTask */
  OutputsTaskHandle = osThreadNew(StartOutputsTask, NULL, &OutputsTask_attributes);
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <MX_FREERTOS_Init+0x94>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	481f      	ldr	r0, [pc, #124]	; (8000768 <MX_FREERTOS_Init+0x98>)
 80006ea:	f006 f9e1 	bl	8006ab0 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a1e      	ldr	r2, [pc, #120]	; (800076c <MX_FREERTOS_Init+0x9c>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of InputsTask */
  InputsTaskHandle = osThreadNew(StartInputsTask, NULL, &InputsTask_attributes);
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_FREERTOS_Init+0xa0>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <MX_FREERTOS_Init+0xa4>)
 80006fa:	f006 f9d9 	bl	8006ab0 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <MX_FREERTOS_Init+0xa8>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartServoTask, NULL, &ServoTask_attributes);
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <MX_FREERTOS_Init+0xac>)
 8000706:	2100      	movs	r1, #0
 8000708:	481d      	ldr	r0, [pc, #116]	; (8000780 <MX_FREERTOS_Init+0xb0>)
 800070a:	f006 f9d1 	bl	8006ab0 <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_FREERTOS_Init+0xb4>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of UartWiFiTask */
  UartWiFiTaskHandle = osThreadNew(StartUartWiFiTask, NULL, &UartWiFiTask_attributes);
 8000714:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_FREERTOS_Init+0xb8>)
 8000716:	2100      	movs	r1, #0
 8000718:	481c      	ldr	r0, [pc, #112]	; (800078c <MX_FREERTOS_Init+0xbc>)
 800071a:	f006 f9c9 	bl	8006ab0 <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_FREERTOS_Init+0xc0>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of CanDriversTask */
  CanDriversTaskHandle = osThreadNew(StartCanDriversTask, NULL, &CanDriversTask_attributes);
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_FREERTOS_Init+0xc4>)
 8000726:	2100      	movs	r1, #0
 8000728:	481b      	ldr	r0, [pc, #108]	; (8000798 <MX_FREERTOS_Init+0xc8>)
 800072a:	f006 f9c1 	bl	8006ab0 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <MX_FREERTOS_Init+0xcc>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 8000734:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <MX_FREERTOS_Init+0xd0>)
 8000736:	2100      	movs	r1, #0
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_FREERTOS_Init+0xd4>)
 800073a:	f006 f9b9 	bl	8006ab0 <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <MX_FREERTOS_Init+0xd8>)
 8000742:	6013      	str	r3, [r2, #0]

  /* creation of MissionsTask */
  MissionsTaskHandle = osThreadNew(StartMissionsTask, NULL, &MissionsTask_attributes);
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <MX_FREERTOS_Init+0xdc>)
 8000746:	2100      	movs	r1, #0
 8000748:	4819      	ldr	r0, [pc, #100]	; (80007b0 <MX_FREERTOS_Init+0xe0>)
 800074a:	f006 f9b1 	bl	8006ab0 <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_FREERTOS_Init+0xe4>)
 8000752:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	080095c8 	.word	0x080095c8
 800075c:	080007b9 	.word	0x080007b9
 8000760:	200000a4 	.word	0x200000a4
 8000764:	080095ec 	.word	0x080095ec
 8000768:	08001c35 	.word	0x08001c35
 800076c:	20000304 	.word	0x20000304
 8000770:	08009610 	.word	0x08009610
 8000774:	08001a8d 	.word	0x08001a8d
 8000778:	20000564 	.word	0x20000564
 800077c:	08009634 	.word	0x08009634
 8000780:	08001d51 	.word	0x08001d51
 8000784:	200007c4 	.word	0x200007c4
 8000788:	08009658 	.word	0x08009658
 800078c:	08001d65 	.word	0x08001d65
 8000790:	20000a24 	.word	0x20000a24
 8000794:	0800967c 	.word	0x0800967c
 8000798:	08001999 	.word	0x08001999
 800079c:	20000e84 	.word	0x20000e84
 80007a0:	080096a0 	.word	0x080096a0
 80007a4:	08001831 	.word	0x08001831
 80007a8:	200010e4 	.word	0x200010e4
 80007ac:	080096c4 	.word	0x080096c4
 80007b0:	08001c29 	.word	0x08001c29
 80007b4:	20001544 	.word	0x20001544

080007b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f006 fa06 	bl	8006bd4 <osDelay>
 80007c8:	e7fa      	b.n	80007c0 <StartDefaultTask+0x8>
	...

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <MX_GPIO_Init+0x210>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a7c      	ldr	r2, [pc, #496]	; (80009dc <MX_GPIO_Init+0x210>)
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <MX_GPIO_Init+0x210>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b76      	ldr	r3, [pc, #472]	; (80009dc <MX_GPIO_Init+0x210>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a75      	ldr	r2, [pc, #468]	; (80009dc <MX_GPIO_Init+0x210>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <MX_GPIO_Init+0x210>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <MX_GPIO_Init+0x210>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a6e      	ldr	r2, [pc, #440]	; (80009dc <MX_GPIO_Init+0x210>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <MX_GPIO_Init+0x210>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b68      	ldr	r3, [pc, #416]	; (80009dc <MX_GPIO_Init+0x210>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a67      	ldr	r2, [pc, #412]	; (80009dc <MX_GPIO_Init+0x210>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <MX_GPIO_Init+0x210>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b61      	ldr	r3, [pc, #388]	; (80009dc <MX_GPIO_Init+0x210>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a60      	ldr	r2, [pc, #384]	; (80009dc <MX_GPIO_Init+0x210>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <MX_GPIO_Init+0x210>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <MX_GPIO_Init+0x210>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a59      	ldr	r2, [pc, #356]	; (80009dc <MX_GPIO_Init+0x210>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <MX_GPIO_Init+0x210>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2132      	movs	r1, #50	; 0x32
 800088e:	4854      	ldr	r0, [pc, #336]	; (80009e0 <MX_GPIO_Init+0x214>)
 8000890:	f003 f834 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800089a:	4852      	ldr	r0, [pc, #328]	; (80009e4 <MX_GPIO_Init+0x218>)
 800089c:	f003 f82e 	bl	80038fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f24c 0103 	movw	r1, #49155	; 0xc003
 80008a6:	4850      	ldr	r0, [pc, #320]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80008a8:	f003 f828 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008ac:	2201      	movs	r2, #1
 80008ae:	f64f 7180 	movw	r1, #65408	; 0xff80
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <MX_GPIO_Init+0x220>)
 80008b4:	f003 f822 	bl	80038fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008be:	484c      	ldr	r0, [pc, #304]	; (80009f0 <MX_GPIO_Init+0x224>)
 80008c0:	f003 f81c 	bl	80038fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008c4:	237e      	movs	r3, #126	; 0x7e
 80008c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4845      	ldr	r0, [pc, #276]	; (80009ec <MX_GPIO_Init+0x220>)
 80008d8:	f002 fe74 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008dc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	483b      	ldr	r0, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x214>)
 80008f2:	f002 fe67 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008f6:	2332      	movs	r3, #50	; 0x32
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4834      	ldr	r0, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x214>)
 800090e:	f002 fe59 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000912:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8000916:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	482e      	ldr	r0, [pc, #184]	; (80009e4 <MX_GPIO_Init+0x218>)
 800092c:	f002 fe4a 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8000930:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x21c>)
 800094a:	f002 fe3b 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800094e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000952:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_GPIO_Init+0x220>)
 8000968:	f002 fe2c 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800096c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000970:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	; (80009f0 <MX_GPIO_Init+0x224>)
 8000986:	f002 fe1d 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800098a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x218>)
 80009a0:	f002 fe10 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_GPIO_Init+0x224>)
 80009b8:	f002 fe04 	bl	80035c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009bc:	2338      	movs	r3, #56	; 0x38
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80009d0:	f002 fdf8 	bl	80035c4 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_IWDG_Init+0x2c>)
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <MX_IWDG_Init+0x30>)
 80009fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a06:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a0a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a0e:	f002 ff8e 	bl	800392e <HAL_IWDG_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 f8ec 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200019a4 	.word	0x200019a4
 8000a24:	40003000 	.word	0x40003000

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f001 fb02 	bl	8002034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f862 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff feca 	bl	80007cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a38:	f7ff fe0c 	bl	8000654 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a3c:	f000 fb9a 	bl	8001174 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a40:	f000 fbc2 	bl	80011c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a44:	f000 fbea 	bl	800121c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000a48:	f000 fa04 	bl	8000e54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a4c:	f000 fa9a 	bl	8000f84 <MX_TIM4_Init>
  MX_IWDG_Init();
 8000a50:	f7ff ffd0 	bl	80009f4 <MX_IWDG_Init>
  MX_CAN1_Init();
 8000a54:	f7ff fd3e 	bl	80004d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2500);
 8000a58:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000a5c:	f001 fb2c 	bl	80020b8 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	491a      	ldr	r1, [pc, #104]	; (8000acc <main+0xa4>)
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <main+0xa8>)
 8000a66:	f004 feac 	bl	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 8000a6a:	2264      	movs	r2, #100	; 0x64
 8000a6c:	4919      	ldr	r1, [pc, #100]	; (8000ad4 <main+0xac>)
 8000a6e:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <main+0xb0>)
 8000a70:	f004 fea7 	bl	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8000a74:	2264      	movs	r2, #100	; 0x64
 8000a76:	4919      	ldr	r1, [pc, #100]	; (8000adc <main+0xb4>)
 8000a78:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <main+0xb8>)
 8000a7a:	f004 fea2 	bl	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <main+0xbc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <main+0xbc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0208 	bic.w	r2, r2, #8
 8000a8c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <main+0xc0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <main+0xc0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0208 	bic.w	r2, r2, #8
 8000a9c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <main+0xc4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <main+0xc4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 0208 	bic.w	r2, r2, #8
 8000aac:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000aae:	213c      	movs	r1, #60	; 0x3c
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <main+0xc8>)
 8000ab2:	f003 ff51 	bl	8004958 <HAL_TIM_Encoder_Start>
  HAL_IWDG_Refresh(&hiwdg);
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <main+0xcc>)
 8000ab8:	f002 ff7b 	bl	80039b2 <HAL_IWDG_Refresh>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000abc:	f005 ffae 	bl	8006a1c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ac4:	f005 ffce 	bl	8006a64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0xa0>
 8000aca:	bf00      	nop
 8000acc:	20001d2c 	.word	0x20001d2c
 8000ad0:	20001b10 	.word	0x20001b10
 8000ad4:	20001d90 	.word	0x20001d90
 8000ad8:	20001acc 	.word	0x20001acc
 8000adc:	20001df4 	.word	0x20001df4
 8000ae0:	20001a88 	.word	0x20001a88
 8000ae4:	20001c14 	.word	0x20001c14
 8000ae8:	20001bb4 	.word	0x20001bb4
 8000aec:	20001b54 	.word	0x20001b54
 8000af0:	20001a40 	.word	0x20001a40
 8000af4:	200019a4 	.word	0x200019a4

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f008 fd0a 	bl	8009520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b54:	2309      	movs	r3, #9
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b70:	23a8      	movs	r3, #168	; 0xa8
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 ff27 	bl	80039d4 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b8c:	f000 f832 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2105      	movs	r1, #5
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 f988 	bl	8003ec4 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bba:	f000 f81b 	bl	8000bf4 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	; 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f001 fa49 	bl	8002078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x54>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_MspInit+0x54>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x54>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_MspInit+0x54>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_MspInit+0x54>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x54>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	210f      	movs	r1, #15
 8000c42:	f06f 0001 	mvn.w	r0, #1
 8000c46:	f002 f891 	bl	8002d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a32      	ldr	r2, [pc, #200]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c84:	f107 0210 	add.w	r2, r7, #16
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fb38 	bl	8004304 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c9e:	f003 fb09 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ca4:	e004      	b.n	8000cb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ca6:	f003 fb05 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8000caa:	4603      	mov	r3, r0
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <HAL_InitTick+0xe8>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9b      	lsrs	r3, r3, #18
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_InitTick+0xec>)
 8000cc0:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <HAL_InitTick+0xf0>)
 8000cc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_InitTick+0xec>)
 8000cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ccc:	4a1d      	ldr	r2, [pc, #116]	; (8000d44 <HAL_InitTick+0xec>)
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_InitTick+0xec>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_InitTick+0xec>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_InitTick+0xec>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ce4:	4817      	ldr	r0, [pc, #92]	; (8000d44 <HAL_InitTick+0xec>)
 8000ce6:	f003 fb3f 	bl	8004368 <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11b      	bne.n	8000d30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <HAL_InitTick+0xec>)
 8000cfa:	f003 fb85 	bl	8004408 <HAL_TIM_Base_Start_IT>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d111      	bne.n	8000d30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d0c:	2036      	movs	r0, #54	; 0x36
 8000d0e:	f002 f849 	bl	8002da4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d808      	bhi.n	8000d2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2036      	movs	r0, #54	; 0x36
 8000d1e:	f002 f825 	bl	8002d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_InitTick+0xf4>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e002      	b.n	8000d30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	431bde83 	.word	0x431bde83
 8000d44:	200019b0 	.word	0x200019b0
 8000d48:	40001000 	.word	0x40001000
 8000d4c:	20000004 	.word	0x20000004

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA1_Stream1_IRQHandler+0x10>)
 8000d82:	f002 f9b5 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20001c14 	.word	0x20001c14

08000d90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Stream5_IRQHandler+0x10>)
 8000d96:	f002 f9ab 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20001bb4 	.word	0x20001bb4

08000da4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <CAN1_RX0_IRQHandler+0x10>)
 8000daa:	f001 fd01 	bl	80027b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000002c 	.word	0x2000002c

08000db8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <CAN1_SCE_IRQHandler+0x10>)
 8000dbe:	f001 fcf7 	bl	80027b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000002c 	.word	0x2000002c

08000dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <USART1_IRQHandler+0x10>)
 8000dd2:	f004 fd5b 	bl	800588c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001a88 	.word	0x20001a88

08000de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	f004 fd51 	bl	800588c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20001acc 	.word	0x20001acc

08000df4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <USART3_IRQHandler+0x10>)
 8000dfa:	f004 fd47 	bl	800588c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20001b10 	.word	0x20001b10

08000e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM6_DAC_IRQHandler+0x10>)
 8000e0e:	f003 fe31 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200019b0 	.word	0x200019b0

08000e1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <DMA2_Stream2_IRQHandler+0x10>)
 8000e22:	f002 f965 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20001b54 	.word	0x20001b54

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e86:	4a3e      	ldr	r2, [pc, #248]	; (8000f80 <MX_TIM3_Init+0x12c>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e8c:	f240 3247 	movw	r2, #839	; 0x347
 8000e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e9a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eac:	4833      	ldr	r0, [pc, #204]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eae:	f003 fa5b 	bl	8004368 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000eb8:	f7ff fe9c 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482c      	ldr	r0, [pc, #176]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eca:	f003 ff9d 	bl	8004e08 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ed4:	f7ff fe8e 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed8:	4828      	ldr	r0, [pc, #160]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eda:	f003 fb05 	bl	80044e8 <HAL_TIM_PWM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ee4:	f7ff fe86 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ef8:	f004 fb86 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f02:	f7ff fe77 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2360      	movs	r3, #96	; 0x60
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f1e:	f003 feb1 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f28:	f7ff fe64 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f34:	f003 fea6 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f3e:	f7ff fe59 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2208      	movs	r2, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f4a:	f003 fe9b 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f54:	f7ff fe4e 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f60:	f003 fe90 	bl	8004c84 <HAL_TIM_PWM_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000f6a:	f7ff fe43 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f70:	f000 f8c6 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200019f8 	.word	0x200019f8
 8000f80:	40000400 	.word	0x40000400

08000f84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f008 fac4 	bl	8009520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <MX_TIM4_Init+0xa4>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000ff2:	f003 fc0b 	bl	800480c <HAL_TIM_Encoder_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ffc:	f7ff fdfa 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_TIM4_Init+0xa0>)
 800100e:	f004 fafb 	bl	8005608 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001018:	f7ff fdec 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	; 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20001a40 	.word	0x20001a40
 8001028:	40000800 	.word	0x40000800

0800102c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_TIM_Encoder_MspInit+0x84>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12b      	bne.n	80010ea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ca:	23c0      	movs	r3, #192	; 0xc0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010da:	2302      	movs	r3, #2
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80010e6:	f002 fa6d 	bl	80035c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40000800 	.word	0x40000800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020400 	.word	0x40020400

08001100 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_TIM_MspPostInit+0x68>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d11e      	bne.n	8001160 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800113e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_TIM_MspPostInit+0x70>)
 800115c:	f002 fa32 	bl	80035c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40000400 	.word	0x40000400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800

08001174 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_USART1_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011ac:	f004 fabc 	bl	8005728 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f7ff fd1d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20001a88 	.word	0x20001a88
 80011c4:	40011000 	.word	0x40011000

080011c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 8001200:	f004 fa92 	bl	8005728 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f7ff fcf3 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20001acc 	.word	0x20001acc
 8001218:	40004400 	.word	0x40004400

0800121c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART3_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001254:	f004 fa68 	bl	8005728 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f7ff fcc9 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001b10 	.word	0x20001b10
 800126c:	40004800 	.word	0x40004800

08001270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a9d      	ldr	r2, [pc, #628]	; (8001504 <HAL_UART_MspInit+0x294>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d163      	bne.n	800135a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a9b      	ldr	r2, [pc, #620]	; (8001508 <HAL_UART_MspInit+0x298>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b99      	ldr	r3, [pc, #612]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	4b95      	ldr	r3, [pc, #596]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a94      	ldr	r2, [pc, #592]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b92      	ldr	r3, [pc, #584]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012dc:	2307      	movs	r3, #7
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4889      	ldr	r0, [pc, #548]	; (800150c <HAL_UART_MspInit+0x29c>)
 80012e8:	f002 f96c 	bl	80035c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012ec:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <HAL_UART_MspInit+0x2a4>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012f2:	4b87      	ldr	r3, [pc, #540]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b83      	ldr	r3, [pc, #524]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800130e:	4b80      	ldr	r3, [pc, #512]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001320:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800132c:	4878      	ldr	r0, [pc, #480]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 800132e:	f001 fd47 	bl	8002dc0 <HAL_DMA_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001338:	f7ff fc5c 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a74      	ldr	r2, [pc, #464]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001340:	639a      	str	r2, [r3, #56]	; 0x38
 8001342:	4a73      	ldr	r2, [pc, #460]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2105      	movs	r1, #5
 800134c:	2025      	movs	r0, #37	; 0x25
 800134e:	f001 fd0d 	bl	8002d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001352:	2025      	movs	r0, #37	; 0x25
 8001354:	f001 fd26 	bl	8002da4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001358:	e0cf      	b.n	80014fa <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_UART_MspInit+0x2a8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d162      	bne.n	800142a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_UART_MspInit+0x298>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_UART_MspInit+0x298>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a5f      	ldr	r2, [pc, #380]	; (8001508 <HAL_UART_MspInit+0x298>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139c:	230c      	movs	r3, #12
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ac:	2307      	movs	r3, #7
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4855      	ldr	r0, [pc, #340]	; (800150c <HAL_UART_MspInit+0x29c>)
 80013b8:	f002 f904 	bl	80035c4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013bc:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013be:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_UART_MspInit+0x2b0>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b52      	ldr	r3, [pc, #328]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013de:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e4:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013ea:	4b4c      	ldr	r3, [pc, #304]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b49      	ldr	r3, [pc, #292]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013fc:	4847      	ldr	r0, [pc, #284]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013fe:	f001 fcdf 	bl	8002dc0 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001408:	f7ff fbf4 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_UART_MspInit+0x2ac>)
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <HAL_UART_MspInit+0x2ac>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2105      	movs	r1, #5
 800141c:	2026      	movs	r0, #38	; 0x26
 800141e:	f001 fca5 	bl	8002d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001422:	2026      	movs	r0, #38	; 0x26
 8001424:	f001 fcbe 	bl	8002da4 <HAL_NVIC_EnableIRQ>
}
 8001428:	e067      	b.n	80014fa <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART3)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <HAL_UART_MspInit+0x2b4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d162      	bne.n	80014fa <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_UART_MspInit+0x298>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_UART_MspInit+0x298>)
 800143e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <HAL_UART_MspInit+0x298>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800146c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800147e:	2307      	movs	r3, #7
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4827      	ldr	r0, [pc, #156]	; (8001528 <HAL_UART_MspInit+0x2b8>)
 800148a:	f002 f89b 	bl	80035c4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_UART_MspInit+0x2bc>)
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_UART_MspInit+0x2c0>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_UART_MspInit+0x2bc>)
 8001496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_UART_MspInit+0x2bc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014d0:	f001 fc76 	bl	8002dc0 <HAL_DMA_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_UART_MspInit+0x26e>
      Error_Handler();
 80014da:	f7ff fb8b 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2105      	movs	r1, #5
 80014ee:	2027      	movs	r0, #39	; 0x27
 80014f0:	f001 fc3c 	bl	8002d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014f4:	2027      	movs	r0, #39	; 0x27
 80014f6:	f001 fc55 	bl	8002da4 <HAL_NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3738      	adds	r7, #56	; 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40011000 	.word	0x40011000
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000
 8001510:	20001b54 	.word	0x20001b54
 8001514:	40026440 	.word	0x40026440
 8001518:	40004400 	.word	0x40004400
 800151c:	20001bb4 	.word	0x20001bb4
 8001520:	40026088 	.word	0x40026088
 8001524:	40004800 	.word	0x40004800
 8001528:	40020400 	.word	0x40020400
 800152c:	20001c14 	.word	0x20001c14
 8001530:	40026028 	.word	0x40026028

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153a:	490e      	ldr	r1, [pc, #56]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001550:	4c0b      	ldr	r4, [pc, #44]	; (8001580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155e:	f7ff fc67 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f007 ffab 	bl	80094bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fa5f 	bl	8000a28 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800156c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001578:	0800974c 	.word	0x0800974c
  ldr r2, =_sbss
 800157c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001580:	200067ac 	.word	0x200067ac

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>

08001586 <_Z17DriversObjectInitPP16KeyaLKTechDriverm>:
 */

#include "InitCanDrivers.h"

void DriversObjectInit(KeyaLKTechDriver *drivers[], uint32_t size)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
	//*drivers[0];
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_ZN16KeyaLKTechDriverC1Emmm>:
 *      Author: user
 */

#include <KeyaLKTechDriver.h>

KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, uint32_t stdId = 0)
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
{
	_axis = axis;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	621a      	str	r2, [r3, #32]
	_canTxHeader.ExtId = extId;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	605a      	str	r2, [r3, #4]
	_canTxHeader.StdId = stdId;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	601a      	str	r2, [r3, #0]
	_canTxHeader.RTR = CAN_RTR_DATA;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
	_canTxHeader.DLC = 8;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2208      	movs	r2, #8
 80015c6:	611a      	str	r2, [r3, #16]
	_canTxHeader.TransmitGlobalTime = DISABLE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	751a      	strb	r2, [r3, #20]
	if (extId)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <_ZN16KeyaLKTechDriverC1Emmm+0x40>
	{
		_canTxHeader.IDE = CAN_ID_EXT;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2204      	movs	r2, #4
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	e002      	b.n	80015e2 <_ZN16KeyaLKTechDriverC1Emmm+0x46>
	}
	else
	{
		_canTxHeader.IDE = CAN_ID_STD;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
	}
}
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_ZN16KeyaLKTechDriverC1Em>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis) : KeyaLKTechDriver::KeyaLKTechDriver(extId, axis, 0){}
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t stdId) : KeyaLKTechDriver::KeyaLKTechDriver(0, 0, stdId){}
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffcb 	bl	800159c <_ZN16KeyaLKTechDriverC1Emmm>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZN16KeyaLKTechDriver5getIdEv>:

	return KeyaLKTechDriver::sendData();
}

uint32_t KeyaLKTechDriver::getId()
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

	if (_canTxHeader.ExtId)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <_ZN16KeyaLKTechDriver5getIdEv+0x16>
	{
		return  _canTxHeader.ExtId;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	e001      	b.n	800162a <_ZN16KeyaLKTechDriver5getIdEv+0x1a>
	}
	return  _canTxHeader.StdId;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_ZN16KeyaLKTechDriver7setTempEa>:
{
	return _temp;
}

void KeyaLKTechDriver::setTemp(int8_t temp)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
	_temp = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_ZN16KeyaLKTechDriver6setEncEl>:

void KeyaLKTechDriver::setEnc(int32_t enc)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
	_enc = KeyaLKTechDriver::UnwrapEncoder(enc, &_prevEnc);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b299      	uxth	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	332c      	adds	r3, #44	; 0x2c
 8001668:	461a      	mov	r2, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f807 	bl	800167e <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl>:

int32_t KeyaLKTechDriver::UnwrapEncoder(uint16_t in, int32_t *prev)
{
 800167e:	b480      	push	{r7}
 8001680:	b089      	sub	sp, #36	; 0x24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	460b      	mov	r3, r1
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	817b      	strh	r3, [r7, #10]
    int32_t c32 = (int32_t)in - LK_ENC_HALF_PERIOD;
 800168c:	897b      	ldrh	r3, [r7, #10]
 800168e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001692:	61bb      	str	r3, [r7, #24]
    int32_t dif = (c32-*prev);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]

    int32_t mod_dif = ((dif + LK_ENC_HALF_PERIOD) % LK_ENC_ONE_PERIOD) - LK_ENC_HALF_PERIOD;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016a4:	425a      	negs	r2, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	b292      	uxth	r2, r2
 80016aa:	bf58      	it	pl
 80016ac:	4253      	negpl	r3, r2
 80016ae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80016b2:	61fb      	str	r3, [r7, #28]
    if(dif < -LK_ENC_HALF_PERIOD) {
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80016ba:	da03      	bge.n	80016c4 <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl+0x46>
        mod_dif += LK_ENC_ONE_PERIOD;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80016c2:	61fb      	str	r3, [r7, #28]
    }
    int32_t unwrapped = *prev + mod_dif;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
    *prev = unwrapped;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	601a      	str	r2, [r3, #0]

    return unwrapped + LK_ENC_HALF_PERIOD;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_ZN5ServoC1EP17TIM_HandleTypeDefm>:
 *      Author: user
 */

#include "Servo.h"

Servo::Servo(TIM_HandleTypeDef *htim, uint32_t timChannel)
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
{
	_htim = htim;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	601a      	str	r2, [r3, #0]
	_timChannel = timChannel;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	605a      	str	r2, [r3, #4]
}
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_ZN5Servo8setAngleEl>:
uint8_t Servo::setAngle(int32_t angle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(_htim, _timChannel);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f002 ff3b 	bl	800459c <HAL_TIM_PWM_Start>
	TIM3->CCR1 = Servo::map(angle, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_W, SERVO_MAX_W);
 8001726:	f240 7399 	movw	r3, #1945	; 0x799
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001736:	2200      	movs	r2, #0
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f81a 	bl	8001774 <_ZN5Servo3mapEiiiii>
 8001740:	4602      	mov	r2, r0
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <_ZN5Servo8setAngleEl+0x64>)
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
	//uint32_t comp = Servo::map(angle, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_W, SERVO_MAX_W);
	//__HAL_TIM_SET_COMPARE(_htim, _timChannel, comp);
	_angle = angle;
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
	osDelay(800);
 800174c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001750:	f005 fa40 	bl	8006bd4 <osDelay>
	HAL_TIM_PWM_Stop(_htim, _timChannel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f002 ffe4 	bl	800472c <HAL_TIM_PWM_Stop>
	return 1;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40000400 	.word	0x40000400

08001774 <_ZN5Servo3mapEiiiii>:
	HAL_TIM_PWM_Stop(_htim, _timChannel);
	return 1;
}

int Servo::map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	69f9      	ldr	r1, [r7, #28]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	1a8a      	subs	r2, r1, r2
 800178e:	fb03 f202 	mul.w	r2, r3, r2
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1acb      	subs	r3, r1, r3
 8001798:	fb92 f2f3 	sdiv	r2, r2, r3
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	4413      	add	r3, r2
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db12      	blt.n	8001820 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	490a      	ldr	r1, [pc, #40]	; (800182c <__NVIC_DisableIRQ+0x44>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	3320      	adds	r3, #32
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001814:	f3bf 8f4f 	dsb	sy
}
 8001818:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181a:	f3bf 8f6f 	isb	sy
}
 800181e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100

08001830 <StartCanTask>:
extern KeyaLKTechDriver DriverLR;

extern KeyaLKTechDriver *mdrivers[DRIVERS_QUANT];


void StartCanTask(void *argument) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		static uint32_t err_count = 0;
		if (NewCanMsg == CAN_GET_MSG_OK) {
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <StartCanTask+0x5c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <StartCanTask+0x30>
			NewCanMsg = CAN_GET_MSG_WAIT;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <StartCanTask+0x5c>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
			err_count = 0;
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <StartCanTask+0x60>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
			//globData.error.driver_conn = 0;
			CanMsgRead(&canDataRecv);
 8001858:	480e      	ldr	r0, [pc, #56]	; (8001894 <StartCanTask+0x64>)
 800185a:	f000 f81d 	bl	8001898 <CanMsgRead>
 800185e:	e011      	b.n	8001884 <StartCanTask+0x54>
		}
		else if (NewCanMsg == CAN_GET_MSG_ERROR) {
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <StartCanTask+0x5c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <StartCanTask+0x54>
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "CAN error\r\n", 11, 100);
			err_count++;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <StartCanTask+0x60>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <StartCanTask+0x60>)
 800187c:	6013      	str	r3, [r2, #0]
				globData.drv_cpu_temp = 0;
				globData.motor1_temp = 0;
				globData.motor2_temp = 0;
				globData.voltage = 0;*/
			}
			NewCanMsg = CAN_GET_MSG_WAIT;
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <StartCanTask+0x5c>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8001884:	2001      	movs	r0, #1
 8001886:	f005 f9a5 	bl	8006bd4 <osDelay>
	}
 800188a:	e7d5      	b.n	8001838 <StartCanTask+0x8>
 800188c:	20001c74 	.word	0x20001c74
 8001890:	20001ca4 	.word	0x20001ca4
 8001894:	20001c9c 	.word	0x20001c9c

08001898 <CanMsgRead>:
}

uint8_t CanMsgRead(CanDataRecvTypeDef *canDataRecv) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

	NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80018a0:	2014      	movs	r0, #20
 80018a2:	f7ff ffa1 	bl	80017e8 <__NVIC_DisableIRQ>
	if (RxHeader.IDE == CAN_STD_ID)
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <CanMsgRead+0x8c>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d132      	bne.n	8001914 <CanMsgRead+0x7c>
	{
		for (int i=0; i<DRIVERS_QUANT; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	dc2d      	bgt.n	8001914 <CanMsgRead+0x7c>
		{
			if (RxHeader.StdId == mdrivers[i]->getId() && RxData[0] == 0x9C) {
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <CanMsgRead+0x8c>)
 80018ba:	681c      	ldr	r4, [r3, #0]
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <CanMsgRead+0x90>)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fea3 	bl	8001610 <_ZN16KeyaLKTechDriver5getIdEv>
 80018ca:	4603      	mov	r3, r0
 80018cc:	429c      	cmp	r4, r3
 80018ce:	d105      	bne.n	80018dc <CanMsgRead+0x44>
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <CanMsgRead+0x94>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b9c      	cmp	r3, #156	; 0x9c
 80018d6:	d101      	bne.n	80018dc <CanMsgRead+0x44>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <CanMsgRead+0x46>
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d014      	beq.n	800190c <CanMsgRead+0x74>
				mdrivers[i]->setEnc(*(uint16_t*) &RxData[6]);
 80018e2:	4a11      	ldr	r2, [pc, #68]	; (8001928 <CanMsgRead+0x90>)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	4a11      	ldr	r2, [pc, #68]	; (8001930 <CanMsgRead+0x98>)
 80018ec:	8812      	ldrh	r2, [r2, #0]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff feb0 	bl	8001656 <_ZN16KeyaLKTechDriver6setEncEl>
				mdrivers[i]->setTemp(RxData[1]);
 80018f6:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <CanMsgRead+0x90>)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <CanMsgRead+0x94>)
 8001900:	7852      	ldrb	r2, [r2, #1]
 8001902:	b252      	sxtb	r2, r2
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fe95 	bl	8001636 <_ZN16KeyaLKTechDriver7setTempEa>
		for (int i=0; i<DRIVERS_QUANT; i++)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e7ce      	b.n	80018b2 <CanMsgRead+0x1a>


	//HAL_UART_Transmit(&WIFI_UART, (uint8_t*) "get\r\n", 5, 100);
	//HAL_UART_Transmit(&WIFI_UART, RxData, 8, 100);

	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001914:	2014      	movs	r0, #20
 8001916:	f7ff ff49 	bl	80017ac <__NVIC_EnableIRQ>
	return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	20001c78 	.word	0x20001c78
 8001928:	20001d10 	.word	0x20001d10
 800192c:	20001c94 	.word	0x20001c94
 8001930:	20001c9a 	.word	0x20001c9a

08001934 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
	return 1;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fdfc 	bl	8002540 <HAL_CAN_GetRxMessage>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf14      	ite	ne
 800194e:	2301      	movne	r3, #1
 8001950:	2300      	moveq	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		Error_Handler();
 8001958:	f7ff f94c 	bl	8000bf4 <Error_Handler>
	}
	NewCanMsg = CAN_GET_MSG_OK;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20001c94 	.word	0x20001c94
 8001970:	20001c78 	.word	0x20001c78
 8001974:	20001c74 	.word	0x20001c74

08001978 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	NewCanMsg = CAN_GET_MSG_ERROR;
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <HAL_CAN_ErrorCallback+0x1c>)
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20001c74 	.word	0x20001c74

08001998 <StartCanDriversTask>:
KeyaLKTechDriver DriverFB(0x140 + DRIVER1_LKTECH_ID);
KeyaLKTechDriver DriverLR(0x140 + DRIVER2_LKTECH_ID);
KeyaLKTechDriver *mdrivers[DRIVERS_QUANT];

void StartCanDriversTask(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	mdrivers[0] = &DriverFB;
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <StartCanDriversTask+0x90>)
 80019a2:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <StartCanDriversTask+0x94>)
 80019a4:	601a      	str	r2, [r3, #0]
	mdrivers[1] = &DriverLR;
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <StartCanDriversTask+0x90>)
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <StartCanDriversTask+0x98>)
 80019aa:	605a      	str	r2, [r3, #4]
	mdrivers[2] = &DriverFB;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <StartCanDriversTask+0x90>)
 80019ae:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <StartCanDriversTask+0x94>)
 80019b0:	609a      	str	r2, [r3, #8]
	mdrivers[3] = &DriverFB;
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <StartCanDriversTask+0x90>)
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <StartCanDriversTask+0x94>)
 80019b6:	60da      	str	r2, [r3, #12]

	Servo servo1(&htim3, TIM_CHANNEL_1);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2200      	movs	r2, #0
 80019be:	491d      	ldr	r1, [pc, #116]	; (8001a34 <StartCanDriversTask+0x9c>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe90 	bl	80016e6 <_ZN5ServoC1EP17TIM_HandleTypeDefm>

	DriversObjectInit(mdrivers, DRIVERS_QUANT);
 80019c6:	2104      	movs	r1, #4
 80019c8:	4817      	ldr	r0, [pc, #92]	; (8001a28 <StartCanDriversTask+0x90>)
 80019ca:	f7ff fddc 	bl	8001586 <_Z17DriversObjectInitPP16KeyaLKTechDriverm>
	osDelay(1000);
 80019ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d2:	f005 f8ff 	bl	8006bd4 <osDelay>
		DriverFB.readEnc();
		osDelay(500);
		globData.LKEncoder = DriverFB.getPos();
		globData.LKTemp = DriverFB.getTemp();
		*/
		command =  (MOVE_COMM)contrlMsg.comm;
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <StartCanDriversTask+0xa0>)
 80019d8:	78db      	ldrb	r3, [r3, #3]
 80019da:	77fb      	strb	r3, [r7, #31]
		if (command != MOVE_NONE)
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01d      	beq.n	8001a1e <StartCanDriversTask+0x86>
		{
			if (command == MOVE_SERVO)
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d11a      	bne.n	8001a1e <StartCanDriversTask+0x86>
			{
				if (contrlMsg.pos_servo == 1)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <StartCanDriversTask+0xa0>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d109      	bne.n	8001a04 <StartCanDriversTask+0x6c>
				{
					servo1.setAngle(0);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fe88 	bl	800170c <_ZN5Servo8setAngleEl>
					contrlMsg.comm = 0;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <StartCanDriversTask+0xa0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	70da      	strb	r2, [r3, #3]
 8001a02:	e00c      	b.n	8001a1e <StartCanDriversTask+0x86>
				}
				else if (contrlMsg.pos_servo == 2)
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <StartCanDriversTask+0xa0>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d108      	bne.n	8001a1e <StartCanDriversTask+0x86>
				{
					servo1.setAngle(180);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	21b4      	movs	r1, #180	; 0xb4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fe7a 	bl	800170c <_ZN5Servo8setAngleEl>
					contrlMsg.comm = 0;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <StartCanDriversTask+0xa0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	70da      	strb	r2, [r3, #3]
				}
			}
		}
		osDelay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f005 f8d8 	bl	8006bd4 <osDelay>
		command =  (MOVE_COMM)contrlMsg.comm;
 8001a24:	e7d7      	b.n	80019d6 <StartCanDriversTask+0x3e>
 8001a26:	bf00      	nop
 8001a28:	20001d10 	.word	0x20001d10
 8001a2c:	20001ca8 	.word	0x20001ca8
 8001a30:	20001cdc 	.word	0x20001cdc
 8001a34:	200019f8 	.word	0x200019f8
 8001a38:	2000008c 	.word	0x2000008c

08001a3c <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d10e      	bne.n	8001a6a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d109      	bne.n	8001a6a <_Z41__static_initialization_and_destruction_0ii+0x2e>
KeyaLKTechDriver DriverFB(0x140 + DRIVER1_LKTECH_ID);
 8001a56:	f240 1141 	movw	r1, #321	; 0x141
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001a5c:	f7ff fdc8 	bl	80015f0 <_ZN16KeyaLKTechDriverC1Em>
KeyaLKTechDriver DriverLR(0x140 + DRIVER2_LKTECH_ID);
 8001a60:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001a66:	f7ff fdc3 	bl	80015f0 <_ZN16KeyaLKTechDriverC1Em>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20001ca8 	.word	0x20001ca8
 8001a78:	20001cdc 	.word	0x20001cdc

08001a7c <_GLOBAL__sub_I_DriverFB>:
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7ff ffd9 	bl	8001a3c <_Z41__static_initialization_and_destruction_0ii>
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <StartInputsTask>:
extern TIM_HandleTypeDef htim4;
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartInputsTask(void *argument)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8001a94:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <StartInputsTask+0x188>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <StartInputsTask+0x20>
 8001aa0:	4a5d      	ldr	r2, [pc, #372]	; (8001c18 <StartInputsTask+0x18c>)
 8001aa2:	7f13      	ldrb	r3, [r2, #28]
 8001aa4:	f36f 0300 	bfc	r3, #0, #1
 8001aa8:	7713      	strb	r3, [r2, #28]
 8001aaa:	e004      	b.n	8001ab6 <StartInputsTask+0x2a>
 8001aac:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <StartInputsTask+0x18c>)
 8001aae:	7f13      	ldrb	r3, [r2, #28]
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	7713      	strb	r3, [r2, #28]
		IN_X03 ? (globData.sens.limit_sw2 = 0) : (globData.sens.limit_sw2 = 1);
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <StartInputsTask+0x190>)
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <StartInputsTask+0x42>
 8001ac2:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <StartInputsTask+0x18c>)
 8001ac4:	7f13      	ldrb	r3, [r2, #28]
 8001ac6:	f36f 0341 	bfc	r3, #1, #1
 8001aca:	7713      	strb	r3, [r2, #28]
 8001acc:	e004      	b.n	8001ad8 <StartInputsTask+0x4c>
 8001ace:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <StartInputsTask+0x18c>)
 8001ad0:	7f13      	ldrb	r3, [r2, #28]
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	7713      	strb	r3, [r2, #28]
		IN_X04 ? (globData.sens.button_manual_mode = 0) : (globData.sens.button_manual_mode = 1);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <StartInputsTask+0x190>)
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <StartInputsTask+0x64>
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	; (8001c18 <StartInputsTask+0x18c>)
 8001ae6:	7f13      	ldrb	r3, [r2, #28]
 8001ae8:	f36f 0382 	bfc	r3, #2, #1
 8001aec:	7713      	strb	r3, [r2, #28]
 8001aee:	e004      	b.n	8001afa <StartInputsTask+0x6e>
 8001af0:	4a49      	ldr	r2, [pc, #292]	; (8001c18 <StartInputsTask+0x18c>)
 8001af2:	7f13      	ldrb	r3, [r2, #28]
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	7713      	strb	r3, [r2, #28]
		IN_X05 ? (globData.sens.button_motor1_forw = 0) : (globData.sens.button_motor1_forw= 1);
 8001afa:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <StartInputsTask+0x190>)
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <StartInputsTask+0x86>
 8001b06:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <StartInputsTask+0x18c>)
 8001b08:	7f13      	ldrb	r3, [r2, #28]
 8001b0a:	f36f 03c3 	bfc	r3, #3, #1
 8001b0e:	7713      	strb	r3, [r2, #28]
 8001b10:	e004      	b.n	8001b1c <StartInputsTask+0x90>
 8001b12:	4a41      	ldr	r2, [pc, #260]	; (8001c18 <StartInputsTask+0x18c>)
 8001b14:	7f13      	ldrb	r3, [r2, #28]
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	7713      	strb	r3, [r2, #28]
		IN_X06 ? (globData.sens.button_motor1_back= 0) : (globData.sens.button_motor1_back = 1);
 8001b1c:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <StartInputsTask+0x190>)
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <StartInputsTask+0xa8>
 8001b28:	4a3b      	ldr	r2, [pc, #236]	; (8001c18 <StartInputsTask+0x18c>)
 8001b2a:	7f13      	ldrb	r3, [r2, #28]
 8001b2c:	f36f 1304 	bfc	r3, #4, #1
 8001b30:	7713      	strb	r3, [r2, #28]
 8001b32:	e004      	b.n	8001b3e <StartInputsTask+0xb2>
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <StartInputsTask+0x18c>)
 8001b36:	7f13      	ldrb	r3, [r2, #28]
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	7713      	strb	r3, [r2, #28]
		IN_X07 ? (globData.sens.button_motor2_forw = 0) : (globData.sens.button_motor2_forw = 1);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <StartInputsTask+0x190>)
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <StartInputsTask+0xca>
 8001b4a:	4a33      	ldr	r2, [pc, #204]	; (8001c18 <StartInputsTask+0x18c>)
 8001b4c:	7f13      	ldrb	r3, [r2, #28]
 8001b4e:	f36f 1345 	bfc	r3, #5, #1
 8001b52:	7713      	strb	r3, [r2, #28]
 8001b54:	e004      	b.n	8001b60 <StartInputsTask+0xd4>
 8001b56:	4a30      	ldr	r2, [pc, #192]	; (8001c18 <StartInputsTask+0x18c>)
 8001b58:	7f13      	ldrb	r3, [r2, #28]
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	7713      	strb	r3, [r2, #28]
		IN_X08 ? (globData.sens.button_motor2_back = 0) : (globData.sens.button_motor2_back = 1);
 8001b60:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <StartInputsTask+0x190>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <StartInputsTask+0xec>
 8001b6c:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <StartInputsTask+0x18c>)
 8001b6e:	7f13      	ldrb	r3, [r2, #28]
 8001b70:	f36f 1386 	bfc	r3, #6, #1
 8001b74:	7713      	strb	r3, [r2, #28]
 8001b76:	e004      	b.n	8001b82 <StartInputsTask+0xf6>
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <StartInputsTask+0x18c>)
 8001b7a:	7f13      	ldrb	r3, [r2, #28]
 8001b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b80:	7713      	strb	r3, [r2, #28]
		IN_X09 ? (globData.sens.button_start = 0) : (globData.sens.button_start = 1);
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <StartInputsTask+0x194>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <StartInputsTask+0x10e>
 8001b8e:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <StartInputsTask+0x18c>)
 8001b90:	7f13      	ldrb	r3, [r2, #28]
 8001b92:	f36f 13c7 	bfc	r3, #7, #1
 8001b96:	7713      	strb	r3, [r2, #28]
 8001b98:	e004      	b.n	8001ba4 <StartInputsTask+0x118>
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <StartInputsTask+0x18c>)
 8001b9c:	7f13      	ldrb	r3, [r2, #28]
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba2:	7713      	strb	r3, [r2, #28]
		IN_X10 ? (globData.sens.button_pause = 0) : (globData.sens.button_pause = 1);
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <StartInputsTask+0x194>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <StartInputsTask+0x130>
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <StartInputsTask+0x18c>)
 8001bb2:	7f53      	ldrb	r3, [r2, #29]
 8001bb4:	f36f 0300 	bfc	r3, #0, #1
 8001bb8:	7753      	strb	r3, [r2, #29]
 8001bba:	e004      	b.n	8001bc6 <StartInputsTask+0x13a>
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <StartInputsTask+0x18c>)
 8001bbe:	7f53      	ldrb	r3, [r2, #29]
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	7753      	strb	r3, [r2, #29]
		IN_X11 ? (globData.sens.button_stop = 0) : (globData.sens.button_stop = 1);
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <StartInputsTask+0x194>)
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <StartInputsTask+0x152>
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <StartInputsTask+0x18c>)
 8001bd4:	7f53      	ldrb	r3, [r2, #29]
 8001bd6:	f36f 0341 	bfc	r3, #1, #1
 8001bda:	7753      	strb	r3, [r2, #29]
 8001bdc:	e004      	b.n	8001be8 <StartInputsTask+0x15c>
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <StartInputsTask+0x18c>)
 8001be0:	7f53      	ldrb	r3, [r2, #29]
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	7753      	strb	r3, [r2, #29]
		IN_X12 ? (globData.sens.button8 = 0) : (globData.sens.button8 = 1);
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <StartInputsTask+0x198>)
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <StartInputsTask+0x174>
 8001bf4:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <StartInputsTask+0x18c>)
 8001bf6:	7f53      	ldrb	r3, [r2, #29]
 8001bf8:	f36f 0382 	bfc	r3, #2, #1
 8001bfc:	7753      	strb	r3, [r2, #29]
 8001bfe:	e004      	b.n	8001c0a <StartInputsTask+0x17e>
 8001c00:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <StartInputsTask+0x18c>)
 8001c02:	7f53      	ldrb	r3, [r2, #29]
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	7753      	strb	r3, [r2, #29]
		osDelay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f004 ffe2 	bl	8006bd4 <osDelay>
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8001c10:	e740      	b.n	8001a94 <StartInputsTask+0x8>
 8001c12:	bf00      	nop
 8001c14:	40020800 	.word	0x40020800
 8001c18:	20000054 	.word	0x20000054
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020c00 	.word	0x40020c00

08001c28 <StartMissionsTask>:
#include "mission.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartMissionsTask(void *argument)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

	for(;;)
 8001c30:	e7fe      	b.n	8001c30 <StartMissionsTask+0x8>
	...

08001c34 <StartOutputsTask>:

//extern IWDG_HandleTypeDef hiwdg;


void StartOutputsTask(void *argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <StartOutputsTask+0x28>)
 8001c3e:	f001 feb8 	bl	80039b2 <HAL_IWDG_Refresh>
		SetOutputs();
 8001c42:	f000 f80f 	bl	8001c64 <SetOutputs>
		if (globData.LEDB) LedBlink();
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <StartOutputsTask+0x2c>)
 8001c48:	795b      	ldrb	r3, [r3, #5]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <StartOutputsTask+0x1e>
 8001c4e:	f000 f83b 	bl	8001cc8 <LedBlink>
		osDelay(5);
 8001c52:	2005      	movs	r0, #5
 8001c54:	f004 ffbe 	bl	8006bd4 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 8001c58:	e7f0      	b.n	8001c3c <StartOutputsTask+0x8>
 8001c5a:	bf00      	nop
 8001c5c:	200019a4 	.word	0x200019a4
 8001c60:	20000054 	.word	0x20000054

08001c64 <SetOutputs>:
	}
}

void SetOutputs()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	Y21_ON;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <SetOutputs+0x60>)
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	619a      	str	r2, [r3, #24]
	osDelay(100);
 8001c70:	2064      	movs	r0, #100	; 0x64
 8001c72:	f004 ffaf 	bl	8006bd4 <osDelay>
	Y22_ON;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <SetOutputs+0x60>)
 8001c78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c7c:	619a      	str	r2, [r3, #24]
	osDelay(20);
 8001c7e:	2014      	movs	r0, #20
 8001c80:	f004 ffa8 	bl	8006bd4 <osDelay>
	Y21_OFF;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <SetOutputs+0x60>)
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	619a      	str	r2, [r3, #24]
	osDelay(100);
 8001c8c:	2064      	movs	r0, #100	; 0x64
 8001c8e:	f004 ffa1 	bl	8006bd4 <osDelay>
	Y23_ON;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <SetOutputs+0x60>)
 8001c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c98:	619a      	str	r2, [r3, #24]
	osDelay(20);
 8001c9a:	2014      	movs	r0, #20
 8001c9c:	f004 ff9a 	bl	8006bd4 <osDelay>
	Y22_OFF;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <SetOutputs+0x60>)
 8001ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca6:	619a      	str	r2, [r3, #24]
	osDelay(100);
 8001ca8:	2064      	movs	r0, #100	; 0x64
 8001caa:	f004 ff93 	bl	8006bd4 <osDelay>
	Y23_OFF;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SetOutputs+0x60>)
 8001cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cb4:	619a      	str	r2, [r3, #24]
	osDelay(300);
 8001cb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001cba:	f004 ff8b 	bl	8006bd4 <osDelay>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020c00 	.word	0x40020c00

08001cc8 <LedBlink>:

void LedBlink() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
			3   //LEDB_ERROR
	};

	static int32_t ledb_active_time = 0;
	static int32_t ledb_repeats = 0;
	ledb_repeats = ledb_rep[globData.LEDB];
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <LedBlink+0x70>)
 8001cd0:	795b      	ldrb	r3, [r3, #5]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <LedBlink+0x74>)
 8001cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <LedBlink+0x78>)
 8001cde:	601a      	str	r2, [r3, #0]
	ledb_active_time = ledb_time[globData.LEDB];
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <LedBlink+0x70>)
 8001ce2:	795b      	ldrb	r3, [r3, #5]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <LedBlink+0x7c>)
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <LedBlink+0x80>)
 8001cf0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ledb_repeats; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <LedBlink+0x78>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	da14      	bge.n	8001d2a <LedBlink+0x62>
	{
		osDelay(ledb_active_time);
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <LedBlink+0x80>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f004 ff65 	bl	8006bd4 <osDelay>
		Y05_ON;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <LedBlink+0x84>)
 8001d0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d10:	619a      	str	r2, [r3, #24]
		osDelay(ledb_active_time);
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <LedBlink+0x80>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 ff5c 	bl	8006bd4 <osDelay>
		Y05_OFF;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <LedBlink+0x84>)
 8001d1e:	2210      	movs	r2, #16
 8001d20:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < ledb_repeats; i++)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3301      	adds	r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	e7e5      	b.n	8001cf6 <LedBlink+0x2e>
	}
	globData.LEDB = 0;
 8001d2a:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <LedBlink+0x70>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	715a      	strb	r2, [r3, #5]
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000054 	.word	0x20000054
 8001d3c:	08009718 	.word	0x08009718
 8001d40:	20001d24 	.word	0x20001d24
 8001d44:	08009700 	.word	0x08009700
 8001d48:	20001d20 	.word	0x20001d20
 8001d4c:	40020800 	.word	0x40020800

08001d50 <StartServoTask>:
#include "stdio.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartServoTask(void *argument)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	
	for(;;)
	{
		osDelay(1000);
 8001d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5c:	f004 ff3a 	bl	8006bd4 <osDelay>
 8001d60:	e7fa      	b.n	8001d58 <StartServoTask+0x8>
	...

08001d64 <StartUartWiFiTask>:
StatusMsgTypeDef statusMsg;
JobMsgTypeDef jobMsg;
StmConfigTypeDef stmConf;

void StartUartWiFiTask(void *argument)
{
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	//HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
	//__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
	//ConfigInit();
	for(;;)
	{
		if (new_wifi_data && wifi_uart_buff[0] == START_MSG0 && wifi_uart_buff[1] == START_MSG1)
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <StartUartWiFiTask+0x84>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d034      	beq.n	8001dde <StartUartWiFiTask+0x7a>
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <StartUartWiFiTask+0x88>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b84      	cmp	r3, #132	; 0x84
 8001d7a:	d130      	bne.n	8001dde <StartUartWiFiTask+0x7a>
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <StartUartWiFiTask+0x88>)
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	2b53      	cmp	r3, #83	; 0x53
 8001d82:	d12c      	bne.n	8001dde <StartUartWiFiTask+0x7a>
		{
			enum MSG_ID message_id = (MSG_ID)wifi_uart_buff[2];
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <StartUartWiFiTask+0x88>)
 8001d86:	789b      	ldrb	r3, [r3, #2]
 8001d88:	73fb      	strb	r3, [r7, #15]
			if (message_id == MSG_CONTROL)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d11e      	bne.n	8001dce <StartUartWiFiTask+0x6a>
			{
				if (wifi_uart_buff[sizeof(ContrlMsgTypeDef)-1] != calculateCS(wifi_uart_buff, sizeof(ContrlMsgTypeDef)-1))
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <StartUartWiFiTask+0x88>)
 8001d92:	7ddc      	ldrb	r4, [r3, #23]
 8001d94:	2117      	movs	r1, #23
 8001d96:	4815      	ldr	r0, [pc, #84]	; (8001dec <StartUartWiFiTask+0x88>)
 8001d98:	f000 f82e 	bl	8001df8 <calculateCS>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	429c      	cmp	r4, r3
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <StartUartWiFiTask+0x56>
				{
					globData.cs_err++;
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <StartUartWiFiTask+0x8c>)
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <StartUartWiFiTask+0x8c>)
 8001db6:	711a      	strb	r2, [r3, #4]
 8001db8:	e009      	b.n	8001dce <StartUartWiFiTask+0x6a>
				}
				else
				{
					memcpy(&contrlMsg, wifi_uart_buff, sizeof(ContrlMsgTypeDef));
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <StartUartWiFiTask+0x90>)
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <StartUartWiFiTask+0x88>)
 8001dbe:	4614      	mov	r4, r2
 8001dc0:	461d      	mov	r5, r3
 8001dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dca:	e884 0003 	stmia.w	r4, {r0, r1}
					//SetJob();
				}
			}
			new_wifi_data = 0;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <StartUartWiFiTask+0x84>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
			memset(wifi_uart_buff, 0, 100);
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <StartUartWiFiTask+0x88>)
 8001dda:	f007 fba1 	bl	8009520 <memset>
		//globData.LKEncoder++;
		//uint8_t str[30];
		//sprintf((char*)str, (char*)"e: %d, t: %d\n\r", globData.LKEncoder, globData.LKTemp);
		//HAL_UART_Transmit(&huart1, str, strlen((char *)str), 100);
		//HAL_UART_Transmit(&WIFI_UART, (uint8_t*)"WIFI ok", 7, 100);
		osDelay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f004 fef8 	bl	8006bd4 <osDelay>
	}
 8001de4:	e7c2      	b.n	8001d6c <StartUartWiFiTask+0x8>
 8001de6:	bf00      	nop
 8001de8:	20001d28 	.word	0x20001d28
 8001dec:	20001df4 	.word	0x20001df4
 8001df0:	20000054 	.word	0x20000054
 8001df4:	2000008c 	.word	0x2000008c

08001df8 <calculateCS>:
	stmConf.termConfig = minibotConfig;
	stmConf.CS = calculateCS((uint8_t *)&stmConf, sizeof(StmConfigTypeDef)-1);
	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&stmConf, sizeof(StmConfigTypeDef), 100);
}

uint8_t calculateCS(uint8_t *msg, int msg_size) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint8_t cs = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	da0a      	bge.n	8001e28 <calculateCS+0x30>
  {
    cs+=msg[i];
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e7f0      	b.n	8001e0a <calculateCS+0x12>
  }
  return cs;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_UART_ErrorCallback>:
	globData.LEDB = LEDB_FLASH_OK;
	return 0;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(&huart1);
 8001e40:	4842      	ldr	r0, [pc, #264]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001e42:	f003 ffcf 	bl	8005de4 <HAL_UART_GetError>
 8001e46:	61f8      	str	r0, [r7, #28]
	switch (er) {
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d863      	bhi.n	8001f18 <HAL_UART_ErrorCallback+0xe0>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <HAL_UART_ErrorCallback+0x20>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e99 	.word	0x08001e99
 8001e5c:	08001eb7 	.word	0x08001eb7
 8001e60:	08001f19 	.word	0x08001f19
 8001e64:	08001ed5 	.word	0x08001ed5
 8001e68:	08001f19 	.word	0x08001f19
 8001e6c:	08001f19 	.word	0x08001f19
 8001e70:	08001f19 	.word	0x08001f19
 8001e74:	08001ef3 	.word	0x08001ef3
 8001e78:	08001f19 	.word	0x08001f19
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f19 	.word	0x08001f19
 8001e84:	08001f19 	.word	0x08001f19
 8001e88:	08001f19 	.word	0x08001f19
 8001e8c:	08001f19 	.word	0x08001f19
 8001e90:	08001f19 	.word	0x08001f19
 8001e94:	08001f11 	.word	0x08001f11
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(&huart1);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001eb4:	e031      	b.n	8001f1a <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(&huart1);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001ed2:	e022      	b.n	8001f1a <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(&huart1);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001ef0:	e013      	b.n	8001f1a <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001f0e:	e004      	b.n	8001f1a <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001f16:	e000      	b.n	8001f1a <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 8001f18:	bf00      	nop
	}
	if (huart->Instance == WIFI_UART_Ins) {
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_UART_ErrorCallback+0x118>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d10f      	bne.n	8001f44 <HAL_UART_ErrorCallback+0x10c>
		new_wifi_data = 1;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_UART_ErrorCallback+0x11c>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff,
 8001f2a:	2264      	movs	r2, #100	; 0x64
 8001f2c:	490a      	ldr	r1, [pc, #40]	; (8001f58 <HAL_UART_ErrorCallback+0x120>)
 8001f2e:	4807      	ldr	r0, [pc, #28]	; (8001f4c <HAL_UART_ErrorCallback+0x114>)
 8001f30:	f003 fc47 	bl	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA>
				sizeof(wifi_uart_buff));
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_UART_ErrorCallback+0x124>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_UART_ErrorCallback+0x124>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0208 	bic.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
	}
}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20001a88 	.word	0x20001a88
 8001f50:	40011000 	.word	0x40011000
 8001f54:	20001d28 	.word	0x20001d28
 8001f58:	20001df4 	.word	0x20001df4
 8001f5c:	20001b54 	.word	0x20001b54

08001f60 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == WIFI_UART_Ins) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_UARTEx_RxEventCallback+0x98>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d110      	bne.n	8001f98 <HAL_UARTEx_RxEventCallback+0x38>
		new_wifi_data = 1;
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_UARTEx_RxEventCallback+0x9c>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8001f7c:	2264      	movs	r2, #100	; 0x64
 8001f7e:	4920      	ldr	r1, [pc, #128]	; (8002000 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001f80:	4820      	ldr	r0, [pc, #128]	; (8002004 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001f82:	f003 fc1e 	bl	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
	else if (huart->Instance == RC_UART_Ins) {
		new_remote_data = 1;
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
	}
}
 8001f96:	e02a      	b.n	8001fee <HAL_UARTEx_RxEventCallback+0x8e>
	else if (huart->Instance == BMS_UART_Ins) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1b      	ldr	r2, [pc, #108]	; (800200c <HAL_UARTEx_RxEventCallback+0xac>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d110      	bne.n	8001fc4 <HAL_UARTEx_RxEventCallback+0x64>
		new_bms_data = 1;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 8001fa8:	2264      	movs	r2, #100	; 0x64
 8001faa:	491a      	ldr	r1, [pc, #104]	; (8002014 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001fac:	481a      	ldr	r0, [pc, #104]	; (8002018 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001fae:	f003 fc08 	bl	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	e014      	b.n	8001fee <HAL_UARTEx_RxEventCallback+0x8e>
	else if (huart->Instance == RC_UART_Ins) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a15      	ldr	r2, [pc, #84]	; (8002020 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10f      	bne.n	8001fee <HAL_UARTEx_RxEventCallback+0x8e>
		new_remote_data = 1;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 8001fd4:	2264      	movs	r2, #100	; 0x64
 8001fd6:	4914      	ldr	r1, [pc, #80]	; (8002028 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001fd8:	4814      	ldr	r0, [pc, #80]	; (800202c <HAL_UARTEx_RxEventCallback+0xcc>)
 8001fda:	f003 fbf2 	bl	80057c2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	20001d28 	.word	0x20001d28
 8002000:	20001df4 	.word	0x20001df4
 8002004:	20001a88 	.word	0x20001a88
 8002008:	20001b54 	.word	0x20001b54
 800200c:	40004400 	.word	0x40004400
 8002010:	20001d2a 	.word	0x20001d2a
 8002014:	20001d90 	.word	0x20001d90
 8002018:	20001acc 	.word	0x20001acc
 800201c:	20001bb4 	.word	0x20001bb4
 8002020:	40004800 	.word	0x40004800
 8002024:	20001d29 	.word	0x20001d29
 8002028:	20001d2c 	.word	0x20001d2c
 800202c:	20001b10 	.word	0x20001b10
 8002030:	20001c14 	.word	0x20001c14

08002034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_Init+0x40>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_Init+0x40>)
 800204a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_Init+0x40>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 fe7a 	bl	8002d56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002062:	200f      	movs	r0, #15
 8002064:	f7fe fdf8 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002068:	f7fe fdca 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023c00 	.word	0x40023c00

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008
 800209c:	20001e58 	.word	0x20001e58

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20001e58 	.word	0x20001e58

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_Delay+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffde 	bl	80020a0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
  {
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000008 	.word	0x20000008

08002100 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0ed      	b.n	80022ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fa40 	bl	80005a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002134:	f7ff ffb4 	bl	80020a0 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213a:	e012      	b.n	8002162 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800213c:	f7ff ffb0 	bl	80020a0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b0a      	cmp	r3, #10
 8002148:	d90b      	bls.n	8002162 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2205      	movs	r2, #5
 800215a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0c5      	b.n	80022ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0e5      	beq.n	800213c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0202 	bic.w	r2, r2, #2
 800217e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff ff8e 	bl	80020a0 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002186:	e012      	b.n	80021ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002188:	f7ff ff8a 	bl	80020a0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d90b      	bls.n	80021ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2205      	movs	r2, #5
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e09f      	b.n	80022ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e5      	bne.n	8002188 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e1b      	ldrb	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7e5b      	ldrb	r3, [r3, #25]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e007      	b.n	8002210 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e9b      	ldrb	r3, [r3, #26]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d108      	bne.n	800222a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e007      	b.n	800223a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0220 	bic.w	r2, r2, #32
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7edb      	ldrb	r3, [r3, #27]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0210 	bic.w	r2, r2, #16
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e007      	b.n	8002264 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0210 	orr.w	r2, r2, #16
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7f1b      	ldrb	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d108      	bne.n	800227e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0208 	orr.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7f5b      	ldrb	r3, [r3, #29]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0204 	orr.w	r2, r2, #4
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	ea42 0103 	orr.w	r1, r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <HAL_CAN_ConfigFilter+0x26>
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 80be 	bne.w	800249a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002320:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002338:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	431a      	orrs	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2201      	movs	r2, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	401a      	ands	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d123      	bne.n	80023c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3248      	adds	r2, #72	; 0x48
 80023a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	3348      	adds	r3, #72	; 0x48
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d122      	bne.n	8002416 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3248      	adds	r2, #72	; 0x48
 80023f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800240a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800240c:	6979      	ldr	r1, [r7, #20]
 800240e:	3348      	adds	r3, #72	; 0x48
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002430:	e007      	b.n	8002442 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	431a      	orrs	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800245c:	e007      	b.n	800246e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800248c:	f023 0201 	bic.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e006      	b.n	80024a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40006400 	.word	0x40006400

080024b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d12e      	bne.n	800252a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024e4:	f7ff fddc 	bl	80020a0 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ea:	e012      	b.n	8002512 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ec:	f7ff fdd8 	bl	80020a0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d90b      	bls.n	8002512 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e012      	b.n	8002538 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e5      	bne.n	80024ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e006      	b.n	8002538 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002554:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d003      	beq.n	8002564 <HAL_CAN_GetRxMessage+0x24>
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b02      	cmp	r3, #2
 8002560:	f040 80f3 	bne.w	800274a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10e      	bne.n	8002588 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0e7      	b.n	8002758 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0d8      	b.n	8002758 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	331b      	adds	r3, #27
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	4413      	add	r3, r2
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0204 	and.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10c      	bne.n	80025de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	331b      	adds	r3, #27
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e00b      	b.n	80025f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	331b      	adds	r3, #27
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	08db      	lsrs	r3, r3, #3
 80025ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	331b      	adds	r3, #27
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0202 	and.w	r2, r3, #2
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	331b      	adds	r3, #27
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	4413      	add	r3, r2
 8002618:	3304      	adds	r3, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 020f 	and.w	r2, r3, #15
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	331b      	adds	r3, #27
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4413      	add	r3, r2
 8002630:	3304      	adds	r3, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	331b      	adds	r3, #27
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	b29a      	uxth	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	4413      	add	r3, r2
 800265e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0a1a      	lsrs	r2, r3, #8
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4413      	add	r3, r2
 800268e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0c1a      	lsrs	r2, r3, #16
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	3302      	adds	r3, #2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e1a      	lsrs	r2, r3, #24
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3303      	adds	r3, #3
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3304      	adds	r3, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0a1a      	lsrs	r2, r3, #8
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3305      	adds	r3, #5
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0c1a      	lsrs	r2, r3, #16
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3306      	adds	r3, #6
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e1a      	lsrs	r2, r3, #24
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3307      	adds	r3, #7
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d108      	bne.n	8002736 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0220 	orr.w	r2, r2, #32
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	e007      	b.n	8002746 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0220 	orr.w	r2, r2, #32
 8002744:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e006      	b.n	8002758 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d002      	beq.n	8002782 <HAL_CAN_ActivateNotification+0x1e>
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d109      	bne.n	8002796 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6959      	ldr	r1, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e006      	b.n	80027a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d07c      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d023      	beq.n	8002848 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f983 	bl	8002b1e <HAL_CAN_TxMailbox0CompleteCallback>
 8002818:	e016      	b.n	8002848 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	e00c      	b.n	8002848 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
 8002840:	e002      	b.n	8002848 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f989 	bl	8002b5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d024      	beq.n	800289c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800285a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f963 	bl	8002b32 <HAL_CAN_TxMailbox1CompleteCallback>
 800286c:	e016      	b.n	800289c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	e00c      	b.n	800289c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
 8002894:	e002      	b.n	800289c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f969 	bl	8002b6e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d024      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f943 	bl	8002b46 <HAL_CAN_TxMailbox2CompleteCallback>
 80028c0:	e016      	b.n	80028f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	e00c      	b.n	80028f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	e002      	b.n	80028f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f949 	bl	8002b82 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2210      	movs	r2, #16
 8002912:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2208      	movs	r2, #8
 800292e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f930 	bl	8002b96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fff0 	bl	8001934 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2208      	movs	r2, #8
 8002992:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f912 	bl	8002bbe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8f9 	bl	8002baa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d006      	beq.n	80029da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2210      	movs	r2, #16
 80029d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f8fc 	bl	8002bd2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2208      	movs	r2, #8
 80029f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8f5 	bl	8002be6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d07b      	beq.n	8002afe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d072      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d043      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d03e      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a7e:	2b60      	cmp	r3, #96	; 0x60
 8002a80:	d02b      	beq.n	8002ada <HAL_CAN_IRQHandler+0x32a>
 8002a82:	2b60      	cmp	r3, #96	; 0x60
 8002a84:	d82e      	bhi.n	8002ae4 <HAL_CAN_IRQHandler+0x334>
 8002a86:	2b50      	cmp	r3, #80	; 0x50
 8002a88:	d022      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x320>
 8002a8a:	2b50      	cmp	r3, #80	; 0x50
 8002a8c:	d82a      	bhi.n	8002ae4 <HAL_CAN_IRQHandler+0x334>
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d019      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x316>
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d826      	bhi.n	8002ae4 <HAL_CAN_IRQHandler+0x334>
 8002a96:	2b30      	cmp	r3, #48	; 0x30
 8002a98:	d010      	beq.n	8002abc <HAL_CAN_IRQHandler+0x30c>
 8002a9a:	2b30      	cmp	r3, #48	; 0x30
 8002a9c:	d822      	bhi.n	8002ae4 <HAL_CAN_IRQHandler+0x334>
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d002      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x2f8>
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d005      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002aa6:	e01d      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f043 0308 	orr.w	r3, r3, #8
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab0:	e019      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f043 0310 	orr.w	r3, r3, #16
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aba:	e014      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f043 0320 	orr.w	r3, r3, #32
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ac4:	e00f      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ace:	e00a      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ad8:	e005      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ae2:	e000      	b.n	8002ae6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ae4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002af4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2204      	movs	r2, #4
 8002afc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fe ff31 	bl	8001978 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b16:	bf00      	nop
 8002b18:	3728      	adds	r7, #40	; 0x28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <__NVIC_SetPriorityGrouping>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_EnableIRQ>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0b      	blt.n	8002c8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <__NVIC_EnableIRQ+0x38>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2001      	movs	r0, #1
 8002c82:	fa00 f202 	lsl.w	r2, r0, r2
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	; (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	; (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ff4c 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7e:	f7ff ff61 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002d82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	6978      	ldr	r0, [r7, #20]
 8002d8a:	f7ff ffb1 	bl	8002cf0 <NVIC_EncodePriority>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff80 	bl	8002c9c <__NVIC_SetPriority>
}
 8002d9c:	bf00      	nop
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff54 	bl	8002c60 <__NVIC_EnableIRQ>
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff f968 	bl	80020a0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e099      	b.n	8002f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfc:	e00f      	b.n	8002e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfe:	f7ff f94f 	bl	80020a0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d908      	bls.n	8002e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e078      	b.n	8002f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e8      	bne.n	8002dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_DMA_Init+0x158>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4313      	orrs	r3, r2
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0307 	bic.w	r3, r3, #7
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d117      	bne.n	8002ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fb01 	bl	80034cc <DMA_CheckFifoParam>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fab8 	bl	8003460 <DMA_CalcBaseAndBitshift>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	223f      	movs	r2, #63	; 0x3f
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	f010803f 	.word	0xf010803f

08002f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Start_IT+0x26>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e040      	b.n	8002fc4 <HAL_DMA_Start_IT+0xa8>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d12f      	bne.n	8002fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa4a 	bl	8003404 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	223f      	movs	r2, #63	; 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0216 	orr.w	r2, r2, #22
 8002f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e005      	b.n	8002fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fda:	f7ff f861 	bl	80020a0 <HAL_GetTick>
 8002fde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d008      	beq.n	8002ffe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e052      	b.n	80030a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0216 	bic.w	r2, r2, #22
 800300c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_DMA_Abort+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0208 	bic.w	r2, r2, #8
 800303c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304e:	e013      	b.n	8003078 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003050:	f7ff f826 	bl	80020a0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b05      	cmp	r3, #5
 800305c:	d90c      	bls.n	8003078 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2203      	movs	r2, #3
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e015      	b.n	80030a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e4      	bne.n	8003050 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	223f      	movs	r2, #63	; 0x3f
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d004      	beq.n	80030ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00c      	b.n	80030e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2205      	movs	r2, #5
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030fc:	4b8e      	ldr	r3, [pc, #568]	; (8003338 <HAL_DMA_IRQHandler+0x248>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a8e      	ldr	r2, [pc, #568]	; (800333c <HAL_DMA_IRQHandler+0x24c>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0a9b      	lsrs	r3, r3, #10
 8003108:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	2208      	movs	r2, #8
 800311c:	409a      	lsls	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01a      	beq.n	800315c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0204 	bic.w	r2, r2, #4
 8003142:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	2208      	movs	r2, #8
 800314a:	409a      	lsls	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	2201      	movs	r2, #1
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2201      	movs	r2, #1
 8003180:	409a      	lsls	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	2204      	movs	r2, #4
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	2204      	movs	r2, #4
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	2210      	movs	r2, #16
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d043      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03c      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	2210      	movs	r2, #16
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d018      	beq.n	8003232 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d108      	bne.n	8003220 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d024      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e01f      	b.n	8003260 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e016      	b.n	8003260 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0208 	bic.w	r2, r2, #8
 800324e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2220      	movs	r2, #32
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 808f 	beq.w	8003390 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8087 	beq.w	8003390 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2220      	movs	r2, #32
 8003288:	409a      	lsls	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b05      	cmp	r3, #5
 8003298:	d136      	bne.n	8003308 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0216 	bic.w	r2, r2, #22
 80032a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_DMA_IRQHandler+0x1da>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	223f      	movs	r2, #63	; 0x3f
 80032e0:	409a      	lsls	r2, r3
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d07e      	beq.n	80033fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
        }
        return;
 8003306:	e079      	b.n	80033fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01d      	beq.n	8003352 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10d      	bne.n	8003340 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	2b00      	cmp	r3, #0
 800332a:	d031      	beq.n	8003390 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
 8003334:	e02c      	b.n	8003390 <HAL_DMA_IRQHandler+0x2a0>
 8003336:	bf00      	nop
 8003338:	20000000 	.word	0x20000000
 800333c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d023      	beq.n	8003390 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
 8003350:	e01e      	b.n	8003390 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10f      	bne.n	8003380 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0210 	bic.w	r2, r2, #16
 800336e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	2b00      	cmp	r3, #0
 8003396:	d032      	beq.n	80033fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d022      	beq.n	80033ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2205      	movs	r2, #5
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3301      	adds	r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d307      	bcc.n	80033d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f2      	bne.n	80033bc <HAL_DMA_IRQHandler+0x2cc>
 80033d6:	e000      	b.n	80033da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	e000      	b.n	80033fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80033fc:	bf00      	nop
    }
  }
}
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003420:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d108      	bne.n	8003444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003442:	e007      	b.n	8003454 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3b10      	subs	r3, #16
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <DMA_CalcBaseAndBitshift+0x68>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d909      	bls.n	80034a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	659a      	str	r2, [r3, #88]	; 0x58
 80034a0:	e007      	b.n	80034b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	aaaaaaab 	.word	0xaaaaaaab
 80034c8:	08009730 	.word	0x08009730

080034cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11f      	bne.n	8003526 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d856      	bhi.n	800359a <DMA_CheckFifoParam+0xce>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <DMA_CheckFifoParam+0x28>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003517 	.word	0x08003517
 80034fc:	08003505 	.word	0x08003505
 8003500:	0800359b 	.word	0x0800359b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d046      	beq.n	800359e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003514:	e043      	b.n	800359e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800351e:	d140      	bne.n	80035a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003524:	e03d      	b.n	80035a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d121      	bne.n	8003574 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b03      	cmp	r3, #3
 8003534:	d837      	bhi.n	80035a6 <DMA_CheckFifoParam+0xda>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <DMA_CheckFifoParam+0x70>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003553 	.word	0x08003553
 8003544:	0800354d 	.word	0x0800354d
 8003548:	08003565 	.word	0x08003565
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      break;
 8003550:	e030      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d025      	beq.n	80035aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003562:	e022      	b.n	80035aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800356c:	d11f      	bne.n	80035ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003572:	e01c      	b.n	80035ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d903      	bls.n	8003582 <DMA_CheckFifoParam+0xb6>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d003      	beq.n	8003588 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003580:	e018      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      break;
 8003586:	e015      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      break;
 8003598:	e00b      	b.n	80035b2 <DMA_CheckFifoParam+0xe6>
      break;
 800359a:	bf00      	nop
 800359c:	e00a      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
 80035a0:	e008      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e006      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035a6:	bf00      	nop
 80035a8:	e004      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <DMA_CheckFifoParam+0xe8>
      break;
 80035b2:	bf00      	nop
    }
  } 
  
  return status; 
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	e16b      	b.n	80038b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e0:	2201      	movs	r2, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f040 815a 	bne.w	80038b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d005      	beq.n	8003616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003612:	2b02      	cmp	r3, #2
 8003614:	d130      	bne.n	8003678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b03      	cmp	r3, #3
 8003682:	d017      	beq.n	80036b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d123      	bne.n	8003708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3208      	adds	r2, #8
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0203 	and.w	r2, r3, #3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80b4 	beq.w	80038b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4b60      	ldr	r3, [pc, #384]	; (80038d0 <HAL_GPIO_Init+0x30c>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4a5f      	ldr	r2, [pc, #380]	; (80038d0 <HAL_GPIO_Init+0x30c>)
 8003754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003758:	6453      	str	r3, [r2, #68]	; 0x44
 800375a:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_GPIO_Init+0x30c>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003766:	4a5b      	ldr	r2, [pc, #364]	; (80038d4 <HAL_GPIO_Init+0x310>)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	220f      	movs	r2, #15
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_GPIO_Init+0x314>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d02b      	beq.n	80037ea <HAL_GPIO_Init+0x226>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a51      	ldr	r2, [pc, #324]	; (80038dc <HAL_GPIO_Init+0x318>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d025      	beq.n	80037e6 <HAL_GPIO_Init+0x222>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a50      	ldr	r2, [pc, #320]	; (80038e0 <HAL_GPIO_Init+0x31c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01f      	beq.n	80037e2 <HAL_GPIO_Init+0x21e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4f      	ldr	r2, [pc, #316]	; (80038e4 <HAL_GPIO_Init+0x320>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d019      	beq.n	80037de <HAL_GPIO_Init+0x21a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4e      	ldr	r2, [pc, #312]	; (80038e8 <HAL_GPIO_Init+0x324>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_GPIO_Init+0x216>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a4d      	ldr	r2, [pc, #308]	; (80038ec <HAL_GPIO_Init+0x328>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00d      	beq.n	80037d6 <HAL_GPIO_Init+0x212>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4c      	ldr	r2, [pc, #304]	; (80038f0 <HAL_GPIO_Init+0x32c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <HAL_GPIO_Init+0x20e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_GPIO_Init+0x330>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_GPIO_Init+0x20a>
 80037ca:	2307      	movs	r3, #7
 80037cc:	e00e      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037ce:	2308      	movs	r3, #8
 80037d0:	e00c      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037d2:	2306      	movs	r3, #6
 80037d4:	e00a      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037d6:	2305      	movs	r3, #5
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037da:	2304      	movs	r3, #4
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x228>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fc:	4935      	ldr	r1, [pc, #212]	; (80038d4 <HAL_GPIO_Init+0x310>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_GPIO_Init+0x334>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382e:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003858:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <HAL_GPIO_Init+0x334>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003882:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_GPIO_Init+0x334>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_GPIO_Init+0x334>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ac:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <HAL_GPIO_Init+0x334>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f ae90 	bls.w	80035e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40021400 	.word	0x40021400
 80038f0:	40021800 	.word	0x40021800
 80038f4:	40021c00 	.word	0x40021c00
 80038f8:	40013c00 	.word	0x40013c00

080038fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
 8003908:	4613      	mov	r3, r2
 800390a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800390c:	787b      	ldrb	r3, [r7, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003918:	e003      	b.n	8003922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	619a      	str	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e034      	b.n	80039aa <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003948:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f245 5255 	movw	r2, #21845	; 0x5555
 8003952:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6852      	ldr	r2, [r2, #4]
 800395c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6892      	ldr	r2, [r2, #8]
 8003966:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003968:	f7fe fb9a 	bl	80020a0 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800396e:	e00f      	b.n	8003990 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003970:	f7fe fb96 	bl	80020a0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b31      	cmp	r3, #49	; 0x31
 800397c:	d908      	bls.n	8003990 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00c      	b.n	80039aa <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e8      	bne.n	8003970 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80039a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80039c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e267      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d075      	beq.n	8003ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d00c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fe:	4b85      	ldr	r3, [pc, #532]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d112      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0a:	4b82      	ldr	r3, [pc, #520]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	4b7e      	ldr	r3, [pc, #504]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05b      	beq.n	8003adc <HAL_RCC_OscConfig+0x108>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d157      	bne.n	8003adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e242      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x74>
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x98>
 8003a52:	4b70      	ldr	r3, [pc, #448]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6f      	ldr	r2, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6c      	ldr	r2, [pc, #432]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	4b69      	ldr	r3, [pc, #420]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a68      	ldr	r2, [pc, #416]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fb08 	bl	80020a0 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fe fb04 	bl	80020a0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e207      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe faf4 	bl	80020a0 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe faf0 	bl	80020a0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1f3      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0xe8>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d11c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e1c7      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4937      	ldr	r1, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	e03a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fe faa9 	bl	80020a0 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe faa5 	bl	80020a0 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1a8      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4925      	ldr	r1, [pc, #148]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
 8003b84:	e015      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fa88 	bl	80020a0 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fe fa84 	bl	80020a0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e187      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d036      	beq.n	8003c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fe fa68 	bl	80020a0 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fe fa64 	bl	80020a0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e167      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x200>
 8003bf2:	e01b      	b.n	8003c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fa51 	bl	80020a0 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	e00e      	b.n	8003c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c02:	f7fe fa4d 	bl	80020a0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d907      	bls.n	8003c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e150      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470000 	.word	0x42470000
 8003c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ea      	bne.n	8003c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8097 	beq.w	8003d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3e:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	4b7d      	ldr	r3, [pc, #500]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a7c      	ldr	r2, [pc, #496]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d118      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c76:	4b74      	ldr	r3, [pc, #464]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a73      	ldr	r2, [pc, #460]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c82:	f7fe fa0d 	bl	80020a0 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fe fa09 	bl	80020a0 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e10c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2ea>
 8003cb0:	4b64      	ldr	r3, [pc, #400]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a63      	ldr	r2, [pc, #396]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x30c>
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a5e      	ldr	r2, [pc, #376]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a5b      	ldr	r2, [pc, #364]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003ce0:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a57      	ldr	r2, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	4b55      	ldr	r3, [pc, #340]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a54      	ldr	r2, [pc, #336]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f023 0304 	bic.w	r3, r3, #4
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fe f9ce 	bl	80020a0 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fe f9ca 	bl	80020a0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0cb      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ee      	beq.n	8003d08 <HAL_RCC_OscConfig+0x334>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2c:	f7fe f9b8 	bl	80020a0 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fe f9b4 	bl	80020a0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0b5      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ee      	bne.n	8003d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a1 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d72:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d05c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d141      	bne.n	8003e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f988 	bl	80020a0 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fe f984 	bl	80020a0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e087      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	491b      	ldr	r1, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fe f95d 	bl	80020a0 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fe f959 	bl	80020a0 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e05c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x416>
 8003e08:	e054      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe f946 	bl	80020a0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fe f942 	bl	80020a0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e045      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x444>
 8003e36:	e03d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e038      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x4ec>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d028      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d121      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d11a      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d111      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800

08003ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cc      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b68      	ldr	r3, [pc, #416]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90c      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d044      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e067      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4934      	ldr	r1, [pc, #208]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fe f874 	bl	80020a0 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fe f870 	bl	80020a0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d20c      	bcs.n	800400c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404a:	f000 f821 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	490a      	ldr	r1, [pc, #40]	; (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fdf4 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	080096e8 	.word	0x080096e8
 8004088:	20000000 	.word	0x20000000
 800408c:	20000004 	.word	0x20000004

08004090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b094      	sub	sp, #80	; 0x50
 8004096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
 800409c:	2300      	movs	r3, #0
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a0:	2300      	movs	r3, #0
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a8:	4b79      	ldr	r3, [pc, #484]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d00d      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x40>
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	f200 80e1 	bhi.w	800427c <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x34>
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x3a>
 80040c2:	e0db      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4b73      	ldr	r3, [pc, #460]	; (8004294 <HAL_RCC_GetSysClockFreq+0x204>)
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040c8:	e0db      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ca:	4b73      	ldr	r3, [pc, #460]	; (8004298 <HAL_RCC_GetSysClockFreq+0x208>)
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ce:	e0d8      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d0:	4b6f      	ldr	r3, [pc, #444]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040da:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d063      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	2200      	movs	r2, #0
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
 80040fa:	2300      	movs	r3, #0
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
 80040fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004102:	4622      	mov	r2, r4
 8004104:	462b      	mov	r3, r5
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	0159      	lsls	r1, r3, #5
 8004110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004114:	0150      	lsls	r0, r2, #5
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4621      	mov	r1, r4
 800411c:	1a51      	subs	r1, r2, r1
 800411e:	6139      	str	r1, [r7, #16]
 8004120:	4629      	mov	r1, r5
 8004122:	eb63 0301 	sbc.w	r3, r3, r1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004134:	4659      	mov	r1, fp
 8004136:	018b      	lsls	r3, r1, #6
 8004138:	4651      	mov	r1, sl
 800413a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800413e:	4651      	mov	r1, sl
 8004140:	018a      	lsls	r2, r1, #6
 8004142:	4651      	mov	r1, sl
 8004144:	ebb2 0801 	subs.w	r8, r2, r1
 8004148:	4659      	mov	r1, fp
 800414a:	eb63 0901 	sbc.w	r9, r3, r1
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800415a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800415e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004162:	4690      	mov	r8, r2
 8004164:	4699      	mov	r9, r3
 8004166:	4623      	mov	r3, r4
 8004168:	eb18 0303 	adds.w	r3, r8, r3
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	462b      	mov	r3, r5
 8004170:	eb49 0303 	adc.w	r3, r9, r3
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004182:	4629      	mov	r1, r5
 8004184:	024b      	lsls	r3, r1, #9
 8004186:	4621      	mov	r1, r4
 8004188:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800418c:	4621      	mov	r1, r4
 800418e:	024a      	lsls	r2, r1, #9
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004196:	2200      	movs	r2, #0
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
 800419a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800419c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041a0:	f7fc f816 	bl	80001d0 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4613      	mov	r3, r2
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	e058      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ae:	4b38      	ldr	r3, [pc, #224]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	2200      	movs	r2, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	4611      	mov	r1, r2
 80041ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041c8:	4642      	mov	r2, r8
 80041ca:	464b      	mov	r3, r9
 80041cc:	f04f 0000 	mov.w	r0, #0
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	0159      	lsls	r1, r3, #5
 80041d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041da:	0150      	lsls	r0, r2, #5
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4641      	mov	r1, r8
 80041e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041e6:	4649      	mov	r1, r9
 80041e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004200:	ebb2 040a 	subs.w	r4, r2, sl
 8004204:	eb63 050b 	sbc.w	r5, r3, fp
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	00eb      	lsls	r3, r5, #3
 8004212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004216:	00e2      	lsls	r2, r4, #3
 8004218:	4614      	mov	r4, r2
 800421a:	461d      	mov	r5, r3
 800421c:	4643      	mov	r3, r8
 800421e:	18e3      	adds	r3, r4, r3
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	464b      	mov	r3, r9
 8004224:	eb45 0303 	adc.w	r3, r5, r3
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004236:	4629      	mov	r1, r5
 8004238:	028b      	lsls	r3, r1, #10
 800423a:	4621      	mov	r1, r4
 800423c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004240:	4621      	mov	r1, r4
 8004242:	028a      	lsls	r2, r1, #10
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424a:	2200      	movs	r2, #0
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	61fa      	str	r2, [r7, #28]
 8004250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004254:	f7fb ffbc 	bl	80001d0 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetSysClockFreq+0x204>)
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004284:	4618      	mov	r0, r3
 8004286:	3750      	adds	r7, #80	; 0x50
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	00f42400 	.word	0x00f42400
 8004298:	007a1200 	.word	0x007a1200

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000000 	.word	0x20000000

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	080096f8 	.word	0x080096f8

080042dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042e0:	f7ff ffdc 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0b5b      	lsrs	r3, r3, #13
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4903      	ldr	r1, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	080096f8 	.word	0x080096f8

08004304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	220f      	movs	r2, #15
 8004312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0203 	and.w	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_RCC_GetClockConfig+0x60>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	40023c00 	.word	0x40023c00

08004368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e041      	b.n	80043fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc fe4c 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fe1e 	bl	8004fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d001      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e04e      	b.n	80044be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a23      	ldr	r2, [pc, #140]	; (80044cc <HAL_TIM_Base_Start_IT+0xc4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d01d      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d111      	bne.n	80044ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b06      	cmp	r3, #6
 8004498:	d010      	beq.n	80044bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	e007      	b.n	80044bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40010400 	.word	0x40010400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40001800 	.word	0x40001800

080044e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e041      	b.n	800457e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f839 	bl	8004586 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f000 fd5e 	bl	8004fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_TIM_PWM_Start+0x24>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e022      	b.n	8004606 <HAL_TIM_PWM_Start+0x6a>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d109      	bne.n	80045da <HAL_TIM_PWM_Start+0x3e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	e015      	b.n	8004606 <HAL_TIM_PWM_Start+0x6a>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d109      	bne.n	80045f4 <HAL_TIM_PWM_Start+0x58>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e008      	b.n	8004606 <HAL_TIM_PWM_Start+0x6a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07c      	b.n	8004708 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <HAL_TIM_PWM_Start+0x82>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800461c:	e013      	b.n	8004646 <HAL_TIM_PWM_Start+0xaa>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d104      	bne.n	800462e <HAL_TIM_PWM_Start+0x92>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	e00b      	b.n	8004646 <HAL_TIM_PWM_Start+0xaa>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Start+0xa2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463c:	e003      	b.n	8004646 <HAL_TIM_PWM_Start+0xaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2201      	movs	r2, #1
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 ffb4 	bl	80055bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <HAL_TIM_PWM_Start+0x174>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_TIM_PWM_Start+0xcc>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2c      	ldr	r2, [pc, #176]	; (8004714 <HAL_TIM_PWM_Start+0x178>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_TIM_PWM_Start+0xd0>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_TIM_PWM_Start+0xd2>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a22      	ldr	r2, [pc, #136]	; (8004710 <HAL_TIM_PWM_Start+0x174>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x136>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d01d      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x136>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <HAL_TIM_PWM_Start+0x17c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x136>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_TIM_PWM_Start+0x180>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x136>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <HAL_TIM_PWM_Start+0x184>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x136>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_TIM_PWM_Start+0x178>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x136>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_TIM_PWM_Start+0x188>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x136>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_TIM_PWM_Start+0x18c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d111      	bne.n	80046f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d010      	beq.n	8004706 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f4:	e007      	b.n	8004706 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40010000 	.word	0x40010000
 8004714:	40010400 	.word	0x40010400
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40014000 	.word	0x40014000
 8004728:	40001800 	.word	0x40001800

0800472c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 ff3c 	bl	80055bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <HAL_TIM_PWM_Stop+0xd8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIM_PWM_Stop+0x2c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2d      	ldr	r2, [pc, #180]	; (8004808 <HAL_TIM_PWM_Stop+0xdc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_TIM_PWM_Stop+0x30>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_TIM_PWM_Stop+0x32>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d017      	beq.n	8004792 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a1a      	ldr	r2, [r3, #32]
 8004768:	f241 1311 	movw	r3, #4369	; 0x1111
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <HAL_TIM_PWM_Stop+0x66>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	f240 4344 	movw	r3, #1092	; 0x444
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_TIM_PWM_Stop+0x66>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	f241 1311 	movw	r3, #4369	; 0x1111
 800479c:	4013      	ands	r3, r2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_TIM_PWM_Stop+0x96>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	f240 4344 	movw	r3, #1092	; 0x444
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <HAL_TIM_PWM_Stop+0x96>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_PWM_Stop+0xa6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	e013      	b.n	80047fa <HAL_TIM_PWM_Stop+0xce>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Stop+0xb6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e0:	e00b      	b.n	80047fa <HAL_TIM_PWM_Stop+0xce>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Stop+0xc6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	e003      	b.n	80047fa <HAL_TIM_PWM_Stop+0xce>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40010000 	.word	0x40010000
 8004808:	40010400 	.word	0x40010400

0800480c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e097      	b.n	8004950 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fc fc1b 	bl	8001070 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004850:	f023 0307 	bic.w	r3, r3, #7
 8004854:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 fbc1 	bl	8004fe8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	f023 0303 	bic.w	r3, r3, #3
 8004892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	4313      	orrs	r3, r2
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048ac:	f023 030c 	bic.w	r3, r3, #12
 80048b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	4313      	orrs	r3, r2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	011a      	lsls	r2, r3, #4
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	031b      	lsls	r3, r3, #12
 80048dc:	4313      	orrs	r3, r2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80048f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	4313      	orrs	r3, r2
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004968:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004970:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004978:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004980:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d110      	bne.n	80049aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d102      	bne.n	8004994 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800498e:	7b7b      	ldrb	r3, [r7, #13]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d001      	beq.n	8004998 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e069      	b.n	8004a6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a8:	e031      	b.n	8004a0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d110      	bne.n	80049d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b6:	7b3b      	ldrb	r3, [r7, #12]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e055      	b.n	8004a6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d0:	e01d      	b.n	8004a0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d108      	bne.n	80049ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d8:	7bbb      	ldrb	r3, [r7, #14]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049de:	7b7b      	ldrb	r3, [r7, #13]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d102      	bne.n	80049ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049e4:	7b3b      	ldrb	r3, [r7, #12]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e03e      	b.n	8004a6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_TIM_Encoder_Start+0xc4>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d008      	beq.n	8004a2c <HAL_TIM_Encoder_Start+0xd4>
 8004a1a:	e00f      	b.n	8004a3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2201      	movs	r2, #1
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fdc9 	bl	80055bc <TIM_CCxChannelCmd>
      break;
 8004a2a:	e016      	b.n	8004a5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	2104      	movs	r1, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fdc1 	bl	80055bc <TIM_CCxChannelCmd>
      break;
 8004a3a:	e00e      	b.n	8004a5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fdb9 	bl	80055bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	2104      	movs	r1, #4
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fdb2 	bl	80055bc <TIM_CCxChannelCmd>
      break;
 8004a58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0201 	orr.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d122      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0202 	mvn.w	r2, #2
 8004aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa77 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa69 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa7a 	bl	8004fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0204 	mvn.w	r2, #4
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa4d 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa3f 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa50 	bl	8004fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0208 	mvn.w	r2, #8
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa23 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa15 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa26 	bl	8004fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0210 	mvn.w	r2, #16
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9f9 	bl	8004faa <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f9eb 	bl	8004f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f9fc 	bl	8004fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0201 	mvn.w	r2, #1
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fb ffec 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fd78 	bl	8005714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f9c1 	bl	8004fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0220 	mvn.w	r2, #32
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fd42 	bl	8005700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0ae      	b.n	8004e00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	f200 809f 	bhi.w	8004df0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004df1 	.word	0x08004df1
 8004cc0:	08004df1 	.word	0x08004df1
 8004cc4:	08004df1 	.word	0x08004df1
 8004cc8:	08004d2d 	.word	0x08004d2d
 8004ccc:	08004df1 	.word	0x08004df1
 8004cd0:	08004df1 	.word	0x08004df1
 8004cd4:	08004df1 	.word	0x08004df1
 8004cd8:	08004d6f 	.word	0x08004d6f
 8004cdc:	08004df1 	.word	0x08004df1
 8004ce0:	08004df1 	.word	0x08004df1
 8004ce4:	08004df1 	.word	0x08004df1
 8004ce8:	08004daf 	.word	0x08004daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fa18 	bl	8005128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	619a      	str	r2, [r3, #24]
      break;
 8004d2a:	e064      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa68 	bl	8005208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]
      break;
 8004d6c:	e043      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fabd 	bl	80052f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0208 	orr.w	r2, r2, #8
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0204 	bic.w	r2, r2, #4
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
      break;
 8004dac:	e023      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fb11 	bl	80053dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	021a      	lsls	r2, r3, #8
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	61da      	str	r2, [r3, #28]
      break;
 8004dee:	e002      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
      break;
 8004df4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIM_ConfigClockSource+0x1c>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0b4      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x186>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5c:	d03e      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0xd4>
 8004e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e62:	f200 8087 	bhi.w	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6a:	f000 8086 	beq.w	8004f7a <HAL_TIM_ConfigClockSource+0x172>
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	d87f      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b70      	cmp	r3, #112	; 0x70
 8004e76:	d01a      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0xa6>
 8004e78:	2b70      	cmp	r3, #112	; 0x70
 8004e7a:	d87b      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b60      	cmp	r3, #96	; 0x60
 8004e7e:	d050      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x11a>
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d877      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b50      	cmp	r3, #80	; 0x50
 8004e86:	d03c      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0xfa>
 8004e88:	2b50      	cmp	r3, #80	; 0x50
 8004e8a:	d873      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d058      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x13a>
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d86f      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b30      	cmp	r3, #48	; 0x30
 8004e96:	d064      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004e98:	2b30      	cmp	r3, #48	; 0x30
 8004e9a:	d86b      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d060      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d867      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05c      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d05a      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	e062      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6899      	ldr	r1, [r3, #8]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f000 fb5d 	bl	800557c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	609a      	str	r2, [r3, #8]
      break;
 8004eda:	e04f      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6899      	ldr	r1, [r3, #8]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f000 fb46 	bl	800557c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004efe:	609a      	str	r2, [r3, #8]
      break;
 8004f00:	e03c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f000 faba 	bl	8005488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2150      	movs	r1, #80	; 0x50
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fb13 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004f20:	e02c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6859      	ldr	r1, [r3, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f000 fad9 	bl	80054e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2160      	movs	r1, #96	; 0x60
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fb03 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004f40:	e01c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f000 fa9a 	bl	8005488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 faf3 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004f60:	e00c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 faea 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8004f72:	e003      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
      break;
 8004f78:	e000      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a40      	ldr	r2, [pc, #256]	; (80050fc <TIM_Base_SetConfig+0x114>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005006:	d00f      	beq.n	8005028 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3d      	ldr	r2, [pc, #244]	; (8005100 <TIM_Base_SetConfig+0x118>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a3c      	ldr	r2, [pc, #240]	; (8005104 <TIM_Base_SetConfig+0x11c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a3b      	ldr	r2, [pc, #236]	; (8005108 <TIM_Base_SetConfig+0x120>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_Base_SetConfig+0x40>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a3a      	ldr	r2, [pc, #232]	; (800510c <TIM_Base_SetConfig+0x124>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d108      	bne.n	800503a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2f      	ldr	r2, [pc, #188]	; (80050fc <TIM_Base_SetConfig+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02b      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d027      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2c      	ldr	r2, [pc, #176]	; (8005100 <TIM_Base_SetConfig+0x118>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d023      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2b      	ldr	r2, [pc, #172]	; (8005104 <TIM_Base_SetConfig+0x11c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01f      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2a      	ldr	r2, [pc, #168]	; (8005108 <TIM_Base_SetConfig+0x120>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01b      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a29      	ldr	r2, [pc, #164]	; (800510c <TIM_Base_SetConfig+0x124>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d017      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a28      	ldr	r2, [pc, #160]	; (8005110 <TIM_Base_SetConfig+0x128>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a27      	ldr	r2, [pc, #156]	; (8005114 <TIM_Base_SetConfig+0x12c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00f      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a26      	ldr	r2, [pc, #152]	; (8005118 <TIM_Base_SetConfig+0x130>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a25      	ldr	r2, [pc, #148]	; (800511c <TIM_Base_SetConfig+0x134>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a24      	ldr	r2, [pc, #144]	; (8005120 <TIM_Base_SetConfig+0x138>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a23      	ldr	r2, [pc, #140]	; (8005124 <TIM_Base_SetConfig+0x13c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d108      	bne.n	80050ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <TIM_Base_SetConfig+0x114>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_Base_SetConfig+0xf8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a0c      	ldr	r2, [pc, #48]	; (800510c <TIM_Base_SetConfig+0x124>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d103      	bne.n	80050e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	615a      	str	r2, [r3, #20]
}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00
 800510c:	40010400 	.word	0x40010400
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800
 800511c:	40001800 	.word	0x40001800
 8005120:	40001c00 	.word	0x40001c00
 8005124:	40002000 	.word	0x40002000

08005128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 0302 	bic.w	r3, r3, #2
 8005170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a20      	ldr	r2, [pc, #128]	; (8005200 <TIM_OC1_SetConfig+0xd8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC1_SetConfig+0x64>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <TIM_OC1_SetConfig+0xdc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10c      	bne.n	80051a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0308 	bic.w	r3, r3, #8
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 0304 	bic.w	r3, r3, #4
 80051a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a15      	ldr	r2, [pc, #84]	; (8005200 <TIM_OC1_SetConfig+0xd8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC1_SetConfig+0x8e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <TIM_OC1_SetConfig+0xdc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d111      	bne.n	80051da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40010000 	.word	0x40010000
 8005204:	40010400 	.word	0x40010400

08005208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0210 	bic.w	r2, r3, #16
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0320 	bic.w	r3, r3, #32
 8005252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a22      	ldr	r2, [pc, #136]	; (80052ec <TIM_OC2_SetConfig+0xe4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0x68>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <TIM_OC2_SetConfig+0xe8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10d      	bne.n	800528c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a17      	ldr	r2, [pc, #92]	; (80052ec <TIM_OC2_SetConfig+0xe4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC2_SetConfig+0x94>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a16      	ldr	r2, [pc, #88]	; (80052f0 <TIM_OC2_SetConfig+0xe8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d113      	bne.n	80052c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40010400 	.word	0x40010400

080052f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800533c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a21      	ldr	r2, [pc, #132]	; (80053d4 <TIM_OC3_SetConfig+0xe0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_OC3_SetConfig+0x66>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <TIM_OC3_SetConfig+0xe4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d10d      	bne.n	8005376 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a16      	ldr	r2, [pc, #88]	; (80053d4 <TIM_OC3_SetConfig+0xe0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC3_SetConfig+0x92>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <TIM_OC3_SetConfig+0xe4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d113      	bne.n	80053ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800538c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	621a      	str	r2, [r3, #32]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40010400 	.word	0x40010400

080053dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	031b      	lsls	r3, r3, #12
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a12      	ldr	r2, [pc, #72]	; (8005480 <TIM_OC4_SetConfig+0xa4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_OC4_SetConfig+0x68>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a11      	ldr	r2, [pc, #68]	; (8005484 <TIM_OC4_SetConfig+0xa8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d109      	bne.n	8005458 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800544a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	019b      	lsls	r3, r3, #6
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400

08005488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 030a 	bic.w	r3, r3, #10
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0210 	bic.w	r2, r3, #16
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	031b      	lsls	r3, r3, #12
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	f043 0307 	orr.w	r3, r3, #7
 8005568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	609a      	str	r2, [r3, #8]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	021a      	lsls	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	431a      	orrs	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	2201      	movs	r2, #1
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1a      	ldr	r2, [r3, #32]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800561c:	2302      	movs	r3, #2
 800561e:	e05a      	b.n	80056d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d022      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566c:	d01d      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1d      	ldr	r2, [pc, #116]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d018      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1a      	ldr	r2, [pc, #104]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d10c      	bne.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40001800 	.word	0x40001800

08005700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e03f      	b.n	80057ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb fd8e 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800576a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fe9d 	bl	80064ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b08c      	sub	sp, #48	; 0x30
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	4613      	mov	r3, r2
 80057ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d152      	bne.n	8005882 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e04b      	b.n	8005884 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e044      	b.n	8005884 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	461a      	mov	r2, r3
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fbec 	bl	8005fec <UART_Start_Receive_DMA>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800581a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800581e:	2b00      	cmp	r3, #0
 8005820:	d12c      	bne.n	800587c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	2b01      	cmp	r3, #1
 8005828:	d125      	bne.n	8005876 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	617b      	str	r3, [r7, #20]
   return(result);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f043 0310 	orr.w	r3, r3, #16
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005860:	627a      	str	r2, [r7, #36]	; 0x24
 8005862:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6a39      	ldr	r1, [r7, #32]
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	61fb      	str	r3, [r7, #28]
   return(result);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005874:	e002      	b.n	800587c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800587c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005880:	e000      	b.n	8005884 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3730      	adds	r7, #48	; 0x30
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b0ba      	sub	sp, #232	; 0xe8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <HAL_UART_IRQHandler+0x66>
 80058de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fd23 	bl	8006336 <UART_Receive_IT>
      return;
 80058f0:	e256      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80de 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x22c>
 80058fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80d1 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_UART_IRQHandler+0xae>
 8005922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_UART_IRQHandler+0xd2>
 8005946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0202 	orr.w	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_UART_IRQHandler+0xf6>
 800596a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f043 0204 	orr.w	r2, r3, #4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d011      	beq.n	80059b2 <HAL_UART_IRQHandler+0x126>
 800598e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800599a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0208 	orr.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 81ed 	beq.w	8005d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_UART_IRQHandler+0x14e>
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fcae 	bl	8006336 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	bf0c      	ite	eq
 80059e8:	2301      	moveq	r3, #1
 80059ea:	2300      	movne	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <HAL_UART_IRQHandler+0x17a>
 80059fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d04f      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fbb6 	bl	8006178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d141      	bne.n	8005a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3314      	adds	r3, #20
 8005a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1d9      	bne.n	8005a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d013      	beq.n	8005a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	4a7d      	ldr	r2, [pc, #500]	; (8005c68 <HAL_UART_IRQHandler+0x3dc>)
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fd fb16 	bl	80030ac <HAL_DMA_Abort_IT>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d016      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a90:	4610      	mov	r0, r2
 8005a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e00e      	b.n	8005ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc f9ce 	bl	8001e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	e00a      	b.n	8005ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc f9ca 	bl	8001e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa4:	e006      	b.n	8005ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fc f9c6 	bl	8001e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ab2:	e170      	b.n	8005d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	bf00      	nop
    return;
 8005ab6:	e16e      	b.n	8005d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	f040 814a 	bne.w	8005d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8143 	beq.w	8005d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 813c 	beq.w	8005d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	f040 80b4 	bne.w	8005c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8140 	beq.w	8005d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b22:	429a      	cmp	r2, r3
 8005b24:	f080 8139 	bcs.w	8005d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3a:	f000 8088 	beq.w	8005c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1d9      	bne.n	8005b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e1      	bne.n	8005b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3314      	adds	r3, #20
 8005be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e3      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1e:	f023 0310 	bic.w	r3, r3, #16
 8005c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e3      	bne.n	8005c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fd f9bf 	bl	8002fcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc f97e 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c64:	e099      	b.n	8005d9a <HAL_UART_IRQHandler+0x50e>
 8005c66:	bf00      	nop
 8005c68:	0800623f 	.word	0x0800623f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 808b 	beq.w	8005d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8086 	beq.w	8005d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8005cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e3      	bne.n	8005c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3314      	adds	r3, #20
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3314      	adds	r3, #20
 8005cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cee:	633a      	str	r2, [r7, #48]	; 0x30
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e3      	bne.n	8005cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0310 	bic.w	r3, r3, #16
 8005d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d34:	61fa      	str	r2, [r7, #28]
 8005d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	617b      	str	r3, [r7, #20]
   return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e3      	bne.n	8005d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc f906 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d54:	e023      	b.n	8005d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_UART_IRQHandler+0x4ea>
 8005d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa79 	bl	8006266 <UART_Transmit_IT>
    return;
 8005d74:	e014      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00e      	beq.n	8005da0 <HAL_UART_IRQHandler+0x514>
 8005d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fab9 	bl	8006306 <UART_EndTransmit_IT>
    return;
 8005d94:	e004      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
    return;
 8005d96:	bf00      	nop
 8005d98:	e002      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
      return;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
      return;
 8005d9e:	bf00      	nop
  }
}
 8005da0:	37e8      	adds	r7, #232	; 0xe8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop

08005da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b09c      	sub	sp, #112	; 0x70
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d172      	bne.n	8005efe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	667b      	str	r3, [r7, #100]	; 0x64
 8005e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e72:	647a      	str	r2, [r7, #68]	; 0x44
 8005e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	623b      	str	r3, [r7, #32]
   return(result);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d119      	bne.n	8005efe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f023 0310 	bic.w	r3, r3, #16
 8005ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eea:	61fa      	str	r2, [r7, #28]
 8005eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	69b9      	ldr	r1, [r7, #24]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d106      	bne.n	8005f14 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f0e:	f7fc f827 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f12:	e002      	b.n	8005f1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005f14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f16:	f7ff ff51 	bl	8005dbc <HAL_UART_RxCpltCallback>
}
 8005f1a:	bf00      	nop
 8005f1c:	3770      	adds	r7, #112	; 0x70
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d108      	bne.n	8005f4a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	4619      	mov	r1, r3
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7fc f80c 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f48:	e002      	b.n	8005f50 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff ff40 	bl	8005dd0 <HAL_UART_RxHalfCpltCallback>
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f74:	2b80      	cmp	r3, #128	; 0x80
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b21      	cmp	r3, #33	; 0x21
 8005f8a:	d108      	bne.n	8005f9e <UART_DMAError+0x46>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2200      	movs	r2, #0
 8005f96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f98:	68b8      	ldr	r0, [r7, #8]
 8005f9a:	f000 f8c5 	bl	8006128 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b40      	cmp	r3, #64	; 0x40
 8005faa:	bf0c      	ite	eq
 8005fac:	2301      	moveq	r3, #1
 8005fae:	2300      	movne	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b22      	cmp	r3, #34	; 0x22
 8005fbe:	d108      	bne.n	8005fd2 <UART_DMAError+0x7a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fcc:	68b8      	ldr	r0, [r7, #8]
 8005fce:	f000 f8d3 	bl	8006178 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f043 0210 	orr.w	r2, r3, #16
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fde:	68b8      	ldr	r0, [r7, #8]
 8005fe0:	f7fb ff2a 	bl	8001e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe4:	bf00      	nop
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b098      	sub	sp, #96	; 0x60
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2222      	movs	r2, #34	; 0x22
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	4a40      	ldr	r2, [pc, #256]	; (800611c <UART_Start_Receive_DMA+0x130>)
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	4a3f      	ldr	r2, [pc, #252]	; (8006120 <UART_Start_Receive_DMA+0x134>)
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	4a3e      	ldr	r2, [pc, #248]	; (8006124 <UART_Start_Receive_DMA+0x138>)
 800602a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	2200      	movs	r2, #0
 8006032:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	f7fc ff66 	bl	8002f1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d019      	beq.n	80060aa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608c:	65bb      	str	r3, [r7, #88]	; 0x58
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006096:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006098:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800609c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80060a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e5      	bne.n	8006076 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3314      	adds	r3, #20
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	657b      	str	r3, [r7, #84]	; 0x54
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3314      	adds	r3, #20
 80060c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e5      	bne.n	80060aa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3314      	adds	r3, #20
 80060e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	617b      	str	r3, [r7, #20]
   return(result);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f4:	653b      	str	r3, [r7, #80]	; 0x50
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6a39      	ldr	r1, [r7, #32]
 8006104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	61fb      	str	r3, [r7, #28]
   return(result);
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e5      	bne.n	80060de <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3760      	adds	r7, #96	; 0x60
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	08005dfd 	.word	0x08005dfd
 8006120:	08005f23 	.word	0x08005f23
 8006124:	08005f59 	.word	0x08005f59

08006128 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b089      	sub	sp, #36	; 0x24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	61ba      	str	r2, [r7, #24]
 8006152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6979      	ldr	r1, [r7, #20]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	613b      	str	r3, [r7, #16]
   return(result);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800616c:	bf00      	nop
 800616e:	3724      	adds	r7, #36	; 0x24
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b095      	sub	sp, #84	; 0x54
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061a0:	643a      	str	r2, [r7, #64]	; 0x40
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e5      	bne.n	8006180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3314      	adds	r3, #20
 80061ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e5      	bne.n	80061b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d119      	bne.n	8006224 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 0310 	bic.w	r3, r3, #16
 8006206:	647b      	str	r3, [r7, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006210:	61ba      	str	r2, [r7, #24]
 8006212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6979      	ldr	r1, [r7, #20]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	613b      	str	r3, [r7, #16]
   return(result);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e5      	bne.n	80061f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006232:	bf00      	nop
 8006234:	3754      	adds	r7, #84	; 0x54
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7fb fded 	bl	8001e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b21      	cmp	r3, #33	; 0x21
 8006278:	d13e      	bne.n	80062f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006282:	d114      	bne.n	80062ae <UART_Transmit_IT+0x48>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d110      	bne.n	80062ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	1c9a      	adds	r2, r3, #2
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	621a      	str	r2, [r3, #32]
 80062ac:	e008      	b.n	80062c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6211      	str	r1, [r2, #32]
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4619      	mov	r1, r3
 80062ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10f      	bne.n	80062f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e000      	b.n	80062fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fd3e 	bl	8005da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b08c      	sub	sp, #48	; 0x30
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b22      	cmp	r3, #34	; 0x22
 8006348:	f040 80ab 	bne.w	80064a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006354:	d117      	bne.n	8006386 <UART_Receive_IT+0x50>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d113      	bne.n	8006386 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006374:	b29a      	uxth	r2, r3
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	1c9a      	adds	r2, r3, #2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
 8006384:	e026      	b.n	80063d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006398:	d007      	beq.n	80063aa <UART_Receive_IT+0x74>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <UART_Receive_IT+0x82>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e008      	b.n	80063ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29b      	uxth	r3, r3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4619      	mov	r1, r3
 80063e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d15a      	bne.n	800649e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0220 	bic.w	r2, r2, #32
 80063f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	2b01      	cmp	r3, #1
 8006426:	d135      	bne.n	8006494 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	613b      	str	r3, [r7, #16]
   return(result);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f023 0310 	bic.w	r3, r3, #16
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644e:	623a      	str	r2, [r7, #32]
 8006450:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	69f9      	ldr	r1, [r7, #28]
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	61bb      	str	r3, [r7, #24]
   return(result);
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e5      	bne.n	800642e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b10      	cmp	r3, #16
 800646e:	d10a      	bne.n	8006486 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fb fd67 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
 8006492:	e002      	b.n	800649a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fc91 	bl	8005dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e002      	b.n	80064a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064a2:	2302      	movs	r3, #2
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3730      	adds	r7, #48	; 0x30
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b0:	b0c0      	sub	sp, #256	; 0x100
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	68d9      	ldr	r1, [r3, #12]
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	ea40 0301 	orr.w	r3, r0, r1
 80064d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006504:	f021 010c 	bic.w	r1, r1, #12
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006512:	430b      	orrs	r3, r1
 8006514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006526:	6999      	ldr	r1, [r3, #24]
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	ea40 0301 	orr.w	r3, r0, r1
 8006532:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b8f      	ldr	r3, [pc, #572]	; (8006778 <UART_SetConfig+0x2cc>)
 800653c:	429a      	cmp	r2, r3
 800653e:	d005      	beq.n	800654c <UART_SetConfig+0xa0>
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b8d      	ldr	r3, [pc, #564]	; (800677c <UART_SetConfig+0x2d0>)
 8006548:	429a      	cmp	r2, r3
 800654a:	d104      	bne.n	8006556 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800654c:	f7fd fec6 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8006550:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006554:	e003      	b.n	800655e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7fd fead 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 800655a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006568:	f040 810c 	bne.w	8006784 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800656c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006570:	2200      	movs	r2, #0
 8006572:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006576:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800657a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800657e:	4622      	mov	r2, r4
 8006580:	462b      	mov	r3, r5
 8006582:	1891      	adds	r1, r2, r2
 8006584:	65b9      	str	r1, [r7, #88]	; 0x58
 8006586:	415b      	adcs	r3, r3
 8006588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800658a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800658e:	4621      	mov	r1, r4
 8006590:	eb12 0801 	adds.w	r8, r2, r1
 8006594:	4629      	mov	r1, r5
 8006596:	eb43 0901 	adc.w	r9, r3, r1
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ae:	4690      	mov	r8, r2
 80065b0:	4699      	mov	r9, r3
 80065b2:	4623      	mov	r3, r4
 80065b4:	eb18 0303 	adds.w	r3, r8, r3
 80065b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065bc:	462b      	mov	r3, r5
 80065be:	eb49 0303 	adc.w	r3, r9, r3
 80065c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065da:	460b      	mov	r3, r1
 80065dc:	18db      	adds	r3, r3, r3
 80065de:	653b      	str	r3, [r7, #80]	; 0x50
 80065e0:	4613      	mov	r3, r2
 80065e2:	eb42 0303 	adc.w	r3, r2, r3
 80065e6:	657b      	str	r3, [r7, #84]	; 0x54
 80065e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065f0:	f7f9 fdee 	bl	80001d0 <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4b61      	ldr	r3, [pc, #388]	; (8006780 <UART_SetConfig+0x2d4>)
 80065fa:	fba3 2302 	umull	r2, r3, r3, r2
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	011c      	lsls	r4, r3, #4
 8006602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006606:	2200      	movs	r2, #0
 8006608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800660c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006610:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006614:	4642      	mov	r2, r8
 8006616:	464b      	mov	r3, r9
 8006618:	1891      	adds	r1, r2, r2
 800661a:	64b9      	str	r1, [r7, #72]	; 0x48
 800661c:	415b      	adcs	r3, r3
 800661e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006620:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006624:	4641      	mov	r1, r8
 8006626:	eb12 0a01 	adds.w	sl, r2, r1
 800662a:	4649      	mov	r1, r9
 800662c:	eb43 0b01 	adc.w	fp, r3, r1
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800663c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006644:	4692      	mov	sl, r2
 8006646:	469b      	mov	fp, r3
 8006648:	4643      	mov	r3, r8
 800664a:	eb1a 0303 	adds.w	r3, sl, r3
 800664e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006652:	464b      	mov	r3, r9
 8006654:	eb4b 0303 	adc.w	r3, fp, r3
 8006658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006668:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800666c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006670:	460b      	mov	r3, r1
 8006672:	18db      	adds	r3, r3, r3
 8006674:	643b      	str	r3, [r7, #64]	; 0x40
 8006676:	4613      	mov	r3, r2
 8006678:	eb42 0303 	adc.w	r3, r2, r3
 800667c:	647b      	str	r3, [r7, #68]	; 0x44
 800667e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006686:	f7f9 fda3 	bl	80001d0 <__aeabi_uldivmod>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4611      	mov	r1, r2
 8006690:	4b3b      	ldr	r3, [pc, #236]	; (8006780 <UART_SetConfig+0x2d4>)
 8006692:	fba3 2301 	umull	r2, r3, r3, r1
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	2264      	movs	r2, #100	; 0x64
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	1acb      	subs	r3, r1, r3
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066a6:	4b36      	ldr	r3, [pc, #216]	; (8006780 <UART_SetConfig+0x2d4>)
 80066a8:	fba3 2302 	umull	r2, r3, r3, r2
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066b4:	441c      	add	r4, r3
 80066b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	1891      	adds	r1, r2, r2
 80066ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80066d0:	415b      	adcs	r3, r3
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066d8:	4641      	mov	r1, r8
 80066da:	1851      	adds	r1, r2, r1
 80066dc:	6339      	str	r1, [r7, #48]	; 0x30
 80066de:	4649      	mov	r1, r9
 80066e0:	414b      	adcs	r3, r1
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066f0:	4659      	mov	r1, fp
 80066f2:	00cb      	lsls	r3, r1, #3
 80066f4:	4651      	mov	r1, sl
 80066f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066fa:	4651      	mov	r1, sl
 80066fc:	00ca      	lsls	r2, r1, #3
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	4603      	mov	r3, r0
 8006704:	4642      	mov	r2, r8
 8006706:	189b      	adds	r3, r3, r2
 8006708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800670c:	464b      	mov	r3, r9
 800670e:	460a      	mov	r2, r1
 8006710:	eb42 0303 	adc.w	r3, r2, r3
 8006714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006724:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800672c:	460b      	mov	r3, r1
 800672e:	18db      	adds	r3, r3, r3
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
 8006732:	4613      	mov	r3, r2
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800673e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006742:	f7f9 fd45 	bl	80001d0 <__aeabi_uldivmod>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <UART_SetConfig+0x2d4>)
 800674c:	fba3 1302 	umull	r1, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	2164      	movs	r1, #100	; 0x64
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	3332      	adds	r3, #50	; 0x32
 800675e:	4a08      	ldr	r2, [pc, #32]	; (8006780 <UART_SetConfig+0x2d4>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f003 0207 	and.w	r2, r3, #7
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4422      	add	r2, r4
 8006772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006774:	e105      	b.n	8006982 <UART_SetConfig+0x4d6>
 8006776:	bf00      	nop
 8006778:	40011000 	.word	0x40011000
 800677c:	40011400 	.word	0x40011400
 8006780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006788:	2200      	movs	r2, #0
 800678a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800678e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006796:	4642      	mov	r2, r8
 8006798:	464b      	mov	r3, r9
 800679a:	1891      	adds	r1, r2, r2
 800679c:	6239      	str	r1, [r7, #32]
 800679e:	415b      	adcs	r3, r3
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
 80067a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067a6:	4641      	mov	r1, r8
 80067a8:	1854      	adds	r4, r2, r1
 80067aa:	4649      	mov	r1, r9
 80067ac:	eb43 0501 	adc.w	r5, r3, r1
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	00eb      	lsls	r3, r5, #3
 80067ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067be:	00e2      	lsls	r2, r4, #3
 80067c0:	4614      	mov	r4, r2
 80067c2:	461d      	mov	r5, r3
 80067c4:	4643      	mov	r3, r8
 80067c6:	18e3      	adds	r3, r4, r3
 80067c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067cc:	464b      	mov	r3, r9
 80067ce:	eb45 0303 	adc.w	r3, r5, r3
 80067d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067f2:	4629      	mov	r1, r5
 80067f4:	008b      	lsls	r3, r1, #2
 80067f6:	4621      	mov	r1, r4
 80067f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067fc:	4621      	mov	r1, r4
 80067fe:	008a      	lsls	r2, r1, #2
 8006800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006804:	f7f9 fce4 	bl	80001d0 <__aeabi_uldivmod>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4b60      	ldr	r3, [pc, #384]	; (8006990 <UART_SetConfig+0x4e4>)
 800680e:	fba3 2302 	umull	r2, r3, r3, r2
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	011c      	lsls	r4, r3, #4
 8006816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006820:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006828:	4642      	mov	r2, r8
 800682a:	464b      	mov	r3, r9
 800682c:	1891      	adds	r1, r2, r2
 800682e:	61b9      	str	r1, [r7, #24]
 8006830:	415b      	adcs	r3, r3
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006838:	4641      	mov	r1, r8
 800683a:	1851      	adds	r1, r2, r1
 800683c:	6139      	str	r1, [r7, #16]
 800683e:	4649      	mov	r1, r9
 8006840:	414b      	adcs	r3, r1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006850:	4659      	mov	r1, fp
 8006852:	00cb      	lsls	r3, r1, #3
 8006854:	4651      	mov	r1, sl
 8006856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800685a:	4651      	mov	r1, sl
 800685c:	00ca      	lsls	r2, r1, #3
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	4603      	mov	r3, r0
 8006864:	4642      	mov	r2, r8
 8006866:	189b      	adds	r3, r3, r2
 8006868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800686c:	464b      	mov	r3, r9
 800686e:	460a      	mov	r2, r1
 8006870:	eb42 0303 	adc.w	r3, r2, r3
 8006874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	67bb      	str	r3, [r7, #120]	; 0x78
 8006882:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006890:	4649      	mov	r1, r9
 8006892:	008b      	lsls	r3, r1, #2
 8006894:	4641      	mov	r1, r8
 8006896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800689a:	4641      	mov	r1, r8
 800689c:	008a      	lsls	r2, r1, #2
 800689e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068a2:	f7f9 fc95 	bl	80001d0 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4b39      	ldr	r3, [pc, #228]	; (8006990 <UART_SetConfig+0x4e4>)
 80068ac:	fba3 1302 	umull	r1, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	2164      	movs	r1, #100	; 0x64
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	3332      	adds	r3, #50	; 0x32
 80068be:	4a34      	ldr	r2, [pc, #208]	; (8006990 <UART_SetConfig+0x4e4>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ca:	441c      	add	r4, r3
 80068cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d0:	2200      	movs	r2, #0
 80068d2:	673b      	str	r3, [r7, #112]	; 0x70
 80068d4:	677a      	str	r2, [r7, #116]	; 0x74
 80068d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068da:	4642      	mov	r2, r8
 80068dc:	464b      	mov	r3, r9
 80068de:	1891      	adds	r1, r2, r2
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	415b      	adcs	r3, r3
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068ea:	4641      	mov	r1, r8
 80068ec:	1851      	adds	r1, r2, r1
 80068ee:	6039      	str	r1, [r7, #0]
 80068f0:	4649      	mov	r1, r9
 80068f2:	414b      	adcs	r3, r1
 80068f4:	607b      	str	r3, [r7, #4]
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006902:	4659      	mov	r1, fp
 8006904:	00cb      	lsls	r3, r1, #3
 8006906:	4651      	mov	r1, sl
 8006908:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800690c:	4651      	mov	r1, sl
 800690e:	00ca      	lsls	r2, r1, #3
 8006910:	4610      	mov	r0, r2
 8006912:	4619      	mov	r1, r3
 8006914:	4603      	mov	r3, r0
 8006916:	4642      	mov	r2, r8
 8006918:	189b      	adds	r3, r3, r2
 800691a:	66bb      	str	r3, [r7, #104]	; 0x68
 800691c:	464b      	mov	r3, r9
 800691e:	460a      	mov	r2, r1
 8006920:	eb42 0303 	adc.w	r3, r2, r3
 8006924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	663b      	str	r3, [r7, #96]	; 0x60
 8006930:	667a      	str	r2, [r7, #100]	; 0x64
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800693e:	4649      	mov	r1, r9
 8006940:	008b      	lsls	r3, r1, #2
 8006942:	4641      	mov	r1, r8
 8006944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006948:	4641      	mov	r1, r8
 800694a:	008a      	lsls	r2, r1, #2
 800694c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006950:	f7f9 fc3e 	bl	80001d0 <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <UART_SetConfig+0x4e4>)
 800695a:	fba3 1302 	umull	r1, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	2164      	movs	r1, #100	; 0x64
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	3332      	adds	r3, #50	; 0x32
 800696c:	4a08      	ldr	r2, [pc, #32]	; (8006990 <UART_SetConfig+0x4e4>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4422      	add	r2, r4
 8006980:	609a      	str	r2, [r3, #8]
}
 8006982:	bf00      	nop
 8006984:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006988:	46bd      	mov	sp, r7
 800698a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800698e:	bf00      	nop
 8006990:	51eb851f 	.word	0x51eb851f

08006994 <__NVIC_SetPriority>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	db0a      	blt.n	80069be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	490c      	ldr	r1, [pc, #48]	; (80069e0 <__NVIC_SetPriority+0x4c>)
 80069ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b2:	0112      	lsls	r2, r2, #4
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	440b      	add	r3, r1
 80069b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069bc:	e00a      	b.n	80069d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4908      	ldr	r1, [pc, #32]	; (80069e4 <__NVIC_SetPriority+0x50>)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	3b04      	subs	r3, #4
 80069cc:	0112      	lsls	r2, r2, #4
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	440b      	add	r3, r1
 80069d2:	761a      	strb	r2, [r3, #24]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	e000e100 	.word	0xe000e100
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <SysTick_Handler+0x1c>)
 80069ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069f0:	f001 fcfe 	bl	80083f0 <xTaskGetSchedulerState>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d001      	beq.n	80069fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069fa:	f002 fae5 	bl	8008fc8 <xPortSysTickHandler>
  }
}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	e000e010 	.word	0xe000e010

08006a08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	f06f 0004 	mvn.w	r0, #4
 8006a12:	f7ff ffbf 	bl	8006994 <__NVIC_SetPriority>
#endif
}
 8006a16:	bf00      	nop
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a22:	f3ef 8305 	mrs	r3, IPSR
 8006a26:	603b      	str	r3, [r7, #0]
  return(result);
 8006a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a2e:	f06f 0305 	mvn.w	r3, #5
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	e00c      	b.n	8006a50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <osKernelInitialize+0x44>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a3e:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <osKernelInitialize+0x44>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	e002      	b.n	8006a50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a50:	687b      	ldr	r3, [r7, #4]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20001e5c 	.word	0x20001e5c

08006a64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6a:	f3ef 8305 	mrs	r3, IPSR
 8006a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a76:	f06f 0305 	mvn.w	r3, #5
 8006a7a:	607b      	str	r3, [r7, #4]
 8006a7c:	e010      	b.n	8006aa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <osKernelStart+0x48>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d109      	bne.n	8006a9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a86:	f7ff ffbf 	bl	8006a08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a8a:	4b08      	ldr	r3, [pc, #32]	; (8006aac <osKernelStart+0x48>)
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a90:	f001 f866 	bl	8007b60 <vTaskStartScheduler>
      stat = osOK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	e002      	b.n	8006aa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aa0:	687b      	ldr	r3, [r7, #4]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20001e5c 	.word	0x20001e5c

08006ab0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08e      	sub	sp, #56	; 0x38
 8006ab4:	af04      	add	r7, sp, #16
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ac0:	f3ef 8305 	mrs	r3, IPSR
 8006ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ac6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d17e      	bne.n	8006bca <osThreadNew+0x11a>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d07b      	beq.n	8006bca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ad6:	2318      	movs	r3, #24
 8006ad8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d045      	beq.n	8006b76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <osThreadNew+0x48>
        name = attr->name;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <osThreadNew+0x6e>
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b38      	cmp	r3, #56	; 0x38
 8006b10:	d805      	bhi.n	8006b1e <osThreadNew+0x6e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <osThreadNew+0x72>
        return (NULL);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e054      	b.n	8006bcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <osThreadNew+0xa8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	2b5b      	cmp	r3, #91	; 0x5b
 8006b40:	d90a      	bls.n	8006b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d006      	beq.n	8006b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <osThreadNew+0xa8>
        mem = 1;
 8006b52:	2301      	movs	r3, #1
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e010      	b.n	8006b7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10c      	bne.n	8006b7a <osThreadNew+0xca>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d108      	bne.n	8006b7a <osThreadNew+0xca>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <osThreadNew+0xca>
          mem = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e001      	b.n	8006b7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d110      	bne.n	8006ba2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b88:	9202      	str	r2, [sp, #8]
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fe0c 	bl	80077b4 <xTaskCreateStatic>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e013      	b.n	8006bca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d110      	bne.n	8006bca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	f107 0310 	add.w	r3, r7, #16
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fe57 	bl	800786e <xTaskCreate>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d001      	beq.n	8006bca <osThreadNew+0x11a>
            hTask = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bca:	693b      	ldr	r3, [r7, #16]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3728      	adds	r7, #40	; 0x28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bdc:	f3ef 8305 	mrs	r3, IPSR
 8006be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006be2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <osDelay+0x1c>
    stat = osErrorISR;
 8006be8:	f06f 0305 	mvn.w	r3, #5
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e007      	b.n	8006c00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 ff7c 	bl	8007af8 <vTaskDelay>
    }
  }

  return (stat);
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4a06      	ldr	r2, [pc, #24]	; (8006c3c <vApplicationGetIdleTaskMemory+0x30>)
 8006c22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2280      	movs	r2, #128	; 0x80
 8006c28:	601a      	str	r2, [r3, #0]
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20001e60 	.word	0x20001e60
 8006c3c:	20001ebc 	.word	0x20001ebc

08006c40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <vApplicationGetTimerTaskMemory+0x2c>)
 8006c50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4a06      	ldr	r2, [pc, #24]	; (8006c70 <vApplicationGetTimerTaskMemory+0x30>)
 8006c56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c5e:	601a      	str	r2, [r3, #0]
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	200020bc 	.word	0x200020bc
 8006c70:	20002118 	.word	0x20002118

08006c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f103 0208 	add.w	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 0208 	add.w	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f103 0208 	add.w	r2, r3, #8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d103      	bne.n	8006d36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e00c      	b.n	8006d50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e002      	b.n	8006d44 <vListInsert+0x2e>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d2f6      	bcs.n	8006d3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	601a      	str	r2, [r3, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6892      	ldr	r2, [r2, #8]
 8006d9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6852      	ldr	r2, [r2, #4]
 8006da8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d103      	bne.n	8006dbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	1e5a      	subs	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e06:	f002 f84d 	bl	8008ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	3b01      	subs	r3, #1
 8006e38:	68f9      	ldr	r1, [r7, #12]
 8006e3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	22ff      	movs	r2, #255	; 0xff
 8006e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	22ff      	movs	r2, #255	; 0xff
 8006e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d114      	bne.n	8006e86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01a      	beq.n	8006e9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3310      	adds	r3, #16
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 f903 	bl	8008074 <xTaskRemoveFromEventList>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d012      	beq.n	8006e9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <xQueueGenericReset+0xcc>)
 8006e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	e009      	b.n	8006e9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3310      	adds	r3, #16
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fef2 	bl	8006c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3324      	adds	r3, #36	; 0x24
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff feed 	bl	8006c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e9a:	f002 f833 	bl	8008f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e9e:	2301      	movs	r3, #1
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08e      	sub	sp, #56	; 0x38
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <xQueueGenericCreateStatic+0x52>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <xQueueGenericCreateStatic+0x56>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xQueueGenericCreateStatic+0x58>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	623b      	str	r3, [r7, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <xQueueGenericCreateStatic+0x7e>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <xQueueGenericCreateStatic+0x82>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <xQueueGenericCreateStatic+0x84>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	61fb      	str	r3, [r7, #28]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f4a:	2350      	movs	r3, #80	; 0x50
 8006f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b50      	cmp	r3, #80	; 0x50
 8006f52:	d00a      	beq.n	8006f6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	61bb      	str	r3, [r7, #24]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	4613      	mov	r3, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f805 	bl	8006f9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3730      	adds	r7, #48	; 0x30
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e002      	b.n	8006fbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fca:	2101      	movs	r1, #1
 8006fcc:	69b8      	ldr	r0, [r7, #24]
 8006fce:	f7ff ff05 	bl	8006ddc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08e      	sub	sp, #56	; 0x38
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <xQueueGenericSend+0x32>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d103      	bne.n	8007024 <xQueueGenericSend+0x40>
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <xQueueGenericSend+0x44>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <xQueueGenericSend+0x46>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <xQueueGenericSend+0x60>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <xQueueGenericSend+0x6e>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <xQueueGenericSend+0x72>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueGenericSend+0x74>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xQueueGenericSend+0x8e>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007072:	f001 f9bd 	bl	80083f0 <xTaskGetSchedulerState>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <xQueueGenericSend+0x9e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <xQueueGenericSend+0xa2>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <xQueueGenericSend+0xa4>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	61fb      	str	r3, [r7, #28]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070a2:	f001 feff 	bl	8008ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d302      	bcc.n	80070b8 <xQueueGenericSend+0xd4>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d129      	bne.n	800710c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070be:	f000 fa0b 	bl	80074d8 <prvCopyDataToQueue>
 80070c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d010      	beq.n	80070ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 ffcf 	bl	8008074 <xTaskRemoveFromEventList>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d013      	beq.n	8007104 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070dc:	4b3f      	ldr	r3, [pc, #252]	; (80071dc <xQueueGenericSend+0x1f8>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	e00a      	b.n	8007104 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070f4:	4b39      	ldr	r3, [pc, #228]	; (80071dc <xQueueGenericSend+0x1f8>)
 80070f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007104:	f001 fefe 	bl	8008f04 <vPortExitCritical>
				return pdPASS;
 8007108:	2301      	movs	r3, #1
 800710a:	e063      	b.n	80071d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d103      	bne.n	800711a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007112:	f001 fef7 	bl	8008f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007116:	2300      	movs	r3, #0
 8007118:	e05c      	b.n	80071d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800711a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	4618      	mov	r0, r3
 8007126:	f001 f809 	bl	800813c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800712a:	2301      	movs	r3, #1
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800712e:	f001 fee9 	bl	8008f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007132:	f000 fd7b 	bl	8007c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007136:	f001 feb5 	bl	8008ea4 <vPortEnterCritical>
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007140:	b25b      	sxtb	r3, r3
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d103      	bne.n	8007150 <xQueueGenericSend+0x16c>
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007156:	b25b      	sxtb	r3, r3
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d103      	bne.n	8007166 <xQueueGenericSend+0x182>
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007166:	f001 fecd 	bl	8008f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800716a:	1d3a      	adds	r2, r7, #4
 800716c:	f107 0314 	add.w	r3, r7, #20
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fff8 	bl	8008168 <xTaskCheckForTimeOut>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d124      	bne.n	80071c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800717e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007180:	f000 faa2 	bl	80076c8 <prvIsQueueFull>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	3310      	adds	r3, #16
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	4611      	mov	r1, r2
 8007192:	4618      	mov	r0, r3
 8007194:	f000 ff1e 	bl	8007fd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719a:	f000 fa2d 	bl	80075f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800719e:	f000 fd53 	bl	8007c48 <xTaskResumeAll>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f47f af7c 	bne.w	80070a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80071aa:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <xQueueGenericSend+0x1f8>)
 80071ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	e772      	b.n	80070a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071be:	f000 fa1b 	bl	80075f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071c2:	f000 fd41 	bl	8007c48 <xTaskResumeAll>
 80071c6:	e76c      	b.n	80070a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ca:	f000 fa15 	bl	80075f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071ce:	f000 fd3b 	bl	8007c48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3738      	adds	r7, #56	; 0x38
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b090      	sub	sp, #64	; 0x40
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <xQueueGenericSendFromISR+0x3c>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <xQueueGenericSendFromISR+0x40>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <xQueueGenericSendFromISR+0x42>
 8007220:	2300      	movs	r3, #0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d103      	bne.n	800724a <xQueueGenericSendFromISR+0x6a>
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <xQueueGenericSendFromISR+0x6e>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <xQueueGenericSendFromISR+0x70>
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	623b      	str	r3, [r7, #32]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800726a:	f001 fefd 	bl	8009068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800726e:	f3ef 8211 	mrs	r2, BASEPRI
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	61fa      	str	r2, [r7, #28]
 8007284:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007286:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	429a      	cmp	r2, r3
 8007294:	d302      	bcc.n	800729c <xQueueGenericSendFromISR+0xbc>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d12f      	bne.n	80072fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072b2:	f000 f911 	bl	80074d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d112      	bne.n	80072e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d016      	beq.n	80072f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	3324      	adds	r3, #36	; 0x24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fed1 	bl	8008074 <xTaskRemoveFromEventList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00e      	beq.n	80072f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e007      	b.n	80072f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	b25a      	sxtb	r2, r3
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072f6:	2301      	movs	r3, #1
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80072fa:	e001      	b.n	8007300 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800730a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800730c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800730e:	4618      	mov	r0, r3
 8007310:	3740      	adds	r7, #64	; 0x40
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08c      	sub	sp, #48	; 0x30
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <xQueueReceive+0x30>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	623b      	str	r3, [r7, #32]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <xQueueReceive+0x3e>
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <xQueueReceive+0x42>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueReceive+0x44>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueReceive+0x5e>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	61fb      	str	r3, [r7, #28]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007376:	f001 f83b 	bl	80083f0 <xTaskGetSchedulerState>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <xQueueReceive+0x6e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <xQueueReceive+0x72>
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <xQueueReceive+0x74>
 800738a:	2300      	movs	r3, #0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xQueueReceive+0x8e>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	61bb      	str	r3, [r7, #24]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a6:	f001 fd7d 	bl	8008ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01f      	beq.n	80073f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ba:	f000 f8f7 	bl	80075ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	1e5a      	subs	r2, r3, #1
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00f      	beq.n	80073ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	3310      	adds	r3, #16
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fe4e 	bl	8008074 <xTaskRemoveFromEventList>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073de:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <xQueueReceive+0x1bc>)
 80073e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073ee:	f001 fd89 	bl	8008f04 <vPortExitCritical>
				return pdPASS;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e069      	b.n	80074ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073fc:	f001 fd82 	bl	8008f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007400:	2300      	movs	r3, #0
 8007402:	e062      	b.n	80074ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800740a:	f107 0310 	add.w	r3, r7, #16
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fe94 	bl	800813c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007418:	f001 fd74 	bl	8008f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800741c:	f000 fc06 	bl	8007c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007420:	f001 fd40 	bl	8008ea4 <vPortEnterCritical>
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800742a:	b25b      	sxtb	r3, r3
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d103      	bne.n	800743a <xQueueReceive+0x122>
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007440:	b25b      	sxtb	r3, r3
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007446:	d103      	bne.n	8007450 <xQueueReceive+0x138>
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007450:	f001 fd58 	bl	8008f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007454:	1d3a      	adds	r2, r7, #4
 8007456:	f107 0310 	add.w	r3, r7, #16
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fe83 	bl	8008168 <xTaskCheckForTimeOut>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d123      	bne.n	80074b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746a:	f000 f917 	bl	800769c <prvIsQueueEmpty>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d017      	beq.n	80074a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	3324      	adds	r3, #36	; 0x24
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fda9 	bl	8007fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007484:	f000 f8b8 	bl	80075f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007488:	f000 fbde 	bl	8007c48 <xTaskResumeAll>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d189      	bne.n	80073a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007492:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <xQueueReceive+0x1bc>)
 8007494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	e780      	b.n	80073a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a6:	f000 f8a7 	bl	80075f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074aa:	f000 fbcd 	bl	8007c48 <xTaskResumeAll>
 80074ae:	e77a      	b.n	80073a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b2:	f000 f8a1 	bl	80075f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074b6:	f000 fbc7 	bl	8007c48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074bc:	f000 f8ee 	bl	800769c <prvIsQueueEmpty>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f af6f 	beq.w	80073a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3730      	adds	r7, #48	; 0x30
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10d      	bne.n	8007512 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d14d      	bne.n	800759a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 ff92 	bl	800842c <xTaskPriorityDisinherit>
 8007508:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	e043      	b.n	800759a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d119      	bne.n	800754c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6858      	ldr	r0, [r3, #4]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	461a      	mov	r2, r3
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	f001 ffee 	bl	8009504 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	441a      	add	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	429a      	cmp	r2, r3
 8007540:	d32b      	bcc.n	800759a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	e026      	b.n	800759a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68d8      	ldr	r0, [r3, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	461a      	mov	r2, r3
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	f001 ffd4 	bl	8009504 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	425b      	negs	r3, r3
 8007566:	441a      	add	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d207      	bcs.n	8007588 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	425b      	negs	r3, r3
 8007582:	441a      	add	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d105      	bne.n	800759a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3b01      	subs	r3, #1
 8007598:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075a2:	697b      	ldr	r3, [r7, #20]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d018      	beq.n	80075f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	441a      	add	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d303      	bcc.n	80075e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68d9      	ldr	r1, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	461a      	mov	r2, r3
 80075ea:	6838      	ldr	r0, [r7, #0]
 80075ec:	f001 ff8a 	bl	8009504 <memcpy>
	}
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007600:	f001 fc50 	bl	8008ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800760c:	e011      	b.n	8007632 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2b00      	cmp	r3, #0
 8007614:	d012      	beq.n	800763c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fd2a 	bl	8008074 <xTaskRemoveFromEventList>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007626:	f000 fe01 	bl	800822c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	3b01      	subs	r3, #1
 800762e:	b2db      	uxtb	r3, r3
 8007630:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007636:	2b00      	cmp	r3, #0
 8007638:	dce9      	bgt.n	800760e <prvUnlockQueue+0x16>
 800763a:	e000      	b.n	800763e <prvUnlockQueue+0x46>
					break;
 800763c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	22ff      	movs	r2, #255	; 0xff
 8007642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007646:	f001 fc5d 	bl	8008f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800764a:	f001 fc2b 	bl	8008ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007654:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007656:	e011      	b.n	800767c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d012      	beq.n	8007686 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3310      	adds	r3, #16
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fd05 	bl	8008074 <xTaskRemoveFromEventList>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007670:	f000 fddc 	bl	800822c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	3b01      	subs	r3, #1
 8007678:	b2db      	uxtb	r3, r3
 800767a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800767c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	dce9      	bgt.n	8007658 <prvUnlockQueue+0x60>
 8007684:	e000      	b.n	8007688 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007686:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	22ff      	movs	r2, #255	; 0xff
 800768c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007690:	f001 fc38 	bl	8008f04 <vPortExitCritical>
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076a4:	f001 fbfe 	bl	8008ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076b0:	2301      	movs	r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e001      	b.n	80076ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ba:	f001 fc23 	bl	8008f04 <vPortExitCritical>

	return xReturn;
 80076be:	68fb      	ldr	r3, [r7, #12]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076d0:	f001 fbe8 	bl	8008ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076dc:	429a      	cmp	r2, r3
 80076de:	d102      	bne.n	80076e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e001      	b.n	80076ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ea:	f001 fc0b 	bl	8008f04 <vPortExitCritical>

	return xReturn;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	e014      	b.n	8007732 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007708:	4a0f      	ldr	r2, [pc, #60]	; (8007748 <vQueueAddToRegistry+0x50>)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007714:	490c      	ldr	r1, [pc, #48]	; (8007748 <vQueueAddToRegistry+0x50>)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800771e:	4a0a      	ldr	r2, [pc, #40]	; (8007748 <vQueueAddToRegistry+0x50>)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	4413      	add	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800772a:	e006      	b.n	800773a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b07      	cmp	r3, #7
 8007736:	d9e7      	bls.n	8007708 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20002518 	.word	0x20002518

0800774c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800775c:	f001 fba2 	bl	8008ea4 <vPortEnterCritical>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007766:	b25b      	sxtb	r3, r3
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d103      	bne.n	8007776 <vQueueWaitForMessageRestricted+0x2a>
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800777c:	b25b      	sxtb	r3, r3
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d103      	bne.n	800778c <vQueueWaitForMessageRestricted+0x40>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800778c:	f001 fbba 	bl	8008f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	68b9      	ldr	r1, [r7, #8]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fc3b 	bl	800801c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077a6:	6978      	ldr	r0, [r7, #20]
 80077a8:	f7ff ff26 	bl	80075f8 <prvUnlockQueue>
	}
 80077ac:	bf00      	nop
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08e      	sub	sp, #56	; 0x38
 80077b8:	af04      	add	r7, sp, #16
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <xTaskCreateStatic+0x2a>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	623b      	str	r3, [r7, #32]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xTaskCreateStatic+0x46>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	61fb      	str	r3, [r7, #28]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077fa:	235c      	movs	r3, #92	; 0x5c
 80077fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b5c      	cmp	r3, #92	; 0x5c
 8007802:	d00a      	beq.n	800781a <xTaskCreateStatic+0x66>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	61bb      	str	r3, [r7, #24]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800781a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01e      	beq.n	8007860 <xTaskCreateStatic+0xac>
 8007822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01b      	beq.n	8007860 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007830:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	2202      	movs	r2, #2
 8007836:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800783a:	2300      	movs	r3, #0
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	9302      	str	r3, [sp, #8]
 8007842:	f107 0314 	add.w	r3, r7, #20
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 f850 	bl	80078f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800785a:	f000 f8dd 	bl	8007a18 <prvAddNewTaskToReadyList>
 800785e:	e001      	b.n	8007864 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007864:	697b      	ldr	r3, [r7, #20]
	}
 8007866:	4618      	mov	r0, r3
 8007868:	3728      	adds	r7, #40	; 0x28
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800786e:	b580      	push	{r7, lr}
 8007870:	b08c      	sub	sp, #48	; 0x30
 8007872:	af04      	add	r7, sp, #16
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4618      	mov	r0, r3
 8007884:	f001 fc30 	bl	80090e8 <pvPortMalloc>
 8007888:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00e      	beq.n	80078ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007890:	205c      	movs	r0, #92	; 0x5c
 8007892:	f001 fc29 	bl	80090e8 <pvPortMalloc>
 8007896:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
 80078a4:	e005      	b.n	80078b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078a6:	6978      	ldr	r0, [r7, #20]
 80078a8:	f001 fcea 	bl	8009280 <vPortFree>
 80078ac:	e001      	b.n	80078b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078c0:	88fa      	ldrh	r2, [r7, #6]
 80078c2:	2300      	movs	r3, #0
 80078c4:	9303      	str	r3, [sp, #12]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	9302      	str	r3, [sp, #8]
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f80e 	bl	80078f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078dc:	69f8      	ldr	r0, [r7, #28]
 80078de:	f000 f89b 	bl	8007a18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078e2:	2301      	movs	r3, #1
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e002      	b.n	80078ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078ee:	69bb      	ldr	r3, [r7, #24]
	}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	461a      	mov	r2, r3
 8007910:	21a5      	movs	r1, #165	; 0xa5
 8007912:	f001 fe05 	bl	8009520 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007920:	3b01      	subs	r3, #1
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f023 0307 	bic.w	r3, r3, #7
 800792e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <prvInitialiseNewTask+0x58>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	617b      	str	r3, [r7, #20]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01f      	beq.n	8007996 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	e012      	b.n	8007982 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	7819      	ldrb	r1, [r3, #0]
 8007964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	3334      	adds	r3, #52	; 0x34
 800796c:	460a      	mov	r2, r1
 800796e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d006      	beq.n	800798a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	3301      	adds	r3, #1
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b0f      	cmp	r3, #15
 8007986:	d9e9      	bls.n	800795c <prvInitialiseNewTask+0x64>
 8007988:	e000      	b.n	800798c <prvInitialiseNewTask+0x94>
			{
				break;
 800798a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007994:	e003      	b.n	800799e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	2b37      	cmp	r3, #55	; 0x37
 80079a2:	d901      	bls.n	80079a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079a4:	2337      	movs	r3, #55	; 0x37
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	2200      	movs	r2, #0
 80079b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	3304      	adds	r3, #4
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff f978 	bl	8006cb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	3318      	adds	r3, #24
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff f973 	bl	8006cb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	2200      	movs	r2, #0
 80079e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	68f9      	ldr	r1, [r7, #12]
 80079f6:	69b8      	ldr	r0, [r7, #24]
 80079f8:	f001 f928 	bl	8008c4c <pxPortInitialiseStack>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a0e:	bf00      	nop
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a20:	f001 fa40 	bl	8008ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a24:	4b2d      	ldr	r3, [pc, #180]	; (8007adc <prvAddNewTaskToReadyList+0xc4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <prvAddNewTaskToReadyList+0xc4>)
 8007a2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a2e:	4b2c      	ldr	r3, [pc, #176]	; (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a36:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a3c:	4b27      	ldr	r3, [pc, #156]	; (8007adc <prvAddNewTaskToReadyList+0xc4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d110      	bne.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a44:	f000 fc16 	bl	8008274 <prvInitialiseTaskLists>
 8007a48:	e00d      	b.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a4a:	4b26      	ldr	r3, [pc, #152]	; (8007ae4 <prvAddNewTaskToReadyList+0xcc>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a52:	4b23      	ldr	r3, [pc, #140]	; (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d802      	bhi.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a60:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a66:	4b20      	ldr	r3, [pc, #128]	; (8007ae8 <prvAddNewTaskToReadyList+0xd0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <prvAddNewTaskToReadyList+0xd0>)
 8007a6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a70:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <prvAddNewTaskToReadyList+0xd0>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <prvAddNewTaskToReadyList+0xd4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d903      	bls.n	8007a8c <prvAddNewTaskToReadyList+0x74>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	4a18      	ldr	r2, [pc, #96]	; (8007aec <prvAddNewTaskToReadyList+0xd4>)
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <prvAddNewTaskToReadyList+0xd8>)
 8007a9a:	441a      	add	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f7ff f913 	bl	8006cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007aa8:	f001 fa2c 	bl	8008f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007aac:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <prvAddNewTaskToReadyList+0xcc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ab4:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d207      	bcs.n	8007ad2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ac2:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <prvAddNewTaskToReadyList+0xdc>)
 8007ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20002a2c 	.word	0x20002a2c
 8007ae0:	20002558 	.word	0x20002558
 8007ae4:	20002a38 	.word	0x20002a38
 8007ae8:	20002a48 	.word	0x20002a48
 8007aec:	20002a34 	.word	0x20002a34
 8007af0:	2000255c 	.word	0x2000255c
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d017      	beq.n	8007b3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b0a:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <vTaskDelay+0x60>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <vTaskDelay+0x30>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60bb      	str	r3, [r7, #8]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b28:	f000 f880 	bl	8007c2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fcea 	bl	8008508 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b34:	f000 f888 	bl	8007c48 <xTaskResumeAll>
 8007b38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d107      	bne.n	8007b50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b40:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <vTaskDelay+0x64>)
 8007b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20002a54 	.word	0x20002a54
 8007b5c:	e000ed04 	.word	0xe000ed04

08007b60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08a      	sub	sp, #40	; 0x28
 8007b64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b6e:	463a      	mov	r2, r7
 8007b70:	1d39      	adds	r1, r7, #4
 8007b72:	f107 0308 	add.w	r3, r7, #8
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff f848 	bl	8006c0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	9202      	str	r2, [sp, #8]
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	2300      	movs	r3, #0
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	460a      	mov	r2, r1
 8007b8e:	4921      	ldr	r1, [pc, #132]	; (8007c14 <vTaskStartScheduler+0xb4>)
 8007b90:	4821      	ldr	r0, [pc, #132]	; (8007c18 <vTaskStartScheduler+0xb8>)
 8007b92:	f7ff fe0f 	bl	80077b4 <xTaskCreateStatic>
 8007b96:	4603      	mov	r3, r0
 8007b98:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <vTaskStartScheduler+0xbc>)
 8007b9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b9c:	4b1f      	ldr	r3, [pc, #124]	; (8007c1c <vTaskStartScheduler+0xbc>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e001      	b.n	8007bae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d102      	bne.n	8007bba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bb4:	f000 fcfc 	bl	80085b0 <xTimerCreateTimerTask>
 8007bb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d116      	bne.n	8007bee <vTaskStartScheduler+0x8e>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	613b      	str	r3, [r7, #16]
}
 8007bd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bd4:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <vTaskStartScheduler+0xc0>)
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bdc:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <vTaskStartScheduler+0xc4>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007be2:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <vTaskStartScheduler+0xc8>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007be8:	f001 f8ba 	bl	8008d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bec:	e00e      	b.n	8007c0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d10a      	bne.n	8007c0c <vTaskStartScheduler+0xac>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	60fb      	str	r3, [r7, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <vTaskStartScheduler+0xaa>
}
 8007c0c:	bf00      	nop
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	080095b0 	.word	0x080095b0
 8007c18:	08008245 	.word	0x08008245
 8007c1c:	20002a50 	.word	0x20002a50
 8007c20:	20002a4c 	.word	0x20002a4c
 8007c24:	20002a38 	.word	0x20002a38
 8007c28:	20002a30 	.word	0x20002a30

08007c2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c30:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <vTaskSuspendAll+0x18>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	4a03      	ldr	r2, [pc, #12]	; (8007c44 <vTaskSuspendAll+0x18>)
 8007c38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c3a:	bf00      	nop
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	20002a54 	.word	0x20002a54

08007c48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c56:	4b42      	ldr	r3, [pc, #264]	; (8007d60 <xTaskResumeAll+0x118>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <xTaskResumeAll+0x2c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	603b      	str	r3, [r7, #0]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c74:	f001 f916 	bl	8008ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c78:	4b39      	ldr	r3, [pc, #228]	; (8007d60 <xTaskResumeAll+0x118>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	4a38      	ldr	r2, [pc, #224]	; (8007d60 <xTaskResumeAll+0x118>)
 8007c80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c82:	4b37      	ldr	r3, [pc, #220]	; (8007d60 <xTaskResumeAll+0x118>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d162      	bne.n	8007d50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c8a:	4b36      	ldr	r3, [pc, #216]	; (8007d64 <xTaskResumeAll+0x11c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d05e      	beq.n	8007d50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c92:	e02f      	b.n	8007cf4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c94:	4b34      	ldr	r3, [pc, #208]	; (8007d68 <xTaskResumeAll+0x120>)
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3318      	adds	r3, #24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff f871 	bl	8006d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff f86c 	bl	8006d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <xTaskResumeAll+0x124>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d903      	bls.n	8007cc4 <xTaskResumeAll+0x7c>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	4a2a      	ldr	r2, [pc, #168]	; (8007d6c <xTaskResumeAll+0x124>)
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4a27      	ldr	r2, [pc, #156]	; (8007d70 <xTaskResumeAll+0x128>)
 8007cd2:	441a      	add	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7fe fff7 	bl	8006cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <xTaskResumeAll+0x12c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d302      	bcc.n	8007cf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007cee:	4b22      	ldr	r3, [pc, #136]	; (8007d78 <xTaskResumeAll+0x130>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cf4:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <xTaskResumeAll+0x120>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1cb      	bne.n	8007c94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d02:	f000 fb55 	bl	80083b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d06:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <xTaskResumeAll+0x134>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d010      	beq.n	8007d34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d12:	f000 f847 	bl	8007da4 <xTaskIncrementTick>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d1c:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <xTaskResumeAll+0x130>)
 8007d1e:	2201      	movs	r2, #1
 8007d20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1f1      	bne.n	8007d12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <xTaskResumeAll+0x134>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d34:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <xTaskResumeAll+0x130>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d009      	beq.n	8007d50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d40:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <xTaskResumeAll+0x138>)
 8007d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d50:	f001 f8d8 	bl	8008f04 <vPortExitCritical>

	return xAlreadyYielded;
 8007d54:	68bb      	ldr	r3, [r7, #8]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20002a54 	.word	0x20002a54
 8007d64:	20002a2c 	.word	0x20002a2c
 8007d68:	200029ec 	.word	0x200029ec
 8007d6c:	20002a34 	.word	0x20002a34
 8007d70:	2000255c 	.word	0x2000255c
 8007d74:	20002558 	.word	0x20002558
 8007d78:	20002a40 	.word	0x20002a40
 8007d7c:	20002a3c 	.word	0x20002a3c
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <xTaskGetTickCount+0x1c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d90:	687b      	ldr	r3, [r7, #4]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20002a30 	.word	0x20002a30

08007da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dae:	4b4f      	ldr	r3, [pc, #316]	; (8007eec <xTaskIncrementTick+0x148>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f040 808f 	bne.w	8007ed6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007db8:	4b4d      	ldr	r3, [pc, #308]	; (8007ef0 <xTaskIncrementTick+0x14c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007dc0:	4a4b      	ldr	r2, [pc, #300]	; (8007ef0 <xTaskIncrementTick+0x14c>)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d120      	bne.n	8007e0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dcc:	4b49      	ldr	r3, [pc, #292]	; (8007ef4 <xTaskIncrementTick+0x150>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <xTaskIncrementTick+0x48>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	603b      	str	r3, [r7, #0]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <xTaskIncrementTick+0x46>
 8007dec:	4b41      	ldr	r3, [pc, #260]	; (8007ef4 <xTaskIncrementTick+0x150>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	4b41      	ldr	r3, [pc, #260]	; (8007ef8 <xTaskIncrementTick+0x154>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a3f      	ldr	r2, [pc, #252]	; (8007ef4 <xTaskIncrementTick+0x150>)
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	4a3f      	ldr	r2, [pc, #252]	; (8007ef8 <xTaskIncrementTick+0x154>)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	4b3e      	ldr	r3, [pc, #248]	; (8007efc <xTaskIncrementTick+0x158>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	4a3d      	ldr	r2, [pc, #244]	; (8007efc <xTaskIncrementTick+0x158>)
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	f000 fad1 	bl	80083b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e0e:	4b3c      	ldr	r3, [pc, #240]	; (8007f00 <xTaskIncrementTick+0x15c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d349      	bcc.n	8007eac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e18:	4b36      	ldr	r3, [pc, #216]	; (8007ef4 <xTaskIncrementTick+0x150>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e22:	4b37      	ldr	r3, [pc, #220]	; (8007f00 <xTaskIncrementTick+0x15c>)
 8007e24:	f04f 32ff 	mov.w	r2, #4294967295
 8007e28:	601a      	str	r2, [r3, #0]
					break;
 8007e2a:	e03f      	b.n	8007eac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2c:	4b31      	ldr	r3, [pc, #196]	; (8007ef4 <xTaskIncrementTick+0x150>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d203      	bcs.n	8007e4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e44:	4a2e      	ldr	r2, [pc, #184]	; (8007f00 <xTaskIncrementTick+0x15c>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e4a:	e02f      	b.n	8007eac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe ff99 	bl	8006d88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	3318      	adds	r3, #24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe ff90 	bl	8006d88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6c:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <xTaskIncrementTick+0x160>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d903      	bls.n	8007e7c <xTaskIncrementTick+0xd8>
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	4a22      	ldr	r2, [pc, #136]	; (8007f04 <xTaskIncrementTick+0x160>)
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4a1f      	ldr	r2, [pc, #124]	; (8007f08 <xTaskIncrementTick+0x164>)
 8007e8a:	441a      	add	r2, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fe ff1b 	bl	8006cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9c:	4b1b      	ldr	r3, [pc, #108]	; (8007f0c <xTaskIncrementTick+0x168>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3b8      	bcc.n	8007e18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eaa:	e7b5      	b.n	8007e18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007eac:	4b17      	ldr	r3, [pc, #92]	; (8007f0c <xTaskIncrementTick+0x168>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb2:	4915      	ldr	r1, [pc, #84]	; (8007f08 <xTaskIncrementTick+0x164>)
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d901      	bls.n	8007ec8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ec8:	4b11      	ldr	r3, [pc, #68]	; (8007f10 <xTaskIncrementTick+0x16c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d007      	beq.n	8007ee0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	e004      	b.n	8007ee0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <xTaskIncrementTick+0x170>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	4a0d      	ldr	r2, [pc, #52]	; (8007f14 <xTaskIncrementTick+0x170>)
 8007ede:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ee0:	697b      	ldr	r3, [r7, #20]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20002a54 	.word	0x20002a54
 8007ef0:	20002a30 	.word	0x20002a30
 8007ef4:	200029e4 	.word	0x200029e4
 8007ef8:	200029e8 	.word	0x200029e8
 8007efc:	20002a44 	.word	0x20002a44
 8007f00:	20002a4c 	.word	0x20002a4c
 8007f04:	20002a34 	.word	0x20002a34
 8007f08:	2000255c 	.word	0x2000255c
 8007f0c:	20002558 	.word	0x20002558
 8007f10:	20002a40 	.word	0x20002a40
 8007f14:	20002a3c 	.word	0x20002a3c

08007f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f1e:	4b28      	ldr	r3, [pc, #160]	; (8007fc0 <vTaskSwitchContext+0xa8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f26:	4b27      	ldr	r3, [pc, #156]	; (8007fc4 <vTaskSwitchContext+0xac>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f2c:	e041      	b.n	8007fb2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007f2e:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <vTaskSwitchContext+0xac>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f34:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <vTaskSwitchContext+0xb0>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	e010      	b.n	8007f5e <vTaskSwitchContext+0x46>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <vTaskSwitchContext+0x40>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	607b      	str	r3, [r7, #4]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <vTaskSwitchContext+0x3e>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	491b      	ldr	r1, [pc, #108]	; (8007fcc <vTaskSwitchContext+0xb4>)
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0e4      	beq.n	8007f3c <vTaskSwitchContext+0x24>
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4a13      	ldr	r2, [pc, #76]	; (8007fcc <vTaskSwitchContext+0xb4>)
 8007f7e:	4413      	add	r3, r2
 8007f80:	60bb      	str	r3, [r7, #8]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	605a      	str	r2, [r3, #4]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3308      	adds	r3, #8
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d104      	bne.n	8007fa2 <vTaskSwitchContext+0x8a>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	605a      	str	r2, [r3, #4]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <vTaskSwitchContext+0xb8>)
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	4a06      	ldr	r2, [pc, #24]	; (8007fc8 <vTaskSwitchContext+0xb0>)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6013      	str	r3, [r2, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20002a54 	.word	0x20002a54
 8007fc4:	20002a40 	.word	0x20002a40
 8007fc8:	20002a34 	.word	0x20002a34
 8007fcc:	2000255c 	.word	0x2000255c
 8007fd0:	20002558 	.word	0x20002558

08007fd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	60fb      	str	r3, [r7, #12]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ffa:	4b07      	ldr	r3, [pc, #28]	; (8008018 <vTaskPlaceOnEventList+0x44>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3318      	adds	r3, #24
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fe fe87 	bl	8006d16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008008:	2101      	movs	r1, #1
 800800a:	6838      	ldr	r0, [r7, #0]
 800800c:	f000 fa7c 	bl	8008508 <prvAddCurrentTaskToDelayedList>
}
 8008010:	bf00      	nop
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20002558 	.word	0x20002558

0800801c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	617b      	str	r3, [r7, #20]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <vTaskPlaceOnEventListRestricted+0x54>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3318      	adds	r3, #24
 800804a:	4619      	mov	r1, r3
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7fe fe3e 	bl	8006cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008058:	f04f 33ff 	mov.w	r3, #4294967295
 800805c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	68b8      	ldr	r0, [r7, #8]
 8008062:	f000 fa51 	bl	8008508 <prvAddCurrentTaskToDelayedList>
	}
 8008066:	bf00      	nop
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20002558 	.word	0x20002558

08008074 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	60fb      	str	r3, [r7, #12]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	3318      	adds	r3, #24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe fe6f 	bl	8006d88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080aa:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <xTaskRemoveFromEventList+0xb0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d11d      	bne.n	80080ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fe66 	bl	8006d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	4b19      	ldr	r3, [pc, #100]	; (8008128 <xTaskRemoveFromEventList+0xb4>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d903      	bls.n	80080d0 <xTaskRemoveFromEventList+0x5c>
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4a16      	ldr	r2, [pc, #88]	; (8008128 <xTaskRemoveFromEventList+0xb4>)
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4a13      	ldr	r2, [pc, #76]	; (800812c <xTaskRemoveFromEventList+0xb8>)
 80080de:	441a      	add	r2, r3
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f7fe fdf1 	bl	8006cce <vListInsertEnd>
 80080ec:	e005      	b.n	80080fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3318      	adds	r3, #24
 80080f2:	4619      	mov	r1, r3
 80080f4:	480e      	ldr	r0, [pc, #56]	; (8008130 <xTaskRemoveFromEventList+0xbc>)
 80080f6:	f7fe fdea 	bl	8006cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <xTaskRemoveFromEventList+0xc0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	429a      	cmp	r2, r3
 8008106:	d905      	bls.n	8008114 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <xTaskRemoveFromEventList+0xc4>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e001      	b.n	8008118 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008118:	697b      	ldr	r3, [r7, #20]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20002a54 	.word	0x20002a54
 8008128:	20002a34 	.word	0x20002a34
 800812c:	2000255c 	.word	0x2000255c
 8008130:	200029ec 	.word	0x200029ec
 8008134:	20002558 	.word	0x20002558
 8008138:	20002a40 	.word	0x20002a40

0800813c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <vTaskInternalSetTimeOutState+0x24>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <vTaskInternalSetTimeOutState+0x28>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	605a      	str	r2, [r3, #4]
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20002a44 	.word	0x20002a44
 8008164:	20002a30 	.word	0x20002a30

08008168 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	613b      	str	r3, [r7, #16]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	60fb      	str	r3, [r7, #12]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80081aa:	f000 fe7b 	bl	8008ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081ae:	4b1d      	ldr	r3, [pc, #116]	; (8008224 <xTaskCheckForTimeOut+0xbc>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c6:	d102      	bne.n	80081ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	e023      	b.n	8008216 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <xTaskCheckForTimeOut+0xc0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d007      	beq.n	80081ea <xTaskCheckForTimeOut+0x82>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d302      	bcc.n	80081ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	e015      	b.n	8008216 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d20b      	bcs.n	800820c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ff9b 	bl	800813c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	e004      	b.n	8008216 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008216:	f000 fe75 	bl	8008f04 <vPortExitCritical>

	return xReturn;
 800821a:	69fb      	ldr	r3, [r7, #28]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20002a30 	.word	0x20002a30
 8008228:	20002a44 	.word	0x20002a44

0800822c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008230:	4b03      	ldr	r3, [pc, #12]	; (8008240 <vTaskMissedYield+0x14>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]
}
 8008236:	bf00      	nop
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	20002a40 	.word	0x20002a40

08008244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800824c:	f000 f852 	bl	80082f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <prvIdleTask+0x28>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d9f9      	bls.n	800824c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <prvIdleTask+0x2c>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008268:	e7f0      	b.n	800824c <prvIdleTask+0x8>
 800826a:	bf00      	nop
 800826c:	2000255c 	.word	0x2000255c
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800827a:	2300      	movs	r3, #0
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	e00c      	b.n	800829a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4a12      	ldr	r2, [pc, #72]	; (80082d4 <prvInitialiseTaskLists+0x60>)
 800828c:	4413      	add	r3, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fcf0 	bl	8006c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3301      	adds	r3, #1
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b37      	cmp	r3, #55	; 0x37
 800829e:	d9ef      	bls.n	8008280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082a0:	480d      	ldr	r0, [pc, #52]	; (80082d8 <prvInitialiseTaskLists+0x64>)
 80082a2:	f7fe fce7 	bl	8006c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082a6:	480d      	ldr	r0, [pc, #52]	; (80082dc <prvInitialiseTaskLists+0x68>)
 80082a8:	f7fe fce4 	bl	8006c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082ac:	480c      	ldr	r0, [pc, #48]	; (80082e0 <prvInitialiseTaskLists+0x6c>)
 80082ae:	f7fe fce1 	bl	8006c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082b2:	480c      	ldr	r0, [pc, #48]	; (80082e4 <prvInitialiseTaskLists+0x70>)
 80082b4:	f7fe fcde 	bl	8006c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082b8:	480b      	ldr	r0, [pc, #44]	; (80082e8 <prvInitialiseTaskLists+0x74>)
 80082ba:	f7fe fcdb 	bl	8006c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082be:	4b0b      	ldr	r3, [pc, #44]	; (80082ec <prvInitialiseTaskLists+0x78>)
 80082c0:	4a05      	ldr	r2, [pc, #20]	; (80082d8 <prvInitialiseTaskLists+0x64>)
 80082c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082c4:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <prvInitialiseTaskLists+0x7c>)
 80082c6:	4a05      	ldr	r2, [pc, #20]	; (80082dc <prvInitialiseTaskLists+0x68>)
 80082c8:	601a      	str	r2, [r3, #0]
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	2000255c 	.word	0x2000255c
 80082d8:	200029bc 	.word	0x200029bc
 80082dc:	200029d0 	.word	0x200029d0
 80082e0:	200029ec 	.word	0x200029ec
 80082e4:	20002a00 	.word	0x20002a00
 80082e8:	20002a18 	.word	0x20002a18
 80082ec:	200029e4 	.word	0x200029e4
 80082f0:	200029e8 	.word	0x200029e8

080082f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082fa:	e019      	b.n	8008330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082fc:	f000 fdd2 	bl	8008ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008300:	4b10      	ldr	r3, [pc, #64]	; (8008344 <prvCheckTasksWaitingTermination+0x50>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fd3b 	bl	8006d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008312:	4b0d      	ldr	r3, [pc, #52]	; (8008348 <prvCheckTasksWaitingTermination+0x54>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3b01      	subs	r3, #1
 8008318:	4a0b      	ldr	r2, [pc, #44]	; (8008348 <prvCheckTasksWaitingTermination+0x54>)
 800831a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <prvCheckTasksWaitingTermination+0x58>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	4a0a      	ldr	r2, [pc, #40]	; (800834c <prvCheckTasksWaitingTermination+0x58>)
 8008324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008326:	f000 fded 	bl	8008f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f810 	bl	8008350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008330:	4b06      	ldr	r3, [pc, #24]	; (800834c <prvCheckTasksWaitingTermination+0x58>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e1      	bne.n	80082fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20002a00 	.word	0x20002a00
 8008348:	20002a2c 	.word	0x20002a2c
 800834c:	20002a14 	.word	0x20002a14

08008350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800835e:	2b00      	cmp	r3, #0
 8008360:	d108      	bne.n	8008374 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	4618      	mov	r0, r3
 8008368:	f000 ff8a 	bl	8009280 <vPortFree>
				vPortFree( pxTCB );
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 ff87 	bl	8009280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008372:	e018      	b.n	80083a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800837a:	2b01      	cmp	r3, #1
 800837c:	d103      	bne.n	8008386 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 ff7e 	bl	8009280 <vPortFree>
	}
 8008384:	e00f      	b.n	80083a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800838c:	2b02      	cmp	r3, #2
 800838e:	d00a      	beq.n	80083a6 <prvDeleteTCB+0x56>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	60fb      	str	r3, [r7, #12]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <prvDeleteTCB+0x54>
	}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083b6:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <prvResetNextTaskUnblockTime+0x38>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d104      	bne.n	80083ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083c0:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <prvResetNextTaskUnblockTime+0x3c>)
 80083c2:	f04f 32ff 	mov.w	r2, #4294967295
 80083c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083c8:	e008      	b.n	80083dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <prvResetNextTaskUnblockTime+0x38>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4a04      	ldr	r2, [pc, #16]	; (80083ec <prvResetNextTaskUnblockTime+0x3c>)
 80083da:	6013      	str	r3, [r2, #0]
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	200029e4 	.word	0x200029e4
 80083ec:	20002a4c 	.word	0x20002a4c

080083f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <xTaskGetSchedulerState+0x34>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083fe:	2301      	movs	r3, #1
 8008400:	607b      	str	r3, [r7, #4]
 8008402:	e008      	b.n	8008416 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008404:	4b08      	ldr	r3, [pc, #32]	; (8008428 <xTaskGetSchedulerState+0x38>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800840c:	2302      	movs	r3, #2
 800840e:	607b      	str	r3, [r7, #4]
 8008410:	e001      	b.n	8008416 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008412:	2300      	movs	r3, #0
 8008414:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008416:	687b      	ldr	r3, [r7, #4]
	}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	20002a38 	.word	0x20002a38
 8008428:	20002a54 	.word	0x20002a54

0800842c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008438:	2300      	movs	r3, #0
 800843a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d056      	beq.n	80084f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008442:	4b2e      	ldr	r3, [pc, #184]	; (80084fc <xTaskPriorityDisinherit+0xd0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	429a      	cmp	r2, r3
 800844a:	d00a      	beq.n	8008462 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	60fb      	str	r3, [r7, #12]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	60bb      	str	r3, [r7, #8]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008484:	1e5a      	subs	r2, r3, #1
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008492:	429a      	cmp	r2, r3
 8008494:	d02c      	beq.n	80084f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849a:	2b00      	cmp	r3, #0
 800849c:	d128      	bne.n	80084f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fc70 	bl	8006d88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c0:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <xTaskPriorityDisinherit+0xd4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d903      	bls.n	80084d0 <xTaskPriorityDisinherit+0xa4>
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	4a0c      	ldr	r2, [pc, #48]	; (8008500 <xTaskPriorityDisinherit+0xd4>)
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4a09      	ldr	r2, [pc, #36]	; (8008504 <xTaskPriorityDisinherit+0xd8>)
 80084de:	441a      	add	r2, r3
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4619      	mov	r1, r3
 80084e6:	4610      	mov	r0, r2
 80084e8:	f7fe fbf1 	bl	8006cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084f0:	697b      	ldr	r3, [r7, #20]
	}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20002558 	.word	0x20002558
 8008500:	20002a34 	.word	0x20002a34
 8008504:	2000255c 	.word	0x2000255c

08008508 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008512:	4b21      	ldr	r3, [pc, #132]	; (8008598 <prvAddCurrentTaskToDelayedList+0x90>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008518:	4b20      	ldr	r3, [pc, #128]	; (800859c <prvAddCurrentTaskToDelayedList+0x94>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3304      	adds	r3, #4
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fc32 	bl	8006d88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d10a      	bne.n	8008542 <prvAddCurrentTaskToDelayedList+0x3a>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d007      	beq.n	8008542 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008532:	4b1a      	ldr	r3, [pc, #104]	; (800859c <prvAddCurrentTaskToDelayedList+0x94>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3304      	adds	r3, #4
 8008538:	4619      	mov	r1, r3
 800853a:	4819      	ldr	r0, [pc, #100]	; (80085a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800853c:	f7fe fbc7 	bl	8006cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008540:	e026      	b.n	8008590 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4413      	add	r3, r2
 8008548:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800854a:	4b14      	ldr	r3, [pc, #80]	; (800859c <prvAddCurrentTaskToDelayedList+0x94>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	429a      	cmp	r2, r3
 8008558:	d209      	bcs.n	800856e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <prvAddCurrentTaskToDelayedList+0x94>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3304      	adds	r3, #4
 8008564:	4619      	mov	r1, r3
 8008566:	4610      	mov	r0, r2
 8008568:	f7fe fbd5 	bl	8006d16 <vListInsert>
}
 800856c:	e010      	b.n	8008590 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800856e:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4b0a      	ldr	r3, [pc, #40]	; (800859c <prvAddCurrentTaskToDelayedList+0x94>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3304      	adds	r3, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7fe fbcb 	bl	8006d16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	429a      	cmp	r2, r3
 8008588:	d202      	bcs.n	8008590 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800858a:	4a08      	ldr	r2, [pc, #32]	; (80085ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	6013      	str	r3, [r2, #0]
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20002a30 	.word	0x20002a30
 800859c:	20002558 	.word	0x20002558
 80085a0:	20002a18 	.word	0x20002a18
 80085a4:	200029e8 	.word	0x200029e8
 80085a8:	200029e4 	.word	0x200029e4
 80085ac:	20002a4c 	.word	0x20002a4c

080085b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08a      	sub	sp, #40	; 0x28
 80085b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80085ba:	f000 fb07 	bl	8008bcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80085be:	4b1c      	ldr	r3, [pc, #112]	; (8008630 <xTimerCreateTimerTask+0x80>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d021      	beq.n	800860a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085ce:	1d3a      	adds	r2, r7, #4
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	f107 030c 	add.w	r3, r7, #12
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fe fb31 	bl	8006c40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	9202      	str	r2, [sp, #8]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2302      	movs	r3, #2
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2300      	movs	r3, #0
 80085ee:	460a      	mov	r2, r1
 80085f0:	4910      	ldr	r1, [pc, #64]	; (8008634 <xTimerCreateTimerTask+0x84>)
 80085f2:	4811      	ldr	r0, [pc, #68]	; (8008638 <xTimerCreateTimerTask+0x88>)
 80085f4:	f7ff f8de 	bl	80077b4 <xTaskCreateStatic>
 80085f8:	4603      	mov	r3, r0
 80085fa:	4a10      	ldr	r2, [pc, #64]	; (800863c <xTimerCreateTimerTask+0x8c>)
 80085fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085fe:	4b0f      	ldr	r3, [pc, #60]	; (800863c <xTimerCreateTimerTask+0x8c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008606:	2301      	movs	r3, #1
 8008608:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	613b      	str	r3, [r7, #16]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008626:	697b      	ldr	r3, [r7, #20]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20002a88 	.word	0x20002a88
 8008634:	080095b8 	.word	0x080095b8
 8008638:	08008775 	.word	0x08008775
 800863c:	20002a8c 	.word	0x20002a8c

08008640 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08a      	sub	sp, #40	; 0x28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800864e:	2300      	movs	r3, #0
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	623b      	str	r3, [r7, #32]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800866e:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <xTimerGenericCommand+0x98>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d02a      	beq.n	80086cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b05      	cmp	r3, #5
 8008686:	dc18      	bgt.n	80086ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008688:	f7ff feb2 	bl	80083f0 <xTaskGetSchedulerState>
 800868c:	4603      	mov	r3, r0
 800868e:	2b02      	cmp	r3, #2
 8008690:	d109      	bne.n	80086a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <xTimerGenericCommand+0x98>)
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f107 0110 	add.w	r1, r7, #16
 800869a:	2300      	movs	r3, #0
 800869c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800869e:	f7fe fca1 	bl	8006fe4 <xQueueGenericSend>
 80086a2:	6278      	str	r0, [r7, #36]	; 0x24
 80086a4:	e012      	b.n	80086cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086a6:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <xTimerGenericCommand+0x98>)
 80086a8:	6818      	ldr	r0, [r3, #0]
 80086aa:	f107 0110 	add.w	r1, r7, #16
 80086ae:	2300      	movs	r3, #0
 80086b0:	2200      	movs	r2, #0
 80086b2:	f7fe fc97 	bl	8006fe4 <xQueueGenericSend>
 80086b6:	6278      	str	r0, [r7, #36]	; 0x24
 80086b8:	e008      	b.n	80086cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <xTimerGenericCommand+0x98>)
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f107 0110 	add.w	r1, r7, #16
 80086c2:	2300      	movs	r3, #0
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	f7fe fd8b 	bl	80071e0 <xQueueGenericSendFromISR>
 80086ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3728      	adds	r7, #40	; 0x28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20002a88 	.word	0x20002a88

080086dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e6:	4b22      	ldr	r3, [pc, #136]	; (8008770 <prvProcessExpiredTimer+0x94>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe fb47 	bl	8006d88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d022      	beq.n	800874e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	699a      	ldr	r2, [r3, #24]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	18d1      	adds	r1, r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	6978      	ldr	r0, [r7, #20]
 8008716:	f000 f8d1 	bl	80088bc <prvInsertTimerInActiveList>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01f      	beq.n	8008760 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008720:	2300      	movs	r3, #0
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	2100      	movs	r1, #0
 800872a:	6978      	ldr	r0, [r7, #20]
 800872c:	f7ff ff88 	bl	8008640 <xTimerGenericCommand>
 8008730:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d113      	bne.n	8008760 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	60fb      	str	r3, [r7, #12]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008754:	f023 0301 	bic.w	r3, r3, #1
 8008758:	b2da      	uxtb	r2, r3
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	6978      	ldr	r0, [r7, #20]
 8008766:	4798      	blx	r3
}
 8008768:	bf00      	nop
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20002a80 	.word	0x20002a80

08008774 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800877c:	f107 0308 	add.w	r3, r7, #8
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f857 	bl	8008834 <prvGetNextExpireTime>
 8008786:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4619      	mov	r1, r3
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f803 	bl	8008798 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008792:	f000 f8d5 	bl	8008940 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008796:	e7f1      	b.n	800877c <prvTimerTask+0x8>

08008798 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087a2:	f7ff fa43 	bl	8007c2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087a6:	f107 0308 	add.w	r3, r7, #8
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f866 	bl	800887c <prvSampleTimeNow>
 80087b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d130      	bne.n	800881a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <prvProcessTimerOrBlockTask+0x3c>
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d806      	bhi.n	80087d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80087c6:	f7ff fa3f 	bl	8007c48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff ff85 	bl	80086dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80087d2:	e024      	b.n	800881e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d008      	beq.n	80087ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087da:	4b13      	ldr	r3, [pc, #76]	; (8008828 <prvProcessTimerOrBlockTask+0x90>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <prvProcessTimerOrBlockTask+0x50>
 80087e4:	2301      	movs	r3, #1
 80087e6:	e000      	b.n	80087ea <prvProcessTimerOrBlockTask+0x52>
 80087e8:	2300      	movs	r3, #0
 80087ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087ec:	4b0f      	ldr	r3, [pc, #60]	; (800882c <prvProcessTimerOrBlockTask+0x94>)
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	4619      	mov	r1, r3
 80087fa:	f7fe ffa7 	bl	800774c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087fe:	f7ff fa23 	bl	8007c48 <xTaskResumeAll>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008808:	4b09      	ldr	r3, [pc, #36]	; (8008830 <prvProcessTimerOrBlockTask+0x98>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
}
 8008818:	e001      	b.n	800881e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800881a:	f7ff fa15 	bl	8007c48 <xTaskResumeAll>
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20002a84 	.word	0x20002a84
 800882c:	20002a88 	.word	0x20002a88
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800883c:	4b0e      	ldr	r3, [pc, #56]	; (8008878 <prvGetNextExpireTime+0x44>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <prvGetNextExpireTime+0x16>
 8008846:	2201      	movs	r2, #1
 8008848:	e000      	b.n	800884c <prvGetNextExpireTime+0x18>
 800884a:	2200      	movs	r2, #0
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d105      	bne.n	8008864 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <prvGetNextExpireTime+0x44>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	e001      	b.n	8008868 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008868:	68fb      	ldr	r3, [r7, #12]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20002a80 	.word	0x20002a80

0800887c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008884:	f7ff fa7e 	bl	8007d84 <xTaskGetTickCount>
 8008888:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800888a:	4b0b      	ldr	r3, [pc, #44]	; (80088b8 <prvSampleTimeNow+0x3c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	429a      	cmp	r2, r3
 8008892:	d205      	bcs.n	80088a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008894:	f000 f936 	bl	8008b04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e002      	b.n	80088a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088a6:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <prvSampleTimeNow+0x3c>)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088ac:	68fb      	ldr	r3, [r7, #12]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20002a90 	.word	0x20002a90

080088bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d812      	bhi.n	8008908 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	1ad2      	subs	r2, r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d302      	bcc.n	80088f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80088f0:	2301      	movs	r3, #1
 80088f2:	617b      	str	r3, [r7, #20]
 80088f4:	e01b      	b.n	800892e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088f6:	4b10      	ldr	r3, [pc, #64]	; (8008938 <prvInsertTimerInActiveList+0x7c>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f7fe fa08 	bl	8006d16 <vListInsert>
 8008906:	e012      	b.n	800892e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d206      	bcs.n	800891e <prvInsertTimerInActiveList+0x62>
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d302      	bcc.n	800891e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008918:	2301      	movs	r3, #1
 800891a:	617b      	str	r3, [r7, #20]
 800891c:	e007      	b.n	800892e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800891e:	4b07      	ldr	r3, [pc, #28]	; (800893c <prvInsertTimerInActiveList+0x80>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f7fe f9f4 	bl	8006d16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800892e:	697b      	ldr	r3, [r7, #20]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20002a84 	.word	0x20002a84
 800893c:	20002a80 	.word	0x20002a80

08008940 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08e      	sub	sp, #56	; 0x38
 8008944:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008946:	e0ca      	b.n	8008ade <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	da18      	bge.n	8008980 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800894e:	1d3b      	adds	r3, r7, #4
 8008950:	3304      	adds	r3, #4
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10a      	bne.n	8008970 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	61fb      	str	r3, [r7, #28]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008976:	6850      	ldr	r0, [r2, #4]
 8008978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897a:	6892      	ldr	r2, [r2, #8]
 800897c:	4611      	mov	r1, r2
 800897e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f2c0 80aa 	blt.w	8008adc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	3304      	adds	r3, #4
 8008998:	4618      	mov	r0, r3
 800899a:	f7fe f9f5 	bl	8006d88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800899e:	463b      	mov	r3, r7
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff ff6b 	bl	800887c <prvSampleTimeNow>
 80089a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	f200 8097 	bhi.w	8008ade <prvProcessReceivedCommands+0x19e>
 80089b0:	a201      	add	r2, pc, #4	; (adr r2, 80089b8 <prvProcessReceivedCommands+0x78>)
 80089b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b6:	bf00      	nop
 80089b8:	080089e1 	.word	0x080089e1
 80089bc:	080089e1 	.word	0x080089e1
 80089c0:	080089e1 	.word	0x080089e1
 80089c4:	08008a55 	.word	0x08008a55
 80089c8:	08008a69 	.word	0x08008a69
 80089cc:	08008ab3 	.word	0x08008ab3
 80089d0:	080089e1 	.word	0x080089e1
 80089d4:	080089e1 	.word	0x080089e1
 80089d8:	08008a55 	.word	0x08008a55
 80089dc:	08008a69 	.word	0x08008a69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	18d1      	adds	r1, r2, r3
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a00:	f7ff ff5c 	bl	80088bc <prvInsertTimerInActiveList>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d069      	beq.n	8008ade <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d05e      	beq.n	8008ade <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	441a      	add	r2, r3
 8008a28:	2300      	movs	r3, #0
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	2100      	movs	r1, #0
 8008a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a32:	f7ff fe05 	bl	8008640 <xTimerGenericCommand>
 8008a36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d14f      	bne.n	8008ade <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	61bb      	str	r3, [r7, #24]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a5a:	f023 0301 	bic.w	r3, r3, #1
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008a66:	e03a      	b.n	8008ade <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	617b      	str	r3, [r7, #20]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	18d1      	adds	r1, r2, r3
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aac:	f7ff ff06 	bl	80088bc <prvInsertTimerInActiveList>
					break;
 8008ab0:	e015      	b.n	8008ade <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d103      	bne.n	8008ac8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac2:	f000 fbdd 	bl	8009280 <vPortFree>
 8008ac6:	e00a      	b.n	8008ade <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ace:	f023 0301 	bic.w	r3, r3, #1
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ada:	e000      	b.n	8008ade <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008adc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ade:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <prvProcessReceivedCommands+0x1c0>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	1d39      	adds	r1, r7, #4
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe fc16 	bl	8007318 <xQueueReceive>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f47f af2a 	bne.w	8008948 <prvProcessReceivedCommands+0x8>
	}
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	3730      	adds	r7, #48	; 0x30
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20002a88 	.word	0x20002a88

08008b04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b0a:	e048      	b.n	8008b9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b0c:	4b2d      	ldr	r3, [pc, #180]	; (8008bc4 <prvSwitchTimerLists+0xc0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b16:	4b2b      	ldr	r3, [pc, #172]	; (8008bc4 <prvSwitchTimerLists+0xc0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe f92f 	bl	8006d88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d02e      	beq.n	8008b9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4413      	add	r3, r2
 8008b48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d90e      	bls.n	8008b70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b5e:	4b19      	ldr	r3, [pc, #100]	; (8008bc4 <prvSwitchTimerLists+0xc0>)
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f7fe f8d4 	bl	8006d16 <vListInsert>
 8008b6e:	e016      	b.n	8008b9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b70:	2300      	movs	r3, #0
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff fd60 	bl	8008640 <xTimerGenericCommand>
 8008b80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10a      	bne.n	8008b9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	603b      	str	r3, [r7, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	e7fe      	b.n	8008b9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b9e:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <prvSwitchTimerLists+0xc0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1b1      	bne.n	8008b0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ba8:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <prvSwitchTimerLists+0xc0>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <prvSwitchTimerLists+0xc4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a04      	ldr	r2, [pc, #16]	; (8008bc4 <prvSwitchTimerLists+0xc0>)
 8008bb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bb6:	4a04      	ldr	r2, [pc, #16]	; (8008bc8 <prvSwitchTimerLists+0xc4>)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	6013      	str	r3, [r2, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20002a80 	.word	0x20002a80
 8008bc8:	20002a84 	.word	0x20002a84

08008bcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008bd2:	f000 f967 	bl	8008ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008bd6:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <prvCheckForValidListAndQueue+0x60>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d120      	bne.n	8008c20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bde:	4814      	ldr	r0, [pc, #80]	; (8008c30 <prvCheckForValidListAndQueue+0x64>)
 8008be0:	f7fe f848 	bl	8006c74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008be4:	4813      	ldr	r0, [pc, #76]	; (8008c34 <prvCheckForValidListAndQueue+0x68>)
 8008be6:	f7fe f845 	bl	8006c74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008bea:	4b13      	ldr	r3, [pc, #76]	; (8008c38 <prvCheckForValidListAndQueue+0x6c>)
 8008bec:	4a10      	ldr	r2, [pc, #64]	; (8008c30 <prvCheckForValidListAndQueue+0x64>)
 8008bee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008bf0:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <prvCheckForValidListAndQueue+0x70>)
 8008bf2:	4a10      	ldr	r2, [pc, #64]	; (8008c34 <prvCheckForValidListAndQueue+0x68>)
 8008bf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <prvCheckForValidListAndQueue+0x74>)
 8008bfc:	4a11      	ldr	r2, [pc, #68]	; (8008c44 <prvCheckForValidListAndQueue+0x78>)
 8008bfe:	2110      	movs	r1, #16
 8008c00:	200a      	movs	r0, #10
 8008c02:	f7fe f953 	bl	8006eac <xQueueGenericCreateStatic>
 8008c06:	4603      	mov	r3, r0
 8008c08:	4a08      	ldr	r2, [pc, #32]	; (8008c2c <prvCheckForValidListAndQueue+0x60>)
 8008c0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <prvCheckForValidListAndQueue+0x60>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <prvCheckForValidListAndQueue+0x60>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	490b      	ldr	r1, [pc, #44]	; (8008c48 <prvCheckForValidListAndQueue+0x7c>)
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fd6c 	bl	80076f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c20:	f000 f970 	bl	8008f04 <vPortExitCritical>
}
 8008c24:	bf00      	nop
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20002a88 	.word	0x20002a88
 8008c30:	20002a58 	.word	0x20002a58
 8008c34:	20002a6c 	.word	0x20002a6c
 8008c38:	20002a80 	.word	0x20002a80
 8008c3c:	20002a84 	.word	0x20002a84
 8008c40:	20002b34 	.word	0x20002b34
 8008c44:	20002a94 	.word	0x20002a94
 8008c48:	080095c0 	.word	0x080095c0

08008c4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3b04      	subs	r3, #4
 8008c5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3b04      	subs	r3, #4
 8008c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3b04      	subs	r3, #4
 8008c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c7c:	4a0c      	ldr	r2, [pc, #48]	; (8008cb0 <pxPortInitialiseStack+0x64>)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3b14      	subs	r3, #20
 8008c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3b04      	subs	r3, #4
 8008c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f06f 0202 	mvn.w	r2, #2
 8008c9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3b20      	subs	r3, #32
 8008ca0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	08008cb5 	.word	0x08008cb5

08008cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <prvTaskExitError+0x54>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc6:	d00a      	beq.n	8008cde <prvTaskExitError+0x2a>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	60fb      	str	r3, [r7, #12]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <prvTaskExitError+0x28>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	60bb      	str	r3, [r7, #8]
}
 8008cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cf2:	bf00      	nop
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0fc      	beq.n	8008cf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cfa:	bf00      	nop
 8008cfc:	bf00      	nop
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	2000000c 	.word	0x2000000c
 8008d0c:	00000000 	.word	0x00000000

08008d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d10:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <pxCurrentTCBConst2>)
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	6808      	ldr	r0, [r1, #0]
 8008d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	f380 8809 	msr	PSP, r0
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f04f 0000 	mov.w	r0, #0
 8008d26:	f380 8811 	msr	BASEPRI, r0
 8008d2a:	4770      	bx	lr
 8008d2c:	f3af 8000 	nop.w

08008d30 <pxCurrentTCBConst2>:
 8008d30:	20002558 	.word	0x20002558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d38:	4808      	ldr	r0, [pc, #32]	; (8008d5c <prvPortStartFirstTask+0x24>)
 8008d3a:	6800      	ldr	r0, [r0, #0]
 8008d3c:	6800      	ldr	r0, [r0, #0]
 8008d3e:	f380 8808 	msr	MSP, r0
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f380 8814 	msr	CONTROL, r0
 8008d4a:	b662      	cpsie	i
 8008d4c:	b661      	cpsie	f
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	df00      	svc	0
 8008d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d5a:	bf00      	nop
 8008d5c:	e000ed08 	.word	0xe000ed08

08008d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d66:	4b46      	ldr	r3, [pc, #280]	; (8008e80 <xPortStartScheduler+0x120>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a46      	ldr	r2, [pc, #280]	; (8008e84 <xPortStartScheduler+0x124>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d10a      	bne.n	8008d86 <xPortStartScheduler+0x26>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	613b      	str	r3, [r7, #16]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d86:	4b3e      	ldr	r3, [pc, #248]	; (8008e80 <xPortStartScheduler+0x120>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a3f      	ldr	r2, [pc, #252]	; (8008e88 <xPortStartScheduler+0x128>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d10a      	bne.n	8008da6 <xPortStartScheduler+0x46>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	60fb      	str	r3, [r7, #12]
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008da6:	4b39      	ldr	r3, [pc, #228]	; (8008e8c <xPortStartScheduler+0x12c>)
 8008da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	22ff      	movs	r2, #255	; 0xff
 8008db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	4b31      	ldr	r3, [pc, #196]	; (8008e90 <xPortStartScheduler+0x130>)
 8008dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dce:	4b31      	ldr	r3, [pc, #196]	; (8008e94 <xPortStartScheduler+0x134>)
 8008dd0:	2207      	movs	r2, #7
 8008dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dd4:	e009      	b.n	8008dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008dd6:	4b2f      	ldr	r3, [pc, #188]	; (8008e94 <xPortStartScheduler+0x134>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	4a2d      	ldr	r2, [pc, #180]	; (8008e94 <xPortStartScheduler+0x134>)
 8008dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d0ef      	beq.n	8008dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008df6:	4b27      	ldr	r3, [pc, #156]	; (8008e94 <xPortStartScheduler+0x134>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f1c3 0307 	rsb	r3, r3, #7
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d00a      	beq.n	8008e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	60bb      	str	r3, [r7, #8]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e18:	4b1e      	ldr	r3, [pc, #120]	; (8008e94 <xPortStartScheduler+0x134>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	4a1d      	ldr	r2, [pc, #116]	; (8008e94 <xPortStartScheduler+0x134>)
 8008e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e22:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <xPortStartScheduler+0x134>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e2a:	4a1a      	ldr	r2, [pc, #104]	; (8008e94 <xPortStartScheduler+0x134>)
 8008e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e36:	4b18      	ldr	r3, [pc, #96]	; (8008e98 <xPortStartScheduler+0x138>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a17      	ldr	r2, [pc, #92]	; (8008e98 <xPortStartScheduler+0x138>)
 8008e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <xPortStartScheduler+0x138>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a14      	ldr	r2, [pc, #80]	; (8008e98 <xPortStartScheduler+0x138>)
 8008e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e4e:	f000 f8dd 	bl	800900c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e52:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <xPortStartScheduler+0x13c>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e58:	f000 f8fc 	bl	8009054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e5c:	4b10      	ldr	r3, [pc, #64]	; (8008ea0 <xPortStartScheduler+0x140>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a0f      	ldr	r2, [pc, #60]	; (8008ea0 <xPortStartScheduler+0x140>)
 8008e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e68:	f7ff ff66 	bl	8008d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e6c:	f7ff f854 	bl	8007f18 <vTaskSwitchContext>
	prvTaskExitError();
 8008e70:	f7ff ff20 	bl	8008cb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	e000ed00 	.word	0xe000ed00
 8008e84:	410fc271 	.word	0x410fc271
 8008e88:	410fc270 	.word	0x410fc270
 8008e8c:	e000e400 	.word	0xe000e400
 8008e90:	20002b84 	.word	0x20002b84
 8008e94:	20002b88 	.word	0x20002b88
 8008e98:	e000ed20 	.word	0xe000ed20
 8008e9c:	2000000c 	.word	0x2000000c
 8008ea0:	e000ef34 	.word	0xe000ef34

08008ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	607b      	str	r3, [r7, #4]
}
 8008ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <vPortEnterCritical+0x58>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	4a0d      	ldr	r2, [pc, #52]	; (8008efc <vPortEnterCritical+0x58>)
 8008ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <vPortEnterCritical+0x58>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d10f      	bne.n	8008ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <vPortEnterCritical+0x5c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	603b      	str	r3, [r7, #0]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <vPortEnterCritical+0x4a>
	}
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	2000000c 	.word	0x2000000c
 8008f00:	e000ed04 	.word	0xe000ed04

08008f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f0a:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <vPortExitCritical+0x50>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <vPortExitCritical+0x24>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	607b      	str	r3, [r7, #4]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <vPortExitCritical+0x50>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	4a09      	ldr	r2, [pc, #36]	; (8008f54 <vPortExitCritical+0x50>)
 8008f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f32:	4b08      	ldr	r3, [pc, #32]	; (8008f54 <vPortExitCritical+0x50>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d105      	bne.n	8008f46 <vPortExitCritical+0x42>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	f383 8811 	msr	BASEPRI, r3
}
 8008f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	2000000c 	.word	0x2000000c
	...

08008f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f60:	f3ef 8009 	mrs	r0, PSP
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <pxCurrentTCBConst>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	f01e 0f10 	tst.w	lr, #16
 8008f70:	bf08      	it	eq
 8008f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7a:	6010      	str	r0, [r2, #0]
 8008f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f84:	f380 8811 	msr	BASEPRI, r0
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f7fe ffc2 	bl	8007f18 <vTaskSwitchContext>
 8008f94:	f04f 0000 	mov.w	r0, #0
 8008f98:	f380 8811 	msr	BASEPRI, r0
 8008f9c:	bc09      	pop	{r0, r3}
 8008f9e:	6819      	ldr	r1, [r3, #0]
 8008fa0:	6808      	ldr	r0, [r1, #0]
 8008fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa6:	f01e 0f10 	tst.w	lr, #16
 8008faa:	bf08      	it	eq
 8008fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fb0:	f380 8809 	msr	PSP, r0
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	f3af 8000 	nop.w

08008fc0 <pxCurrentTCBConst>:
 8008fc0:	20002558 	.word	0x20002558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop

08008fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	607b      	str	r3, [r7, #4]
}
 8008fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fe2:	f7fe fedf 	bl	8007da4 <xTaskIncrementTick>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <xPortSysTickHandler+0x40>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	f383 8811 	msr	BASEPRI, r3
}
 8008ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009010:	4b0b      	ldr	r3, [pc, #44]	; (8009040 <vPortSetupTimerInterrupt+0x34>)
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009016:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <vPortSetupTimerInterrupt+0x38>)
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800901c:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <vPortSetupTimerInterrupt+0x3c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a0a      	ldr	r2, [pc, #40]	; (800904c <vPortSetupTimerInterrupt+0x40>)
 8009022:	fba2 2303 	umull	r2, r3, r2, r3
 8009026:	099b      	lsrs	r3, r3, #6
 8009028:	4a09      	ldr	r2, [pc, #36]	; (8009050 <vPortSetupTimerInterrupt+0x44>)
 800902a:	3b01      	subs	r3, #1
 800902c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800902e:	4b04      	ldr	r3, [pc, #16]	; (8009040 <vPortSetupTimerInterrupt+0x34>)
 8009030:	2207      	movs	r2, #7
 8009032:	601a      	str	r2, [r3, #0]
}
 8009034:	bf00      	nop
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	e000e010 	.word	0xe000e010
 8009044:	e000e018 	.word	0xe000e018
 8009048:	20000000 	.word	0x20000000
 800904c:	10624dd3 	.word	0x10624dd3
 8009050:	e000e014 	.word	0xe000e014

08009054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009064 <vPortEnableVFP+0x10>
 8009058:	6801      	ldr	r1, [r0, #0]
 800905a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800905e:	6001      	str	r1, [r0, #0]
 8009060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009062:	bf00      	nop
 8009064:	e000ed88 	.word	0xe000ed88

08009068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800906e:	f3ef 8305 	mrs	r3, IPSR
 8009072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b0f      	cmp	r3, #15
 8009078:	d914      	bls.n	80090a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800907a:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <vPortValidateInterruptPriority+0x70>)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009084:	4b15      	ldr	r3, [pc, #84]	; (80090dc <vPortValidateInterruptPriority+0x74>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	7afa      	ldrb	r2, [r7, #11]
 800908a:	429a      	cmp	r2, r3
 800908c:	d20a      	bcs.n	80090a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	607b      	str	r3, [r7, #4]
}
 80090a0:	bf00      	nop
 80090a2:	e7fe      	b.n	80090a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090a4:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <vPortValidateInterruptPriority+0x78>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <vPortValidateInterruptPriority+0x7c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d90a      	bls.n	80090ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	603b      	str	r3, [r7, #0]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <vPortValidateInterruptPriority+0x60>
	}
 80090ca:	bf00      	nop
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	e000e3f0 	.word	0xe000e3f0
 80090dc:	20002b84 	.word	0x20002b84
 80090e0:	e000ed0c 	.word	0xe000ed0c
 80090e4:	20002b88 	.word	0x20002b88

080090e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090f4:	f7fe fd9a 	bl	8007c2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090f8:	4b5b      	ldr	r3, [pc, #364]	; (8009268 <pvPortMalloc+0x180>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009100:	f000 f920 	bl	8009344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009104:	4b59      	ldr	r3, [pc, #356]	; (800926c <pvPortMalloc+0x184>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4013      	ands	r3, r2
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 8093 	bne.w	8009238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01d      	beq.n	8009154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009118:	2208      	movs	r2, #8
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d014      	beq.n	8009154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f023 0307 	bic.w	r3, r3, #7
 8009130:	3308      	adds	r3, #8
 8009132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <pvPortMalloc+0x6c>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	617b      	str	r3, [r7, #20]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d06e      	beq.n	8009238 <pvPortMalloc+0x150>
 800915a:	4b45      	ldr	r3, [pc, #276]	; (8009270 <pvPortMalloc+0x188>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d869      	bhi.n	8009238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009164:	4b43      	ldr	r3, [pc, #268]	; (8009274 <pvPortMalloc+0x18c>)
 8009166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009168:	4b42      	ldr	r3, [pc, #264]	; (8009274 <pvPortMalloc+0x18c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800916e:	e004      	b.n	800917a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	429a      	cmp	r2, r3
 8009182:	d903      	bls.n	800918c <pvPortMalloc+0xa4>
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f1      	bne.n	8009170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800918c:	4b36      	ldr	r3, [pc, #216]	; (8009268 <pvPortMalloc+0x180>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009192:	429a      	cmp	r2, r3
 8009194:	d050      	beq.n	8009238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2208      	movs	r2, #8
 800919c:	4413      	add	r3, r2
 800919e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	1ad2      	subs	r2, r2, r3
 80091b0:	2308      	movs	r3, #8
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d91f      	bls.n	80091f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4413      	add	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <pvPortMalloc+0xf8>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	613b      	str	r3, [r7, #16]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	1ad2      	subs	r2, r2, r3
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091f2:	69b8      	ldr	r0, [r7, #24]
 80091f4:	f000 f908 	bl	8009408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091f8:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <pvPortMalloc+0x188>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <pvPortMalloc+0x188>)
 8009204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009206:	4b1a      	ldr	r3, [pc, #104]	; (8009270 <pvPortMalloc+0x188>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <pvPortMalloc+0x190>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d203      	bcs.n	800921a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009212:	4b17      	ldr	r3, [pc, #92]	; (8009270 <pvPortMalloc+0x188>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a18      	ldr	r2, [pc, #96]	; (8009278 <pvPortMalloc+0x190>)
 8009218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <pvPortMalloc+0x184>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	431a      	orrs	r2, r3
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800922e:	4b13      	ldr	r3, [pc, #76]	; (800927c <pvPortMalloc+0x194>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	4a11      	ldr	r2, [pc, #68]	; (800927c <pvPortMalloc+0x194>)
 8009236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009238:	f7fe fd06 	bl	8007c48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <pvPortMalloc+0x174>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	60fb      	str	r3, [r7, #12]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <pvPortMalloc+0x172>
	return pvReturn;
 800925c:	69fb      	ldr	r3, [r7, #28]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3728      	adds	r7, #40	; 0x28
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20006794 	.word	0x20006794
 800926c:	200067a8 	.word	0x200067a8
 8009270:	20006798 	.word	0x20006798
 8009274:	2000678c 	.word	0x2000678c
 8009278:	2000679c 	.word	0x2000679c
 800927c:	200067a0 	.word	0x200067a0

08009280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d04d      	beq.n	800932e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009292:	2308      	movs	r3, #8
 8009294:	425b      	negs	r3, r3
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	4413      	add	r3, r2
 800929a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	4b24      	ldr	r3, [pc, #144]	; (8009338 <vPortFree+0xb8>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4013      	ands	r3, r2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <vPortFree+0x44>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	60fb      	str	r3, [r7, #12]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00a      	beq.n	80092e2 <vPortFree+0x62>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	60bb      	str	r3, [r7, #8]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <vPortFree+0xb8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01e      	beq.n	800932e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d11a      	bne.n	800932e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <vPortFree+0xb8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	43db      	mvns	r3, r3
 8009302:	401a      	ands	r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009308:	f7fe fc90 	bl	8007c2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <vPortFree+0xbc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4413      	add	r3, r2
 8009316:	4a09      	ldr	r2, [pc, #36]	; (800933c <vPortFree+0xbc>)
 8009318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800931a:	6938      	ldr	r0, [r7, #16]
 800931c:	f000 f874 	bl	8009408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <vPortFree+0xc0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3301      	adds	r3, #1
 8009326:	4a06      	ldr	r2, [pc, #24]	; (8009340 <vPortFree+0xc0>)
 8009328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800932a:	f7fe fc8d 	bl	8007c48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800932e:	bf00      	nop
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	200067a8 	.word	0x200067a8
 800933c:	20006798 	.word	0x20006798
 8009340:	200067a4 	.word	0x200067a4

08009344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800934a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800934e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009350:	4b27      	ldr	r3, [pc, #156]	; (80093f0 <prvHeapInit+0xac>)
 8009352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3307      	adds	r3, #7
 8009362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <prvHeapInit+0xac>)
 8009374:	4413      	add	r3, r2
 8009376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800937c:	4a1d      	ldr	r2, [pc, #116]	; (80093f4 <prvHeapInit+0xb0>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009382:	4b1c      	ldr	r3, [pc, #112]	; (80093f4 <prvHeapInit+0xb0>)
 8009384:	2200      	movs	r2, #0
 8009386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009390:	2208      	movs	r2, #8
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a15      	ldr	r2, [pc, #84]	; (80093f8 <prvHeapInit+0xb4>)
 80093a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093a6:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <prvHeapInit+0xb4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ae:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <prvHeapInit+0xb4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093c4:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <prvHeapInit+0xb4>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	4a0a      	ldr	r2, [pc, #40]	; (80093fc <prvHeapInit+0xb8>)
 80093d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4a09      	ldr	r2, [pc, #36]	; (8009400 <prvHeapInit+0xbc>)
 80093da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093dc:	4b09      	ldr	r3, [pc, #36]	; (8009404 <prvHeapInit+0xc0>)
 80093de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093e2:	601a      	str	r2, [r3, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20002b8c 	.word	0x20002b8c
 80093f4:	2000678c 	.word	0x2000678c
 80093f8:	20006794 	.word	0x20006794
 80093fc:	2000679c 	.word	0x2000679c
 8009400:	20006798 	.word	0x20006798
 8009404:	200067a8 	.word	0x200067a8

08009408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009410:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <prvInsertBlockIntoFreeList+0xac>)
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e002      	b.n	800941c <prvInsertBlockIntoFreeList+0x14>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d8f7      	bhi.n	8009416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d108      	bne.n	800944a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	441a      	add	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d118      	bne.n	8009490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d00d      	beq.n	8009486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e008      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009486:	4b0c      	ldr	r3, [pc, #48]	; (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e003      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d002      	beq.n	80094a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	2000678c 	.word	0x2000678c
 80094b8:	20006794 	.word	0x20006794

080094bc <__libc_init_array>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	4d0d      	ldr	r5, [pc, #52]	; (80094f4 <__libc_init_array+0x38>)
 80094c0:	4c0d      	ldr	r4, [pc, #52]	; (80094f8 <__libc_init_array+0x3c>)
 80094c2:	1b64      	subs	r4, r4, r5
 80094c4:	10a4      	asrs	r4, r4, #2
 80094c6:	2600      	movs	r6, #0
 80094c8:	42a6      	cmp	r6, r4
 80094ca:	d109      	bne.n	80094e0 <__libc_init_array+0x24>
 80094cc:	4d0b      	ldr	r5, [pc, #44]	; (80094fc <__libc_init_array+0x40>)
 80094ce:	4c0c      	ldr	r4, [pc, #48]	; (8009500 <__libc_init_array+0x44>)
 80094d0:	f000 f82e 	bl	8009530 <_init>
 80094d4:	1b64      	subs	r4, r4, r5
 80094d6:	10a4      	asrs	r4, r4, #2
 80094d8:	2600      	movs	r6, #0
 80094da:	42a6      	cmp	r6, r4
 80094dc:	d105      	bne.n	80094ea <__libc_init_array+0x2e>
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e4:	4798      	blx	r3
 80094e6:	3601      	adds	r6, #1
 80094e8:	e7ee      	b.n	80094c8 <__libc_init_array+0xc>
 80094ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ee:	4798      	blx	r3
 80094f0:	3601      	adds	r6, #1
 80094f2:	e7f2      	b.n	80094da <__libc_init_array+0x1e>
 80094f4:	08009740 	.word	0x08009740
 80094f8:	08009740 	.word	0x08009740
 80094fc:	08009740 	.word	0x08009740
 8009500:	08009748 	.word	0x08009748

08009504 <memcpy>:
 8009504:	440a      	add	r2, r1
 8009506:	4291      	cmp	r1, r2
 8009508:	f100 33ff 	add.w	r3, r0, #4294967295
 800950c:	d100      	bne.n	8009510 <memcpy+0xc>
 800950e:	4770      	bx	lr
 8009510:	b510      	push	{r4, lr}
 8009512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800951a:	4291      	cmp	r1, r2
 800951c:	d1f9      	bne.n	8009512 <memcpy+0xe>
 800951e:	bd10      	pop	{r4, pc}

08009520 <memset>:
 8009520:	4402      	add	r2, r0
 8009522:	4603      	mov	r3, r0
 8009524:	4293      	cmp	r3, r2
 8009526:	d100      	bne.n	800952a <memset+0xa>
 8009528:	4770      	bx	lr
 800952a:	f803 1b01 	strb.w	r1, [r3], #1
 800952e:	e7f9      	b.n	8009524 <memset+0x4>

08009530 <_init>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr

0800953c <_fini>:
 800953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953e:	bf00      	nop
 8009540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009542:	bc08      	pop	{r3}
 8009544:	469e      	mov	lr, r3
 8009546:	4770      	bx	lr
