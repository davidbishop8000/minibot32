
minibot32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af70  0800af70  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800af70  0800af70  0001af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af78  0800af78  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af84  0800af84  0001af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800af88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          000068d4  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006904  20006904  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   000244d9  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000568f  00000000  00000000  00044539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001990  00000000  00000000  00049bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001770  00000000  00000000  0004b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268bc  00000000  00000000  0004ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020fd6  00000000  00000000  00073584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db374  00000000  00000000  0009455a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f8ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006774  00000000  00000000  0016f920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000030 	.word	0x20000030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad60 	.word	0x0800ad60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000034 	.word	0x20000034
 80001cc:	0800ad60 	.word	0x0800ad60

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_CAN1_Init+0xc8>)
 80004dc:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <MX_CAN1_Init+0xcc>)
 80004de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e2:	2206      	movs	r2, #6
 80004e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_CAN1_Init+0xc8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_CAN1_Init+0xc8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_CAN1_Init+0xc8>)
 80004f4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80004f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_CAN1_Init+0xc8>)
 80004fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000500:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_CAN1_Init+0xc8>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_CAN1_Init+0xc8>)
 800050a:	2201      	movs	r2, #1
 800050c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_CAN1_Init+0xc8>)
 8000510:	2200      	movs	r2, #0
 8000512:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_CAN1_Init+0xc8>)
 8000516:	2200      	movs	r2, #0
 8000518:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_CAN1_Init+0xc8>)
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_CAN1_Init+0xc8>)
 8000522:	2201      	movs	r2, #1
 8000524:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <MX_CAN1_Init+0xc8>)
 8000528:	f002 ffee 	bl	8003508 <HAL_CAN_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000532:	f000 fb5f 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800053e:	2301      	movs	r3, #1
 8000540:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_CAN1_Init+0xc8>)
 8000560:	f003 f8ce 	bl	8003700 <HAL_CAN_ConfigFilter>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_CAN1_Init+0x9a>
  {
  	Error_Handler();
 800056a:	f000 fb43 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_CAN1_Init+0xc8>)
 8000570:	f003 f9a6 	bl	80038c0 <HAL_CAN_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_CAN1_Init+0xaa>
	Error_Handler();
 800057a:	f000 fb3b 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1,
 800057e:	f648 4102 	movw	r1, #35842	; 0x8c02
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_CAN1_Init+0xc8>)
 8000584:	f003 fc02 	bl	8003d8c <HAL_CAN_ActivateNotification>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0xbe>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
	Error_Handler();
 800058e:	f000 fb31 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000004c 	.word	0x2000004c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <HAL_CAN_MspInit+0xa4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d13c      	bne.n	8000640 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a1f      	ldr	r2, [pc, #124]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_CAN_MspInit+0xa8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000610:	2309      	movs	r3, #9
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <HAL_CAN_MspInit+0xac>)
 800061c:	f004 fae6 	bl	8004bec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2105      	movs	r1, #5
 8000624:	2014      	movs	r0, #20
 8000626:	f003 feb5 	bl	8004394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800062a:	2014      	movs	r0, #20
 800062c:	f003 fece 	bl	80043cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	2016      	movs	r0, #22
 8000636:	f003 fead 	bl	8004394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800063a:	2016      	movs	r0, #22
 800063c:	f003 fec6 	bl	80043cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40006400 	.word	0x40006400
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400

08000654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_DMA_Init+0x78>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <MX_DMA_Init+0x78>)
 8000664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_DMA_Init+0x78>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_DMA_Init+0x78>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_DMA_Init+0x78>)
 8000680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_DMA_Init+0x78>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	200c      	movs	r0, #12
 8000698:	f003 fe7c 	bl	8004394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800069c:	200c      	movs	r0, #12
 800069e:	f003 fe95 	bl	80043cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2010      	movs	r0, #16
 80006a8:	f003 fe74 	bl	8004394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006ac:	2010      	movs	r0, #16
 80006ae:	f003 fe8d 	bl	80043cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	203a      	movs	r0, #58	; 0x3a
 80006b8:	f003 fe6c 	bl	8004394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006bc:	203a      	movs	r0, #58	; 0x3a
 80006be:	f003 fe85 	bl	80043cc <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <MX_FREERTOS_Init+0x88>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <MX_FREERTOS_Init+0x8c>)
 80006da:	f007 fdfd 	bl	80082d8 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <MX_FREERTOS_Init+0x90>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of OutputsTask */
  OutputsTaskHandle = osThreadNew(StartOutputsTask, NULL, &OutputsTask_attributes);
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <MX_FREERTOS_Init+0x94>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	481f      	ldr	r0, [pc, #124]	; (8000768 <MX_FREERTOS_Init+0x98>)
 80006ea:	f007 fdf5 	bl	80082d8 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a1e      	ldr	r2, [pc, #120]	; (800076c <MX_FREERTOS_Init+0x9c>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of InputsTask */
  InputsTaskHandle = osThreadNew(StartInputsTask, NULL, &InputsTask_attributes);
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_FREERTOS_Init+0xa0>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <MX_FREERTOS_Init+0xa4>)
 80006fa:	f007 fded 	bl	80082d8 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <MX_FREERTOS_Init+0xa8>)
 8000702:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartServoTask, NULL, &ServoTask_attributes);
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <MX_FREERTOS_Init+0xac>)
 8000706:	2100      	movs	r1, #0
 8000708:	481d      	ldr	r0, [pc, #116]	; (8000780 <MX_FREERTOS_Init+0xb0>)
 800070a:	f007 fde5 	bl	80082d8 <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_FREERTOS_Init+0xb4>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of UartWiFiTask */
  UartWiFiTaskHandle = osThreadNew(StartUartWiFiTask, NULL, &UartWiFiTask_attributes);
 8000714:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_FREERTOS_Init+0xb8>)
 8000716:	2100      	movs	r1, #0
 8000718:	481c      	ldr	r0, [pc, #112]	; (800078c <MX_FREERTOS_Init+0xbc>)
 800071a:	f007 fddd 	bl	80082d8 <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_FREERTOS_Init+0xc0>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of CanDriversTask */
  CanDriversTaskHandle = osThreadNew(StartCanDriversTask, NULL, &CanDriversTask_attributes);
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_FREERTOS_Init+0xc4>)
 8000726:	2100      	movs	r1, #0
 8000728:	481b      	ldr	r0, [pc, #108]	; (8000798 <MX_FREERTOS_Init+0xc8>)
 800072a:	f007 fdd5 	bl	80082d8 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <MX_FREERTOS_Init+0xcc>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of CanTask */
  CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 8000734:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <MX_FREERTOS_Init+0xd0>)
 8000736:	2100      	movs	r1, #0
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_FREERTOS_Init+0xd4>)
 800073a:	f007 fdcd 	bl	80082d8 <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <MX_FREERTOS_Init+0xd8>)
 8000742:	6013      	str	r3, [r2, #0]

  /* creation of MissionsTask */
  MissionsTaskHandle = osThreadNew(StartMissionsTask, NULL, &MissionsTask_attributes);
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <MX_FREERTOS_Init+0xdc>)
 8000746:	2100      	movs	r1, #0
 8000748:	4819      	ldr	r0, [pc, #100]	; (80007b0 <MX_FREERTOS_Init+0xe0>)
 800074a:	f007 fdc5 	bl	80082d8 <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_FREERTOS_Init+0xe4>)
 8000752:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	0800ae00 	.word	0x0800ae00
 800075c:	080007b9 	.word	0x080007b9
 8000760:	200000d4 	.word	0x200000d4
 8000764:	0800ae24 	.word	0x0800ae24
 8000768:	0800251d 	.word	0x0800251d
 800076c:	20000334 	.word	0x20000334
 8000770:	0800ae48 	.word	0x0800ae48
 8000774:	080022d1 	.word	0x080022d1
 8000778:	20000594 	.word	0x20000594
 800077c:	0800ae6c 	.word	0x0800ae6c
 8000780:	08002775 	.word	0x08002775
 8000784:	200007f4 	.word	0x200007f4
 8000788:	0800ae90 	.word	0x0800ae90
 800078c:	08002835 	.word	0x08002835
 8000790:	20000a54 	.word	0x20000a54
 8000794:	0800aeb4 	.word	0x0800aeb4
 8000798:	08002079 	.word	0x08002079
 800079c:	20000eb4 	.word	0x20000eb4
 80007a0:	0800aed8 	.word	0x0800aed8
 80007a4:	08001e35 	.word	0x08001e35
 80007a8:	20001114 	.word	0x20001114
 80007ac:	0800aefc 	.word	0x0800aefc
 80007b0:	0800250b 	.word	0x0800250b
 80007b4:	20001574 	.word	0x20001574

080007b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f007 fe1a 	bl	80083fc <osDelay>
 80007c8:	e7fa      	b.n	80007c0 <StartDefaultTask+0x8>
	...

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <MX_GPIO_Init+0x210>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a7c      	ldr	r2, [pc, #496]	; (80009dc <MX_GPIO_Init+0x210>)
 80007ec:	f043 0310 	orr.w	r3, r3, #16
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <MX_GPIO_Init+0x210>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b76      	ldr	r3, [pc, #472]	; (80009dc <MX_GPIO_Init+0x210>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a75      	ldr	r2, [pc, #468]	; (80009dc <MX_GPIO_Init+0x210>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <MX_GPIO_Init+0x210>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <MX_GPIO_Init+0x210>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a6e      	ldr	r2, [pc, #440]	; (80009dc <MX_GPIO_Init+0x210>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <MX_GPIO_Init+0x210>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b68      	ldr	r3, [pc, #416]	; (80009dc <MX_GPIO_Init+0x210>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a67      	ldr	r2, [pc, #412]	; (80009dc <MX_GPIO_Init+0x210>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <MX_GPIO_Init+0x210>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b61      	ldr	r3, [pc, #388]	; (80009dc <MX_GPIO_Init+0x210>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a60      	ldr	r2, [pc, #384]	; (80009dc <MX_GPIO_Init+0x210>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <MX_GPIO_Init+0x210>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <MX_GPIO_Init+0x210>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a59      	ldr	r2, [pc, #356]	; (80009dc <MX_GPIO_Init+0x210>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <MX_GPIO_Init+0x210>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2132      	movs	r1, #50	; 0x32
 800088e:	4854      	ldr	r0, [pc, #336]	; (80009e0 <MX_GPIO_Init+0x214>)
 8000890:	f004 fb48 	bl	8004f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800089a:	4852      	ldr	r0, [pc, #328]	; (80009e4 <MX_GPIO_Init+0x218>)
 800089c:	f004 fb42 	bl	8004f24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f24c 0103 	movw	r1, #49155	; 0xc003
 80008a6:	4850      	ldr	r0, [pc, #320]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80008a8:	f004 fb3c 	bl	8004f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008ac:	2201      	movs	r2, #1
 80008ae:	f64f 7180 	movw	r1, #65408	; 0xff80
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <MX_GPIO_Init+0x220>)
 80008b4:	f004 fb36 	bl	8004f24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008be:	484c      	ldr	r0, [pc, #304]	; (80009f0 <MX_GPIO_Init+0x224>)
 80008c0:	f004 fb30 	bl	8004f24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008c4:	237e      	movs	r3, #126	; 0x7e
 80008c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4845      	ldr	r0, [pc, #276]	; (80009ec <MX_GPIO_Init+0x220>)
 80008d8:	f004 f988 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008dc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	483b      	ldr	r0, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x214>)
 80008f2:	f004 f97b 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008f6:	2332      	movs	r3, #50	; 0x32
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4834      	ldr	r0, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x214>)
 800090e:	f004 f96d 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000912:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8000916:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	482e      	ldr	r0, [pc, #184]	; (80009e4 <MX_GPIO_Init+0x218>)
 800092c:	f004 f95e 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8000930:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x21c>)
 800094a:	f004 f94f 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800094e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000952:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_GPIO_Init+0x220>)
 8000968:	f004 f940 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800096c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000970:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	; (80009f0 <MX_GPIO_Init+0x224>)
 8000986:	f004 f931 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800098a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x218>)
 80009a0:	f004 f924 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_GPIO_Init+0x224>)
 80009b8:	f004 f918 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009bc:	2338      	movs	r3, #56	; 0x38
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80009d0:	f004 f90c 	bl	8004bec <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_IWDG_Init+0x2c>)
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <MX_IWDG_Init+0x30>)
 80009fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a06:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a0a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_IWDG_Init+0x2c>)
 8000a0e:	f004 faa2 	bl	8004f56 <HAL_IWDG_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 f8ec 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200019d4 	.word	0x200019d4
 8000a24:	40003000 	.word	0x40003000

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f002 fd06 	bl	800343c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f862 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff feca 	bl	80007cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a38:	f7ff fe0c 	bl	8000654 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a3c:	f000 fb9a 	bl	8001174 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a40:	f000 fbc2 	bl	80011c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a44:	f000 fbea 	bl	800121c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000a48:	f000 fa04 	bl	8000e54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a4c:	f000 fa9a 	bl	8000f84 <MX_TIM4_Init>
  MX_IWDG_Init();
 8000a50:	f7ff ffd0 	bl	80009f4 <MX_IWDG_Init>
  MX_CAN1_Init();
 8000a54:	f7ff fd3e 	bl	80004d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2500);
 8000a58:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000a5c:	f002 fd30 	bl	80034c0 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	491a      	ldr	r1, [pc, #104]	; (8000acc <main+0xa4>)
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <main+0xa8>)
 8000a66:	f006 fa52 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 8000a6a:	2264      	movs	r2, #100	; 0x64
 8000a6c:	4919      	ldr	r1, [pc, #100]	; (8000ad4 <main+0xac>)
 8000a6e:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <main+0xb0>)
 8000a70:	f006 fa4d 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 8000a74:	2264      	movs	r2, #100	; 0x64
 8000a76:	4919      	ldr	r1, [pc, #100]	; (8000adc <main+0xb4>)
 8000a78:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <main+0xb8>)
 8000a7a:	f006 fa48 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>

  __HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <main+0xbc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <main+0xbc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0208 	bic.w	r2, r2, #8
 8000a8c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <main+0xc0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <main+0xc0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0208 	bic.w	r2, r2, #8
 8000a9c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <main+0xc4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <main+0xc4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 0208 	bic.w	r2, r2, #8
 8000aac:	601a      	str	r2, [r3, #0]

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000aae:	213c      	movs	r1, #60	; 0x3c
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <main+0xc8>)
 8000ab2:	f005 fa65 	bl	8005f80 <HAL_TIM_Encoder_Start>
  HAL_IWDG_Refresh(&hiwdg);
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <main+0xcc>)
 8000ab8:	f004 fa8f 	bl	8004fda <HAL_IWDG_Refresh>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000abc:	f007 fbc2 	bl	8008244 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ac4:	f007 fbe2 	bl	800828c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0xa0>
 8000aca:	bf00      	nop
 8000acc:	20001f44 	.word	0x20001f44
 8000ad0:	20001ab8 	.word	0x20001ab8
 8000ad4:	20001ee0 	.word	0x20001ee0
 8000ad8:	20001afc 	.word	0x20001afc
 8000adc:	20001e7c 	.word	0x20001e7c
 8000ae0:	20001b40 	.word	0x20001b40
 8000ae4:	20001b84 	.word	0x20001b84
 8000ae8:	20001be4 	.word	0x20001be4
 8000aec:	20001c44 	.word	0x20001c44
 8000af0:	20001a70 	.word	0x20001a70
 8000af4:	200019d4 	.word	0x200019d4

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00a f922 	bl	800ad50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <SystemClock_Config+0xd4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b54:	2309      	movs	r3, #9
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b70:	23a8      	movs	r3, #168	; 0xa8
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 fa3b 	bl	8004ffc <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b8c:	f000 f832 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2105      	movs	r1, #5
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 fc9c 	bl	80054ec <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bba:	f000 f81b 	bl	8000bf4 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	; 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f002 fc4d 	bl	8003480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x54>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_MspInit+0x54>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x54>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_MspInit+0x54>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_MspInit+0x54>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x54>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	210f      	movs	r1, #15
 8000c42:	f06f 0001 	mvn.w	r0, #1
 8000c46:	f003 fba5 	bl	8004394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a32      	ldr	r2, [pc, #200]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <HAL_InitTick+0xe4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c84:	f107 0210 	add.w	r2, r7, #16
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fe4c 	bl	800592c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c9e:	f004 fe1d 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 8000ca2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ca4:	e004      	b.n	8000cb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ca6:	f004 fe19 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 8000caa:	4603      	mov	r3, r0
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <HAL_InitTick+0xe8>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9b      	lsrs	r3, r3, #18
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_InitTick+0xec>)
 8000cc0:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <HAL_InitTick+0xf0>)
 8000cc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_InitTick+0xec>)
 8000cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ccc:	4a1d      	ldr	r2, [pc, #116]	; (8000d44 <HAL_InitTick+0xec>)
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_InitTick+0xec>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_InitTick+0xec>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_InitTick+0xec>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ce4:	4817      	ldr	r0, [pc, #92]	; (8000d44 <HAL_InitTick+0xec>)
 8000ce6:	f004 fe53 	bl	8005990 <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11b      	bne.n	8000d30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <HAL_InitTick+0xec>)
 8000cfa:	f004 fe99 	bl	8005a30 <HAL_TIM_Base_Start_IT>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d111      	bne.n	8000d30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d0c:	2036      	movs	r0, #54	; 0x36
 8000d0e:	f003 fb5d 	bl	80043cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d808      	bhi.n	8000d2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2036      	movs	r0, #54	; 0x36
 8000d1e:	f003 fb39 	bl	8004394 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_InitTick+0xf4>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e002      	b.n	8000d30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	431bde83 	.word	0x431bde83
 8000d44:	200019e0 	.word	0x200019e0
 8000d48:	40001000 	.word	0x40001000
 8000d4c:	20000024 	.word	0x20000024

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA1_Stream1_IRQHandler+0x10>)
 8000d82:	f003 fcc9 	bl	8004718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20001c44 	.word	0x20001c44

08000d90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Stream5_IRQHandler+0x10>)
 8000d96:	f003 fcbf 	bl	8004718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20001be4 	.word	0x20001be4

08000da4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <CAN1_RX0_IRQHandler+0x10>)
 8000daa:	f003 f815 	bl	8003dd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000004c 	.word	0x2000004c

08000db8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <CAN1_SCE_IRQHandler+0x10>)
 8000dbe:	f003 f80b 	bl	8003dd8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000004c 	.word	0x2000004c

08000dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <USART1_IRQHandler+0x10>)
 8000dd2:	f006 f901 	bl	8006fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001ab8 	.word	0x20001ab8

08000de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	f006 f8f7 	bl	8006fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20001afc 	.word	0x20001afc

08000df4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <USART3_IRQHandler+0x10>)
 8000dfa:	f006 f8ed 	bl	8006fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20001b40 	.word	0x20001b40

08000e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM6_DAC_IRQHandler+0x10>)
 8000e0e:	f005 f945 	bl	800609c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200019e0 	.word	0x200019e0

08000e1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <DMA2_Stream2_IRQHandler+0x10>)
 8000e22:	f003 fc79 	bl	8004718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20001b84 	.word	0x20001b84

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e86:	4a3e      	ldr	r2, [pc, #248]	; (8000f80 <MX_TIM3_Init+0x12c>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e8c:	f240 3247 	movw	r2, #839	; 0x347
 8000e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000e9a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eac:	4833      	ldr	r0, [pc, #204]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eae:	f004 fd6f 	bl	8005990 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000eb8:	f7ff fe9c 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482c      	ldr	r0, [pc, #176]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eca:	f005 fab1 	bl	8006430 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ed4:	f7ff fe8e 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed8:	4828      	ldr	r0, [pc, #160]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000eda:	f004 fe19 	bl	8005b10 <HAL_TIM_PWM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ee4:	f7ff fe86 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000ef8:	f005 fe9a 	bl	8006c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f02:	f7ff fe77 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2360      	movs	r3, #96	; 0x60
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f1e:	f005 f9c5 	bl	80062ac <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f28:	f7ff fe64 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f34:	f005 f9ba 	bl	80062ac <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f3e:	f7ff fe59 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2208      	movs	r2, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f4a:	f005 f9af 	bl	80062ac <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f54:	f7ff fe4e 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f60:	f005 f9a4 	bl	80062ac <HAL_TIM_PWM_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000f6a:	f7ff fe43 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM3_Init+0x128>)
 8000f70:	f000 f8c6 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20001a28 	.word	0x20001a28
 8000f80:	40000400 	.word	0x40000400

08000f84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f009 fedc 	bl	800ad50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <MX_TIM4_Init+0xa4>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_TIM4_Init+0xa0>)
 8000ff2:	f004 ff1f 	bl	8005e34 <HAL_TIM_Encoder_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ffc:	f7ff fdfa 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_TIM4_Init+0xa0>)
 800100e:	f005 fe0f 	bl	8006c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001018:	f7ff fdec 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	; 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20001a70 	.word	0x20001a70
 8001028:	40000800 	.word	0x40000800

0800102c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_TIM_Encoder_MspInit+0x84>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12b      	bne.n	80010ea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ca:	23c0      	movs	r3, #192	; 0xc0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010da:	2302      	movs	r3, #2
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80010e6:	f003 fd81 	bl	8004bec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40000800 	.word	0x40000800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020400 	.word	0x40020400

08001100 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_TIM_MspPostInit+0x68>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d11e      	bne.n	8001160 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800113e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_TIM_MspPostInit+0x70>)
 800115c:	f003 fd46 	bl	8004bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40000400 	.word	0x40000400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800

08001174 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_USART1_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART1_UART_Init+0x4c>)
 80011ac:	f005 fdd0 	bl	8006d50 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f7ff fd1d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20001ab8 	.word	0x20001ab8
 80011c4:	40011000 	.word	0x40011000

080011c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 8001200:	f005 fda6 	bl	8006d50 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f7ff fcf3 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20001afc 	.word	0x20001afc
 8001218:	40004400 	.word	0x40004400

0800121c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART3_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800122c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001254:	f005 fd7c 	bl	8006d50 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f7ff fcc9 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001b40 	.word	0x20001b40
 800126c:	40004800 	.word	0x40004800

08001270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a9d      	ldr	r2, [pc, #628]	; (8001504 <HAL_UART_MspInit+0x294>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d163      	bne.n	800135a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a9b      	ldr	r2, [pc, #620]	; (8001508 <HAL_UART_MspInit+0x298>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b99      	ldr	r3, [pc, #612]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	4b95      	ldr	r3, [pc, #596]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a94      	ldr	r2, [pc, #592]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b92      	ldr	r3, [pc, #584]	; (8001508 <HAL_UART_MspInit+0x298>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012dc:	2307      	movs	r3, #7
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4889      	ldr	r0, [pc, #548]	; (800150c <HAL_UART_MspInit+0x29c>)
 80012e8:	f003 fc80 	bl	8004bec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012ec:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <HAL_UART_MspInit+0x2a4>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012f2:	4b87      	ldr	r3, [pc, #540]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b83      	ldr	r3, [pc, #524]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800130e:	4b80      	ldr	r3, [pc, #512]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001320:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800132c:	4878      	ldr	r0, [pc, #480]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 800132e:	f003 f85b 	bl	80043e8 <HAL_DMA_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001338:	f7ff fc5c 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a74      	ldr	r2, [pc, #464]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001340:	639a      	str	r2, [r3, #56]	; 0x38
 8001342:	4a73      	ldr	r2, [pc, #460]	; (8001510 <HAL_UART_MspInit+0x2a0>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2105      	movs	r1, #5
 800134c:	2025      	movs	r0, #37	; 0x25
 800134e:	f003 f821 	bl	8004394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001352:	2025      	movs	r0, #37	; 0x25
 8001354:	f003 f83a 	bl	80043cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001358:	e0cf      	b.n	80014fa <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_UART_MspInit+0x2a8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d162      	bne.n	800142a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_UART_MspInit+0x298>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a66      	ldr	r2, [pc, #408]	; (8001508 <HAL_UART_MspInit+0x298>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a5f      	ldr	r2, [pc, #380]	; (8001508 <HAL_UART_MspInit+0x298>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139c:	230c      	movs	r3, #12
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ac:	2307      	movs	r3, #7
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4855      	ldr	r0, [pc, #340]	; (800150c <HAL_UART_MspInit+0x29c>)
 80013b8:	f003 fc18 	bl	8004bec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013bc:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013be:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_UART_MspInit+0x2b0>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b52      	ldr	r3, [pc, #328]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013de:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e4:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013ea:	4b4c      	ldr	r3, [pc, #304]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b49      	ldr	r3, [pc, #292]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013fc:	4847      	ldr	r0, [pc, #284]	; (800151c <HAL_UART_MspInit+0x2ac>)
 80013fe:	f002 fff3 	bl	80043e8 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001408:	f7ff fbf4 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_UART_MspInit+0x2ac>)
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <HAL_UART_MspInit+0x2ac>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2105      	movs	r1, #5
 800141c:	2026      	movs	r0, #38	; 0x26
 800141e:	f002 ffb9 	bl	8004394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001422:	2026      	movs	r0, #38	; 0x26
 8001424:	f002 ffd2 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 8001428:	e067      	b.n	80014fa <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART3)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <HAL_UART_MspInit+0x2b4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d162      	bne.n	80014fa <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_UART_MspInit+0x298>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_UART_MspInit+0x298>)
 800143e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <HAL_UART_MspInit+0x298>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_UART_MspInit+0x298>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800146c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800147e:	2307      	movs	r3, #7
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4827      	ldr	r0, [pc, #156]	; (8001528 <HAL_UART_MspInit+0x2b8>)
 800148a:	f003 fbaf 	bl	8004bec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_UART_MspInit+0x2bc>)
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_UART_MspInit+0x2c0>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_UART_MspInit+0x2bc>)
 8001496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_UART_MspInit+0x2bc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014d0:	f002 ff8a 	bl	80043e8 <HAL_DMA_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_UART_MspInit+0x26e>
      Error_Handler();
 80014da:	f7ff fb8b 	bl	8000bf4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_UART_MspInit+0x2bc>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2105      	movs	r1, #5
 80014ee:	2027      	movs	r0, #39	; 0x27
 80014f0:	f002 ff50 	bl	8004394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014f4:	2027      	movs	r0, #39	; 0x27
 80014f6:	f002 ff69 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3738      	adds	r7, #56	; 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40011000 	.word	0x40011000
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000
 8001510:	20001b84 	.word	0x20001b84
 8001514:	40026440 	.word	0x40026440
 8001518:	40004400 	.word	0x40004400
 800151c:	20001be4 	.word	0x20001be4
 8001520:	40026088 	.word	0x40026088
 8001524:	40004800 	.word	0x40004800
 8001528:	40020400 	.word	0x40020400
 800152c:	20001c44 	.word	0x20001c44
 8001530:	40026028 	.word	0x40026028

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153a:	490e      	ldr	r1, [pc, #56]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001550:	4c0b      	ldr	r4, [pc, #44]	; (8001580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155e:	f7ff fc67 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f009 fbc3 	bl	800acec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fa5f 	bl	8000a28 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800156c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001578:	0800af88 	.word	0x0800af88
  ldr r2, =_sbss
 800157c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001580:	20006904 	.word	0x20006904

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>

08001586 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef>:
 *      Author: user
 */

#include <KeyaLKTechDriver.h>

KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, uint32_t stdId, GlobDataTypeDef &globData) : _globData{globData}
 8001586:	b4b0      	push	{r4, r5, r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a3a      	ldr	r2, [r7, #32]
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c
{
	_axis = axis;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
	_canTxHeader.ExtId = extId;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	609a      	str	r2, [r3, #8]
	_canTxHeader.StdId = stdId;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	605a      	str	r2, [r3, #4]
	_canTxHeader.RTR = CAN_RTR_DATA;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
	_canTxHeader.DLC = 8;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2208      	movs	r2, #8
 80015fa:	615a      	str	r2, [r3, #20]
	_canTxHeader.TransmitGlobalTime = DISABLE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	761a      	strb	r2, [r3, #24]
	if (extId)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef+0x8a>
	{
		_canTxHeader.IDE = CAN_ID_EXT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2204      	movs	r2, #4
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	e002      	b.n	8001616 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef+0x90>
	}
	else
	{
		_canTxHeader.IDE = CAN_ID_STD;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
	}
	_globData = globData;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	4614      	mov	r4, r2
 800161e:	461d      	mov	r5, r3
 8001620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001624:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001628:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bcb0      	pop	{r4, r5, r7}
 8001636:	4770      	bx	lr

08001638 <_ZN16KeyaLKTechDriverC1EmmR15GlobDataTypeDef>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t extId, uint32_t axis, GlobDataTypeDef &globData) : KeyaLKTechDriver::KeyaLKTechDriver(extId, axis, 0, globData){}
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ff98 	bl	8001586 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZN16KeyaLKTechDriverC1EmR15GlobDataTypeDef>:
KeyaLKTechDriver::KeyaLKTechDriver(uint32_t stdId, GlobDataTypeDef &globData) : KeyaLKTechDriver::KeyaLKTechDriver(0, 0, stdId, globData){}
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff ff85 	bl	8001586 <_ZN16KeyaLKTechDriverC1EmmmR15GlobDataTypeDef>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZN16KeyaLKTechDriver8setSpeedEl>:

uint8_t KeyaLKTechDriver::setSpeed(int32_t speed)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	if (!_enabled) KeyaLKTechDriver::enable();
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f993 303a 	ldrsb.w	r3, [r3, #58]	; 0x3a
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <_ZN16KeyaLKTechDriver8setSpeedEl+0x1a>
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8a6 	bl	80017ec <_ZN16KeyaLKTechDriver6enableEv>
	osDelay(2);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f006 feab 	bl	80083fc <osDelay>
	if (_axis)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d025      	beq.n	80016fa <_ZN16KeyaLKTechDriver8setSpeedEl+0x74>
	{
		_canData[0] = 0x23;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2223      	movs	r2, #35	; 0x23
 80016b2:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2220      	movs	r2, #32
 80016be:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	77da      	strb	r2, [r3, #31]
		_canData[4] = speed >> 24;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	161b      	asrs	r3, r3, #24
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = speed >> 16;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	141b      	asrs	r3, r3, #16
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = speed >> 8;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	121b      	asrs	r3, r3, #8
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = speed;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80016f8:	e022      	b.n	8001740 <_ZN16KeyaLKTechDriver8setSpeedEl+0xba>
	}
	else
	{
		_canData[0] = 0xA2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	22a2      	movs	r2, #162	; 0xa2
 80016fe:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	77da      	strb	r2, [r3, #31]
		_canData[4] = speed;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = speed >> 8;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	121b      	asrs	r3, r3, #8
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = speed >> 16;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	141b      	asrs	r3, r3, #16
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = speed >> 24;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	161b      	asrs	r3, r3, #24
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		_canData[5] = *((uint8_t *)(&speed)+1);
		_canData[6] = *((uint8_t *)(&speed)+2);
		_canData[7] = *((uint8_t *)(&speed)+3);*/
	}

	return KeyaLKTechDriver::sendData();
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fa8e 	bl	8001c62 <_ZN16KeyaLKTechDriver8sendDataEv>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZN16KeyaLKTechDriver4stopEv>:

uint8_t KeyaLKTechDriver::stop()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	if (_axis) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01e      	beq.n	800179e <_ZN16KeyaLKTechDriver4stopEv+0x4e>
		_canData[0] = 0x23;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2223      	movs	r2, #35	; 0x23
 8001764:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2220      	movs	r2, #32
 8001770:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800179c:	e01b      	b.n	80017d6 <_ZN16KeyaLKTechDriver4stopEv+0x86>
	} else {
		_canData[0] = 0x81;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2281      	movs	r2, #129	; 0x81
 80017a2:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	_speed = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
	return KeyaLKTechDriver::sendData();
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fa40 	bl	8001c62 <_ZN16KeyaLKTechDriver8sendDataEv>
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZN16KeyaLKTechDriver6enableEv>:
	KeyaLKTechDriver::setSpeed(_speed);
	return 0;
}

uint8_t KeyaLKTechDriver::enable()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01e      	beq.n	800183a <_ZN16KeyaLKTechDriver6enableEv+0x4e>
		_canData[0] = 0x23;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2223      	movs	r2, #35	; 0x23
 8001800:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x0D;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	220d      	movs	r2, #13
 8001806:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2220      	movs	r2, #32
 800180c:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001838:	e01b      	b.n	8001872 <_ZN16KeyaLKTechDriver6enableEv+0x86>
	} else {
		_canData[0] = 0x88;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2288      	movs	r2, #136	; 0x88
 800183e:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	_enabled = 1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	return KeyaLKTechDriver::sendData();
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f9f1 	bl	8001c62 <_ZN16KeyaLKTechDriver8sendDataEv>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZN16KeyaLKTechDriver5getIdEv>:
	_enabled = 0;
	return KeyaLKTechDriver::sendData();
}

uint32_t KeyaLKTechDriver::getId()
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]

	if (_canTxHeader.ExtId)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <_ZN16KeyaLKTechDriver5getIdEv+0x16>
	{
		return  _canTxHeader.ExtId;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	e001      	b.n	80018a4 <_ZN16KeyaLKTechDriver5getIdEv+0x1a>
	}
	return  _canTxHeader.StdId;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZN16KeyaLKTechDriver7readEncEv>:

uint8_t KeyaLKTechDriver::readEnc()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01e      	beq.n	80018fe <_ZN16KeyaLKTechDriver7readEncEv+0x4e>
		_canData[0] = 0x23;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2223      	movs	r2, #35	; 0x23
 80018c4:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x0C;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	220c      	movs	r2, #12
 80018ca:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x20;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	779a      	strb	r2, [r3, #30]
		_canData[3] = _axis;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80018fc:	e01b      	b.n	8001936 <_ZN16KeyaLKTechDriver7readEncEv+0x86>
	} else {
		_canData[0] = 0x9C;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	229c      	movs	r2, #156	; 0x9c
 8001902:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	return CanMsgSend(&_canTxHeader, _canData);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	331c      	adds	r3, #28
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f000 fb35 	bl	8001fb0 <CanMsgSend>
 8001946:	4603      	mov	r3, r0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN16KeyaLKTechDriver9readErrorEv>:

uint8_t KeyaLKTechDriver::readError()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if (_axis) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11b      	bne.n	8001998 <_ZN16KeyaLKTechDriver9readErrorEv+0x48>
//		_canData[4] = 0x00;
//		_canData[5] = 0x00;
//		_canData[6] = 0x00;
//		_canData[7] = 0x00;
	} else {
		_canData[0] = 0x9A;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	229a      	movs	r2, #154	; 0x9a
 8001964:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	return CanMsgSend(&_canTxHeader, _canData);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	1d1a      	adds	r2, r3, #4
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	331c      	adds	r3, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f000 fb04 	bl	8001fb0 <CanMsgSend>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>:

uint8_t KeyaLKTechDriver::resetError()
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	if (_axis) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11b      	bne.n	80019fa <_ZN16KeyaLKTechDriver10resetErrorEv+0x48>
//		_canData[4] = 0x00;
//		_canData[5] = 0x00;
//		_canData[6] = 0x00;
//		_canData[7] = 0x00;
	} else {
		_canData[0] = 0x9B;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	229b      	movs	r2, #155	; 0x9b
 80019c6:	771a      	strb	r2, [r3, #28]
		_canData[1] = 0x00;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	775a      	strb	r2, [r3, #29]
		_canData[2] = 0x00;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	779a      	strb	r2, [r3, #30]
		_canData[3] = 0x00;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	77da      	strb	r2, [r3, #31]
		_canData[4] = 0x00;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2020 	strb.w	r2, [r3, #32]
		_canData[5] = 0x00;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		_canData[6] = 0x00;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		_canData[7] = 0x00;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
	return CanMsgSend(&_canTxHeader, _canData);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	1d1a      	adds	r2, r3, #4
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	331c      	adds	r3, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f000 fad3 	bl	8001fb0 <CanMsgSend>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZN16KeyaLKTechDriver6getPosEv>:

int32_t KeyaLKTechDriver::getPos()
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	return _enc;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>:

int32_t KeyaLKTechDriver::getSpeed()
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return _speed;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_ZN16KeyaLKTechDriver8getErrorEv>:
{
	return _temp;
}

int8_t KeyaLKTechDriver::getError()
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return _error;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f993 303b 	ldrsb.w	r3, [r3, #59]	; 0x3b
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_ZN16KeyaLKTechDriver7setTempEa>:
{
	return _holding;
}

void KeyaLKTechDriver::setTemp(int8_t temp)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	70fb      	strb	r3, [r7, #3]
	_temp = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_ZN16KeyaLKTechDriver8setErrorEa>:

void KeyaLKTechDriver::setError(int8_t error)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70fb      	strb	r3, [r7, #3]
	_error = error;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <_ZN16KeyaLKTechDriver6setPosEl>:
{
	_enc_offset = _enc;
}

uint8_t KeyaLKTechDriver::setPos(int32_t pos)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	if (!_canTxHeader.ExtId)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d152      	bne.n	8001b58 <_ZN16KeyaLKTechDriver6setPosEl+0xb8>
	{
		//KeyaLKTechDriver::readEnc();
		//osDelay(5);
		//KeyaLKTechDriver::enable();
		if (pos < _enc - POS_TOLERANCE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	3b32      	subs	r3, #50	; 0x32
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	da1f      	bge.n	8001afe <_ZN16KeyaLKTechDriver6setPosEl+0x5e>
		{
			int32_t diff = _enc - pos;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	60bb      	str	r3, [r7, #8]
			if (diff > LK_MAX_SPEED)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4a39      	ldr	r2, [pc, #228]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	dd03      	ble.n	8001ad8 <_ZN16KeyaLKTechDriver6setPosEl+0x38>
			{
				_speed = -LK_MAX_SPEED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <_ZN16KeyaLKTechDriver6setPosEl+0x114>)
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ad6:	e00b      	b.n	8001af0 <_ZN16KeyaLKTechDriver6setPosEl+0x50>
			}
			else
			{
				_speed = -diff;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	425a      	negs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
				if (_speed > -LK_MIN_SPEED) _speed = -LK_MIN_SPEED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8001ae8:	dd02      	ble.n	8001af0 <_ZN16KeyaLKTechDriver6setPosEl+0x50>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a32      	ldr	r2, [pc, #200]	; (8001bb8 <_ZN16KeyaLKTechDriver6setPosEl+0x118>)
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
			}
			KeyaLKTechDriver::setSpeed(_speed);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fdc5 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001afc:	e028      	b.n	8001b50 <_ZN16KeyaLKTechDriver6setPosEl+0xb0>
		}
		else if (pos > _enc + POS_TOLERANCE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	3332      	adds	r3, #50	; 0x32
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dd1f      	ble.n	8001b4a <_ZN16KeyaLKTechDriver6setPosEl+0xaa>
		{
			int32_t diff = pos - _enc;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	60fb      	str	r3, [r7, #12]
			if (diff > LK_MAX_SPEED)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	dd03      	ble.n	8001b24 <_ZN16KeyaLKTechDriver6setPosEl+0x84>
			{
				_speed = LK_MAX_SPEED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
 8001b22:	e00b      	b.n	8001b3c <_ZN16KeyaLKTechDriver6setPosEl+0x9c>
			}
			else
			{
				_speed = diff;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
				if (_speed < LK_MIN_SPEED) _speed = LK_MIN_SPEED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b32:	da03      	bge.n	8001b3c <_ZN16KeyaLKTechDriver6setPosEl+0x9c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			KeyaLKTechDriver::setSpeed(_speed);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd9f 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001b48:	e002      	b.n	8001b50 <_ZN16KeyaLKTechDriver6setPosEl+0xb0>
		}
		else
		{
			KeyaLKTechDriver::stop();
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe00 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
		}
		osDelay(2);
 8001b50:	2002      	movs	r0, #2
 8001b52:	f006 fc53 	bl	80083fc <osDelay>
 8001b56:	e025      	b.n	8001ba4 <_ZN16KeyaLKTechDriver6setPosEl+0x104>
	}
	else
	{
		if (pos < _enc - POS_TOLERANCE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	3b32      	subs	r3, #50	; 0x32
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	da09      	bge.n	8001b78 <_ZN16KeyaLKTechDriver6setPosEl+0xd8>
		{
			_speed = -LK_MAX_SPEED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <_ZN16KeyaLKTechDriver6setPosEl+0x114>)
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
			KeyaLKTechDriver::setSpeed(_speed);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fd88 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001b76:	e012      	b.n	8001b9e <_ZN16KeyaLKTechDriver6setPosEl+0xfe>
		}
		else if (pos > _enc + POS_TOLERANCE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	3332      	adds	r3, #50	; 0x32
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dd09      	ble.n	8001b98 <_ZN16KeyaLKTechDriver6setPosEl+0xf8>
		{
			_speed = LK_MAX_SPEED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <_ZN16KeyaLKTechDriver6setPosEl+0x110>)
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
			KeyaLKTechDriver::setSpeed(_speed);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fd78 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 8001b96:	e002      	b.n	8001b9e <_ZN16KeyaLKTechDriver6setPosEl+0xfe>
		}
		else
		{
			KeyaLKTechDriver::stop();
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fdd9 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
		}
		osDelay(2);
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f006 fc2c 	bl	80083fc <osDelay>
	}
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	000186a0 	.word	0x000186a0
 8001bb4:	fffe7960 	.word	0xfffe7960
 8001bb8:	fffff830 	.word	0xfffff830

08001bbc <_ZN16KeyaLKTechDriver6setEncEl>:

void KeyaLKTechDriver::setEnc(int32_t enc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	if (!_canTxHeader.ExtId)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <_ZN16KeyaLKTechDriver6setEncEl+0x30>
	{
		_enc = KeyaLKTechDriver::UnwrapEncoder(enc, &_prevEnc) - _enc_offset;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3334      	adds	r3, #52	; 0x34
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f80e 	bl	8001bfa <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl>
 8001bde:	4602      	mov	r2, r0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	1ad2      	subs	r2, r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	else _enc = enc;
}
 8001bea:	e002      	b.n	8001bf2 <_ZN16KeyaLKTechDriver6setEncEl+0x36>
	else _enc = enc;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl>:

int32_t KeyaLKTechDriver::UnwrapEncoder(uint16_t in, int32_t *prev)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b089      	sub	sp, #36	; 0x24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	460b      	mov	r3, r1
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	817b      	strh	r3, [r7, #10]
    int32_t c32 = (int32_t)in - LK_ENC_HALF_PERIOD;
 8001c08:	897b      	ldrh	r3, [r7, #10]
 8001c0a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001c0e:	61bb      	str	r3, [r7, #24]
    int32_t dif = (c32-*prev);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]

    int32_t mod_dif = ((dif + LK_ENC_HALF_PERIOD) % LK_ENC_ONE_PERIOD) - LK_ENC_HALF_PERIOD;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c20:	425a      	negs	r2, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b292      	uxth	r2, r2
 8001c26:	bf58      	it	pl
 8001c28:	4253      	negpl	r3, r2
 8001c2a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001c2e:	61fb      	str	r3, [r7, #28]
    if(dif < -LK_ENC_HALF_PERIOD) {
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001c36:	da03      	bge.n	8001c40 <_ZN16KeyaLKTechDriver13UnwrapEncoderEtPl+0x46>
        mod_dif += LK_ENC_ONE_PERIOD;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c3e:	61fb      	str	r3, [r7, #28]
    }
    int32_t unwrapped = *prev + mod_dif;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
    *prev = unwrapped;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	601a      	str	r2, [r3, #0]

    return unwrapped + LK_ENC_HALF_PERIOD;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_ZN16KeyaLKTechDriver8sendDataEv>:

uint8_t KeyaLKTechDriver::sendData()
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	return CanMsgSend(&_canTxHeader, _canData);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1d1a      	adds	r2, r3, #4
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	331c      	adds	r3, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f000 f99b 	bl	8001fb0 <CanMsgSend>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN5ServoC1EP17TIM_HandleTypeDefm>:
 *      Author: user
 */

#include "Servo.h"

Servo::Servo(TIM_HandleTypeDef *htim, uint32_t timChannel)
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
{
	_htim = htim;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	601a      	str	r2, [r3, #0]
	_timChannel = timChannel;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	605a      	str	r2, [r3, #4]
}
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_ZN5Servo8setAngleEl>:
uint8_t Servo::setAngle(int32_t angle)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af02      	add	r7, sp, #8
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(_htim, _timChannel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f003 ff80 	bl	8005bc4 <HAL_TIM_PWM_Start>
	uint32_t angl = Servo::map(angle, SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_W, SERVO_MAX_W);
 8001cc4:	f240 7399 	movw	r3, #1945	; 0x799
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f84d 	bl	8001d78 <_ZN5Servo3mapEiiiii>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]
//	if (_timChannel == TIM_CHANNEL_1) _htim->CCR1 = angl;
//	else if (_timChannel == TIM_CHANNEL_2) _htim->CCR2 = angl;
//	else if (_timChannel == TIM_CHANNEL_3) _htim->CCR3 = angl;
//	else if (_timChannel == TIM_CHANNEL_4) _htim->CCR4 = angl;
	__HAL_TIM_SET_COMPARE(_htim, _timChannel, angl);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <_ZN5Servo8setAngleEl+0x4c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf4:	e018      	b.n	8001d28 <_ZN5Servo8setAngleEl+0x7e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d105      	bne.n	8001d0a <_ZN5Servo8setAngleEl+0x60>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	639a      	str	r2, [r3, #56]	; 0x38
 8001d08:	e00e      	b.n	8001d28 <_ZN5Servo8setAngleEl+0x7e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d105      	bne.n	8001d1e <_ZN5Servo8setAngleEl+0x74>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d1c:	e004      	b.n	8001d28 <_ZN5Servo8setAngleEl+0x7e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
	_angle = angle;
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
	//osDelay(800);
	//HAL_TIM_PWM_Stop(_htim, _timChannel);
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN5Servo8getAngleEv>:
	return 0;

}

uint32_t Servo::getAngle()
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	return _angle;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN5Servo7disableEv>:
	_enabled = 1;
	HAL_TIM_PWM_Start(_htim, _timChannel);
	return 1;
}
uint8_t Servo::disable()
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	_enabled = 0;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Stop(_htim, _timChannel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f003 fff3 	bl	8005d54 <HAL_TIM_PWM_Stop>
	return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_ZN5Servo3mapEiiiii>:

int Servo::map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	69f9      	ldr	r1, [r7, #28]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	1a8a      	subs	r2, r1, r2
 8001d92:	fb03 f202 	mul.w	r2, r3, r2
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1acb      	subs	r3, r1, r3
 8001d9c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	4413      	add	r3, r2
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db12      	blt.n	8001e24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	490a      	ldr	r1, [pc, #40]	; (8001e30 <__NVIC_DisableIRQ+0x44>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	3320      	adds	r3, #32
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e18:	f3bf 8f4f 	dsb	sy
}
 8001e1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e1e:	f3bf 8f6f 	isb	sy
}
 8001e22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <StartCanTask>:
extern KeyaLKTechDriver DriverLR;

extern KeyaLKTechDriver *mdrivers[DRIVERS_QUANT];


void StartCanTask(void *argument) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	for (;;) {
		static uint32_t err_count = 0;
		if (NewCanMsg == CAN_GET_MSG_OK) {
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <StartCanTask+0x5c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <StartCanTask+0x30>
			NewCanMsg = CAN_GET_MSG_WAIT;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <StartCanTask+0x5c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
			err_count = 0;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <StartCanTask+0x60>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
			//globData.error.driver_conn = 0;
			CanMsgRead(&canDataRecv);
 8001e5c:	480e      	ldr	r0, [pc, #56]	; (8001e98 <StartCanTask+0x64>)
 8001e5e:	f000 f81d 	bl	8001e9c <CanMsgRead>
 8001e62:	e011      	b.n	8001e88 <StartCanTask+0x54>
		}
		else if (NewCanMsg == CAN_GET_MSG_ERROR) {
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <StartCanTask+0x5c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <StartCanTask+0x54>
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "CAN error\r\n", 11, 100);
			err_count++;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <StartCanTask+0x60>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <StartCanTask+0x60>)
 8001e80:	6013      	str	r3, [r2, #0]
				globData.drv_cpu_temp = 0;
				globData.motor1_temp = 0;
				globData.motor2_temp = 0;
				globData.voltage = 0;*/
			}
			NewCanMsg = CAN_GET_MSG_WAIT;
 8001e82:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <StartCanTask+0x5c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f006 fab7 	bl	80083fc <osDelay>
	}
 8001e8e:	e7d5      	b.n	8001e3c <StartCanTask+0x8>
 8001e90:	20001ca4 	.word	0x20001ca4
 8001e94:	20001cd8 	.word	0x20001cd8
 8001e98:	20001cd0 	.word	0x20001cd0

08001e9c <CanMsgRead>:
}

uint8_t CanMsgRead(CanDataRecvTypeDef *canDataRecv) {
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

	NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001ea4:	2014      	movs	r0, #20
 8001ea6:	f7ff ffa1 	bl	8001dec <__NVIC_DisableIRQ>
	if (RxHeader.IDE == CAN_STD_ID)
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <CanMsgRead+0x100>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d148      	bne.n	8001f44 <CanMsgRead+0xa8>
	{
		for (int i=0; i<2; i++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	dc66      	bgt.n	8001f8a <CanMsgRead+0xee>
		{
			if (RxHeader.StdId == mdrivers[i]->getId()) {
 8001ebc:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <CanMsgRead+0x100>)
 8001ebe:	681c      	ldr	r4, [r3, #0]
 8001ec0:	4a37      	ldr	r2, [pc, #220]	; (8001fa0 <CanMsgRead+0x104>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fcde 	bl	800188a <_ZN16KeyaLKTechDriver5getIdEv>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d02e      	beq.n	8001f3c <CanMsgRead+0xa0>
				if (RxData[0] == 0x9C)
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <CanMsgRead+0x108>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b9c      	cmp	r3, #156	; 0x9c
 8001ee4:	d11b      	bne.n	8001f1e <CanMsgRead+0x82>
				{
					mdrivers[i]->setEnc(*(uint16_t*) &RxData[6]);
 8001ee6:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <CanMsgRead+0x104>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	4a2e      	ldr	r2, [pc, #184]	; (8001fa8 <CanMsgRead+0x10c>)
 8001ef0:	8812      	ldrh	r2, [r2, #0]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fe61 	bl	8001bbc <_ZN16KeyaLKTechDriver6setEncEl>
					mdrivers[i]->setTemp(RxData[1]);
 8001efa:	4a29      	ldr	r2, [pc, #164]	; (8001fa0 <CanMsgRead+0x104>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <CanMsgRead+0x108>)
 8001f04:	7852      	ldrb	r2, [r2, #1]
 8001f06:	b252      	sxtb	r2, r2
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fda7 	bl	8001a5e <_ZN16KeyaLKTechDriver7setTempEa>
					mdrivers[i]->_error_count = 0;
 8001f10:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <CanMsgRead+0x104>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e00e      	b.n	8001f3c <CanMsgRead+0xa0>
				}
				else if (RxData[0] == 0x9A)
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <CanMsgRead+0x108>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b9a      	cmp	r3, #154	; 0x9a
 8001f24:	d10a      	bne.n	8001f3c <CanMsgRead+0xa0>
				{
					mdrivers[i]->setError(RxData[7]);
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <CanMsgRead+0x104>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <CanMsgRead+0x108>)
 8001f30:	79d2      	ldrb	r2, [r2, #7]
 8001f32:	b252      	sxtb	r2, r2
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fda1 	bl	8001a7e <_ZN16KeyaLKTechDriver8setErrorEa>
		for (int i=0; i<2; i++)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e7b8      	b.n	8001eb6 <CanMsgRead+0x1a>
			}
		}
	}
	else
	{
		if (RxHeader.ExtId == 0x05800001) {
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <CanMsgRead+0x100>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <CanMsgRead+0x110>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d11d      	bne.n	8001f8a <CanMsgRead+0xee>
			if (RxData[0] == 0x60)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <CanMsgRead+0x108>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b60      	cmp	r3, #96	; 0x60
 8001f54:	d116      	bne.n	8001f84 <CanMsgRead+0xe8>
			{
				mdrivers[2]->setTemp(RxData[6]);
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <CanMsgRead+0x104>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <CanMsgRead+0x108>)
 8001f5c:	7992      	ldrb	r2, [r2, #6]
 8001f5e:	b252      	sxtb	r2, r2
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fd7b 	bl	8001a5e <_ZN16KeyaLKTechDriver7setTempEa>
				mdrivers[3]->setTemp(RxData[7]);
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <CanMsgRead+0x104>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <CanMsgRead+0x108>)
 8001f6e:	79d2      	ldrb	r2, [r2, #7]
 8001f70:	b252      	sxtb	r2, r2
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fd72 	bl	8001a5e <_ZN16KeyaLKTechDriver7setTempEa>
				mdrivers[2]->_error_count = 0;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <CanMsgRead+0x104>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e002      	b.n	8001f8a <CanMsgRead+0xee>
			}
			else if (RxData[1] == 0x0D) {
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <CanMsgRead+0x108>)
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	2b0d      	cmp	r3, #13


	//HAL_UART_Transmit(&WIFI_UART, (uint8_t*) "get\r\n", 5, 100);
	//HAL_UART_Transmit(&WIFI_UART, RxData, 8, 100);

	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f8a:	2014      	movs	r0, #20
 8001f8c:	f7ff ff10 	bl	8001db0 <__NVIC_EnableIRQ>
	return 1;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20001ca8 	.word	0x20001ca8
 8001fa0:	20001ddc 	.word	0x20001ddc
 8001fa4:	20001cc4 	.word	0x20001cc4
 8001fa8:	20001cca 	.word	0x20001cca
 8001fac:	05800001 	.word	0x05800001

08001fb0 <CanMsgSend>:


uint8_t CanMsgSend(CAN_TxHeaderTypeDef *TxHeader, uint8_t canData[]) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]

	if (TxHeader->ExtId != 0 || TxHeader->StdId != 0)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <CanMsgSend+0x1a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d01b      	beq.n	8002002 <CanMsgSend+0x52>
	{
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8001fca:	4810      	ldr	r0, [pc, #64]	; (800200c <CanMsgSend+0x5c>)
 8001fcc:	f001 fd97 	bl	8003afe <HAL_CAN_GetTxMailboxesFreeLevel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2301      	moveq	r3, #1
 8001fd8:	2300      	movne	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d000      	beq.n	8001fe2 <CanMsgSend+0x32>
 8001fe0:	e7f3      	b.n	8001fca <CanMsgSend+0x1a>
		if (HAL_CAN_AddTxMessage(&hcan1, TxHeader, canData, &TxMailbox) != HAL_OK) {
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <CanMsgSend+0x60>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4808      	ldr	r0, [pc, #32]	; (800200c <CanMsgSend+0x5c>)
 8001fea:	f001 fcad 	bl	8003948 <HAL_CAN_AddTxMessage>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <CanMsgSend+0x52>
			//HAL_UART_Transmit(&huart1, (uint8_t*) "no_trans\r\n", 10, 100);
			return 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <CanMsgSend+0x54>
		}
	}
	return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000004c 	.word	0x2000004c
 8002010:	20001ccc 	.word	0x20001ccc

08002014 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002020:	2100      	movs	r1, #0
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f001 fda0 	bl	8003b68 <HAL_CAN_GetRxMessage>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	bf14      	ite	ne
 800202e:	2301      	movne	r3, #1
 8002030:	2300      	moveq	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		Error_Handler();
 8002038:	f7fe fddc 	bl	8000bf4 <Error_Handler>
	}
	NewCanMsg = CAN_GET_MSG_OK;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20001cc4 	.word	0x20001cc4
 8002050:	20001ca8 	.word	0x20001ca8
 8002054:	20001ca4 	.word	0x20001ca4

08002058 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	NewCanMsg = CAN_GET_MSG_ERROR;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_CAN_ErrorCallback+0x1c>)
 8002062:	2202      	movs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20001ca4 	.word	0x20001ca4

08002078 <StartCanDriversTask>:
KeyaLKTechDriver driverY1(DRIVER_KEYA_ID + 0x600, 0x01, globData);
KeyaLKTechDriver driverY2(DRIVER_KEYA_ID + 0x600, 0x02, globData);
KeyaLKTechDriver *mdrivers[DRIVERS_QUANT];

void StartCanDriversTask(void *argument)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	driversInit();
 8002080:	f000 f892 	bl	80021a8 <driversInit>
	enum MOVE_COMM command;
	for(;;)
	{
		driverX1.readEnc();
 8002084:	4842      	ldr	r0, [pc, #264]	; (8002190 <StartCanDriversTask+0x118>)
 8002086:	f7ff fc13 	bl	80018b0 <_ZN16KeyaLKTechDriver7readEncEv>
		osDelay(2);
 800208a:	2002      	movs	r0, #2
 800208c:	f006 f9b6 	bl	80083fc <osDelay>
		driverX2.readEnc();
 8002090:	4840      	ldr	r0, [pc, #256]	; (8002194 <StartCanDriversTask+0x11c>)
 8002092:	f7ff fc0d 	bl	80018b0 <_ZN16KeyaLKTechDriver7readEncEv>
		osDelay(2);
 8002096:	2002      	movs	r0, #2
 8002098:	f006 f9b0 	bl	80083fc <osDelay>
		driverY1.setEnc(globData.enc_idle);
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <StartCanDriversTask+0x120>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4619      	mov	r1, r3
 80020a2:	483e      	ldr	r0, [pc, #248]	; (800219c <StartCanDriversTask+0x124>)
 80020a4:	f7ff fd8a 	bl	8001bbc <_ZN16KeyaLKTechDriver6setEncEl>
		command = (MOVE_COMM)contrlMsg.comm;
 80020a8:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <StartCanDriversTask+0x128>)
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	73fb      	strb	r3, [r7, #15]
		if (command != MOVE_NONE)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d03a      	beq.n	800212a <StartCanDriversTask+0xb2>
		{
			if (command == MOVE_POS_X)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11e      	bne.n	80020f8 <StartCanDriversTask+0x80>
			{
				driverX1.setPos(contrlMsg.pos_x);
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <StartCanDriversTask+0x128>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4619      	mov	r1, r3
 80020c0:	4833      	ldr	r0, [pc, #204]	; (8002190 <StartCanDriversTask+0x118>)
 80020c2:	f7ff fced 	bl	8001aa0 <_ZN16KeyaLKTechDriver6setPosEl>
				if (driverX1.getSpeed() == 0)
 80020c6:	4832      	ldr	r0, [pc, #200]	; (8002190 <StartCanDriversTask+0x118>)
 80020c8:	f7ff fcb0 	bl	8001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <StartCanDriversTask+0x6c>
				{
					driverX2.stop();
 80020dc:	482d      	ldr	r0, [pc, #180]	; (8002194 <StartCanDriversTask+0x11c>)
 80020de:	f7ff fb37 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
 80020e2:	e01c      	b.n	800211e <StartCanDriversTask+0xa6>
				}
				else
				{
					driverX2.setSpeed(-driverX1.getSpeed());
 80020e4:	482a      	ldr	r0, [pc, #168]	; (8002190 <StartCanDriversTask+0x118>)
 80020e6:	f7ff fca1 	bl	8001a2c <_ZN16KeyaLKTechDriver8getSpeedEv>
 80020ea:	4603      	mov	r3, r0
 80020ec:	425b      	negs	r3, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	4828      	ldr	r0, [pc, #160]	; (8002194 <StartCanDriversTask+0x11c>)
 80020f2:	f7ff fac8 	bl	8001686 <_ZN16KeyaLKTechDriver8setSpeedEl>
 80020f6:	e012      	b.n	800211e <StartCanDriversTask+0xa6>
				}
			}
			else if (command == MOVE_POS_Y)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d106      	bne.n	800210c <StartCanDriversTask+0x94>
			{
				driverY1.setPos(contrlMsg.pos_y);
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <StartCanDriversTask+0x128>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4619      	mov	r1, r3
 8002104:	4825      	ldr	r0, [pc, #148]	; (800219c <StartCanDriversTask+0x124>)
 8002106:	f7ff fccb 	bl	8001aa0 <_ZN16KeyaLKTechDriver6setPosEl>
 800210a:	e008      	b.n	800211e <StartCanDriversTask+0xa6>
			}
			else if (command == MOVE_POS_FORK)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d105      	bne.n	800211e <StartCanDriversTask+0xa6>
			{
				driverY2.setPos(contrlMsg.pos_fork);
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <StartCanDriversTask+0x128>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4619      	mov	r1, r3
 8002118:	4822      	ldr	r0, [pc, #136]	; (80021a4 <StartCanDriversTask+0x12c>)
 800211a:	f7ff fcc1 	bl	8001aa0 <_ZN16KeyaLKTechDriver6setPosEl>
			}
			if (command == MOVE_EMERGY_STOP)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2b06      	cmp	r3, #6
 8002122:	d130      	bne.n	8002186 <StartCanDriversTask+0x10e>
			{
				driversStop();
 8002124:	f000 f876 	bl	8002214 <driversStop>
 8002128:	e02d      	b.n	8002186 <StartCanDriversTask+0x10e>
			}
		}
		else
		{
			driverX1.readError();
 800212a:	4819      	ldr	r0, [pc, #100]	; (8002190 <StartCanDriversTask+0x118>)
 800212c:	f7ff fc10 	bl	8001950 <_ZN16KeyaLKTechDriver9readErrorEv>
			osDelay(2);
 8002130:	2002      	movs	r0, #2
 8002132:	f006 f963 	bl	80083fc <osDelay>
			driverX2.readError();
 8002136:	4817      	ldr	r0, [pc, #92]	; (8002194 <StartCanDriversTask+0x11c>)
 8002138:	f7ff fc0a 	bl	8001950 <_ZN16KeyaLKTechDriver9readErrorEv>
			osDelay(2);
 800213c:	2002      	movs	r0, #2
 800213e:	f006 f95d 	bl	80083fc <osDelay>
			if (driverX1.getError())
 8002142:	4813      	ldr	r0, [pc, #76]	; (8002190 <StartCanDriversTask+0x118>)
 8002144:	f7ff fc7e 	bl	8001a44 <_ZN16KeyaLKTechDriver8getErrorEv>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <StartCanDriversTask+0xec>
			{
				driverX1.resetError();
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <StartCanDriversTask+0x118>)
 800215a:	f7ff fc2a 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
				osDelay(2);
 800215e:	2002      	movs	r0, #2
 8002160:	f006 f94c 	bl	80083fc <osDelay>
			}
			if (driverX2.getError())
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <StartCanDriversTask+0x11c>)
 8002166:	f7ff fc6d 	bl	8001a44 <_ZN16KeyaLKTechDriver8getErrorEv>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <StartCanDriversTask+0x10e>
			{
				driverX2.resetError();
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <StartCanDriversTask+0x11c>)
 800217c:	f7ff fc19 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
				osDelay(2);
 8002180:	2002      	movs	r0, #2
 8002182:	f006 f93b 	bl	80083fc <osDelay>
			}
		}
		osDelay(1);
 8002186:	2001      	movs	r0, #1
 8002188:	f006 f938 	bl	80083fc <osDelay>
		driverX1.readEnc();
 800218c:	e77a      	b.n	8002084 <StartCanDriversTask+0xc>
 800218e:	bf00      	nop
 8002190:	20001cdc 	.word	0x20001cdc
 8002194:	20001d1c 	.word	0x20001d1c
 8002198:	20000074 	.word	0x20000074
 800219c:	20001d5c 	.word	0x20001d5c
 80021a0:	2000008c 	.word	0x2000008c
 80021a4:	20001d9c 	.word	0x20001d9c

080021a8 <driversInit>:
	}
}

void driversInit()
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	mdrivers[0] = &driverX1;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <driversInit+0x58>)
 80021ae:	4a15      	ldr	r2, [pc, #84]	; (8002204 <driversInit+0x5c>)
 80021b0:	601a      	str	r2, [r3, #0]
	mdrivers[1] = &driverX2;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <driversInit+0x58>)
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <driversInit+0x60>)
 80021b6:	605a      	str	r2, [r3, #4]
	mdrivers[2] = &driverY1;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <driversInit+0x58>)
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <driversInit+0x64>)
 80021bc:	609a      	str	r2, [r3, #8]
	mdrivers[3] = &driverY2;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <driversInit+0x58>)
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <driversInit+0x68>)
 80021c2:	60da      	str	r2, [r3, #12]
	osDelay(1000);
 80021c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c8:	f006 f918 	bl	80083fc <osDelay>
	driverX1.resetError();
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <driversInit+0x5c>)
 80021ce:	f7ff fbf0 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
	osDelay(5);
 80021d2:	2005      	movs	r0, #5
 80021d4:	f006 f912 	bl	80083fc <osDelay>
	driverX2.resetError();
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <driversInit+0x60>)
 80021da:	f7ff fbea 	bl	80019b2 <_ZN16KeyaLKTechDriver10resetErrorEv>
	osDelay(5);
 80021de:	2005      	movs	r0, #5
 80021e0:	f006 f90c 	bl	80083fc <osDelay>
	driverX1.enable();
 80021e4:	4807      	ldr	r0, [pc, #28]	; (8002204 <driversInit+0x5c>)
 80021e6:	f7ff fb01 	bl	80017ec <_ZN16KeyaLKTechDriver6enableEv>
	osDelay(5);
 80021ea:	2005      	movs	r0, #5
 80021ec:	f006 f906 	bl	80083fc <osDelay>
	driverX2.enable();
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <driversInit+0x60>)
 80021f2:	f7ff fafb 	bl	80017ec <_ZN16KeyaLKTechDriver6enableEv>
	osDelay(5);
 80021f6:	2005      	movs	r0, #5
 80021f8:	f006 f900 	bl	80083fc <osDelay>
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20001ddc 	.word	0x20001ddc
 8002204:	20001cdc 	.word	0x20001cdc
 8002208:	20001d1c 	.word	0x20001d1c
 800220c:	20001d5c 	.word	0x20001d5c
 8002210:	20001d9c 	.word	0x20001d9c

08002214 <driversStop>:

void driversStop() {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	osDelay(2);
 8002218:	2002      	movs	r0, #2
 800221a:	f006 f8ef 	bl	80083fc <osDelay>
	driverX1.stop();
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <driversStop+0x34>)
 8002220:	f7ff fa96 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
	osDelay(2);
 8002224:	2002      	movs	r0, #2
 8002226:	f006 f8e9 	bl	80083fc <osDelay>
	driverX2.stop();
 800222a:	4808      	ldr	r0, [pc, #32]	; (800224c <driversStop+0x38>)
 800222c:	f7ff fa90 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
	osDelay(2);
 8002230:	2002      	movs	r0, #2
 8002232:	f006 f8e3 	bl	80083fc <osDelay>
	driverY1.stop();
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <driversStop+0x3c>)
 8002238:	f7ff fa8a 	bl	8001750 <_ZN16KeyaLKTechDriver4stopEv>
	osDelay(2);
 800223c:	2002      	movs	r0, #2
 800223e:	f006 f8dd 	bl	80083fc <osDelay>
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20001cdc 	.word	0x20001cdc
 800224c:	20001d1c 	.word	0x20001d1c
 8002250:	20001d5c 	.word	0x20001d5c

08002254 <_Z41__static_initialization_and_destruction_0ii>:
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d11e      	bne.n	80022a2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226a:	4293      	cmp	r3, r2
 800226c:	d119      	bne.n	80022a2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
KeyaLKTechDriver driverX1(0x140 + DRIVER1_LKTECH_ID, globData);
 800226e:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002270:	f240 1141 	movw	r1, #321	; 0x141
 8002274:	480e      	ldr	r0, [pc, #56]	; (80022b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002276:	f7ff f9f3 	bl	8001660 <_ZN16KeyaLKTechDriverC1EmR15GlobDataTypeDef>
KeyaLKTechDriver driverX2(0x140 + DRIVER2_LKTECH_ID, globData);
 800227a:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800227c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002282:	f7ff f9ed 	bl	8001660 <_ZN16KeyaLKTechDriverC1EmR15GlobDataTypeDef>
KeyaLKTechDriver driverY1(DRIVER_KEYA_ID + 0x600, 0x01, globData);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002288:	2201      	movs	r2, #1
 800228a:	f240 6101 	movw	r1, #1537	; 0x601
 800228e:	480a      	ldr	r0, [pc, #40]	; (80022b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002290:	f7ff f9d2 	bl	8001638 <_ZN16KeyaLKTechDriverC1EmmR15GlobDataTypeDef>
KeyaLKTechDriver driverY2(DRIVER_KEYA_ID + 0x600, 0x02, globData);
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002296:	2202      	movs	r2, #2
 8002298:	f240 6101 	movw	r1, #1537	; 0x601
 800229c:	4807      	ldr	r0, [pc, #28]	; (80022bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800229e:	f7ff f9cb 	bl	8001638 <_ZN16KeyaLKTechDriverC1EmmR15GlobDataTypeDef>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000074 	.word	0x20000074
 80022b0:	20001cdc 	.word	0x20001cdc
 80022b4:	20001d1c 	.word	0x20001d1c
 80022b8:	20001d5c 	.word	0x20001d5c
 80022bc:	20001d9c 	.word	0x20001d9c

080022c0 <_GLOBAL__sub_I_driverX1>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7ff ffc3 	bl	8002254 <_Z41__static_initialization_and_destruction_0ii>
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <StartInputsTask>:
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;
int32_t enc_prev = 0;

void StartInputsTask(void *argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		static int32_t currCounter = 0;
		currCounter = __HAL_TIM_GET_COUNTER(&htim4);
 80022d8:	4b69      	ldr	r3, [pc, #420]	; (8002480 <StartInputsTask+0x1b0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	461a      	mov	r2, r3
 80022e0:	4b68      	ldr	r3, [pc, #416]	; (8002484 <StartInputsTask+0x1b4>)
 80022e2:	601a      	str	r2, [r3, #0]
		static int32_t enc_idle_tick = 0;
		enc_idle_tick = unwrap_encoder(currCounter, &enc_prev);
 80022e4:	4b67      	ldr	r3, [pc, #412]	; (8002484 <StartInputsTask+0x1b4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4967      	ldr	r1, [pc, #412]	; (8002488 <StartInputsTask+0x1b8>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f8d9 	bl	80024a4 <unwrap_encoder>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a65      	ldr	r2, [pc, #404]	; (800248c <StartInputsTask+0x1bc>)
 80022f6:	6013      	str	r3, [r2, #0]
		globData.enc_idle = enc_idle_tick*Y_WHEEL_RATIO;
 80022f8:	4b64      	ldr	r3, [pc, #400]	; (800248c <StartInputsTask+0x1bc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a64      	ldr	r2, [pc, #400]	; (8002490 <StartInputsTask+0x1c0>)
 80022fe:	6113      	str	r3, [r2, #16]
		IN_X02 ? (globData.sens.limit_sw1 = 0) : (globData.sens.limit_sw1 = 1);
 8002300:	4b64      	ldr	r3, [pc, #400]	; (8002494 <StartInputsTask+0x1c4>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <StartInputsTask+0x48>
 800230c:	4a60      	ldr	r2, [pc, #384]	; (8002490 <StartInputsTask+0x1c0>)
 800230e:	7993      	ldrb	r3, [r2, #6]
 8002310:	f36f 0300 	bfc	r3, #0, #1
 8002314:	7193      	strb	r3, [r2, #6]
 8002316:	e004      	b.n	8002322 <StartInputsTask+0x52>
 8002318:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <StartInputsTask+0x1c0>)
 800231a:	7993      	ldrb	r3, [r2, #6]
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	7193      	strb	r3, [r2, #6]
		IN_X03 ? (globData.sens.limit_sw2 = 0) : (globData.sens.limit_sw2 = 1);
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <StartInputsTask+0x1c8>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <StartInputsTask+0x6a>
 800232e:	4a58      	ldr	r2, [pc, #352]	; (8002490 <StartInputsTask+0x1c0>)
 8002330:	7993      	ldrb	r3, [r2, #6]
 8002332:	f36f 0341 	bfc	r3, #1, #1
 8002336:	7193      	strb	r3, [r2, #6]
 8002338:	e004      	b.n	8002344 <StartInputsTask+0x74>
 800233a:	4a55      	ldr	r2, [pc, #340]	; (8002490 <StartInputsTask+0x1c0>)
 800233c:	7993      	ldrb	r3, [r2, #6]
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	7193      	strb	r3, [r2, #6]
		IN_X04 ? (globData.sens.limit_platform_up = 0) : (globData.sens.limit_platform_up = 1);
 8002344:	4b54      	ldr	r3, [pc, #336]	; (8002498 <StartInputsTask+0x1c8>)
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <StartInputsTask+0x8c>
 8002350:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <StartInputsTask+0x1c0>)
 8002352:	7993      	ldrb	r3, [r2, #6]
 8002354:	f36f 0382 	bfc	r3, #2, #1
 8002358:	7193      	strb	r3, [r2, #6]
 800235a:	e004      	b.n	8002366 <StartInputsTask+0x96>
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <StartInputsTask+0x1c0>)
 800235e:	7993      	ldrb	r3, [r2, #6]
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	7193      	strb	r3, [r2, #6]
		IN_X05 ? (globData.sens.limit_platform_down = 0) : (globData.sens.limit_platform_down= 1);
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <StartInputsTask+0x1c8>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <StartInputsTask+0xae>
 8002372:	4a47      	ldr	r2, [pc, #284]	; (8002490 <StartInputsTask+0x1c0>)
 8002374:	7993      	ldrb	r3, [r2, #6]
 8002376:	f36f 03c3 	bfc	r3, #3, #1
 800237a:	7193      	strb	r3, [r2, #6]
 800237c:	e004      	b.n	8002388 <StartInputsTask+0xb8>
 800237e:	4a44      	ldr	r2, [pc, #272]	; (8002490 <StartInputsTask+0x1c0>)
 8002380:	7993      	ldrb	r3, [r2, #6]
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	7193      	strb	r3, [r2, #6]
		IN_X06 ? (globData.sens.limit_servo_open= 0) : (globData.sens.limit_servo_open = 1);
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <StartInputsTask+0x1c8>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <StartInputsTask+0xd0>
 8002394:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <StartInputsTask+0x1c0>)
 8002396:	7993      	ldrb	r3, [r2, #6]
 8002398:	f36f 1304 	bfc	r3, #4, #1
 800239c:	7193      	strb	r3, [r2, #6]
 800239e:	e004      	b.n	80023aa <StartInputsTask+0xda>
 80023a0:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <StartInputsTask+0x1c0>)
 80023a2:	7993      	ldrb	r3, [r2, #6]
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	7193      	strb	r3, [r2, #6]
		IN_X07 ? (globData.sens.limit_servo_close = 0) : (globData.sens.limit_servo_close = 1);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <StartInputsTask+0x1c8>)
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <StartInputsTask+0xf2>
 80023b6:	4a36      	ldr	r2, [pc, #216]	; (8002490 <StartInputsTask+0x1c0>)
 80023b8:	7993      	ldrb	r3, [r2, #6]
 80023ba:	f36f 1345 	bfc	r3, #5, #1
 80023be:	7193      	strb	r3, [r2, #6]
 80023c0:	e004      	b.n	80023cc <StartInputsTask+0xfc>
 80023c2:	4a33      	ldr	r2, [pc, #204]	; (8002490 <StartInputsTask+0x1c0>)
 80023c4:	7993      	ldrb	r3, [r2, #6]
 80023c6:	f043 0320 	orr.w	r3, r3, #32
 80023ca:	7193      	strb	r3, [r2, #6]
		IN_X08 ? (globData.sens.lim0 = 0) : (globData.sens.lim0 = 1);
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <StartInputsTask+0x1c8>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <StartInputsTask+0x114>
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <StartInputsTask+0x1c0>)
 80023da:	7993      	ldrb	r3, [r2, #6]
 80023dc:	f36f 1386 	bfc	r3, #6, #1
 80023e0:	7193      	strb	r3, [r2, #6]
 80023e2:	e004      	b.n	80023ee <StartInputsTask+0x11e>
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <StartInputsTask+0x1c0>)
 80023e6:	7993      	ldrb	r3, [r2, #6]
 80023e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ec:	7193      	strb	r3, [r2, #6]
		IN_X09 ? (globData.sens.lim1 = 0) : (globData.sens.lim1 = 1);
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <StartInputsTask+0x1cc>)
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <StartInputsTask+0x136>
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <StartInputsTask+0x1c0>)
 80023fc:	7993      	ldrb	r3, [r2, #6]
 80023fe:	f36f 13c7 	bfc	r3, #7, #1
 8002402:	7193      	strb	r3, [r2, #6]
 8002404:	e004      	b.n	8002410 <StartInputsTask+0x140>
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <StartInputsTask+0x1c0>)
 8002408:	7993      	ldrb	r3, [r2, #6]
 800240a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240e:	7193      	strb	r3, [r2, #6]
		IN_X10 ? (globData.sens.lim2 = 0) : (globData.sens.lim2 = 1);
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <StartInputsTask+0x1cc>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <StartInputsTask+0x158>
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <StartInputsTask+0x1c0>)
 800241e:	79d3      	ldrb	r3, [r2, #7]
 8002420:	f36f 0300 	bfc	r3, #0, #1
 8002424:	71d3      	strb	r3, [r2, #7]
 8002426:	e004      	b.n	8002432 <StartInputsTask+0x162>
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <StartInputsTask+0x1c0>)
 800242a:	79d3      	ldrb	r3, [r2, #7]
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	71d3      	strb	r3, [r2, #7]
		IN_X11 ? (globData.sens.lim3 = 0) : (globData.sens.lim3 = 1);
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <StartInputsTask+0x1cc>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <StartInputsTask+0x17a>
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <StartInputsTask+0x1c0>)
 8002440:	79d3      	ldrb	r3, [r2, #7]
 8002442:	f36f 0341 	bfc	r3, #1, #1
 8002446:	71d3      	strb	r3, [r2, #7]
 8002448:	e004      	b.n	8002454 <StartInputsTask+0x184>
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <StartInputsTask+0x1c0>)
 800244c:	79d3      	ldrb	r3, [r2, #7]
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	71d3      	strb	r3, [r2, #7]
		IN_X12 ? (globData.sens.lim4 = 0) : (globData.sens.lim4 = 1);
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <StartInputsTask+0x1d0>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <StartInputsTask+0x19c>
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <StartInputsTask+0x1c0>)
 8002462:	79d3      	ldrb	r3, [r2, #7]
 8002464:	f36f 0382 	bfc	r3, #2, #1
 8002468:	71d3      	strb	r3, [r2, #7]
 800246a:	e004      	b.n	8002476 <StartInputsTask+0x1a6>
 800246c:	4a08      	ldr	r2, [pc, #32]	; (8002490 <StartInputsTask+0x1c0>)
 800246e:	79d3      	ldrb	r3, [r2, #7]
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	71d3      	strb	r3, [r2, #7]
		osDelay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f005 ffc0 	bl	80083fc <osDelay>
	}
 800247c:	e72c      	b.n	80022d8 <StartInputsTask+0x8>
 800247e:	bf00      	nop
 8002480:	20001a70 	.word	0x20001a70
 8002484:	20001df0 	.word	0x20001df0
 8002488:	20001dec 	.word	0x20001dec
 800248c:	20001df4 	.word	0x20001df4
 8002490:	20000074 	.word	0x20000074
 8002494:	40020800 	.word	0x40020800
 8002498:	40021000 	.word	0x40021000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40020c00 	.word	0x40020c00

080024a4 <unwrap_encoder>:
}

int32_t unwrap_encoder(uint16_t in, int32_t *prev)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	80fb      	strh	r3, [r7, #6]
    int32_t c32 = (int32_t)in - ENC_HALF_PERIOD;
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80024b6:	613b      	str	r3, [r7, #16]
    int32_t dif = (c32-*prev);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	60fb      	str	r3, [r7, #12]

    int32_t mod_dif = ((dif + ENC_HALF_PERIOD) % ENC_ONE_PERIOD) - ENC_HALF_PERIOD;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024c8:	425a      	negs	r2, r3
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b292      	uxth	r2, r2
 80024ce:	bf58      	it	pl
 80024d0:	4253      	negpl	r3, r2
 80024d2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80024d6:	617b      	str	r3, [r7, #20]
    if(dif < -ENC_HALF_PERIOD) {
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80024de:	da03      	bge.n	80024e8 <unwrap_encoder+0x44>
        mod_dif += ENC_ONE_PERIOD;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80024e6:	617b      	str	r3, [r7, #20]
    }
    int32_t unwrapped = *prev + mod_dif;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4413      	add	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]
    *prev = unwrapped;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	601a      	str	r2, [r3, #0]

    return unwrapped + ENC_HALF_PERIOD;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 80024fe:	4618      	mov	r0, r3
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <StartMissionsTask>:
#include "mission.h"
extern GlobDataTypeDef globData;
extern MinibotConfigTypeDef minibotConfig;

void StartMissionsTask(void *argument)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		osDelay(1000);
 8002512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002516:	f005 ff71 	bl	80083fc <osDelay>
 800251a:	e7fa      	b.n	8002512 <StartMissionsTask+0x8>

0800251c <StartOutputsTask>:

//extern IWDG_HandleTypeDef hiwdg;


void StartOutputsTask(void *argument)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8002524:	4807      	ldr	r0, [pc, #28]	; (8002544 <StartOutputsTask+0x28>)
 8002526:	f002 fd58 	bl	8004fda <HAL_IWDG_Refresh>
		SetOutputs();
 800252a:	f000 f80f 	bl	800254c <SetOutputs>
		if (globData.LEDB) LedBlink();
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <StartOutputsTask+0x2c>)
 8002530:	795b      	ldrb	r3, [r3, #5]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <StartOutputsTask+0x1e>
 8002536:	f000 f8d9 	bl	80026ec <LedBlink>
		osDelay(5);
 800253a:	2005      	movs	r0, #5
 800253c:	f005 ff5e 	bl	80083fc <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 8002540:	e7f0      	b.n	8002524 <StartOutputsTask+0x8>
 8002542:	bf00      	nop
 8002544:	200019d4 	.word	0x200019d4
 8002548:	20000074 	.word	0x20000074

0800254c <SetOutputs>:
	}
}

void SetOutputs()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
	if (contrlMsg.comm == MOVE_LIFT)
 8002552:	4b5f      	ldr	r3, [pc, #380]	; (80026d0 <SetOutputs+0x184>)
 8002554:	78db      	ldrb	r3, [r3, #3]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d132      	bne.n	80025c0 <SetOutputs+0x74>
	{
		if (contrlMsg.pos_lift == 1 && globData.sens.limit_platform_up == 0)
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <SetOutputs+0x184>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10e      	bne.n	8002580 <SetOutputs+0x34>
 8002562:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <SetOutputs+0x188>)
 8002564:	799b      	ldrb	r3, [r3, #6]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <SetOutputs+0x34>
		{
			Y01_ON;
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <SetOutputs+0x18c>)
 8002572:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002576:	619a      	str	r2, [r3, #24]
			Y02_OFF;
 8002578:	4b57      	ldr	r3, [pc, #348]	; (80026d8 <SetOutputs+0x18c>)
 800257a:	2220      	movs	r2, #32
 800257c:	619a      	str	r2, [r3, #24]
 800257e:	e005      	b.n	800258c <SetOutputs+0x40>
		}
		else
		{
			Y01_OFF;
 8002580:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <SetOutputs+0x18c>)
 8002582:	2210      	movs	r2, #16
 8002584:	619a      	str	r2, [r3, #24]
			contrlMsg.comm = 0;
 8002586:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <SetOutputs+0x184>)
 8002588:	2200      	movs	r2, #0
 800258a:	70da      	strb	r2, [r3, #3]
		}
		if (contrlMsg.pos_lift == 2 && globData.sens.limit_platform_down == 0)
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <SetOutputs+0x184>)
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d10e      	bne.n	80025b2 <SetOutputs+0x66>
 8002594:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <SetOutputs+0x188>)
 8002596:	799b      	ldrb	r3, [r3, #6]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <SetOutputs+0x66>
		{
			Y01_OFF;
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <SetOutputs+0x18c>)
 80025a4:	2210      	movs	r2, #16
 80025a6:	619a      	str	r2, [r3, #24]
			Y02_ON;
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <SetOutputs+0x18c>)
 80025aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025ae:	619a      	str	r2, [r3, #24]
			osDelay(2*i);
		}
		Y19_OFF;
		osDelay(500);
	}
}
 80025b0:	e08a      	b.n	80026c8 <SetOutputs+0x17c>
			Y02_OFF;
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <SetOutputs+0x18c>)
 80025b4:	2220      	movs	r2, #32
 80025b6:	619a      	str	r2, [r3, #24]
			contrlMsg.comm = 0;
 80025b8:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <SetOutputs+0x184>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	70da      	strb	r2, [r3, #3]
}
 80025be:	e083      	b.n	80026c8 <SetOutputs+0x17c>
	else if (!*(uint16_t*)&globData.error) {
 80025c0:	4b46      	ldr	r3, [pc, #280]	; (80026dc <SetOutputs+0x190>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d12b      	bne.n	8002620 <SetOutputs+0xd4>
		Y21_ON;
 80025c8:	4b45      	ldr	r3, [pc, #276]	; (80026e0 <SetOutputs+0x194>)
 80025ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ce:	619a      	str	r2, [r3, #24]
		osDelay(100);
 80025d0:	2064      	movs	r0, #100	; 0x64
 80025d2:	f005 ff13 	bl	80083fc <osDelay>
		Y22_ON;
 80025d6:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <SetOutputs+0x194>)
 80025d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025dc:	619a      	str	r2, [r3, #24]
		osDelay(20);
 80025de:	2014      	movs	r0, #20
 80025e0:	f005 ff0c 	bl	80083fc <osDelay>
		Y21_OFF;
 80025e4:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <SetOutputs+0x194>)
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	619a      	str	r2, [r3, #24]
		osDelay(100);
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f005 ff05 	bl	80083fc <osDelay>
		Y23_ON;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <SetOutputs+0x194>)
 80025f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025f8:	619a      	str	r2, [r3, #24]
		osDelay(20);
 80025fa:	2014      	movs	r0, #20
 80025fc:	f005 fefe 	bl	80083fc <osDelay>
		Y22_OFF;
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <SetOutputs+0x194>)
 8002602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002606:	619a      	str	r2, [r3, #24]
		osDelay(100);
 8002608:	2064      	movs	r0, #100	; 0x64
 800260a:	f005 fef7 	bl	80083fc <osDelay>
		Y23_OFF;
 800260e:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <SetOutputs+0x194>)
 8002610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002614:	619a      	str	r2, [r3, #24]
		osDelay(300);
 8002616:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800261a:	f005 feef 	bl	80083fc <osDelay>
}
 800261e:	e053      	b.n	80026c8 <SetOutputs+0x17c>
		Y16_ON;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <SetOutputs+0x198>)
 8002622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002626:	619a      	str	r2, [r3, #24]
		osDelay(100);
 8002628:	2064      	movs	r0, #100	; 0x64
 800262a:	f005 fee7 	bl	80083fc <osDelay>
		Y17_ON;
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <SetOutputs+0x198>)
 8002630:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002634:	619a      	str	r2, [r3, #24]
		osDelay(20);
 8002636:	2014      	movs	r0, #20
 8002638:	f005 fee0 	bl	80083fc <osDelay>
		Y16_OFF;
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <SetOutputs+0x198>)
 800263e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002642:	619a      	str	r2, [r3, #24]
		osDelay(100);
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	f005 fed9 	bl	80083fc <osDelay>
		Y18_ON;
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <SetOutputs+0x19c>)
 800264c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002650:	619a      	str	r2, [r3, #24]
		osDelay(20);
 8002652:	2014      	movs	r0, #20
 8002654:	f005 fed2 	bl	80083fc <osDelay>
		Y17_OFF;
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <SetOutputs+0x198>)
 800265a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800265e:	619a      	str	r2, [r3, #24]
		osDelay(100);
 8002660:	2064      	movs	r0, #100	; 0x64
 8002662:	f005 fecb 	bl	80083fc <osDelay>
		Y18_OFF;
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <SetOutputs+0x19c>)
 8002668:	2202      	movs	r2, #2
 800266a:	619a      	str	r2, [r3, #24]
		osDelay(30);
 800266c:	201e      	movs	r0, #30
 800266e:	f005 fec5 	bl	80083fc <osDelay>
		for (int32_t i=20; i>0; i--)
 8002672:	2314      	movs	r3, #20
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	dd1d      	ble.n	80026b8 <SetOutputs+0x16c>
			Y19_OFF;
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <SetOutputs+0x18c>)
 800267e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002682:	619a      	str	r2, [r3, #24]
			Y20_ON;
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <SetOutputs+0x194>)
 8002686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800268a:	619a      	str	r2, [r3, #24]
			osDelay(2*i);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f005 feb3 	bl	80083fc <osDelay>
			Y19_ON;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <SetOutputs+0x18c>)
 8002698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800269c:	619a      	str	r2, [r3, #24]
			Y20_OFF;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <SetOutputs+0x194>)
 80026a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a4:	619a      	str	r2, [r3, #24]
			osDelay(2*i);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f005 fea6 	bl	80083fc <osDelay>
		for (int32_t i=20; i>0; i--)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	e7de      	b.n	8002676 <SetOutputs+0x12a>
		Y19_OFF;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <SetOutputs+0x18c>)
 80026ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026be:	619a      	str	r2, [r3, #24]
		osDelay(500);
 80026c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026c4:	f005 fe9a 	bl	80083fc <osDelay>
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000008c 	.word	0x2000008c
 80026d4:	20000074 	.word	0x20000074
 80026d8:	40020000 	.word	0x40020000
 80026dc:	2000007c 	.word	0x2000007c
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40020800 	.word	0x40020800

080026ec <LedBlink>:

void LedBlink() {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
			3   //LEDB_ERROR
	};

	static int32_t ledb_active_time = 0;
	static int32_t ledb_repeats = 0;
	ledb_repeats = ledb_rep[globData.LEDB];
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <LedBlink+0x70>)
 80026f4:	795b      	ldrb	r3, [r3, #5]
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <LedBlink+0x74>)
 80026fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <LedBlink+0x78>)
 8002702:	601a      	str	r2, [r3, #0]
	ledb_active_time = ledb_time[globData.LEDB];
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <LedBlink+0x70>)
 8002706:	795b      	ldrb	r3, [r3, #5]
 8002708:	461a      	mov	r2, r3
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <LedBlink+0x7c>)
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	461a      	mov	r2, r3
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <LedBlink+0x80>)
 8002714:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ledb_repeats; i++)
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <LedBlink+0x78>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	da14      	bge.n	800274e <LedBlink+0x62>
	{
		osDelay(ledb_active_time);
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <LedBlink+0x80>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f005 fe67 	bl	80083fc <osDelay>
		Y05_ON;
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <LedBlink+0x84>)
 8002730:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002734:	619a      	str	r2, [r3, #24]
		osDelay(ledb_active_time);
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <LedBlink+0x80>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f005 fe5e 	bl	80083fc <osDelay>
		Y05_OFF;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <LedBlink+0x84>)
 8002742:	2210      	movs	r2, #16
 8002744:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < ledb_repeats; i++)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3301      	adds	r3, #1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	e7e5      	b.n	800271a <LedBlink+0x2e>
	}
	globData.LEDB = 0;
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <LedBlink+0x70>)
 8002750:	2200      	movs	r2, #0
 8002752:	715a      	strb	r2, [r3, #5]
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000074 	.word	0x20000074
 8002760:	0800af50 	.word	0x0800af50
 8002764:	20001dfc 	.word	0x20001dfc
 8002768:	0800af38 	.word	0x0800af38
 800276c:	20001df8 	.word	0x20001df8
 8002770:	40020800 	.word	0x40020800

08002774 <StartServoTask>:
Servo servo1(&htim3, TIM_CHANNEL_1);
Servo servo2(&htim3, TIM_CHANNEL_2);
Servo *servo[2];

void StartServoTask(void *argument)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	servo[0] = &servo1;
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <StartServoTask+0x5c>)
 800277e:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <StartServoTask+0x60>)
 8002780:	601a      	str	r2, [r3, #0]
	servo[1] = &servo2;
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <StartServoTask+0x5c>)
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <StartServoTask+0x64>)
 8002786:	605a      	str	r2, [r3, #4]
	enum MOVE_COMM command;
	for (;;) {
		command = (MOVE_COMM) contrlMsg.comm;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <StartServoTask+0x68>)
 800278a:	78db      	ldrb	r3, [r3, #3]
 800278c:	73fb      	strb	r3, [r7, #15]
		if (command == MOVE_SERVO) {
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d118      	bne.n	80027c6 <StartServoTask+0x52>
			servo1.setAngle(contrlMsg.pos_servo);
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <StartServoTask+0x68>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	4619      	mov	r1, r3
 800279a:	480e      	ldr	r0, [pc, #56]	; (80027d4 <StartServoTask+0x60>)
 800279c:	f7ff fa85 	bl	8001caa <_ZN5Servo8setAngleEl>
			servo2.setAngle(contrlMsg.pos_servo);
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <StartServoTask+0x68>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4619      	mov	r1, r3
 80027a6:	480c      	ldr	r0, [pc, #48]	; (80027d8 <StartServoTask+0x64>)
 80027a8:	f7ff fa7f 	bl	8001caa <_ZN5Servo8setAngleEl>
			osDelay(800);
 80027ac:	f44f 7048 	mov.w	r0, #800	; 0x320
 80027b0:	f005 fe24 	bl	80083fc <osDelay>
			servo1.disable();
 80027b4:	4807      	ldr	r0, [pc, #28]	; (80027d4 <StartServoTask+0x60>)
 80027b6:	f7ff facb 	bl	8001d50 <_ZN5Servo7disableEv>
			servo2.disable();
 80027ba:	4807      	ldr	r0, [pc, #28]	; (80027d8 <StartServoTask+0x64>)
 80027bc:	f7ff fac8 	bl	8001d50 <_ZN5Servo7disableEv>
			contrlMsg.comm = 0;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <StartServoTask+0x68>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	70da      	strb	r2, [r3, #3]
		}
		osDelay(10);
 80027c6:	200a      	movs	r0, #10
 80027c8:	f005 fe18 	bl	80083fc <osDelay>
		command = (MOVE_COMM) contrlMsg.comm;
 80027cc:	e7dc      	b.n	8002788 <StartServoTask+0x14>
 80027ce:	bf00      	nop
 80027d0:	20001e20 	.word	0x20001e20
 80027d4:	20001e00 	.word	0x20001e00
 80027d8:	20001e10 	.word	0x20001e10
 80027dc:	2000008c 	.word	0x2000008c

080027e0 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10e      	bne.n	800280e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d109      	bne.n	800280e <_Z41__static_initialization_and_destruction_0ii+0x2e>
Servo servo1(&htim3, TIM_CHANNEL_1);
 80027fa:	2200      	movs	r2, #0
 80027fc:	4906      	ldr	r1, [pc, #24]	; (8002818 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80027fe:	4807      	ldr	r0, [pc, #28]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002800:	f7ff fa40 	bl	8001c84 <_ZN5ServoC1EP17TIM_HandleTypeDefm>
Servo servo2(&htim3, TIM_CHANNEL_2);
 8002804:	2204      	movs	r2, #4
 8002806:	4904      	ldr	r1, [pc, #16]	; (8002818 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002808:	4805      	ldr	r0, [pc, #20]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800280a:	f7ff fa3b 	bl	8001c84 <_ZN5ServoC1EP17TIM_HandleTypeDefm>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20001a28 	.word	0x20001a28
 800281c:	20001e00 	.word	0x20001e00
 8002820:	20001e10 	.word	0x20001e10

08002824 <_GLOBAL__sub_I_servo1>:
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
 8002828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff ffd7 	bl	80027e0 <_Z41__static_initialization_and_destruction_0ii>
 8002832:	bd80      	pop	{r7, pc}

08002834 <StartUartWiFiTask>:
uint8_t bms_jbd_request_msg0[] = {0xDD, 0xA5, 0x03, 0x00, 0xFF, 0xFD, 0x77};
uint8_t bms_jbd_request_msg1[] = {0xDD, 0xA5, 0x04, 0x00, 0xFF, 0xFC, 0x77};
uint8_t bms_smart_request_msg[]  = {0xA5, 0x40, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D};

void StartUartWiFiTask(void *argument)
{
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if (new_wifi_data)
 800283c:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <StartUartWiFiTask+0x1d8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <StartUartWiFiTask+0xc8>
		{
			if (wifi_uart_buff[0] == START_MSG0 && wifi_uart_buff[1] == START_MSG1)
 8002844:	4b72      	ldr	r3, [pc, #456]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b84      	cmp	r3, #132	; 0x84
 800284a:	d154      	bne.n	80028f6 <StartUartWiFiTask+0xc2>
 800284c:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	2b53      	cmp	r3, #83	; 0x53
 8002852:	d150      	bne.n	80028f6 <StartUartWiFiTask+0xc2>
			{
				enum MSG_ID message_id = (MSG_ID)wifi_uart_buff[2];
 8002854:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 8002856:	789b      	ldrb	r3, [r3, #2]
 8002858:	73fb      	strb	r3, [r7, #15]
				if (message_id == MSG_STATUS)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d11e      	bne.n	800289e <StartUartWiFiTask+0x6a>
				{
					if (wifi_uart_buff[sizeof(StatusMsgTypeDef)-1] != calculateCS(wifi_uart_buff, sizeof(StatusMsgTypeDef)-1))
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 8002862:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8002866:	212b      	movs	r1, #43	; 0x2b
 8002868:	4869      	ldr	r0, [pc, #420]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 800286a:	f000 fc89 	bl	8003180 <calculateCS>
 800286e:	4603      	mov	r3, r0
 8002870:	429c      	cmp	r4, r3
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <StartUartWiFiTask+0x64>
					{
						globData.cs_err++;
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 8002880:	791b      	ldrb	r3, [r3, #4]
 8002882:	3301      	adds	r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 8002888:	711a      	strb	r2, [r3, #4]
						HAL_UART_Transmit(&WIFI_UART, (uint8_t*)"error", 5, 100);
 800288a:	2364      	movs	r3, #100	; 0x64
 800288c:	2205      	movs	r2, #5
 800288e:	4962      	ldr	r1, [pc, #392]	; (8002a18 <StartUartWiFiTask+0x1e4>)
 8002890:	4862      	ldr	r0, [pc, #392]	; (8002a1c <StartUartWiFiTask+0x1e8>)
 8002892:	f004 faaa 	bl	8006dea <HAL_UART_Transmit>
 8002896:	e026      	b.n	80028e6 <StartUartWiFiTask+0xb2>
					}
					else
					{
						sendStatus();
 8002898:	f000 f8d8 	bl	8002a4c <sendStatus>
 800289c:	e023      	b.n	80028e6 <StartUartWiFiTask+0xb2>
					}
				}
				else if (message_id == MSG_CONTROL)
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d120      	bne.n	80028e6 <StartUartWiFiTask+0xb2>
				{
					if (wifi_uart_buff[sizeof(ContrlMsgTypeDef)-1] != calculateCS(wifi_uart_buff, sizeof(ContrlMsgTypeDef)-1))
 80028a4:	4b5a      	ldr	r3, [pc, #360]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 80028a6:	7edc      	ldrb	r4, [r3, #27]
 80028a8:	211b      	movs	r1, #27
 80028aa:	4859      	ldr	r0, [pc, #356]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 80028ac:	f000 fc68 	bl	8003180 <calculateCS>
 80028b0:	4603      	mov	r3, r0
 80028b2:	429c      	cmp	r4, r3
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <StartUartWiFiTask+0x9a>
					{
						globData.cs_err++;
 80028c0:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 80028c2:	791b      	ldrb	r3, [r3, #4]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 80028ca:	711a      	strb	r2, [r3, #4]
 80028cc:	e00b      	b.n	80028e6 <StartUartWiFiTask+0xb2>
					}
					else
					{
						memcpy(&contrlMsg, wifi_uart_buff, sizeof(ContrlMsgTypeDef));
 80028ce:	4a54      	ldr	r2, [pc, #336]	; (8002a20 <StartUartWiFiTask+0x1ec>)
 80028d0:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 80028d2:	4614      	mov	r4, r2
 80028d4:	461d      	mov	r5, r3
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						sendStatus();
 80028e2:	f000 f8b3 	bl	8002a4c <sendStatus>
					}
				}
				new_wifi_data = 0;
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <StartUartWiFiTask+0x1d8>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
				memset(wifi_uart_buff, 0, 100);
 80028ec:	2264      	movs	r2, #100	; 0x64
 80028ee:	2100      	movs	r1, #0
 80028f0:	4847      	ldr	r0, [pc, #284]	; (8002a10 <StartUartWiFiTask+0x1dc>)
 80028f2:	f008 fa2d 	bl	800ad50 <memset>
			//globData.LKEncoder++;
			//uint8_t str[30];
			//sprintf((char*)str, (char*)"e: %d, t: %d\n\r", globData.LKEncoder, globData.LKTemp);
			//HAL_UART_Transmit(&huart1, str, strlen((char *)str), 100);
			//HAL_UART_Transmit(&WIFI_UART, (uint8_t*)"WIFI ok", 7, 100);
			osDelay(2);
 80028f6:	2002      	movs	r0, #2
 80028f8:	f005 fd80 	bl	80083fc <osDelay>
		}
		if (new_bms_data)
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <StartUartWiFiTask+0x1f0>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <StartUartWiFiTask+0xe0>
		{
			new_bms_data = 0;
 8002904:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <StartUartWiFiTask+0x1f0>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
			bms_err = 0;
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <StartUartWiFiTask+0x1f4>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
			rcGetBattery();
 8002910:	f000 f8f6 	bl	8002b00 <rcGetBattery>
		}

		if (HAL_GetTick() - bms_req_time > 1000) {
 8002914:	f000 fdc8 	bl	80034a8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <StartUartWiFiTask+0x1f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002924:	bf8c      	ite	hi
 8002926:	2301      	movhi	r3, #1
 8002928:	2300      	movls	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d085      	beq.n	800283c <StartUartWiFiTask+0x8>
			if (!bms_detected) {
 8002930:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <StartUartWiFiTask+0x1fc>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <StartUartWiFiTask+0x118>
				HAL_UART_Transmit(&BMS_UART, (uint8_t*) bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 8002938:	2364      	movs	r3, #100	; 0x64
 800293a:	220d      	movs	r2, #13
 800293c:	493d      	ldr	r1, [pc, #244]	; (8002a34 <StartUartWiFiTask+0x200>)
 800293e:	483e      	ldr	r0, [pc, #248]	; (8002a38 <StartUartWiFiTask+0x204>)
 8002940:	f004 fa53 	bl	8006dea <HAL_UART_Transmit>
				bms_detected = 1;
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <StartUartWiFiTask+0x1fc>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e010      	b.n	800296e <StartUartWiFiTask+0x13a>
			}
			else {
				if (smart_bms) HAL_UART_Transmit(&BMS_UART,	(uint8_t*) bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <StartUartWiFiTask+0x208>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <StartUartWiFiTask+0x12e>
 8002954:	2364      	movs	r3, #100	; 0x64
 8002956:	220d      	movs	r2, #13
 8002958:	4936      	ldr	r1, [pc, #216]	; (8002a34 <StartUartWiFiTask+0x200>)
 800295a:	4837      	ldr	r0, [pc, #220]	; (8002a38 <StartUartWiFiTask+0x204>)
 800295c:	f004 fa45 	bl	8006dea <HAL_UART_Transmit>
 8002960:	e005      	b.n	800296e <StartUartWiFiTask+0x13a>
				else HAL_UART_Transmit(&BMS_UART, (uint8_t*) bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 8002962:	2364      	movs	r3, #100	; 0x64
 8002964:	2207      	movs	r2, #7
 8002966:	4936      	ldr	r1, [pc, #216]	; (8002a40 <StartUartWiFiTask+0x20c>)
 8002968:	4833      	ldr	r0, [pc, #204]	; (8002a38 <StartUartWiFiTask+0x204>)
 800296a:	f004 fa3e 	bl	8006dea <HAL_UART_Transmit>
			}
			bms_req_time = HAL_GetTick();
 800296e:	f000 fd9b 	bl	80034a8 <HAL_GetTick>
 8002972:	4603      	mov	r3, r0
 8002974:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <StartUartWiFiTask+0x1f8>)
 8002976:	6013      	str	r3, [r2, #0]
			bms_err++;
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <StartUartWiFiTask+0x1f4>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <StartUartWiFiTask+0x1f4>)
 8002982:	701a      	strb	r2, [r3, #0]
			if (bms_err > 5) {
 8002984:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <StartUartWiFiTask+0x1f4>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b05      	cmp	r3, #5
 800298a:	d909      	bls.n	80029a0 <StartUartWiFiTask+0x16c>
				globData.capacity = 0;
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 800298e:	2200      	movs	r2, #0
 8002990:	755a      	strb	r2, [r3, #21]
				bms_detected = 0;
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <StartUartWiFiTask+0x1fc>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
				batteryMsg.bms_type = BMS_NONE;
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <StartUartWiFiTask+0x210>)
 800299a:	2200      	movs	r2, #0
 800299c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			mdrivers[0]->_error_count++;
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <StartUartWiFiTask+0x214>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	3201      	adds	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
			if (mdrivers[0]->_error_count > 3) globData.error.driverX_err = 1;
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <StartUartWiFiTask+0x214>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	dd05      	ble.n	80029c0 <StartUartWiFiTask+0x18c>
 80029b4:	4a17      	ldr	r2, [pc, #92]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 80029b6:	7a13      	ldrb	r3, [r2, #8]
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	7213      	strb	r3, [r2, #8]
 80029be:	e004      	b.n	80029ca <StartUartWiFiTask+0x196>
			else globData.error.driverX_err = 0;
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 80029c2:	7a13      	ldrb	r3, [r2, #8]
 80029c4:	f36f 0300 	bfc	r3, #0, #1
 80029c8:	7213      	strb	r3, [r2, #8]
			mdrivers[2]->_error_count++;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <StartUartWiFiTask+0x214>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	3201      	adds	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
			if (mdrivers[2]->_error_count > 3)
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <StartUartWiFiTask+0x214>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	dd0a      	ble.n	80029f4 <StartUartWiFiTask+0x1c0>
			{
				globData.error.driverY_err = 1;
 80029de:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 80029e0:	7a13      	ldrb	r3, [r2, #8]
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	7213      	strb	r3, [r2, #8]
				globData.error.driverF_err = 1;
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 80029ea:	7a13      	ldrb	r3, [r2, #8]
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	7213      	strb	r3, [r2, #8]
 80029f2:	e723      	b.n	800283c <StartUartWiFiTask+0x8>
			}
			else
			{
				globData.error.driverY_err = 0;
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 80029f6:	7a13      	ldrb	r3, [r2, #8]
 80029f8:	f36f 0341 	bfc	r3, #1, #1
 80029fc:	7213      	strb	r3, [r2, #8]
				globData.error.driverF_err = 0;
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <StartUartWiFiTask+0x1e0>)
 8002a00:	7a13      	ldrb	r3, [r2, #8]
 8002a02:	f36f 0382 	bfc	r3, #2, #1
 8002a06:	7213      	strb	r3, [r2, #8]
			}
		}
	}
 8002a08:	e718      	b.n	800283c <StartUartWiFiTask+0x8>
 8002a0a:	bf00      	nop
 8002a0c:	20001e78 	.word	0x20001e78
 8002a10:	20001f44 	.word	0x20001f44
 8002a14:	20000074 	.word	0x20000074
 8002a18:	0800ade0 	.word	0x0800ade0
 8002a1c:	20001ab8 	.word	0x20001ab8
 8002a20:	2000008c 	.word	0x2000008c
 8002a24:	20001e7a 	.word	0x20001e7a
 8002a28:	20001fac 	.word	0x20001fac
 8002a2c:	20001fa8 	.word	0x20001fa8
 8002a30:	20001fad 	.word	0x20001fad
 8002a34:	20000014 	.word	0x20000014
 8002a38:	20001afc 	.word	0x20001afc
 8002a3c:	20001fae 	.word	0x20001fae
 8002a40:	20000004 	.word	0x20000004
 8002a44:	20001e28 	.word	0x20001e28
 8002a48:	20001ddc 	.word	0x20001ddc

08002a4c <sendStatus>:
}

void sendStatus()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	statusMsg.start_msg0 = START_MSG0;
 8002a50:	4b26      	ldr	r3, [pc, #152]	; (8002aec <sendStatus+0xa0>)
 8002a52:	2284      	movs	r2, #132	; 0x84
 8002a54:	701a      	strb	r2, [r3, #0]
	statusMsg.start_msg1 = START_MSG1;
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <sendStatus+0xa0>)
 8002a58:	2253      	movs	r2, #83	; 0x53
 8002a5a:	705a      	strb	r2, [r3, #1]
	statusMsg.msg_id = MSG_STATUS;
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <sendStatus+0xa0>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	709a      	strb	r2, [r3, #2]
	statusMsg.pos_x = mdrivers[0]->getPos();
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <sendStatus+0xa4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe ffd4 	bl	8001a14 <_ZN16KeyaLKTechDriver6getPosEv>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <sendStatus+0xa0>)
 8002a70:	6053      	str	r3, [r2, #4]
	statusMsg.pos_y = mdrivers[2]->getPos();
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <sendStatus+0xa4>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe ffcc 	bl	8001a14 <_ZN16KeyaLKTechDriver6getPosEv>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <sendStatus+0xa0>)
 8002a80:	6093      	str	r3, [r2, #8]
	statusMsg.pos_fork = mdrivers[3]->getPos();;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <sendStatus+0xa4>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe ffc4 	bl	8001a14 <_ZN16KeyaLKTechDriver6getPosEv>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <sendStatus+0xa0>)
 8002a90:	60d3      	str	r3, [r2, #12]
	statusMsg.pos_servo = servo[0]->getAngle();
 8002a92:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <sendStatus+0xa8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f94e 	bl	8001d38 <_ZN5Servo8getAngleEv>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <sendStatus+0xa0>)
 8002aa2:	611a      	str	r2, [r3, #16]
	statusMsg.capacity = globData.capacity;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <sendStatus+0xac>)
 8002aa6:	7d5a      	ldrb	r2, [r3, #21]
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <sendStatus+0xa0>)
 8002aaa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	statusMsg.sens = globData.sens;
 8002aae:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <sendStatus+0xa0>)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <sendStatus+0xac>)
 8002ab2:	88db      	ldrh	r3, [r3, #6]
 8002ab4:	8413      	strh	r3, [r2, #32]
	statusMsg.error = globData.error;
 8002ab6:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <sendStatus+0xa0>)
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <sendStatus+0xac>)
 8002aba:	891b      	ldrh	r3, [r3, #8]
 8002abc:	8453      	strh	r3, [r2, #34]	; 0x22
	statusMsg.msg_count++;
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <sendStatus+0xa0>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	4a09      	ldr	r2, [pc, #36]	; (8002aec <sendStatus+0xa0>)
 8002ac6:	61d3      	str	r3, [r2, #28]
	statusMsg.CS = calculateCS((uint8_t *)&statusMsg, sizeof(statusMsg)-1);
 8002ac8:	212b      	movs	r1, #43	; 0x2b
 8002aca:	4808      	ldr	r0, [pc, #32]	; (8002aec <sendStatus+0xa0>)
 8002acc:	f000 fb58 	bl	8003180 <calculateCS>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <sendStatus+0xa0>)
 8002ad6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	HAL_UART_Transmit(&WIFI_UART, (uint8_t*)&statusMsg, sizeof(statusMsg), 100);
 8002ada:	2364      	movs	r3, #100	; 0x64
 8002adc:	222c      	movs	r2, #44	; 0x2c
 8002ade:	4903      	ldr	r1, [pc, #12]	; (8002aec <sendStatus+0xa0>)
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <sendStatus+0xb0>)
 8002ae2:	f004 f982 	bl	8006dea <HAL_UART_Transmit>
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200000a8 	.word	0x200000a8
 8002af0:	20001ddc 	.word	0x20001ddc
 8002af4:	20001e20 	.word	0x20001e20
 8002af8:	20000074 	.word	0x20000074
 8002afc:	20001ab8 	.word	0x20001ab8

08002b00 <rcGetBattery>:
void SetManual()
{

}

void rcGetBattery() {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
	if (bms_uart_buff[0] == 0xDD) smart_bms = 0;
 8002b06:	4b87      	ldr	r3, [pc, #540]	; (8002d24 <rcGetBattery+0x224>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2bdd      	cmp	r3, #221	; 0xdd
 8002b0c:	d103      	bne.n	8002b16 <rcGetBattery+0x16>
 8002b0e:	4b86      	ldr	r3, [pc, #536]	; (8002d28 <rcGetBattery+0x228>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e006      	b.n	8002b24 <rcGetBattery+0x24>
	else if (bms_uart_buff[0] == 0xA5) smart_bms = 1;
 8002b16:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <rcGetBattery+0x224>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2ba5      	cmp	r3, #165	; 0xa5
 8002b1c:	d102      	bne.n	8002b24 <rcGetBattery+0x24>
 8002b1e:	4b82      	ldr	r3, [pc, #520]	; (8002d28 <rcGetBattery+0x228>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
	if (smart_bms)
 8002b24:	4b80      	ldr	r3, [pc, #512]	; (8002d28 <rcGetBattery+0x228>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 819f 	beq.w	8002e6c <rcGetBattery+0x36c>
	{
		uint8_t battery_comm = bms_uart_buff[2];
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <rcGetBattery+0x224>)
 8002b30:	789b      	ldrb	r3, [r3, #2]
 8002b32:	71bb      	strb	r3, [r7, #6]
		if (battery_comm == 0x90)
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	2b90      	cmp	r3, #144	; 0x90
 8002b38:	d133      	bne.n	8002ba2 <rcGetBattery+0xa2>
		{
			batteryMsg.bms_type = BMS_SMART;
 8002b3a:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <rcGetBattery+0x22c>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8002b42:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <rcGetBattery+0x224>)
 8002b44:	791b      	ldrb	r3, [r3, #4]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <rcGetBattery+0x224>)
 8002b4e:	795b      	ldrb	r3, [r3, #5]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <rcGetBattery+0x22c>)
 8002b58:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <rcGetBattery+0x224>)
 8002b5c:	7a1b      	ldrb	r3, [r3, #8]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <rcGetBattery+0x224>)
 8002b66:	7a5b      	ldrb	r3, [r3, #9]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b21a      	sxth	r2, r3
 8002b70:	4b6e      	ldr	r3, [pc, #440]	; (8002d2c <rcGetBattery+0x22c>)
 8002b72:	80da      	strh	r2, [r3, #6]
			batteryMsg.capacity_percent = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8002b74:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <rcGetBattery+0x224>)
 8002b76:	7a9b      	ldrb	r3, [r3, #10]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <rcGetBattery+0x224>)
 8002b80:	7adb      	ldrb	r3, [r3, #11]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <rcGetBattery+0x22c>)
 8002b8a:	835a      	strh	r2, [r3, #26]
			globData.capacity = batteryMsg.capacity_percent/10;
 8002b8c:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <rcGetBattery+0x22c>)
 8002b8e:	8b5b      	ldrh	r3, [r3, #26]
 8002b90:	4a67      	ldr	r2, [pc, #412]	; (8002d30 <rcGetBattery+0x230>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	08db      	lsrs	r3, r3, #3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <rcGetBattery+0x234>)
 8002b9e:	755a      	strb	r2, [r3, #21]
 8002ba0:	e146      	b.n	8002e30 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x91)
 8002ba2:	79bb      	ldrb	r3, [r7, #6]
 8002ba4:	2b91      	cmp	r3, #145	; 0x91
 8002ba6:	d118      	bne.n	8002bda <rcGetBattery+0xda>
		{
			batteryMsg.max_volt = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8002ba8:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <rcGetBattery+0x224>)
 8002baa:	791b      	ldrb	r3, [r3, #4]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <rcGetBattery+0x224>)
 8002bb4:	795b      	ldrb	r3, [r3, #5]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <rcGetBattery+0x22c>)
 8002bbe:	851a      	strh	r2, [r3, #40]	; 0x28
			batteryMsg.min_volt = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002bc0:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <rcGetBattery+0x224>)
 8002bc2:	79db      	ldrb	r3, [r3, #7]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <rcGetBattery+0x224>)
 8002bcc:	7a1b      	ldrb	r3, [r3, #8]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <rcGetBattery+0x22c>)
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd8:	e12a      	b.n	8002e30 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x92)
 8002bda:	79bb      	ldrb	r3, [r7, #6]
 8002bdc:	2b92      	cmp	r3, #146	; 0x92
 8002bde:	f000 8127 	beq.w	8002e30 <rcGetBattery+0x330>
		{

		}
		else if (battery_comm == 0x93)
 8002be2:	79bb      	ldrb	r3, [r7, #6]
 8002be4:	2b93      	cmp	r3, #147	; 0x93
 8002be6:	d111      	bne.n	8002c0c <rcGetBattery+0x10c>
		{
			batteryMsg.remaining_capacity = (bms_uart_buff[8] << 24) +(bms_uart_buff[9] << 16) +(bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8002be8:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <rcGetBattery+0x224>)
 8002bea:	7a1b      	ldrb	r3, [r3, #8]
 8002bec:	061a      	lsls	r2, r3, #24
 8002bee:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <rcGetBattery+0x224>)
 8002bf0:	7a5b      	ldrb	r3, [r3, #9]
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	441a      	add	r2, r3
 8002bf6:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <rcGetBattery+0x224>)
 8002bf8:	7a9b      	ldrb	r3, [r3, #10]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <rcGetBattery+0x224>)
 8002c00:	7ad2      	ldrb	r2, [r2, #11]
 8002c02:	4413      	add	r3, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <rcGetBattery+0x22c>)
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	e111      	b.n	8002e30 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x94)
 8002c0c:	79bb      	ldrb	r3, [r7, #6]
 8002c0e:	2b94      	cmp	r3, #148	; 0x94
 8002c10:	d108      	bne.n	8002c24 <rcGetBattery+0x124>
		{
			batteryMsg.num_of_battery = bms_uart_buff[4];
 8002c12:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <rcGetBattery+0x224>)
 8002c14:	791a      	ldrb	r2, [r3, #4]
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <rcGetBattery+0x22c>)
 8002c18:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[5];
 8002c1a:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <rcGetBattery+0x224>)
 8002c1c:	795a      	ldrb	r2, [r3, #5]
 8002c1e:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <rcGetBattery+0x22c>)
 8002c20:	77da      	strb	r2, [r3, #31]
 8002c22:	e105      	b.n	8002e30 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x95)
 8002c24:	79bb      	ldrb	r3, [r7, #6]
 8002c26:	2b95      	cmp	r3, #149	; 0x95
 8002c28:	f040 80f5 	bne.w	8002e16 <rcGetBattery+0x316>
		{
			if (bms_uart_buff[4] == 0x01)
 8002c2c:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <rcGetBattery+0x224>)
 8002c2e:	791b      	ldrb	r3, [r3, #4]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d124      	bne.n	8002c7e <rcGetBattery+0x17e>
			{
				batteryMsg.cell_0 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <rcGetBattery+0x224>)
 8002c36:	795b      	ldrb	r3, [r3, #5]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <rcGetBattery+0x224>)
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <rcGetBattery+0x22c>)
 8002c4a:	859a      	strh	r2, [r3, #44]	; 0x2c
				batteryMsg.cell_1 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <rcGetBattery+0x224>)
 8002c4e:	79db      	ldrb	r3, [r3, #7]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <rcGetBattery+0x224>)
 8002c58:	7a1b      	ldrb	r3, [r3, #8]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <rcGetBattery+0x22c>)
 8002c62:	85da      	strh	r2, [r3, #46]	; 0x2e
				batteryMsg.cell_2 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002c64:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <rcGetBattery+0x224>)
 8002c66:	7a5b      	ldrb	r3, [r3, #9]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <rcGetBattery+0x224>)
 8002c70:	7a9b      	ldrb	r3, [r3, #10]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <rcGetBattery+0x22c>)
 8002c7a:	861a      	strh	r2, [r3, #48]	; 0x30
 8002c7c:	e0c4      	b.n	8002e08 <rcGetBattery+0x308>
			}
			else if (bms_uart_buff[4] == 0x02)
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <rcGetBattery+0x224>)
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d124      	bne.n	8002cd0 <rcGetBattery+0x1d0>
			{
				batteryMsg.cell_3 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002c86:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <rcGetBattery+0x224>)
 8002c88:	795b      	ldrb	r3, [r3, #5]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <rcGetBattery+0x224>)
 8002c92:	799b      	ldrb	r3, [r3, #6]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <rcGetBattery+0x22c>)
 8002c9c:	865a      	strh	r2, [r3, #50]	; 0x32
				batteryMsg.cell_4 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <rcGetBattery+0x224>)
 8002ca0:	79db      	ldrb	r3, [r3, #7]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <rcGetBattery+0x224>)
 8002caa:	7a1b      	ldrb	r3, [r3, #8]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <rcGetBattery+0x22c>)
 8002cb4:	869a      	strh	r2, [r3, #52]	; 0x34
				batteryMsg.cell_5 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <rcGetBattery+0x224>)
 8002cb8:	7a5b      	ldrb	r3, [r3, #9]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <rcGetBattery+0x224>)
 8002cc2:	7a9b      	ldrb	r3, [r3, #10]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <rcGetBattery+0x22c>)
 8002ccc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cce:	e09b      	b.n	8002e08 <rcGetBattery+0x308>
				//batteryMsg.cell_3 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
				//batteryMsg.cell_4 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
				//batteryMsg.cell_5 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
			}
			else if (bms_uart_buff[4] == 0x03)
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <rcGetBattery+0x224>)
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d12f      	bne.n	8002d38 <rcGetBattery+0x238>
			{
				batteryMsg.cell_6 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <rcGetBattery+0x224>)
 8002cda:	795b      	ldrb	r3, [r3, #5]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <rcGetBattery+0x224>)
 8002ce4:	799b      	ldrb	r3, [r3, #6]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <rcGetBattery+0x22c>)
 8002cee:	871a      	strh	r2, [r3, #56]	; 0x38
				batteryMsg.cell_7 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <rcGetBattery+0x224>)
 8002cf2:	79db      	ldrb	r3, [r3, #7]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <rcGetBattery+0x224>)
 8002cfc:	7a1b      	ldrb	r3, [r3, #8]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <rcGetBattery+0x22c>)
 8002d06:	875a      	strh	r2, [r3, #58]	; 0x3a
				batteryMsg.cell_8 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <rcGetBattery+0x224>)
 8002d0a:	7a5b      	ldrb	r3, [r3, #9]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <rcGetBattery+0x224>)
 8002d14:	7a9b      	ldrb	r3, [r3, #10]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <rcGetBattery+0x22c>)
 8002d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002d20:	e072      	b.n	8002e08 <rcGetBattery+0x308>
 8002d22:	bf00      	nop
 8002d24:	20001ee0 	.word	0x20001ee0
 8002d28:	20001fae 	.word	0x20001fae
 8002d2c:	20001e28 	.word	0x20001e28
 8002d30:	cccccccd 	.word	0xcccccccd
 8002d34:	20000074 	.word	0x20000074
				//batteryMsg.cell_6 = (bms_uart_buff[27] << 8) + bms_uart_buff[28];
				//batteryMsg.cell_7 = (bms_uart_buff[29] << 8) + bms_uart_buff[30];
				//batteryMsg.cell_8 = (bms_uart_buff[31] << 8) + bms_uart_buff[32];
			}
			else if (bms_uart_buff[4] == 0x04)
 8002d38:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <rcGetBattery+0x360>)
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d126      	bne.n	8002d8e <rcGetBattery+0x28e>
			{
				batteryMsg.cell_9 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002d40:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <rcGetBattery+0x360>)
 8002d42:	795b      	ldrb	r3, [r3, #5]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	4b45      	ldr	r3, [pc, #276]	; (8002e60 <rcGetBattery+0x360>)
 8002d4c:	799b      	ldrb	r3, [r3, #6]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <rcGetBattery+0x364>)
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
				batteryMsg.cell_10 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002d58:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <rcGetBattery+0x360>)
 8002d5a:	79db      	ldrb	r3, [r3, #7]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <rcGetBattery+0x360>)
 8002d64:	7a1b      	ldrb	r3, [r3, #8]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <rcGetBattery+0x364>)
 8002d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				batteryMsg.cell_11 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <rcGetBattery+0x360>)
 8002d74:	7a5b      	ldrb	r3, [r3, #9]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <rcGetBattery+0x360>)
 8002d7e:	7a9b      	ldrb	r3, [r3, #10]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <rcGetBattery+0x364>)
 8002d88:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002d8c:	e03c      	b.n	8002e08 <rcGetBattery+0x308>
				//batteryMsg.cell_9 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
				//batteryMsg.cell_10 = (bms_uart_buff[36] << 8) + bms_uart_buff[37];
				//batteryMsg.cell_11 = (bms_uart_buff[38] << 8) + bms_uart_buff[39];
			}
			else if (bms_uart_buff[4] == 0x05)
 8002d8e:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <rcGetBattery+0x360>)
 8002d90:	791b      	ldrb	r3, [r3, #4]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d127      	bne.n	8002de6 <rcGetBattery+0x2e6>
			{
				batteryMsg.cell_12 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002d96:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <rcGetBattery+0x360>)
 8002d98:	795b      	ldrb	r3, [r3, #5]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <rcGetBattery+0x360>)
 8002da2:	799b      	ldrb	r3, [r3, #6]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <rcGetBattery+0x364>)
 8002dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				batteryMsg.cell_13 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <rcGetBattery+0x360>)
 8002db2:	79db      	ldrb	r3, [r3, #7]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <rcGetBattery+0x360>)
 8002dbc:	7a1b      	ldrb	r3, [r3, #8]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <rcGetBattery+0x364>)
 8002dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				batteryMsg.cell_14 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8002dca:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <rcGetBattery+0x360>)
 8002dcc:	7a5b      	ldrb	r3, [r3, #9]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <rcGetBattery+0x360>)
 8002dd6:	7a9b      	ldrb	r3, [r3, #10]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <rcGetBattery+0x364>)
 8002de0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8002de4:	e010      	b.n	8002e08 <rcGetBattery+0x308>
				//batteryMsg.cell_12 = (bms_uart_buff[40] << 8) + bms_uart_buff[41];
				//batteryMsg.cell_13 = (bms_uart_buff[42] << 8) + bms_uart_buff[43];
				//batteryMsg.cell_14 = (bms_uart_buff[44] << 8) + bms_uart_buff[45];
			}
			else if (bms_uart_buff[4] == 0x06)
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <rcGetBattery+0x360>)
 8002de8:	791b      	ldrb	r3, [r3, #4]
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d10c      	bne.n	8002e08 <rcGetBattery+0x308>
			{
				batteryMsg.cell_15 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <rcGetBattery+0x360>)
 8002df0:	795b      	ldrb	r3, [r3, #5]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <rcGetBattery+0x360>)
 8002dfa:	799b      	ldrb	r3, [r3, #6]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <rcGetBattery+0x364>)
 8002e04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				//batteryMsg.cell_15 = (bms_uart_buff[47] << 8) + bms_uart_buff[48];
			}
			bms_smart_request_msg[2] = 0x95;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <rcGetBattery+0x368>)
 8002e0a:	2295      	movs	r2, #149	; 0x95
 8002e0c:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x82;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <rcGetBattery+0x368>)
 8002e10:	2282      	movs	r2, #130	; 0x82
 8002e12:	731a      	strb	r2, [r3, #12]
 8002e14:	e00c      	b.n	8002e30 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x96)
 8002e16:	79bb      	ldrb	r3, [r7, #6]
 8002e18:	2b96      	cmp	r3, #150	; 0x96
 8002e1a:	d109      	bne.n	8002e30 <rcGetBattery+0x330>
		{
			batteryMsg.temp1 = bms_uart_buff[5]; //-40 to convert
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <rcGetBattery+0x360>)
 8002e1e:	795b      	ldrb	r3, [r3, #5]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <rcGetBattery+0x364>)
 8002e24:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = bms_uart_buff[6];
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <rcGetBattery+0x360>)
 8002e28:	799b      	ldrb	r3, [r3, #6]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <rcGetBattery+0x364>)
 8002e2e:	845a      	strh	r2, [r3, #34]	; 0x22
		}
		bms_smart_request_msg[2]++;
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <rcGetBattery+0x368>)
 8002e32:	789b      	ldrb	r3, [r3, #2]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <rcGetBattery+0x368>)
 8002e3a:	709a      	strb	r2, [r3, #2]
		bms_smart_request_msg[12]++;
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <rcGetBattery+0x368>)
 8002e3e:	7b1b      	ldrb	r3, [r3, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <rcGetBattery+0x368>)
 8002e46:	731a      	strb	r2, [r3, #12]
		if (bms_smart_request_msg[2] > 0x96)
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <rcGetBattery+0x368>)
 8002e4a:	789b      	ldrb	r3, [r3, #2]
 8002e4c:	2b96      	cmp	r3, #150	; 0x96
 8002e4e:	f240 818e 	bls.w	800316e <rcGetBattery+0x66e>
		{
			bms_smart_request_msg[2] = 0x90;
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <rcGetBattery+0x368>)
 8002e54:	2290      	movs	r2, #144	; 0x90
 8002e56:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x7D;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <rcGetBattery+0x368>)
 8002e5a:	227d      	movs	r2, #125	; 0x7d
 8002e5c:	731a      	strb	r2, [r3, #12]
			//osDelay(10);
			//disp_comm[4] = globData.capacity;
			//HAL_UART_Transmit(&BMS_UART, (uint8_t*) disp_comm, sizeof(disp_comm), 100);
		}
	}
}
 8002e5e:	e186      	b.n	800316e <rcGetBattery+0x66e>
 8002e60:	20001ee0 	.word	0x20001ee0
 8002e64:	20001e28 	.word	0x20001e28
 8002e68:	20000014 	.word	0x20000014
		uint8_t battery_comm = bms_uart_buff[1];
 8002e6c:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	71fb      	strb	r3, [r7, #7]
		if (battery_comm == 0x03)
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	f040 80a7 	bne.w	8002fc8 <rcGetBattery+0x4c8>
			batteryMsg.bms_type = BMS_JBD;
 8002e7a:	4b4f      	ldr	r3, [pc, #316]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8002e82:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b49      	ldr	r3, [pc, #292]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002e8e:	795b      	ldrb	r3, [r3, #5]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002e98:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = 0;//(bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	80da      	strh	r2, [r3, #6]
			batteryMsg.remaining_capacity = (uint32_t)((bms_uart_buff[8] << 8) + bms_uart_buff[9]);
 8002ea0:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002ea2:	7a1b      	ldrb	r3, [r3, #8]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002ea8:	7a52      	ldrb	r2, [r2, #9]
 8002eaa:	4413      	add	r3, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002eb0:	609a      	str	r2, [r3, #8]
			batteryMsg.nominal_capacity = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8002eb2:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002eb4:	7a9b      	ldrb	r3, [r3, #10]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002ebe:	7adb      	ldrb	r3, [r3, #11]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002ec8:	819a      	strh	r2, [r3, #12]
			batteryMsg.cycles = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002ecc:	7b1b      	ldrb	r3, [r3, #12]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002ed6:	7b5b      	ldrb	r3, [r3, #13]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002ee0:	821a      	strh	r2, [r3, #16]
			batteryMsg.date = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8002ee2:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002ee4:	7b9b      	ldrb	r3, [r3, #14]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002eee:	7bdb      	ldrb	r3, [r3, #15]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002ef8:	825a      	strh	r2, [r3, #18]
			batteryMsg.balance_low = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 8002efa:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002efc:	7c1b      	ldrb	r3, [r3, #16]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f06:	7c5b      	ldrb	r3, [r3, #17]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f10:	829a      	strh	r2, [r3, #20]
			batteryMsg.balance_high = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f14:	7c9b      	ldrb	r3, [r3, #18]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f1e:	7cdb      	ldrb	r3, [r3, #19]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f28:	82da      	strh	r2, [r3, #22]
			batteryMsg.protection = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f2c:	7d1b      	ldrb	r3, [r3, #20]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f36:	7d5b      	ldrb	r3, [r3, #21]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f40:	831a      	strh	r2, [r3, #24]
			batteryMsg.version = bms_uart_buff[22];
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f44:	7d9a      	ldrb	r2, [r3, #22]
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f48:	771a      	strb	r2, [r3, #28]
			batteryMsg.capacity_percent = (uint16_t)bms_uart_buff[23];
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f4c:	7ddb      	ldrb	r3, [r3, #23]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f52:	835a      	strh	r2, [r3, #26]
			batteryMsg.MOS_state = bms_uart_buff[24];
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f56:	7e1a      	ldrb	r2, [r3, #24]
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f5a:	775a      	strb	r2, [r3, #29]
			batteryMsg.num_of_battery = bms_uart_buff[25];
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f5e:	7e5a      	ldrb	r2, [r3, #25]
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f62:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[26];
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f66:	7e9a      	ldrb	r2, [r3, #26]
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f6a:	77da      	strb	r2, [r3, #31]
			batteryMsg.temp1 = ((bms_uart_buff[27] << 8) + bms_uart_buff[28]);
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f6e:	7edb      	ldrb	r3, [r3, #27]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f82:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = ((bms_uart_buff[29] << 8) + bms_uart_buff[30]);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f86:	7f5b      	ldrb	r3, [r3, #29]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <rcGetBattery+0x4b4>)
 8002f90:	7f9b      	ldrb	r3, [r3, #30]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f9a:	845a      	strh	r2, [r3, #34]	; 0x22
			globData.capacity = batteryMsg.capacity_percent;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <rcGetBattery+0x4b8>)
 8002f9e:	8b5b      	ldrh	r3, [r3, #26]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <rcGetBattery+0x4bc>)
 8002fa4:	755a      	strb	r2, [r3, #21]
			HAL_UART_Transmit(&BMS_UART, (uint8_t*)bms_jbd_request_msg1, sizeof(bms_jbd_request_msg1), 100);
 8002fa6:	2364      	movs	r3, #100	; 0x64
 8002fa8:	2207      	movs	r2, #7
 8002faa:	4905      	ldr	r1, [pc, #20]	; (8002fc0 <rcGetBattery+0x4c0>)
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <rcGetBattery+0x4c4>)
 8002fae:	f003 ff1c 	bl	8006dea <HAL_UART_Transmit>
}
 8002fb2:	e0dc      	b.n	800316e <rcGetBattery+0x66e>
 8002fb4:	20001ee0 	.word	0x20001ee0
 8002fb8:	20001e28 	.word	0x20001e28
 8002fbc:	20000074 	.word	0x20000074
 8002fc0:	2000000c 	.word	0x2000000c
 8002fc4:	20001afc 	.word	0x20001afc
		else if (battery_comm == 0x04)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	f040 80cf 	bne.w	800316e <rcGetBattery+0x66e>
			batteryMsg.battery_pack = bms_uart_buff[3];
 8002fd0:	4b69      	ldr	r3, [pc, #420]	; (8003178 <rcGetBattery+0x678>)
 8002fd2:	78da      	ldrb	r2, [r3, #3]
 8002fd4:	4b69      	ldr	r3, [pc, #420]	; (800317c <rcGetBattery+0x67c>)
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			batteryMsg.cell_0 = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <rcGetBattery+0x678>)
 8002fdc:	791b      	ldrb	r3, [r3, #4]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <rcGetBattery+0x678>)
 8002fe6:	795b      	ldrb	r3, [r3, #5]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <rcGetBattery+0x67c>)
 8002ff0:	859a      	strh	r2, [r3, #44]	; 0x2c
			batteryMsg.cell_1 = (bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <rcGetBattery+0x678>)
 8002ff4:	799b      	ldrb	r3, [r3, #6]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <rcGetBattery+0x678>)
 8002ffe:	79db      	ldrb	r3, [r3, #7]
 8003000:	b29b      	uxth	r3, r3
 8003002:	4413      	add	r3, r2
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <rcGetBattery+0x67c>)
 8003008:	85da      	strh	r2, [r3, #46]	; 0x2e
			batteryMsg.cell_2 = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <rcGetBattery+0x678>)
 800300c:	7a1b      	ldrb	r3, [r3, #8]
 800300e:	b29b      	uxth	r3, r3
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <rcGetBattery+0x678>)
 8003016:	7a5b      	ldrb	r3, [r3, #9]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4413      	add	r3, r2
 800301c:	b29a      	uxth	r2, r3
 800301e:	4b57      	ldr	r3, [pc, #348]	; (800317c <rcGetBattery+0x67c>)
 8003020:	861a      	strh	r2, [r3, #48]	; 0x30
			batteryMsg.cell_3 = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8003022:	4b55      	ldr	r3, [pc, #340]	; (8003178 <rcGetBattery+0x678>)
 8003024:	7a9b      	ldrb	r3, [r3, #10]
 8003026:	b29b      	uxth	r3, r3
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	b29a      	uxth	r2, r3
 800302c:	4b52      	ldr	r3, [pc, #328]	; (8003178 <rcGetBattery+0x678>)
 800302e:	7adb      	ldrb	r3, [r3, #11]
 8003030:	b29b      	uxth	r3, r3
 8003032:	4413      	add	r3, r2
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b51      	ldr	r3, [pc, #324]	; (800317c <rcGetBattery+0x67c>)
 8003038:	865a      	strh	r2, [r3, #50]	; 0x32
			batteryMsg.cell_4 = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <rcGetBattery+0x678>)
 800303c:	7b1b      	ldrb	r3, [r3, #12]
 800303e:	b29b      	uxth	r3, r3
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <rcGetBattery+0x678>)
 8003046:	7b5b      	ldrb	r3, [r3, #13]
 8003048:	b29b      	uxth	r3, r3
 800304a:	4413      	add	r3, r2
 800304c:	b29a      	uxth	r2, r3
 800304e:	4b4b      	ldr	r3, [pc, #300]	; (800317c <rcGetBattery+0x67c>)
 8003050:	869a      	strh	r2, [r3, #52]	; 0x34
			batteryMsg.cell_5 = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <rcGetBattery+0x678>)
 8003054:	7b9b      	ldrb	r3, [r3, #14]
 8003056:	b29b      	uxth	r3, r3
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <rcGetBattery+0x678>)
 800305e:	7bdb      	ldrb	r3, [r3, #15]
 8003060:	b29b      	uxth	r3, r3
 8003062:	4413      	add	r3, r2
 8003064:	b29a      	uxth	r2, r3
 8003066:	4b45      	ldr	r3, [pc, #276]	; (800317c <rcGetBattery+0x67c>)
 8003068:	86da      	strh	r2, [r3, #54]	; 0x36
			batteryMsg.cell_6 = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <rcGetBattery+0x678>)
 800306c:	7c1b      	ldrb	r3, [r3, #16]
 800306e:	b29b      	uxth	r3, r3
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b40      	ldr	r3, [pc, #256]	; (8003178 <rcGetBattery+0x678>)
 8003076:	7c5b      	ldrb	r3, [r3, #17]
 8003078:	b29b      	uxth	r3, r3
 800307a:	4413      	add	r3, r2
 800307c:	b29a      	uxth	r2, r3
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <rcGetBattery+0x67c>)
 8003080:	871a      	strh	r2, [r3, #56]	; 0x38
			batteryMsg.cell_7 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <rcGetBattery+0x678>)
 8003084:	7c9b      	ldrb	r3, [r3, #18]
 8003086:	b29b      	uxth	r3, r3
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	b29a      	uxth	r2, r3
 800308c:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <rcGetBattery+0x678>)
 800308e:	7cdb      	ldrb	r3, [r3, #19]
 8003090:	b29b      	uxth	r3, r3
 8003092:	4413      	add	r3, r2
 8003094:	b29a      	uxth	r2, r3
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <rcGetBattery+0x67c>)
 8003098:	875a      	strh	r2, [r3, #58]	; 0x3a
			batteryMsg.cell_8 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <rcGetBattery+0x678>)
 800309c:	7d1b      	ldrb	r3, [r3, #20]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b34      	ldr	r3, [pc, #208]	; (8003178 <rcGetBattery+0x678>)
 80030a6:	7d5b      	ldrb	r3, [r3, #21]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <rcGetBattery+0x67c>)
 80030b0:	879a      	strh	r2, [r3, #60]	; 0x3c
			batteryMsg.cell_9 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <rcGetBattery+0x678>)
 80030b4:	7d9b      	ldrb	r3, [r3, #22]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <rcGetBattery+0x678>)
 80030be:	7ddb      	ldrb	r3, [r3, #23]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	4b2d      	ldr	r3, [pc, #180]	; (800317c <rcGetBattery+0x67c>)
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e
			batteryMsg.cell_10 = (bms_uart_buff[24] << 8) + bms_uart_buff[25];
 80030ca:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <rcGetBattery+0x678>)
 80030cc:	7e1b      	ldrb	r3, [r3, #24]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <rcGetBattery+0x678>)
 80030d6:	7e5b      	ldrb	r3, [r3, #25]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	4413      	add	r3, r2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <rcGetBattery+0x67c>)
 80030e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			batteryMsg.cell_11 = (bms_uart_buff[26] << 8) + bms_uart_buff[27];
 80030e4:	4b24      	ldr	r3, [pc, #144]	; (8003178 <rcGetBattery+0x678>)
 80030e6:	7e9b      	ldrb	r3, [r3, #26]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <rcGetBattery+0x678>)
 80030f0:	7edb      	ldrb	r3, [r3, #27]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <rcGetBattery+0x67c>)
 80030fa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			batteryMsg.cell_12 = (bms_uart_buff[28] << 8) + bms_uart_buff[29];
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <rcGetBattery+0x678>)
 8003100:	7f1b      	ldrb	r3, [r3, #28]
 8003102:	b29b      	uxth	r3, r3
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <rcGetBattery+0x678>)
 800310a:	7f5b      	ldrb	r3, [r3, #29]
 800310c:	b29b      	uxth	r3, r3
 800310e:	4413      	add	r3, r2
 8003110:	b29a      	uxth	r2, r3
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <rcGetBattery+0x67c>)
 8003114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <rcGetBattery+0x678>)
 800311a:	7f9b      	ldrb	r3, [r3, #30]
 800311c:	b29b      	uxth	r3, r3
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	b29a      	uxth	r2, r3
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <rcGetBattery+0x678>)
 8003124:	7fdb      	ldrb	r3, [r3, #31]
 8003126:	b29b      	uxth	r3, r3
 8003128:	4413      	add	r3, r2
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <rcGetBattery+0x67c>)
 800312e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <rcGetBattery+0x678>)
 8003134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003138:	b29b      	uxth	r3, r3
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <rcGetBattery+0x678>)
 8003140:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003144:	b29b      	uxth	r3, r3
 8003146:	4413      	add	r3, r2
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <rcGetBattery+0x67c>)
 800314c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <rcGetBattery+0x678>)
 8003152:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003156:	b29b      	uxth	r3, r3
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	b29a      	uxth	r2, r3
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <rcGetBattery+0x678>)
 800315e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003162:	b29b      	uxth	r3, r3
 8003164:	4413      	add	r3, r2
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <rcGetBattery+0x67c>)
 800316a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20001ee0 	.word	0x20001ee0
 800317c:	20001e28 	.word	0x20001e28

08003180 <calculateCS>:

uint8_t calculateCS(uint8_t *msg, int msg_size) {
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint8_t cs = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	da0a      	bge.n	80031b0 <calculateCS+0x30>
  {
    cs+=msg[i];
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	4413      	add	r3, r2
 80031a6:	73fb      	strb	r3, [r7, #15]
  for (int i=0; i<msg_size; i++)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	e7f0      	b.n	8003192 <calculateCS+0x12>
  }
  return cs;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(huart);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f004 f9b1 	bl	8007530 <HAL_UART_GetError>
 80031ce:	61f8      	str	r0, [r7, #28]
	switch (er) {
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d863      	bhi.n	80032a0 <HAL_UART_ErrorCallback+0xe0>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_UART_ErrorCallback+0x20>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	08003221 	.word	0x08003221
 80031e4:	0800323f 	.word	0x0800323f
 80031e8:	080032a1 	.word	0x080032a1
 80031ec:	0800325d 	.word	0x0800325d
 80031f0:	080032a1 	.word	0x080032a1
 80031f4:	080032a1 	.word	0x080032a1
 80031f8:	080032a1 	.word	0x080032a1
 80031fc:	0800327b 	.word	0x0800327b
 8003200:	080032a1 	.word	0x080032a1
 8003204:	080032a1 	.word	0x080032a1
 8003208:	080032a1 	.word	0x080032a1
 800320c:	080032a1 	.word	0x080032a1
 8003210:	080032a1 	.word	0x080032a1
 8003214:	080032a1 	.word	0x080032a1
 8003218:	080032a1 	.word	0x080032a1
 800321c:	08003299 	.word	0x08003299
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(huart);
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800323c:	e031      	b.n	80032a2 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(huart);
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800325a:	e022      	b.n	80032a2 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(huart);
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8003278:	e013      	b.n	80032a2 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8003296:	e004      	b.n	80032a2 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800329e:	e000      	b.n	80032a2 <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 80032a0:	bf00      	nop
	}
	if (huart->Instance == WIFI_UART_Ins) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a21      	ldr	r2, [pc, #132]	; (800332c <HAL_UART_ErrorCallback+0x16c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d110      	bne.n	80032ce <HAL_UART_ErrorCallback+0x10e>
		new_wifi_data = 1;
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_UART_ErrorCallback+0x170>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff,
 80032b2:	2264      	movs	r2, #100	; 0x64
 80032b4:	491f      	ldr	r1, [pc, #124]	; (8003334 <HAL_UART_ErrorCallback+0x174>)
 80032b6:	4820      	ldr	r0, [pc, #128]	; (8003338 <HAL_UART_ErrorCallback+0x178>)
 80032b8:	f003 fe29 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
				sizeof(wifi_uart_buff));
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_UART_ErrorCallback+0x17c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_UART_ErrorCallback+0x17c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0208 	bic.w	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
		new_remote_data = 0;
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff,
				sizeof(rc_uart_buff));
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
	}
}
 80032cc:	e02a      	b.n	8003324 <HAL_UART_ErrorCallback+0x164>
	else if (huart->Instance == BMS_UART_Ins) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <HAL_UART_ErrorCallback+0x180>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d110      	bne.n	80032fa <HAL_UART_ErrorCallback+0x13a>
		new_bms_data = 0;
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_UART_ErrorCallback+0x184>)
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff,
 80032de:	2264      	movs	r2, #100	; 0x64
 80032e0:	4919      	ldr	r1, [pc, #100]	; (8003348 <HAL_UART_ErrorCallback+0x188>)
 80032e2:	481a      	ldr	r0, [pc, #104]	; (800334c <HAL_UART_ErrorCallback+0x18c>)
 80032e4:	f003 fe13 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_UART_ErrorCallback+0x190>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_UART_ErrorCallback+0x190>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0208 	bic.w	r2, r2, #8
 80032f6:	601a      	str	r2, [r3, #0]
}
 80032f8:	e014      	b.n	8003324 <HAL_UART_ErrorCallback+0x164>
	else if (huart->Instance == RC_UART_Ins) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_UART_ErrorCallback+0x194>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10f      	bne.n	8003324 <HAL_UART_ErrorCallback+0x164>
		new_remote_data = 0;
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_UART_ErrorCallback+0x198>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff,
 800330a:	2264      	movs	r2, #100	; 0x64
 800330c:	4913      	ldr	r1, [pc, #76]	; (800335c <HAL_UART_ErrorCallback+0x19c>)
 800330e:	4814      	ldr	r0, [pc, #80]	; (8003360 <HAL_UART_ErrorCallback+0x1a0>)
 8003310:	f003 fdfd 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_UART_ErrorCallback+0x1a4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_UART_ErrorCallback+0x1a4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0208 	bic.w	r2, r2, #8
 8003322:	601a      	str	r2, [r3, #0]
}
 8003324:	bf00      	nop
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40011000 	.word	0x40011000
 8003330:	20001e78 	.word	0x20001e78
 8003334:	20001f44 	.word	0x20001f44
 8003338:	20001ab8 	.word	0x20001ab8
 800333c:	20001b84 	.word	0x20001b84
 8003340:	40004400 	.word	0x40004400
 8003344:	20001e7a 	.word	0x20001e7a
 8003348:	20001ee0 	.word	0x20001ee0
 800334c:	20001afc 	.word	0x20001afc
 8003350:	20001be4 	.word	0x20001be4
 8003354:	40004800 	.word	0x40004800
 8003358:	20001e79 	.word	0x20001e79
 800335c:	20001e7c 	.word	0x20001e7c
 8003360:	20001b40 	.word	0x20001b40
 8003364:	20001c44 	.word	0x20001c44

08003368 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == WIFI_UART_Ins) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_UARTEx_RxEventCallback+0x98>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d110      	bne.n	80033a0 <HAL_UARTEx_RxEventCallback+0x38>
		new_wifi_data = 1;
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_UARTEx_RxEventCallback+0x9c>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&WIFI_UART, wifi_uart_buff, sizeof(wifi_uart_buff));
 8003384:	2264      	movs	r2, #100	; 0x64
 8003386:	4920      	ldr	r1, [pc, #128]	; (8003408 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003388:	4820      	ldr	r0, [pc, #128]	; (800340c <HAL_UARTEx_RxEventCallback+0xa4>)
 800338a:	f003 fdc0 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&WIFI_UART_DMA, DMA_IT_HT);
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_UARTEx_RxEventCallback+0xa8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <HAL_UARTEx_RxEventCallback+0xa8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0208 	bic.w	r2, r2, #8
 800339c:	601a      	str	r2, [r3, #0]
		new_remote_data = 1;
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
		//HAL_UART_Transmit(&WIFI_UART, (uint8_t*)"RC ok", 5, 100);
	}
}
 800339e:	e02a      	b.n	80033f6 <HAL_UARTEx_RxEventCallback+0x8e>
	else if (huart->Instance == BMS_UART_Ins) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <HAL_UARTEx_RxEventCallback+0xac>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d110      	bne.n	80033cc <HAL_UARTEx_RxEventCallback+0x64>
		new_bms_data = 1;
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_UARTEx_RxEventCallback+0xb0>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&BMS_UART, bms_uart_buff, sizeof(bms_uart_buff));
 80033b0:	2264      	movs	r2, #100	; 0x64
 80033b2:	491a      	ldr	r1, [pc, #104]	; (800341c <HAL_UARTEx_RxEventCallback+0xb4>)
 80033b4:	481a      	ldr	r0, [pc, #104]	; (8003420 <HAL_UARTEx_RxEventCallback+0xb8>)
 80033b6:	f003 fdaa 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&BMS_UART_DMA, DMA_IT_HT);
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_UARTEx_RxEventCallback+0xbc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_UARTEx_RxEventCallback+0xbc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0208 	bic.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
}
 80033ca:	e014      	b.n	80033f6 <HAL_UARTEx_RxEventCallback+0x8e>
	else if (huart->Instance == RC_UART_Ins) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_UARTEx_RxEventCallback+0xc0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10f      	bne.n	80033f6 <HAL_UARTEx_RxEventCallback+0x8e>
		new_remote_data = 1;
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_UARTEx_RxEventCallback+0xc4>)
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&RC_UART, rc_uart_buff, sizeof(rc_uart_buff));
 80033dc:	2264      	movs	r2, #100	; 0x64
 80033de:	4914      	ldr	r1, [pc, #80]	; (8003430 <HAL_UARTEx_RxEventCallback+0xc8>)
 80033e0:	4814      	ldr	r0, [pc, #80]	; (8003434 <HAL_UARTEx_RxEventCallback+0xcc>)
 80033e2:	f003 fd94 	bl	8006f0e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&RC_UART_DMA, DMA_IT_HT);
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <HAL_UARTEx_RxEventCallback+0xd0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_UARTEx_RxEventCallback+0xd0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40011000 	.word	0x40011000
 8003404:	20001e78 	.word	0x20001e78
 8003408:	20001f44 	.word	0x20001f44
 800340c:	20001ab8 	.word	0x20001ab8
 8003410:	20001b84 	.word	0x20001b84
 8003414:	40004400 	.word	0x40004400
 8003418:	20001e7a 	.word	0x20001e7a
 800341c:	20001ee0 	.word	0x20001ee0
 8003420:	20001afc 	.word	0x20001afc
 8003424:	20001be4 	.word	0x20001be4
 8003428:	40004800 	.word	0x40004800
 800342c:	20001e79 	.word	0x20001e79
 8003430:	20001e7c 	.word	0x20001e7c
 8003434:	20001b40 	.word	0x20001b40
 8003438:	20001c44 	.word	0x20001c44

0800343c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HAL_Init+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_Init+0x40>)
 8003446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_Init+0x40>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_Init+0x40>)
 8003452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_Init+0x40>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_Init+0x40>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003464:	2003      	movs	r0, #3
 8003466:	f000 ff8a 	bl	800437e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346a:	200f      	movs	r0, #15
 800346c:	f7fd fbf4 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003470:	f7fd fbc6 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000028 	.word	0x20000028
 80034a4:	20001fb0 	.word	0x20001fb0

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20001fb0 	.word	0x20001fb0

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000028 	.word	0x20000028

08003508 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0ed      	b.n	80036f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd f83c 	bl	80005a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800353c:	f7ff ffb4 	bl	80034a8 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003542:	e012      	b.n	800356a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003544:	f7ff ffb0 	bl	80034a8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b0a      	cmp	r3, #10
 8003550:	d90b      	bls.n	800356a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2205      	movs	r2, #5
 8003562:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0c5      	b.n	80036f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0e5      	beq.n	8003544 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0202 	bic.w	r2, r2, #2
 8003586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7ff ff8e 	bl	80034a8 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800358e:	e012      	b.n	80035b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003590:	f7ff ff8a 	bl	80034a8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b0a      	cmp	r3, #10
 800359c:	d90b      	bls.n	80035b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2205      	movs	r2, #5
 80035ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e09f      	b.n	80036f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e1b      	ldrb	r3, [r3, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e007      	b.n	80035ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7e5b      	ldrb	r3, [r3, #25]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7e9b      	ldrb	r3, [r3, #26]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d108      	bne.n	8003632 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0220 	orr.w	r2, r2, #32
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e007      	b.n	8003642 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0220 	bic.w	r2, r2, #32
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7edb      	ldrb	r3, [r3, #27]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0210 	bic.w	r2, r2, #16
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e007      	b.n	800366c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0210 	orr.w	r2, r2, #16
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7f1b      	ldrb	r3, [r3, #28]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0208 	orr.w	r2, r2, #8
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0208 	bic.w	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7f5b      	ldrb	r3, [r3, #29]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0204 	orr.w	r2, r2, #4
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e007      	b.n	80036c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0204 	bic.w	r2, r2, #4
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	ea42 0103 	orr.w	r1, r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003716:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d003      	beq.n	8003726 <HAL_CAN_ConfigFilter+0x26>
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b02      	cmp	r3, #2
 8003722:	f040 80be 	bne.w	80038a2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_CAN_ConfigFilter+0x1bc>)
 8003728:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003740:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	431a      	orrs	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2201      	movs	r2, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	43db      	mvns	r3, r3
 8003778:	401a      	ands	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d123      	bne.n	80037d0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3248      	adds	r2, #72	; 0x48
 80037b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	3348      	adds	r3, #72	; 0x48
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d122      	bne.n	800381e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	3248      	adds	r2, #72	; 0x48
 80037fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003812:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003814:	6979      	ldr	r1, [r7, #20]
 8003816:	3348      	adds	r3, #72	; 0x48
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	401a      	ands	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003838:	e007      	b.n	800384a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	431a      	orrs	r2, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	43db      	mvns	r3, r3
 800385c:	401a      	ands	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003864:	e007      	b.n	8003876 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	431a      	orrs	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	431a      	orrs	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003894:	f023 0201 	bic.w	r2, r3, #1
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e006      	b.n	80038b0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40006400 	.word	0x40006400

080038c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d12e      	bne.n	8003932 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ec:	f7ff fddc 	bl	80034a8 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038f2:	e012      	b.n	800391a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038f4:	f7ff fdd8 	bl	80034a8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b0a      	cmp	r3, #10
 8003900:	d90b      	bls.n	800391a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2205      	movs	r2, #5
 8003912:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e012      	b.n	8003940 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e006      	b.n	8003940 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d003      	beq.n	8003974 <HAL_CAN_AddTxMessage+0x2c>
 800396c:	7ffb      	ldrb	r3, [r7, #31]
 800396e:	2b02      	cmp	r3, #2
 8003970:	f040 80b8 	bne.w	8003ae4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80a0 	beq.w	8003ad4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	0e1b      	lsrs	r3, r3, #24
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d907      	bls.n	80039b4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e09e      	b.n	8003af2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039b4:	2201      	movs	r2, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	409a      	lsls	r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	6809      	ldr	r1, [r1, #0]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3318      	adds	r3, #24
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	e00f      	b.n	8003a02 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039f2:	68f9      	ldr	r1, [r7, #12]
 80039f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80039f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3318      	adds	r3, #24
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	440b      	add	r3, r1
 8003a00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3318      	adds	r3, #24
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	440b      	add	r3, r1
 8003a12:	3304      	adds	r3, #4
 8003a14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	7d1b      	ldrb	r3, [r3, #20]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d111      	bne.n	8003a42 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3318      	adds	r3, #24
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	6811      	ldr	r1, [r2, #0]
 8003a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3318      	adds	r3, #24
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3304      	adds	r3, #4
 8003a40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3307      	adds	r3, #7
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	061a      	lsls	r2, r3, #24
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3306      	adds	r3, #6
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3305      	adds	r3, #5
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	3204      	adds	r2, #4
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	4610      	mov	r0, r2
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	6811      	ldr	r1, [r2, #0]
 8003a6a:	ea43 0200 	orr.w	r2, r3, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	440b      	add	r3, r1
 8003a74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3303      	adds	r3, #3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	061a      	lsls	r2, r3, #24
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3302      	adds	r3, #2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	4313      	orrs	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	6811      	ldr	r1, [r2, #0]
 8003aa0:	ea43 0200 	orr.w	r2, r3, r0
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003aae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	4413      	add	r3, r2
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	6811      	ldr	r1, [r2, #0]
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	440b      	add	r3, r1
 8003ace:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e00e      	b.n	8003af2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e006      	b.n	8003af2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3724      	adds	r7, #36	; 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b10:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b12:	7afb      	ldrb	r3, [r7, #11]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d002      	beq.n	8003b1e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d11d      	bne.n	8003b5a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3301      	adds	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b7c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d003      	beq.n	8003b8c <HAL_CAN_GetRxMessage+0x24>
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	f040 80f3 	bne.w	8003d72 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d116      	bne.n	8003bce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0e7      	b.n	8003d80 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d107      	bne.n	8003bce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0d8      	b.n	8003d80 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	331b      	adds	r3, #27
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4413      	add	r3, r2
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0204 	and.w	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10c      	bne.n	8003c06 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	331b      	adds	r3, #27
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4413      	add	r3, r2
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0d5b      	lsrs	r3, r3, #21
 8003bfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e00b      	b.n	8003c1e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	331b      	adds	r3, #27
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	4413      	add	r3, r2
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	08db      	lsrs	r3, r3, #3
 8003c16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	331b      	adds	r3, #27
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	4413      	add	r3, r2
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0202 	and.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	331b      	adds	r3, #27
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	331b      	adds	r3, #27
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	331b      	adds	r3, #27
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0a1a      	lsrs	r2, r3, #8
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0c1a      	lsrs	r2, r3, #16
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	0e1a      	lsrs	r2, r3, #24
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	3303      	adds	r3, #3
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0a1a      	lsrs	r2, r3, #8
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	3305      	adds	r3, #5
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0c1a      	lsrs	r2, r3, #16
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	3306      	adds	r3, #6
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e1a      	lsrs	r2, r3, #24
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	3307      	adds	r3, #7
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d108      	bne.n	8003d5e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0220 	orr.w	r2, r2, #32
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e007      	b.n	8003d6e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0220 	orr.w	r2, r2, #32
 8003d6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e006      	b.n	8003d80 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d002      	beq.n	8003daa <HAL_CAN_ActivateNotification+0x1e>
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d109      	bne.n	8003dbe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6959      	ldr	r1, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e006      	b.n	8003dcc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d07c      	beq.n	8003f18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d023      	beq.n	8003e70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f983 	bl	8004146 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e40:	e016      	b.n	8003e70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e00c      	b.n	8003e70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
 8003e68:	e002      	b.n	8003e70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f989 	bl	8004182 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d024      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f963 	bl	800415a <HAL_CAN_TxMailbox1CompleteCallback>
 8003e94:	e016      	b.n	8003ec4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	e00c      	b.n	8003ec4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	e002      	b.n	8003ec4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f969 	bl	8004196 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d024      	beq.n	8003f18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ed6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f943 	bl	800416e <HAL_CAN_TxMailbox2CompleteCallback>
 8003ee8:	e016      	b.n	8003f18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	e00c      	b.n	8003f18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f10:	e002      	b.n	8003f18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f949 	bl	80041aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2210      	movs	r2, #16
 8003f3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2208      	movs	r2, #8
 8003f56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f930 	bl	80041be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe f84c 	bl	8002014 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d006      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f912 	bl	80041e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8f9 	bl	80041d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8fc 	bl	80041fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2208      	movs	r2, #8
 800401c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8f5 	bl	800420e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d07b      	beq.n	8004126 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d072      	beq.n	800411e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004092:	2b00      	cmp	r3, #0
 8004094:	d043      	beq.n	800411e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03e      	beq.n	800411e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a6:	2b60      	cmp	r3, #96	; 0x60
 80040a8:	d02b      	beq.n	8004102 <HAL_CAN_IRQHandler+0x32a>
 80040aa:	2b60      	cmp	r3, #96	; 0x60
 80040ac:	d82e      	bhi.n	800410c <HAL_CAN_IRQHandler+0x334>
 80040ae:	2b50      	cmp	r3, #80	; 0x50
 80040b0:	d022      	beq.n	80040f8 <HAL_CAN_IRQHandler+0x320>
 80040b2:	2b50      	cmp	r3, #80	; 0x50
 80040b4:	d82a      	bhi.n	800410c <HAL_CAN_IRQHandler+0x334>
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d019      	beq.n	80040ee <HAL_CAN_IRQHandler+0x316>
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d826      	bhi.n	800410c <HAL_CAN_IRQHandler+0x334>
 80040be:	2b30      	cmp	r3, #48	; 0x30
 80040c0:	d010      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x30c>
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d822      	bhi.n	800410c <HAL_CAN_IRQHandler+0x334>
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d002      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x2f8>
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d005      	beq.n	80040da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80040ce:	e01d      	b.n	800410c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	f043 0308 	orr.w	r3, r3, #8
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040d8:	e019      	b.n	800410e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f043 0310 	orr.w	r3, r3, #16
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040e2:	e014      	b.n	800410e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	f043 0320 	orr.w	r3, r3, #32
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ec:	e00f      	b.n	800410e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040f6:	e00a      	b.n	800410e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004100:	e005      	b.n	800410e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800410a:	e000      	b.n	800410e <HAL_CAN_IRQHandler+0x336>
            break;
 800410c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800411c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2204      	movs	r2, #4
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fd ff8d 	bl	8002058 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800413e:	bf00      	nop
 8004140:	3728      	adds	r7, #40	; 0x28
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <__NVIC_SetPriorityGrouping>:
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <__NVIC_SetPriorityGrouping+0x44>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004240:	4013      	ands	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800424c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004256:	4a04      	ldr	r2, [pc, #16]	; (8004268 <__NVIC_SetPriorityGrouping+0x44>)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	60d3      	str	r3, [r2, #12]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_GetPriorityGrouping>:
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <__NVIC_GetPriorityGrouping+0x18>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	0a1b      	lsrs	r3, r3, #8
 8004276:	f003 0307 	and.w	r3, r3, #7
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_EnableIRQ>:
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	2b00      	cmp	r3, #0
 8004298:	db0b      	blt.n	80042b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	4907      	ldr	r1, [pc, #28]	; (80042c0 <__NVIC_EnableIRQ+0x38>)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2001      	movs	r0, #1
 80042aa:	fa00 f202 	lsl.w	r2, r0, r2
 80042ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	e000e100 	.word	0xe000e100

080042c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	db0a      	blt.n	80042ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	490c      	ldr	r1, [pc, #48]	; (8004310 <__NVIC_SetPriority+0x4c>)
 80042de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e2:	0112      	lsls	r2, r2, #4
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	440b      	add	r3, r1
 80042e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042ec:	e00a      	b.n	8004304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4908      	ldr	r1, [pc, #32]	; (8004314 <__NVIC_SetPriority+0x50>)
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	3b04      	subs	r3, #4
 80042fc:	0112      	lsls	r2, r2, #4
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	440b      	add	r3, r1
 8004302:	761a      	strb	r2, [r3, #24]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000e100 	.word	0xe000e100
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f1c3 0307 	rsb	r3, r3, #7
 8004332:	2b04      	cmp	r3, #4
 8004334:	bf28      	it	cs
 8004336:	2304      	movcs	r3, #4
 8004338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3304      	adds	r3, #4
 800433e:	2b06      	cmp	r3, #6
 8004340:	d902      	bls.n	8004348 <NVIC_EncodePriority+0x30>
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3b03      	subs	r3, #3
 8004346:	e000      	b.n	800434a <NVIC_EncodePriority+0x32>
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43da      	mvns	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	401a      	ands	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004360:	f04f 31ff 	mov.w	r1, #4294967295
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	43d9      	mvns	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	4313      	orrs	r3, r2
         );
}
 8004372:	4618      	mov	r0, r3
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff ff4c 	bl	8004224 <__NVIC_SetPriorityGrouping>
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a6:	f7ff ff61 	bl	800426c <__NVIC_GetPriorityGrouping>
 80043aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	6978      	ldr	r0, [r7, #20]
 80043b2:	f7ff ffb1 	bl	8004318 <NVIC_EncodePriority>
 80043b6:	4602      	mov	r2, r0
 80043b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff ff80 	bl	80042c4 <__NVIC_SetPriority>
}
 80043c4:	bf00      	nop
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff ff54 	bl	8004288 <__NVIC_EnableIRQ>
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043f4:	f7ff f858 	bl	80034a8 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e099      	b.n	8004538 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004424:	e00f      	b.n	8004446 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004426:	f7ff f83f 	bl	80034a8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b05      	cmp	r3, #5
 8004432:	d908      	bls.n	8004446 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e078      	b.n	8004538 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e8      	bne.n	8004426 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4b38      	ldr	r3, [pc, #224]	; (8004540 <HAL_DMA_Init+0x158>)
 8004460:	4013      	ands	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004472:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	2b04      	cmp	r3, #4
 800449e:	d107      	bne.n	80044b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	4313      	orrs	r3, r2
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0307 	bic.w	r3, r3, #7
 80044c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d117      	bne.n	800450a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb01 	bl	8004af4 <DMA_CheckFifoParam>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2240      	movs	r2, #64	; 0x40
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004506:	2301      	movs	r3, #1
 8004508:	e016      	b.n	8004538 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fab8 	bl	8004a88 <DMA_CalcBaseAndBitshift>
 8004518:	4603      	mov	r3, r0
 800451a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	223f      	movs	r2, #63	; 0x3f
 8004522:	409a      	lsls	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	f010803f 	.word	0xf010803f

08004544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_DMA_Start_IT+0x26>
 8004566:	2302      	movs	r3, #2
 8004568:	e040      	b.n	80045ec <HAL_DMA_Start_IT+0xa8>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d12f      	bne.n	80045de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2202      	movs	r2, #2
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fa4a 	bl	8004a2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	223f      	movs	r2, #63	; 0x3f
 800459e:	409a      	lsls	r2, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0216 	orr.w	r2, r2, #22
 80045b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e005      	b.n	80045ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
 80045e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004602:	f7fe ff51 	bl	80034a8 <HAL_GetTick>
 8004606:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d008      	beq.n	8004626 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e052      	b.n	80046cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0216 	bic.w	r2, r2, #22
 8004634:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004644:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_DMA_Abort+0x62>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004676:	e013      	b.n	80046a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004678:	f7fe ff16 	bl	80034a8 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b05      	cmp	r3, #5
 8004684:	d90c      	bls.n	80046a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2203      	movs	r2, #3
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e015      	b.n	80046cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e4      	bne.n	8004678 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	223f      	movs	r2, #63	; 0x3f
 80046b4:	409a      	lsls	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d004      	beq.n	80046f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e00c      	b.n	800470c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2205      	movs	r2, #5
 80046f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004724:	4b8e      	ldr	r3, [pc, #568]	; (8004960 <HAL_DMA_IRQHandler+0x248>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a8e      	ldr	r2, [pc, #568]	; (8004964 <HAL_DMA_IRQHandler+0x24c>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	0a9b      	lsrs	r3, r3, #10
 8004730:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	2208      	movs	r2, #8
 8004744:	409a      	lsls	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01a      	beq.n	8004784 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0204 	bic.w	r2, r2, #4
 800476a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	2208      	movs	r2, #8
 8004772:	409a      	lsls	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f043 0201 	orr.w	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	2201      	movs	r2, #1
 800478a:	409a      	lsls	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d012      	beq.n	80047ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	2201      	movs	r2, #1
 80047a8:	409a      	lsls	r2, r3
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f043 0202 	orr.w	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	2204      	movs	r2, #4
 80047c0:	409a      	lsls	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d012      	beq.n	80047f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047dc:	2204      	movs	r2, #4
 80047de:	409a      	lsls	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f043 0204 	orr.w	r2, r3, #4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	2210      	movs	r2, #16
 80047f6:	409a      	lsls	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d043      	beq.n	8004888 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03c      	beq.n	8004888 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	2210      	movs	r2, #16
 8004814:	409a      	lsls	r2, r3
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d018      	beq.n	800485a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d108      	bne.n	8004848 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d024      	beq.n	8004888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
 8004846:	e01f      	b.n	8004888 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
 8004858:	e016      	b.n	8004888 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0208 	bic.w	r2, r2, #8
 8004876:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	2220      	movs	r2, #32
 800488e:	409a      	lsls	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 808f 	beq.w	80049b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8087 	beq.w	80049b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	2220      	movs	r2, #32
 80048b0:	409a      	lsls	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d136      	bne.n	8004930 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0216 	bic.w	r2, r2, #22
 80048d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <HAL_DMA_IRQHandler+0x1da>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0208 	bic.w	r2, r2, #8
 8004900:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004906:	223f      	movs	r2, #63	; 0x3f
 8004908:	409a      	lsls	r2, r3
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004922:	2b00      	cmp	r3, #0
 8004924:	d07e      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
        }
        return;
 800492e:	e079      	b.n	8004a24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01d      	beq.n	800497a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	2b00      	cmp	r3, #0
 8004952:	d031      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
 800495c:	e02c      	b.n	80049b8 <HAL_DMA_IRQHandler+0x2a0>
 800495e:	bf00      	nop
 8004960:	20000000 	.word	0x20000000
 8004964:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d023      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
 8004978:	e01e      	b.n	80049b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10f      	bne.n	80049a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0210 	bic.w	r2, r2, #16
 8004996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d032      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d022      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2205      	movs	r2, #5
 80049d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d307      	bcc.n	8004a00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f2      	bne.n	80049e4 <HAL_DMA_IRQHandler+0x2cc>
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
 8004a22:	e000      	b.n	8004a26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a24:	bf00      	nop
    }
  }
}
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d108      	bne.n	8004a6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a6a:	e007      	b.n	8004a7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	3b10      	subs	r3, #16
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <DMA_CalcBaseAndBitshift+0x64>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aa2:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <DMA_CalcBaseAndBitshift+0x68>)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d909      	bls.n	8004aca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004abe:	f023 0303 	bic.w	r3, r3, #3
 8004ac2:	1d1a      	adds	r2, r3, #4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ac8:	e007      	b.n	8004ada <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	aaaaaaab 	.word	0xaaaaaaab
 8004af0:	0800af68 	.word	0x0800af68

08004af4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d11f      	bne.n	8004b4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d856      	bhi.n	8004bc2 <DMA_CheckFifoParam+0xce>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <DMA_CheckFifoParam+0x28>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b3f 	.word	0x08004b3f
 8004b24:	08004b2d 	.word	0x08004b2d
 8004b28:	08004bc3 	.word	0x08004bc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d046      	beq.n	8004bc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3c:	e043      	b.n	8004bc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b46:	d140      	bne.n	8004bca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4c:	e03d      	b.n	8004bca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b56:	d121      	bne.n	8004b9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d837      	bhi.n	8004bce <DMA_CheckFifoParam+0xda>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <DMA_CheckFifoParam+0x70>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b7b 	.word	0x08004b7b
 8004b6c:	08004b75 	.word	0x08004b75
 8004b70:	08004b8d 	.word	0x08004b8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e030      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d025      	beq.n	8004bd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8a:	e022      	b.n	8004bd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b94:	d11f      	bne.n	8004bd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b9a:	e01c      	b.n	8004bd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d903      	bls.n	8004baa <DMA_CheckFifoParam+0xb6>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d003      	beq.n	8004bb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ba8:	e018      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
      break;
 8004bae:	e015      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00e      	beq.n	8004bda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	e00b      	b.n	8004bda <DMA_CheckFifoParam+0xe6>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e00a      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e008      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e006      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e004      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e002      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      break;   
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <DMA_CheckFifoParam+0xe8>
      break;
 8004bda:	bf00      	nop
    }
  } 
  
  return status; 
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop

08004bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	e16b      	b.n	8004ee0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c08:	2201      	movs	r2, #1
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	f040 815a 	bne.w	8004eda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d005      	beq.n	8004c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d130      	bne.n	8004ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	2203      	movs	r2, #3
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c74:	2201      	movs	r2, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 0201 	and.w	r2, r3, #1
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d017      	beq.n	8004cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d123      	bne.n	8004d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	08da      	lsrs	r2, r3, #3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3208      	adds	r2, #8
 8004cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	220f      	movs	r2, #15
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	08da      	lsrs	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3208      	adds	r2, #8
 8004d2a:	69b9      	ldr	r1, [r7, #24]
 8004d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0203 	and.w	r2, r3, #3
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80b4 	beq.w	8004eda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	4b60      	ldr	r3, [pc, #384]	; (8004ef8 <HAL_GPIO_Init+0x30c>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	4a5f      	ldr	r2, [pc, #380]	; (8004ef8 <HAL_GPIO_Init+0x30c>)
 8004d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d80:	6453      	str	r3, [r2, #68]	; 0x44
 8004d82:	4b5d      	ldr	r3, [pc, #372]	; (8004ef8 <HAL_GPIO_Init+0x30c>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d8e:	4a5b      	ldr	r2, [pc, #364]	; (8004efc <HAL_GPIO_Init+0x310>)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	089b      	lsrs	r3, r3, #2
 8004d94:	3302      	adds	r3, #2
 8004d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	220f      	movs	r2, #15
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a52      	ldr	r2, [pc, #328]	; (8004f00 <HAL_GPIO_Init+0x314>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02b      	beq.n	8004e12 <HAL_GPIO_Init+0x226>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a51      	ldr	r2, [pc, #324]	; (8004f04 <HAL_GPIO_Init+0x318>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d025      	beq.n	8004e0e <HAL_GPIO_Init+0x222>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a50      	ldr	r2, [pc, #320]	; (8004f08 <HAL_GPIO_Init+0x31c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01f      	beq.n	8004e0a <HAL_GPIO_Init+0x21e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a4f      	ldr	r2, [pc, #316]	; (8004f0c <HAL_GPIO_Init+0x320>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d019      	beq.n	8004e06 <HAL_GPIO_Init+0x21a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a4e      	ldr	r2, [pc, #312]	; (8004f10 <HAL_GPIO_Init+0x324>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_GPIO_Init+0x216>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a4d      	ldr	r2, [pc, #308]	; (8004f14 <HAL_GPIO_Init+0x328>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00d      	beq.n	8004dfe <HAL_GPIO_Init+0x212>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a4c      	ldr	r2, [pc, #304]	; (8004f18 <HAL_GPIO_Init+0x32c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <HAL_GPIO_Init+0x20e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a4b      	ldr	r2, [pc, #300]	; (8004f1c <HAL_GPIO_Init+0x330>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_GPIO_Init+0x20a>
 8004df2:	2307      	movs	r3, #7
 8004df4:	e00e      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004df6:	2308      	movs	r3, #8
 8004df8:	e00c      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004dfa:	2306      	movs	r3, #6
 8004dfc:	e00a      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e008      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004e02:	2304      	movs	r3, #4
 8004e04:	e006      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004e06:	2303      	movs	r3, #3
 8004e08:	e004      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e002      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_GPIO_Init+0x228>
 8004e12:	2300      	movs	r3, #0
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	f002 0203 	and.w	r2, r2, #3
 8004e1a:	0092      	lsls	r2, r2, #2
 8004e1c:	4093      	lsls	r3, r2
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e24:	4935      	ldr	r1, [pc, #212]	; (8004efc <HAL_GPIO_Init+0x310>)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	089b      	lsrs	r3, r3, #2
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e32:	4b3b      	ldr	r3, [pc, #236]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e56:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e5c:	4b30      	ldr	r3, [pc, #192]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e80:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eaa:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ed4:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <HAL_GPIO_Init+0x334>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b0f      	cmp	r3, #15
 8004ee4:	f67f ae90 	bls.w	8004c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	3724      	adds	r7, #36	; 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40013800 	.word	0x40013800
 8004f00:	40020000 	.word	0x40020000
 8004f04:	40020400 	.word	0x40020400
 8004f08:	40020800 	.word	0x40020800
 8004f0c:	40020c00 	.word	0x40020c00
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40021400 	.word	0x40021400
 8004f18:	40021800 	.word	0x40021800
 8004f1c:	40021c00 	.word	0x40021c00
 8004f20:	40013c00 	.word	0x40013c00

08004f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	807b      	strh	r3, [r7, #2]
 8004f30:	4613      	mov	r3, r2
 8004f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f34:	787b      	ldrb	r3, [r7, #1]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f40:	e003      	b.n	8004f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f42:	887b      	ldrh	r3, [r7, #2]
 8004f44:	041a      	lsls	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	619a      	str	r2, [r3, #24]
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e034      	b.n	8004fd2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004f70:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f245 5255 	movw	r2, #21845	; 0x5555
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6892      	ldr	r2, [r2, #8]
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004f90:	f7fe fa8a 	bl	80034a8 <HAL_GetTick>
 8004f94:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004f96:	e00f      	b.n	8004fb8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004f98:	f7fe fa86 	bl	80034a8 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b31      	cmp	r3, #49	; 0x31
 8004fa4:	d908      	bls.n	8004fb8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e00c      	b.n	8004fd2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e8      	bne.n	8004f98 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004fce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004fea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e267      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d075      	beq.n	8005106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800501a:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b04      	cmp	r3, #4
 8005024:	d00c      	beq.n	8005040 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005026:	4b85      	ldr	r3, [pc, #532]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502e:	2b08      	cmp	r3, #8
 8005030:	d112      	bne.n	8005058 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005032:	4b82      	ldr	r3, [pc, #520]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800503e:	d10b      	bne.n	8005058 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	4b7e      	ldr	r3, [pc, #504]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d05b      	beq.n	8005104 <HAL_RCC_OscConfig+0x108>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d157      	bne.n	8005104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e242      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d106      	bne.n	8005070 <HAL_RCC_OscConfig+0x74>
 8005062:	4b76      	ldr	r3, [pc, #472]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a75      	ldr	r2, [pc, #468]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e01d      	b.n	80050ac <HAL_RCC_OscConfig+0xb0>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x98>
 800507a:	4b70      	ldr	r3, [pc, #448]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6f      	ldr	r2, [pc, #444]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b6d      	ldr	r3, [pc, #436]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6c      	ldr	r2, [pc, #432]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0xb0>
 8005094:	4b69      	ldr	r3, [pc, #420]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a68      	ldr	r2, [pc, #416]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	4b66      	ldr	r3, [pc, #408]	; (800523c <HAL_RCC_OscConfig+0x240>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a65      	ldr	r2, [pc, #404]	; (800523c <HAL_RCC_OscConfig+0x240>)
 80050a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fe f9f8 	bl	80034a8 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fe f9f4 	bl	80034a8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e207      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	4b5b      	ldr	r3, [pc, #364]	; (800523c <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0xc0>
 80050da:	e014      	b.n	8005106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fe f9e4 	bl	80034a8 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fe f9e0 	bl	80034a8 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e1f3      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	4b51      	ldr	r3, [pc, #324]	; (800523c <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0xe8>
 8005102:	e000      	b.n	8005106 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d063      	beq.n	80051da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005112:	4b4a      	ldr	r3, [pc, #296]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00b      	beq.n	8005136 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005126:	2b08      	cmp	r3, #8
 8005128:	d11c      	bne.n	8005164 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512a:	4b44      	ldr	r3, [pc, #272]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d116      	bne.n	8005164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005136:	4b41      	ldr	r3, [pc, #260]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_RCC_OscConfig+0x152>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e1c7      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514e:	4b3b      	ldr	r3, [pc, #236]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4937      	ldr	r1, [pc, #220]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005162:	e03a      	b.n	80051da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d020      	beq.n	80051ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800516c:	4b34      	ldr	r3, [pc, #208]	; (8005240 <HAL_RCC_OscConfig+0x244>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fe f999 	bl	80034a8 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517a:	f7fe f995 	bl	80034a8 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e1a8      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005198:	4b28      	ldr	r3, [pc, #160]	; (800523c <HAL_RCC_OscConfig+0x240>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4925      	ldr	r1, [pc, #148]	; (800523c <HAL_RCC_OscConfig+0x240>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]
 80051ac:	e015      	b.n	80051da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <HAL_RCC_OscConfig+0x244>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fe f978 	bl	80034a8 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051bc:	f7fe f974 	bl	80034a8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e187      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <HAL_RCC_OscConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d036      	beq.n	8005254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <HAL_RCC_OscConfig+0x248>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fe f958 	bl	80034a8 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fc:	f7fe f954 	bl	80034a8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e167      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_RCC_OscConfig+0x240>)
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x200>
 800521a:	e01b      	b.n	8005254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800521c:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_RCC_OscConfig+0x248>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005222:	f7fe f941 	bl	80034a8 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005228:	e00e      	b.n	8005248 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522a:	f7fe f93d 	bl	80034a8 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d907      	bls.n	8005248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e150      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
 800523c:	40023800 	.word	0x40023800
 8005240:	42470000 	.word	0x42470000
 8005244:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	4b88      	ldr	r3, [pc, #544]	; (800546c <HAL_RCC_OscConfig+0x470>)
 800524a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1ea      	bne.n	800522a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8097 	beq.w	8005390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005266:	4b81      	ldr	r3, [pc, #516]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	4b7d      	ldr	r3, [pc, #500]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	4a7c      	ldr	r2, [pc, #496]	; (800546c <HAL_RCC_OscConfig+0x470>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6413      	str	r3, [r2, #64]	; 0x40
 8005282:	4b7a      	ldr	r3, [pc, #488]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528e:	2301      	movs	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005292:	4b77      	ldr	r3, [pc, #476]	; (8005470 <HAL_RCC_OscConfig+0x474>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529e:	4b74      	ldr	r3, [pc, #464]	; (8005470 <HAL_RCC_OscConfig+0x474>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a73      	ldr	r2, [pc, #460]	; (8005470 <HAL_RCC_OscConfig+0x474>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052aa:	f7fe f8fd 	bl	80034a8 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b2:	f7fe f8f9 	bl	80034a8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e10c      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	4b6a      	ldr	r3, [pc, #424]	; (8005470 <HAL_RCC_OscConfig+0x474>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d106      	bne.n	80052e6 <HAL_RCC_OscConfig+0x2ea>
 80052d8:	4b64      	ldr	r3, [pc, #400]	; (800546c <HAL_RCC_OscConfig+0x470>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	4a63      	ldr	r2, [pc, #396]	; (800546c <HAL_RCC_OscConfig+0x470>)
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	6713      	str	r3, [r2, #112]	; 0x70
 80052e4:	e01c      	b.n	8005320 <HAL_RCC_OscConfig+0x324>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x30c>
 80052ee:	4b5f      	ldr	r3, [pc, #380]	; (800546c <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	4a5e      	ldr	r2, [pc, #376]	; (800546c <HAL_RCC_OscConfig+0x470>)
 80052f4:	f043 0304 	orr.w	r3, r3, #4
 80052f8:	6713      	str	r3, [r2, #112]	; 0x70
 80052fa:	4b5c      	ldr	r3, [pc, #368]	; (800546c <HAL_RCC_OscConfig+0x470>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fe:	4a5b      	ldr	r2, [pc, #364]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	6713      	str	r3, [r2, #112]	; 0x70
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0x324>
 8005308:	4b58      	ldr	r3, [pc, #352]	; (800546c <HAL_RCC_OscConfig+0x470>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	4a57      	ldr	r2, [pc, #348]	; (800546c <HAL_RCC_OscConfig+0x470>)
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	6713      	str	r3, [r2, #112]	; 0x70
 8005314:	4b55      	ldr	r3, [pc, #340]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4a54      	ldr	r2, [pc, #336]	; (800546c <HAL_RCC_OscConfig+0x470>)
 800531a:	f023 0304 	bic.w	r3, r3, #4
 800531e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d015      	beq.n	8005354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fe f8be 	bl	80034a8 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532e:	e00a      	b.n	8005346 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fe f8ba 	bl	80034a8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	; 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0cb      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	4b49      	ldr	r3, [pc, #292]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0ee      	beq.n	8005330 <HAL_RCC_OscConfig+0x334>
 8005352:	e014      	b.n	800537e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005354:	f7fe f8a8 	bl	80034a8 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535a:	e00a      	b.n	8005372 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fe f8a4 	bl	80034a8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e0b5      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005372:	4b3e      	ldr	r3, [pc, #248]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1ee      	bne.n	800535c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	4a38      	ldr	r2, [pc, #224]	; (800546c <HAL_RCC_OscConfig+0x470>)
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a1 	beq.w	80054dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800539a:	4b34      	ldr	r3, [pc, #208]	; (800546c <HAL_RCC_OscConfig+0x470>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d05c      	beq.n	8005460 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d141      	bne.n	8005432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b31      	ldr	r3, [pc, #196]	; (8005474 <HAL_RCC_OscConfig+0x478>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fe f878 	bl	80034a8 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fe f874 	bl	80034a8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e087      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	4b27      	ldr	r3, [pc, #156]	; (800546c <HAL_RCC_OscConfig+0x470>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	3b01      	subs	r3, #1
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	491b      	ldr	r1, [pc, #108]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <HAL_RCC_OscConfig+0x478>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fe f84d 	bl	80034a8 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005412:	f7fe f849 	bl	80034a8 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e05c      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x416>
 8005430:	e054      	b.n	80054dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <HAL_RCC_OscConfig+0x478>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fe f836 	bl	80034a8 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005440:	f7fe f832 	bl	80034a8 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e045      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCC_OscConfig+0x470>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x444>
 800545e:	e03d      	b.n	80054dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e038      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
 800546c:	40023800 	.word	0x40023800
 8005470:	40007000 	.word	0x40007000
 8005474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005478:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d028      	beq.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d121      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d11a      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d111      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	3b01      	subs	r3, #1
 80054c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800

080054ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0cc      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005500:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d90c      	bls.n	8005528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550e:	4b65      	ldr	r3, [pc, #404]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b63      	ldr	r3, [pc, #396]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0b8      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005540:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a58      	ldr	r2, [pc, #352]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800554a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005558:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	494d      	ldr	r1, [pc, #308]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d044      	beq.n	800560c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d119      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e07f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d003      	beq.n	80055aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	4b3f      	ldr	r3, [pc, #252]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e06f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ba:	4b3b      	ldr	r3, [pc, #236]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e067      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ca:	4b37      	ldr	r3, [pc, #220]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4934      	ldr	r1, [pc, #208]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055dc:	f7fd ff64 	bl	80034a8 <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e4:	f7fd ff60 	bl	80034a8 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e04f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 020c 	and.w	r2, r3, #12
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d1eb      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d20c      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e032      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4916      	ldr	r1, [pc, #88]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	4313      	orrs	r3, r2
 8005650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	490e      	ldr	r1, [pc, #56]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005672:	f000 f821 	bl	80056b8 <HAL_RCC_GetSysClockFreq>
 8005676:	4602      	mov	r2, r0
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	490a      	ldr	r1, [pc, #40]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005684:	5ccb      	ldrb	r3, [r1, r3]
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fb fae0 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40023c00 	.word	0x40023c00
 80056a8:	40023800 	.word	0x40023800
 80056ac:	0800af20 	.word	0x0800af20
 80056b0:	20000000 	.word	0x20000000
 80056b4:	20000024 	.word	0x20000024

080056b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056bc:	b094      	sub	sp, #80	; 0x50
 80056be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
 80056c4:	2300      	movs	r3, #0
 80056c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c8:	2300      	movs	r3, #0
 80056ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056d0:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 030c 	and.w	r3, r3, #12
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d00d      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x40>
 80056dc:	2b08      	cmp	r3, #8
 80056de:	f200 80e1 	bhi.w	80058a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x34>
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d003      	beq.n	80056f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ea:	e0db      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b73      	ldr	r3, [pc, #460]	; (80058bc <HAL_RCC_GetSysClockFreq+0x204>)
 80056ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056f0:	e0db      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056f2:	4b73      	ldr	r3, [pc, #460]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80056f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056f6:	e0d8      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056f8:	4b6f      	ldr	r3, [pc, #444]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005700:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005702:	4b6d      	ldr	r3, [pc, #436]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d063      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570e:	4b6a      	ldr	r3, [pc, #424]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	099b      	lsrs	r3, r3, #6
 8005714:	2200      	movs	r2, #0
 8005716:	63bb      	str	r3, [r7, #56]	; 0x38
 8005718:	63fa      	str	r2, [r7, #60]	; 0x3c
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005720:	633b      	str	r3, [r7, #48]	; 0x30
 8005722:	2300      	movs	r3, #0
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
 8005726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800572a:	4622      	mov	r2, r4
 800572c:	462b      	mov	r3, r5
 800572e:	f04f 0000 	mov.w	r0, #0
 8005732:	f04f 0100 	mov.w	r1, #0
 8005736:	0159      	lsls	r1, r3, #5
 8005738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800573c:	0150      	lsls	r0, r2, #5
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4621      	mov	r1, r4
 8005744:	1a51      	subs	r1, r2, r1
 8005746:	6139      	str	r1, [r7, #16]
 8005748:	4629      	mov	r1, r5
 800574a:	eb63 0301 	sbc.w	r3, r3, r1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800575c:	4659      	mov	r1, fp
 800575e:	018b      	lsls	r3, r1, #6
 8005760:	4651      	mov	r1, sl
 8005762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005766:	4651      	mov	r1, sl
 8005768:	018a      	lsls	r2, r1, #6
 800576a:	4651      	mov	r1, sl
 800576c:	ebb2 0801 	subs.w	r8, r2, r1
 8005770:	4659      	mov	r1, fp
 8005772:	eb63 0901 	sbc.w	r9, r3, r1
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800578a:	4690      	mov	r8, r2
 800578c:	4699      	mov	r9, r3
 800578e:	4623      	mov	r3, r4
 8005790:	eb18 0303 	adds.w	r3, r8, r3
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	462b      	mov	r3, r5
 8005798:	eb49 0303 	adc.w	r3, r9, r3
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057aa:	4629      	mov	r1, r5
 80057ac:	024b      	lsls	r3, r1, #9
 80057ae:	4621      	mov	r1, r4
 80057b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057b4:	4621      	mov	r1, r4
 80057b6:	024a      	lsls	r2, r1, #9
 80057b8:	4610      	mov	r0, r2
 80057ba:	4619      	mov	r1, r3
 80057bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057be:	2200      	movs	r2, #0
 80057c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057c8:	f7fa fd02 	bl	80001d0 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4613      	mov	r3, r2
 80057d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d4:	e058      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d6:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	2200      	movs	r2, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	4611      	mov	r1, r2
 80057e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057e6:	623b      	str	r3, [r7, #32]
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
 80057ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	f04f 0000 	mov.w	r0, #0
 80057f8:	f04f 0100 	mov.w	r1, #0
 80057fc:	0159      	lsls	r1, r3, #5
 80057fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005802:	0150      	lsls	r0, r2, #5
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4641      	mov	r1, r8
 800580a:	ebb2 0a01 	subs.w	sl, r2, r1
 800580e:	4649      	mov	r1, r9
 8005810:	eb63 0b01 	sbc.w	fp, r3, r1
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005820:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005824:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005828:	ebb2 040a 	subs.w	r4, r2, sl
 800582c:	eb63 050b 	sbc.w	r5, r3, fp
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	00eb      	lsls	r3, r5, #3
 800583a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800583e:	00e2      	lsls	r2, r4, #3
 8005840:	4614      	mov	r4, r2
 8005842:	461d      	mov	r5, r3
 8005844:	4643      	mov	r3, r8
 8005846:	18e3      	adds	r3, r4, r3
 8005848:	603b      	str	r3, [r7, #0]
 800584a:	464b      	mov	r3, r9
 800584c:	eb45 0303 	adc.w	r3, r5, r3
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800585e:	4629      	mov	r1, r5
 8005860:	028b      	lsls	r3, r1, #10
 8005862:	4621      	mov	r1, r4
 8005864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005868:	4621      	mov	r1, r4
 800586a:	028a      	lsls	r2, r1, #10
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005872:	2200      	movs	r2, #0
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	61fa      	str	r2, [r7, #28]
 8005878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800587c:	f7fa fca8 	bl	80001d0 <__aeabi_uldivmod>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4613      	mov	r3, r2
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	3301      	adds	r3, #1
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800589a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058a2:	e002      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_RCC_GetSysClockFreq+0x204>)
 80058a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3750      	adds	r7, #80	; 0x50
 80058b0:	46bd      	mov	sp, r7
 80058b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b6:	bf00      	nop
 80058b8:	40023800 	.word	0x40023800
 80058bc:	00f42400 	.word	0x00f42400
 80058c0:	007a1200 	.word	0x007a1200

080058c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c8:	4b03      	ldr	r3, [pc, #12]	; (80058d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000000 	.word	0x20000000

080058dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058e0:	f7ff fff0 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0a9b      	lsrs	r3, r3, #10
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40023800 	.word	0x40023800
 8005900:	0800af30 	.word	0x0800af30

08005904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005908:	f7ff ffdc 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b05      	ldr	r3, [pc, #20]	; (8005924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0b5b      	lsrs	r3, r3, #13
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4903      	ldr	r1, [pc, #12]	; (8005928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005920:	4618      	mov	r0, r3
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40023800 	.word	0x40023800
 8005928:	0800af30 	.word	0x0800af30

0800592c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	220f      	movs	r2, #15
 800593a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0203 	and.w	r2, r3, #3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	08db      	lsrs	r3, r3, #3
 8005966:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800596e:	4b07      	ldr	r3, [pc, #28]	; (800598c <HAL_RCC_GetClockConfig+0x60>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0207 	and.w	r2, r3, #7
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800
 800598c:	40023c00 	.word	0x40023c00

08005990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e041      	b.n	8005a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fb38 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 fe1e 	bl	8006610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d001      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e04e      	b.n	8005ae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a23      	ldr	r2, [pc, #140]	; (8005af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d022      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x80>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a72:	d01d      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x80>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d018      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x80>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <HAL_TIM_Base_Start_IT+0xcc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x80>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00e      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x80>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x80>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x80>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d111      	bne.n	8005ad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b06      	cmp	r3, #6
 8005ac0:	d010      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	e007      	b.n	8005ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40010400 	.word	0x40010400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40001800 	.word	0x40001800

08005b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e041      	b.n	8005ba6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f839 	bl	8005bae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f000 fd5e 	bl	8006610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <HAL_TIM_PWM_Start+0x24>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e022      	b.n	8005c2e <HAL_TIM_PWM_Start+0x6a>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d109      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x3e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	bf14      	ite	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	2300      	moveq	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	e015      	b.n	8005c2e <HAL_TIM_PWM_Start+0x6a>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d109      	bne.n	8005c1c <HAL_TIM_PWM_Start+0x58>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e008      	b.n	8005c2e <HAL_TIM_PWM_Start+0x6a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e07c      	b.n	8005d30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0x82>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c44:	e013      	b.n	8005c6e <HAL_TIM_PWM_Start+0xaa>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x92>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c54:	e00b      	b.n	8005c6e <HAL_TIM_PWM_Start+0xaa>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c64:	e003      	b.n	8005c6e <HAL_TIM_PWM_Start+0xaa>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2201      	movs	r2, #1
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 ffb4 	bl	8006be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <HAL_TIM_PWM_Start+0x174>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIM_PWM_Start+0xcc>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <HAL_TIM_PWM_Start+0x178>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_PWM_Start+0xd0>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <HAL_TIM_PWM_Start+0xd2>
 8005c94:	2300      	movs	r3, #0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_TIM_PWM_Start+0x174>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d01d      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_TIM_PWM_Start+0x17c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_TIM_PWM_Start+0x180>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_TIM_PWM_Start+0x184>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIM_PWM_Start+0x178>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a18      	ldr	r2, [pc, #96]	; (8005d4c <HAL_TIM_PWM_Start+0x188>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_TIM_PWM_Start+0x18c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d111      	bne.n	8005d1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b06      	cmp	r3, #6
 8005d0a:	d010      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1c:	e007      	b.n	8005d2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40001800 	.word	0x40001800

08005d54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 ff3c 	bl	8006be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a2e      	ldr	r2, [pc, #184]	; (8005e2c <HAL_TIM_PWM_Stop+0xd8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_TIM_PWM_Stop+0x2c>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2d      	ldr	r2, [pc, #180]	; (8005e30 <HAL_TIM_PWM_Stop+0xdc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_PWM_Stop+0x30>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <HAL_TIM_PWM_Stop+0x32>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d017      	beq.n	8005dba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <HAL_TIM_PWM_Stop+0x66>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	f240 4344 	movw	r3, #1092	; 0x444
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d107      	bne.n	8005dba <HAL_TIM_PWM_Stop+0x66>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10f      	bne.n	8005dea <HAL_TIM_PWM_Stop+0x96>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	f240 4344 	movw	r3, #1092	; 0x444
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_PWM_Stop+0x96>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <HAL_TIM_PWM_Stop+0xa6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df8:	e013      	b.n	8005e22 <HAL_TIM_PWM_Stop+0xce>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d104      	bne.n	8005e0a <HAL_TIM_PWM_Stop+0xb6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e08:	e00b      	b.n	8005e22 <HAL_TIM_PWM_Stop+0xce>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d104      	bne.n	8005e1a <HAL_TIM_PWM_Stop+0xc6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e18:	e003      	b.n	8005e22 <HAL_TIM_PWM_Stop+0xce>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40010400 	.word	0x40010400

08005e34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e097      	b.n	8005f78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fb f907 	bl	8001070 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e78:	f023 0307 	bic.w	r3, r3, #7
 8005e7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f000 fbc1 	bl	8006610 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ed4:	f023 030c 	bic.w	r3, r3, #12
 8005ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	011a      	lsls	r2, r3, #4
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	4313      	orrs	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	4313      	orrs	r3, r2
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fa0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fa8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d110      	bne.n	8005fd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d102      	bne.n	8005fbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fb6:	7b7b      	ldrb	r3, [r7, #13]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e069      	b.n	8006094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd0:	e031      	b.n	8006036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d110      	bne.n	8005ffa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d102      	bne.n	8005fe4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fde:	7b3b      	ldrb	r3, [r7, #12]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e055      	b.n	8006094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff8:	e01d      	b.n	8006036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d108      	bne.n	8006012 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d105      	bne.n	8006012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006006:	7b7b      	ldrb	r3, [r7, #13]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d102      	bne.n	8006012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800600c:	7b3b      	ldrb	r3, [r7, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d001      	beq.n	8006016 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e03e      	b.n	8006094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_TIM_Encoder_Start+0xc4>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d008      	beq.n	8006054 <HAL_TIM_Encoder_Start+0xd4>
 8006042:	e00f      	b.n	8006064 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2201      	movs	r2, #1
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fdc9 	bl	8006be4 <TIM_CCxChannelCmd>
      break;
 8006052:	e016      	b.n	8006082 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2201      	movs	r2, #1
 800605a:	2104      	movs	r1, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fdc1 	bl	8006be4 <TIM_CCxChannelCmd>
      break;
 8006062:	e00e      	b.n	8006082 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2201      	movs	r2, #1
 800606a:	2100      	movs	r1, #0
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fdb9 	bl	8006be4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2201      	movs	r2, #1
 8006078:	2104      	movs	r1, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fdb2 	bl	8006be4 <TIM_CCxChannelCmd>
      break;
 8006080:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d122      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d11b      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0202 	mvn.w	r2, #2
 80060c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa77 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa69 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fa7a 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b04      	cmp	r3, #4
 8006104:	d122      	bne.n	800614c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b04      	cmp	r3, #4
 8006112:	d11b      	bne.n	800614c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0204 	mvn.w	r2, #4
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2202      	movs	r2, #2
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa4d 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa3f 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fa50 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b08      	cmp	r3, #8
 8006158:	d122      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b08      	cmp	r3, #8
 8006166:	d11b      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0208 	mvn.w	r2, #8
 8006170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2204      	movs	r2, #4
 8006176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa23 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 800618c:	e005      	b.n	800619a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa15 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fa26 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d122      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d11b      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0210 	mvn.w	r2, #16
 80061c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2208      	movs	r2, #8
 80061ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9f9 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 80061e0:	e005      	b.n	80061ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9eb 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f9fc 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d10e      	bne.n	8006220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d107      	bne.n	8006220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0201 	mvn.w	r2, #1
 8006218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fa fcd8 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b80      	cmp	r3, #128	; 0x80
 800622c:	d10e      	bne.n	800624c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006238:	2b80      	cmp	r3, #128	; 0x80
 800623a:	d107      	bne.n	800624c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fd78 	bl	8006d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d10e      	bne.n	8006278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d107      	bne.n	8006278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9c1 	bl	80065fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b20      	cmp	r3, #32
 8006284:	d10e      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b20      	cmp	r3, #32
 8006292:	d107      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0220 	mvn.w	r2, #32
 800629c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fd42 	bl	8006d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e0ae      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	f200 809f 	bhi.w	8006418 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006315 	.word	0x08006315
 80062e4:	08006419 	.word	0x08006419
 80062e8:	08006419 	.word	0x08006419
 80062ec:	08006419 	.word	0x08006419
 80062f0:	08006355 	.word	0x08006355
 80062f4:	08006419 	.word	0x08006419
 80062f8:	08006419 	.word	0x08006419
 80062fc:	08006419 	.word	0x08006419
 8006300:	08006397 	.word	0x08006397
 8006304:	08006419 	.word	0x08006419
 8006308:	08006419 	.word	0x08006419
 800630c:	08006419 	.word	0x08006419
 8006310:	080063d7 	.word	0x080063d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa18 	bl	8006750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0208 	orr.w	r2, r2, #8
 800632e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0204 	bic.w	r2, r2, #4
 800633e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6999      	ldr	r1, [r3, #24]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	619a      	str	r2, [r3, #24]
      break;
 8006352:	e064      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fa68 	bl	8006830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800636e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6999      	ldr	r1, [r3, #24]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	619a      	str	r2, [r3, #24]
      break;
 8006394:	e043      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fabd 	bl	800691c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0208 	orr.w	r2, r2, #8
 80063b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0204 	bic.w	r2, r2, #4
 80063c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	61da      	str	r2, [r3, #28]
      break;
 80063d4:	e023      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fb11 	bl	8006a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69d9      	ldr	r1, [r3, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	021a      	lsls	r2, r3, #8
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	61da      	str	r2, [r3, #28]
      break;
 8006416:	e002      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
      break;
 800641c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_TIM_ConfigClockSource+0x1c>
 8006448:	2302      	movs	r3, #2
 800644a:	e0b4      	b.n	80065b6 <HAL_TIM_ConfigClockSource+0x186>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800646a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006484:	d03e      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0xd4>
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648a:	f200 8087 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x16c>
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006492:	f000 8086 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x172>
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649a:	d87f      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 800649c:	2b70      	cmp	r3, #112	; 0x70
 800649e:	d01a      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0xa6>
 80064a0:	2b70      	cmp	r3, #112	; 0x70
 80064a2:	d87b      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064a4:	2b60      	cmp	r3, #96	; 0x60
 80064a6:	d050      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x11a>
 80064a8:	2b60      	cmp	r3, #96	; 0x60
 80064aa:	d877      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064ac:	2b50      	cmp	r3, #80	; 0x50
 80064ae:	d03c      	beq.n	800652a <HAL_TIM_ConfigClockSource+0xfa>
 80064b0:	2b50      	cmp	r3, #80	; 0x50
 80064b2:	d873      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d058      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x13a>
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d86f      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064bc:	2b30      	cmp	r3, #48	; 0x30
 80064be:	d064      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064c0:	2b30      	cmp	r3, #48	; 0x30
 80064c2:	d86b      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d060      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d867      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d05c      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d05a      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064d4:	e062      	b.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6899      	ldr	r1, [r3, #8]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f000 fb5d 	bl	8006ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	609a      	str	r2, [r3, #8]
      break;
 8006502:	e04f      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6899      	ldr	r1, [r3, #8]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f000 fb46 	bl	8006ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006526:	609a      	str	r2, [r3, #8]
      break;
 8006528:	e03c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	461a      	mov	r2, r3
 8006538:	f000 faba 	bl	8006ab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2150      	movs	r1, #80	; 0x50
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fb13 	bl	8006b6e <TIM_ITRx_SetConfig>
      break;
 8006548:	e02c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	461a      	mov	r2, r3
 8006558:	f000 fad9 	bl	8006b0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2160      	movs	r1, #96	; 0x60
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fb03 	bl	8006b6e <TIM_ITRx_SetConfig>
      break;
 8006568:	e01c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	461a      	mov	r2, r3
 8006578:	f000 fa9a 	bl	8006ab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2140      	movs	r1, #64	; 0x40
 8006582:	4618      	mov	r0, r3
 8006584:	f000 faf3 	bl	8006b6e <TIM_ITRx_SetConfig>
      break;
 8006588:	e00c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f000 faea 	bl	8006b6e <TIM_ITRx_SetConfig>
      break;
 800659a:	e003      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
      break;
 80065a0:	e000      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a40      	ldr	r2, [pc, #256]	; (8006724 <TIM_Base_SetConfig+0x114>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d013      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d00f      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a3d      	ldr	r2, [pc, #244]	; (8006728 <TIM_Base_SetConfig+0x118>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00b      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a3c      	ldr	r2, [pc, #240]	; (800672c <TIM_Base_SetConfig+0x11c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a3b      	ldr	r2, [pc, #236]	; (8006730 <TIM_Base_SetConfig+0x120>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a3a      	ldr	r2, [pc, #232]	; (8006734 <TIM_Base_SetConfig+0x124>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d108      	bne.n	8006662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2f      	ldr	r2, [pc, #188]	; (8006724 <TIM_Base_SetConfig+0x114>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d02b      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d027      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a2c      	ldr	r2, [pc, #176]	; (8006728 <TIM_Base_SetConfig+0x118>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d023      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2b      	ldr	r2, [pc, #172]	; (800672c <TIM_Base_SetConfig+0x11c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d01f      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a2a      	ldr	r2, [pc, #168]	; (8006730 <TIM_Base_SetConfig+0x120>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01b      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a29      	ldr	r2, [pc, #164]	; (8006734 <TIM_Base_SetConfig+0x124>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d017      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a28      	ldr	r2, [pc, #160]	; (8006738 <TIM_Base_SetConfig+0x128>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <TIM_Base_SetConfig+0x12c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a26      	ldr	r2, [pc, #152]	; (8006740 <TIM_Base_SetConfig+0x130>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a25      	ldr	r2, [pc, #148]	; (8006744 <TIM_Base_SetConfig+0x134>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a24      	ldr	r2, [pc, #144]	; (8006748 <TIM_Base_SetConfig+0x138>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a23      	ldr	r2, [pc, #140]	; (800674c <TIM_Base_SetConfig+0x13c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a0a      	ldr	r2, [pc, #40]	; (8006724 <TIM_Base_SetConfig+0x114>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_Base_SetConfig+0xf8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0c      	ldr	r2, [pc, #48]	; (8006734 <TIM_Base_SetConfig+0x124>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d103      	bne.n	8006710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	615a      	str	r2, [r3, #20]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40010400 	.word	0x40010400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800
 8006744:	40001800 	.word	0x40001800
 8006748:	40001c00 	.word	0x40001c00
 800674c:	40002000 	.word	0x40002000

08006750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0302 	bic.w	r3, r3, #2
 8006798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a20      	ldr	r2, [pc, #128]	; (8006828 <TIM_OC1_SetConfig+0xd8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_OC1_SetConfig+0x64>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1f      	ldr	r2, [pc, #124]	; (800682c <TIM_OC1_SetConfig+0xdc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10c      	bne.n	80067ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0308 	bic.w	r3, r3, #8
 80067ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 0304 	bic.w	r3, r3, #4
 80067cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <TIM_OC1_SetConfig+0xd8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_OC1_SetConfig+0x8e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a14      	ldr	r2, [pc, #80]	; (800682c <TIM_OC1_SetConfig+0xdc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d111      	bne.n	8006802 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0210 	bic.w	r2, r3, #16
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0320 	bic.w	r3, r3, #32
 800687a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a22      	ldr	r2, [pc, #136]	; (8006914 <TIM_OC2_SetConfig+0xe4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC2_SetConfig+0x68>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <TIM_OC2_SetConfig+0xe8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10d      	bne.n	80068b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a17      	ldr	r2, [pc, #92]	; (8006914 <TIM_OC2_SetConfig+0xe4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC2_SetConfig+0x94>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a16      	ldr	r2, [pc, #88]	; (8006918 <TIM_OC2_SetConfig+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d113      	bne.n	80068ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40010000 	.word	0x40010000
 8006918:	40010400 	.word	0x40010400

0800691c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a21      	ldr	r2, [pc, #132]	; (80069fc <TIM_OC3_SetConfig+0xe0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC3_SetConfig+0x66>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a20      	ldr	r2, [pc, #128]	; (8006a00 <TIM_OC3_SetConfig+0xe4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10d      	bne.n	800699e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a16      	ldr	r2, [pc, #88]	; (80069fc <TIM_OC3_SetConfig+0xe0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC3_SetConfig+0x92>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a15      	ldr	r2, [pc, #84]	; (8006a00 <TIM_OC3_SetConfig+0xe4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d113      	bne.n	80069d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	621a      	str	r2, [r3, #32]
}
 80069f0:	bf00      	nop
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40010400 	.word	0x40010400

08006a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a12      	ldr	r2, [pc, #72]	; (8006aa8 <TIM_OC4_SetConfig+0xa4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_OC4_SetConfig+0x68>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a11      	ldr	r2, [pc, #68]	; (8006aac <TIM_OC4_SetConfig+0xa8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	019b      	lsls	r3, r3, #6
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400

08006ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0201 	bic.w	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 030a 	bic.w	r3, r3, #10
 8006aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f023 0210 	bic.w	r2, r3, #16
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	031b      	lsls	r3, r3, #12
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f043 0307 	orr.w	r3, r3, #7
 8006b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	609a      	str	r2, [r3, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	021a      	lsls	r2, r3, #8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	609a      	str	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1a      	ldr	r2, [r3, #32]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	43db      	mvns	r3, r3
 8006c06:	401a      	ands	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 031f 	and.w	r3, r3, #31
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e05a      	b.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a21      	ldr	r2, [pc, #132]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d022      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c94:	d01d      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1d      	ldr	r2, [pc, #116]	; (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1a      	ldr	r2, [pc, #104]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a17      	ldr	r2, [pc, #92]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d10c      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	40010400 	.word	0x40010400
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40001800 	.word	0x40001800

08006d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e03f      	b.n	8006de2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fa fa7a 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2224      	movs	r2, #36	; 0x24
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 ff9d 	bl	8007cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695a      	ldr	r2, [r3, #20]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b08a      	sub	sp, #40	; 0x28
 8006dee:	af02      	add	r7, sp, #8
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d17c      	bne.n	8006f04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <HAL_UART_Transmit+0x2c>
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e075      	b.n	8006f06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_UART_Transmit+0x3e>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e06e      	b.n	8006f06 <HAL_UART_Transmit+0x11c>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2221      	movs	r2, #33	; 0x21
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e3e:	f7fc fb33 	bl	80034a8 <HAL_GetTick>
 8006e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	88fa      	ldrh	r2, [r7, #6]
 8006e4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e58:	d108      	bne.n	8006e6c <HAL_UART_Transmit+0x82>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	e003      	b.n	8006e74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e7c:	e02a      	b.n	8006ed4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fc55 	bl	8007738 <UART_WaitOnFlagUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e036      	b.n	8006f06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10b      	bne.n	8006eb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	e007      	b.n	8006ec6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1cf      	bne.n	8006e7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2140      	movs	r1, #64	; 0x40
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fc25 	bl	8007738 <UART_WaitOnFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e006      	b.n	8006f06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b08c      	sub	sp, #48	; 0x30
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d152      	bne.n	8006fce <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e04b      	b.n	8006fd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e044      	b.n	8006fd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	461a      	mov	r2, r3
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fc5a 	bl	8007814 <UART_Start_Receive_DMA>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d12c      	bne.n	8006fc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d125      	bne.n	8006fc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f76:	2300      	movs	r3, #0
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f043 0310 	orr.w	r3, r3, #16
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	330c      	adds	r3, #12
 8006faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fac:	627a      	str	r2, [r7, #36]	; 0x24
 8006fae:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6a39      	ldr	r1, [r7, #32]
 8006fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e5      	bne.n	8006f8c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006fc0:	e002      	b.n	8006fc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fcc:	e000      	b.n	8006fd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006fce:	2302      	movs	r3, #2
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3730      	adds	r7, #48	; 0x30
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b0ba      	sub	sp, #232	; 0xe8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007004:	2300      	movs	r3, #0
 8007006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10f      	bne.n	800703e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <HAL_UART_IRQHandler+0x66>
 800702a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fd91 	bl	8007b5e <UART_Receive_IT>
      return;
 800703c:	e256      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800703e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80de 	beq.w	8007204 <HAL_UART_IRQHandler+0x22c>
 8007048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007058:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 80d1 	beq.w	8007204 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <HAL_UART_IRQHandler+0xae>
 800706e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	f043 0201 	orr.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <HAL_UART_IRQHandler+0xd2>
 8007092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f043 0202 	orr.w	r2, r3, #2
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <HAL_UART_IRQHandler+0xf6>
 80070b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f043 0204 	orr.w	r2, r3, #4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d011      	beq.n	80070fe <HAL_UART_IRQHandler+0x126>
 80070da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d105      	bne.n	80070f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f043 0208 	orr.w	r2, r3, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 81ed 	beq.w	80074e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_UART_IRQHandler+0x14e>
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fd1c 	bl	8007b5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	bf0c      	ite	eq
 8007134:	2301      	moveq	r3, #1
 8007136:	2300      	movne	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <HAL_UART_IRQHandler+0x17a>
 800714a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04f      	beq.n	80071f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc24 	bl	80079a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d141      	bne.n	80071ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800717c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3314      	adds	r3, #20
 800718e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800719e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1d9      	bne.n	8007166 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d013      	beq.n	80071e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	4a7d      	ldr	r2, [pc, #500]	; (80073b4 <HAL_UART_IRQHandler+0x3dc>)
 80071c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fd fa84 	bl	80046d4 <HAL_DMA_Abort_IT>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d016      	beq.n	8007200 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e0:	e00e      	b.n	8007200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fb ffec 	bl	80031c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	e00a      	b.n	8007200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fb ffe8 	bl	80031c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f0:	e006      	b.n	8007200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fb ffe4 	bl	80031c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071fe:	e170      	b.n	80074e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007200:	bf00      	nop
    return;
 8007202:	e16e      	b.n	80074e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	2b01      	cmp	r3, #1
 800720a:	f040 814a 	bne.w	80074a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8143 	beq.w	80074a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 813c 	beq.w	80074a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800722a:	2300      	movs	r3, #0
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	f040 80b4 	bne.w	80073b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800725c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8140 	beq.w	80074e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800726a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800726e:	429a      	cmp	r2, r3
 8007270:	f080 8139 	bcs.w	80074e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800727a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007286:	f000 8088 	beq.w	800739a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1d9      	bne.n	800728a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3314      	adds	r3, #20
 80072dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3314      	adds	r3, #20
 80072f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800730c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e1      	bne.n	80072d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3314      	adds	r3, #20
 8007318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3314      	adds	r3, #20
 8007332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800733c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e3      	bne.n	8007312 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736a:	f023 0310 	bic.w	r3, r3, #16
 800736e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800737c:	65ba      	str	r2, [r7, #88]	; 0x58
 800737e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800738a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e3      	bne.n	8007358 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	4618      	mov	r0, r3
 8007396:	f7fd f92d 	bl	80045f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fb ffdc 	bl	8003368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073b0:	e099      	b.n	80074e6 <HAL_UART_IRQHandler+0x50e>
 80073b2:	bf00      	nop
 80073b4:	08007a67 	.word	0x08007a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 808b 	beq.w	80074ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80073d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8086 	beq.w	80074ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	330c      	adds	r3, #12
 80073fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007402:	647a      	str	r2, [r7, #68]	; 0x44
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e3      	bne.n	80073de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	623b      	str	r3, [r7, #32]
   return(result);
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3314      	adds	r3, #20
 8007436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800743a:	633a      	str	r2, [r7, #48]	; 0x30
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	330c      	adds	r3, #12
 8007462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	60fb      	str	r3, [r7, #12]
   return(result);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0310 	bic.w	r3, r3, #16
 8007472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007480:	61fa      	str	r2, [r7, #28]
 8007482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	69b9      	ldr	r1, [r7, #24]
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	617b      	str	r3, [r7, #20]
   return(result);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e3      	bne.n	800745c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fb ff64 	bl	8003368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074a0:	e023      	b.n	80074ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_UART_IRQHandler+0x4ea>
 80074ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fae7 	bl	8007a8e <UART_Transmit_IT>
    return;
 80074c0:	e014      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00e      	beq.n	80074ec <HAL_UART_IRQHandler+0x514>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fb27 	bl	8007b2e <UART_EndTransmit_IT>
    return;
 80074e0:	e004      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
    return;
 80074e2:	bf00      	nop
 80074e4:	e002      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
      return;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <HAL_UART_IRQHandler+0x514>
      return;
 80074ea:	bf00      	nop
  }
}
 80074ec:	37e8      	adds	r7, #232	; 0xe8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop

080074f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b09c      	sub	sp, #112	; 0x70
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d172      	bne.n	800764a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007566:	2200      	movs	r2, #0
 8007568:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800756a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800757a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007580:	66bb      	str	r3, [r7, #104]	; 0x68
 8007582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800758a:	65ba      	str	r2, [r7, #88]	; 0x58
 800758c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e5      	bne.n	800756a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3314      	adds	r3, #20
 80075a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	667b      	str	r3, [r7, #100]	; 0x64
 80075b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3314      	adds	r3, #20
 80075bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075be:	647a      	str	r2, [r7, #68]	; 0x44
 80075c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3314      	adds	r3, #20
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	623b      	str	r3, [r7, #32]
   return(result);
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e8:	663b      	str	r3, [r7, #96]	; 0x60
 80075ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3314      	adds	r3, #20
 80075f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075f2:	633a      	str	r2, [r7, #48]	; 0x30
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007608:	2220      	movs	r2, #32
 800760a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800760e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	2b01      	cmp	r3, #1
 8007614:	d119      	bne.n	800764a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	60fb      	str	r3, [r7, #12]
   return(result);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 0310 	bic.w	r3, r3, #16
 800762c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800762e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	330c      	adds	r3, #12
 8007634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007636:	61fa      	str	r2, [r7, #28]
 8007638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	69b9      	ldr	r1, [r7, #24]
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	617b      	str	r3, [r7, #20]
   return(result);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e5      	bne.n	8007616 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	2b01      	cmp	r3, #1
 8007650:	d106      	bne.n	8007660 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007654:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007656:	4619      	mov	r1, r3
 8007658:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800765a:	f7fb fe85 	bl	8003368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800765e:	e002      	b.n	8007666 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007660:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007662:	f7ff ff51 	bl	8007508 <HAL_UART_RxCpltCallback>
}
 8007666:	bf00      	nop
 8007668:	3770      	adds	r7, #112	; 0x70
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	2b01      	cmp	r3, #1
 8007682:	d108      	bne.n	8007696 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	b29b      	uxth	r3, r3
 800768c:	4619      	mov	r1, r3
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7fb fe6a 	bl	8003368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007694:	e002      	b.n	800769c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff ff40 	bl	800751c <HAL_UART_RxHalfCpltCallback>
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c0:	2b80      	cmp	r3, #128	; 0x80
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b21      	cmp	r3, #33	; 0x21
 80076d6:	d108      	bne.n	80076ea <UART_DMAError+0x46>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076e4:	68b8      	ldr	r0, [r7, #8]
 80076e6:	f000 f933 	bl	8007950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b22      	cmp	r3, #34	; 0x22
 800770a:	d108      	bne.n	800771e <UART_DMAError+0x7a>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2200      	movs	r2, #0
 8007716:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007718:	68b8      	ldr	r0, [r7, #8]
 800771a:	f000 f941 	bl	80079a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f043 0210 	orr.w	r2, r3, #16
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800772a:	68b8      	ldr	r0, [r7, #8]
 800772c:	f7fb fd48 	bl	80031c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b090      	sub	sp, #64	; 0x40
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007748:	e050      	b.n	80077ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007750:	d04c      	beq.n	80077ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <UART_WaitOnFlagUntilTimeout+0x30>
 8007758:	f7fb fea6 	bl	80034a8 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007764:	429a      	cmp	r2, r3
 8007766:	d241      	bcs.n	80077ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007788:	637a      	str	r2, [r7, #52]	; 0x34
 800778a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800778e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e5      	bne.n	8007768 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	613b      	str	r3, [r7, #16]
   return(result);
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3314      	adds	r3, #20
 80077ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077bc:	623a      	str	r2, [r7, #32]
 80077be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	69f9      	ldr	r1, [r7, #28]
 80077c2:	6a3a      	ldr	r2, [r7, #32]
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e5      	bne.n	800779c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e00f      	b.n	800780c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	4013      	ands	r3, r2
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	bf0c      	ite	eq
 80077fc:	2301      	moveq	r3, #1
 80077fe:	2300      	movne	r3, #0
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	429a      	cmp	r2, r3
 8007808:	d09f      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3740      	adds	r7, #64	; 0x40
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b098      	sub	sp, #96	; 0x60
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2222      	movs	r2, #34	; 0x22
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	4a40      	ldr	r2, [pc, #256]	; (8007944 <UART_Start_Receive_DMA+0x130>)
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	4a3f      	ldr	r2, [pc, #252]	; (8007948 <UART_Start_Receive_DMA+0x134>)
 800784a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	4a3e      	ldr	r2, [pc, #248]	; (800794c <UART_Start_Receive_DMA+0x138>)
 8007852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	2200      	movs	r2, #0
 800785a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	f7fc fe66 	bl	8004544 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007878:	2300      	movs	r3, #0
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d019      	beq.n	80078d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80078c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80078c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3314      	adds	r3, #20
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	657b      	str	r3, [r7, #84]	; 0x54
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3314      	adds	r3, #20
 80078f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	617b      	str	r3, [r7, #20]
   return(result);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791c:	653b      	str	r3, [r7, #80]	; 0x50
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3314      	adds	r3, #20
 8007924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007926:	627a      	str	r2, [r7, #36]	; 0x24
 8007928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6a39      	ldr	r1, [r7, #32]
 800792c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	61fb      	str	r3, [r7, #28]
   return(result);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e5      	bne.n	8007906 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3760      	adds	r7, #96	; 0x60
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	08007549 	.word	0x08007549
 8007948:	0800766f 	.word	0x0800766f
 800794c:	080076a5 	.word	0x080076a5

08007950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007950:	b480      	push	{r7}
 8007952:	b089      	sub	sp, #36	; 0x24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	60bb      	str	r3, [r7, #8]
   return(result);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	61ba      	str	r2, [r7, #24]
 800797a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6979      	ldr	r1, [r7, #20]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	613b      	str	r3, [r7, #16]
   return(result);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e5      	bne.n	8007958 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007994:	bf00      	nop
 8007996:	3724      	adds	r7, #36	; 0x24
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b095      	sub	sp, #84	; 0x54
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	330c      	adds	r3, #12
 80079ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079c8:	643a      	str	r2, [r7, #64]	; 0x40
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e5      	bne.n	80079a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3314      	adds	r3, #20
 80079e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3314      	adds	r3, #20
 80079fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e5      	bne.n	80079dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d119      	bne.n	8007a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f023 0310 	bic.w	r3, r3, #16
 8007a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a38:	61ba      	str	r2, [r7, #24]
 8007a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6979      	ldr	r1, [r7, #20]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	e841 2300 	strex	r3, r2, [r1]
 8007a44:	613b      	str	r3, [r7, #16]
   return(result);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e5      	bne.n	8007a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a5a:	bf00      	nop
 8007a5c:	3754      	adds	r7, #84	; 0x54
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7fb fb9d 	bl	80031c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b21      	cmp	r3, #33	; 0x21
 8007aa0:	d13e      	bne.n	8007b20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aaa:	d114      	bne.n	8007ad6 <UART_Transmit_IT+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d110      	bne.n	8007ad6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ac8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	1c9a      	adds	r2, r3, #2
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	621a      	str	r2, [r3, #32]
 8007ad4:	e008      	b.n	8007ae8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	1c59      	adds	r1, r3, #1
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6211      	str	r1, [r2, #32]
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4619      	mov	r1, r3
 8007af6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10f      	bne.n	8007b1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e000      	b.n	8007b22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b20:	2302      	movs	r3, #2
  }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fcd0 	bl	80074f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b08c      	sub	sp, #48	; 0x30
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b22      	cmp	r3, #34	; 0x22
 8007b70:	f040 80ab 	bne.w	8007cca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d117      	bne.n	8007bae <UART_Receive_IT+0x50>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d113      	bne.n	8007bae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	1c9a      	adds	r2, r3, #2
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28
 8007bac:	e026      	b.n	8007bfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc0:	d007      	beq.n	8007bd2 <UART_Receive_IT+0x74>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <UART_Receive_IT+0x82>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d106      	bne.n	8007be0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e008      	b.n	8007bf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d15a      	bne.n	8007cc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0220 	bic.w	r2, r2, #32
 8007c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695a      	ldr	r2, [r3, #20]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0201 	bic.w	r2, r2, #1
 8007c3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d135      	bne.n	8007cbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	330c      	adds	r3, #12
 8007c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	613b      	str	r3, [r7, #16]
   return(result);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f023 0310 	bic.w	r3, r3, #16
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c76:	623a      	str	r2, [r7, #32]
 8007c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	69f9      	ldr	r1, [r7, #28]
 8007c7c:	6a3a      	ldr	r2, [r7, #32]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d10a      	bne.n	8007cae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7fb fb57 	bl	8003368 <HAL_UARTEx_RxEventCallback>
 8007cba:	e002      	b.n	8007cc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff fc23 	bl	8007508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e002      	b.n	8007ccc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e000      	b.n	8007ccc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3730      	adds	r7, #48	; 0x30
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cd8:	b0c0      	sub	sp, #256	; 0x100
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	68d9      	ldr	r1, [r3, #12]
 8007cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	ea40 0301 	orr.w	r3, r0, r1
 8007cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d2c:	f021 010c 	bic.w	r1, r1, #12
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d3a:	430b      	orrs	r3, r1
 8007d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4e:	6999      	ldr	r1, [r3, #24]
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	ea40 0301 	orr.w	r3, r0, r1
 8007d5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b8f      	ldr	r3, [pc, #572]	; (8007fa0 <UART_SetConfig+0x2cc>)
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d005      	beq.n	8007d74 <UART_SetConfig+0xa0>
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b8d      	ldr	r3, [pc, #564]	; (8007fa4 <UART_SetConfig+0x2d0>)
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d104      	bne.n	8007d7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d74:	f7fd fdc6 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 8007d78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d7c:	e003      	b.n	8007d86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d7e:	f7fd fdad 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 8007d82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d90:	f040 810c 	bne.w	8007fac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007da2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007da6:	4622      	mov	r2, r4
 8007da8:	462b      	mov	r3, r5
 8007daa:	1891      	adds	r1, r2, r2
 8007dac:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dae:	415b      	adcs	r3, r3
 8007db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007db2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007db6:	4621      	mov	r1, r4
 8007db8:	eb12 0801 	adds.w	r8, r2, r1
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	eb43 0901 	adc.w	r9, r3, r1
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dd6:	4690      	mov	r8, r2
 8007dd8:	4699      	mov	r9, r3
 8007dda:	4623      	mov	r3, r4
 8007ddc:	eb18 0303 	adds.w	r3, r8, r3
 8007de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007de4:	462b      	mov	r3, r5
 8007de6:	eb49 0303 	adc.w	r3, r9, r3
 8007dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e02:	460b      	mov	r3, r1
 8007e04:	18db      	adds	r3, r3, r3
 8007e06:	653b      	str	r3, [r7, #80]	; 0x50
 8007e08:	4613      	mov	r3, r2
 8007e0a:	eb42 0303 	adc.w	r3, r2, r3
 8007e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e18:	f7f8 f9da 	bl	80001d0 <__aeabi_uldivmod>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4b61      	ldr	r3, [pc, #388]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007e22:	fba3 2302 	umull	r2, r3, r3, r2
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	011c      	lsls	r4, r3, #4
 8007e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	1891      	adds	r1, r2, r2
 8007e42:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e44:	415b      	adcs	r3, r3
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e4c:	4641      	mov	r1, r8
 8007e4e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e52:	4649      	mov	r1, r9
 8007e54:	eb43 0b01 	adc.w	fp, r3, r1
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e6c:	4692      	mov	sl, r2
 8007e6e:	469b      	mov	fp, r3
 8007e70:	4643      	mov	r3, r8
 8007e72:	eb1a 0303 	adds.w	r3, sl, r3
 8007e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	18db      	adds	r3, r3, r3
 8007e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	eb42 0303 	adc.w	r3, r2, r3
 8007ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007eae:	f7f8 f98f 	bl	80001d0 <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4b3b      	ldr	r3, [pc, #236]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007eba:	fba3 2301 	umull	r2, r3, r3, r1
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	2264      	movs	r2, #100	; 0x64
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	1acb      	subs	r3, r1, r3
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ece:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007edc:	441c      	add	r4, r3
 8007ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ee8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007eec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	1891      	adds	r1, r2, r2
 8007ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ef8:	415b      	adcs	r3, r3
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f00:	4641      	mov	r1, r8
 8007f02:	1851      	adds	r1, r2, r1
 8007f04:	6339      	str	r1, [r7, #48]	; 0x30
 8007f06:	4649      	mov	r1, r9
 8007f08:	414b      	adcs	r3, r1
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f18:	4659      	mov	r1, fp
 8007f1a:	00cb      	lsls	r3, r1, #3
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f22:	4651      	mov	r1, sl
 8007f24:	00ca      	lsls	r2, r1, #3
 8007f26:	4610      	mov	r0, r2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	189b      	adds	r3, r3, r2
 8007f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f34:	464b      	mov	r3, r9
 8007f36:	460a      	mov	r2, r1
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f54:	460b      	mov	r3, r1
 8007f56:	18db      	adds	r3, r3, r3
 8007f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	eb42 0303 	adc.w	r3, r2, r3
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f6a:	f7f8 f931 	bl	80001d0 <__aeabi_uldivmod>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007f74:	fba3 1302 	umull	r1, r3, r3, r2
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	2164      	movs	r1, #100	; 0x64
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	3332      	adds	r3, #50	; 0x32
 8007f86:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <UART_SetConfig+0x2d4>)
 8007f88:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	f003 0207 	and.w	r2, r3, #7
 8007f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4422      	add	r2, r4
 8007f9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f9c:	e105      	b.n	80081aa <UART_SetConfig+0x4d6>
 8007f9e:	bf00      	nop
 8007fa0:	40011000 	.word	0x40011000
 8007fa4:	40011400 	.word	0x40011400
 8007fa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fbe:	4642      	mov	r2, r8
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	1891      	adds	r1, r2, r2
 8007fc4:	6239      	str	r1, [r7, #32]
 8007fc6:	415b      	adcs	r3, r3
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fce:	4641      	mov	r1, r8
 8007fd0:	1854      	adds	r4, r2, r1
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	eb43 0501 	adc.w	r5, r3, r1
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	00eb      	lsls	r3, r5, #3
 8007fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fe6:	00e2      	lsls	r2, r4, #3
 8007fe8:	4614      	mov	r4, r2
 8007fea:	461d      	mov	r5, r3
 8007fec:	4643      	mov	r3, r8
 8007fee:	18e3      	adds	r3, r4, r3
 8007ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	eb45 0303 	adc.w	r3, r5, r3
 8007ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800800a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800801a:	4629      	mov	r1, r5
 800801c:	008b      	lsls	r3, r1, #2
 800801e:	4621      	mov	r1, r4
 8008020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008024:	4621      	mov	r1, r4
 8008026:	008a      	lsls	r2, r1, #2
 8008028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800802c:	f7f8 f8d0 	bl	80001d0 <__aeabi_uldivmod>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4b60      	ldr	r3, [pc, #384]	; (80081b8 <UART_SetConfig+0x4e4>)
 8008036:	fba3 2302 	umull	r2, r3, r3, r2
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	011c      	lsls	r4, r3, #4
 800803e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008042:	2200      	movs	r2, #0
 8008044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008048:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800804c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008050:	4642      	mov	r2, r8
 8008052:	464b      	mov	r3, r9
 8008054:	1891      	adds	r1, r2, r2
 8008056:	61b9      	str	r1, [r7, #24]
 8008058:	415b      	adcs	r3, r3
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008060:	4641      	mov	r1, r8
 8008062:	1851      	adds	r1, r2, r1
 8008064:	6139      	str	r1, [r7, #16]
 8008066:	4649      	mov	r1, r9
 8008068:	414b      	adcs	r3, r1
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008078:	4659      	mov	r1, fp
 800807a:	00cb      	lsls	r3, r1, #3
 800807c:	4651      	mov	r1, sl
 800807e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008082:	4651      	mov	r1, sl
 8008084:	00ca      	lsls	r2, r1, #3
 8008086:	4610      	mov	r0, r2
 8008088:	4619      	mov	r1, r3
 800808a:	4603      	mov	r3, r0
 800808c:	4642      	mov	r2, r8
 800808e:	189b      	adds	r3, r3, r2
 8008090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008094:	464b      	mov	r3, r9
 8008096:	460a      	mov	r2, r1
 8008098:	eb42 0303 	adc.w	r3, r2, r3
 800809c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80080aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080b8:	4649      	mov	r1, r9
 80080ba:	008b      	lsls	r3, r1, #2
 80080bc:	4641      	mov	r1, r8
 80080be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c2:	4641      	mov	r1, r8
 80080c4:	008a      	lsls	r2, r1, #2
 80080c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080ca:	f7f8 f881 	bl	80001d0 <__aeabi_uldivmod>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4b39      	ldr	r3, [pc, #228]	; (80081b8 <UART_SetConfig+0x4e4>)
 80080d4:	fba3 1302 	umull	r1, r3, r3, r2
 80080d8:	095b      	lsrs	r3, r3, #5
 80080da:	2164      	movs	r1, #100	; 0x64
 80080dc:	fb01 f303 	mul.w	r3, r1, r3
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	3332      	adds	r3, #50	; 0x32
 80080e6:	4a34      	ldr	r2, [pc, #208]	; (80081b8 <UART_SetConfig+0x4e4>)
 80080e8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080f2:	441c      	add	r4, r3
 80080f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f8:	2200      	movs	r2, #0
 80080fa:	673b      	str	r3, [r7, #112]	; 0x70
 80080fc:	677a      	str	r2, [r7, #116]	; 0x74
 80080fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008102:	4642      	mov	r2, r8
 8008104:	464b      	mov	r3, r9
 8008106:	1891      	adds	r1, r2, r2
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	415b      	adcs	r3, r3
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008112:	4641      	mov	r1, r8
 8008114:	1851      	adds	r1, r2, r1
 8008116:	6039      	str	r1, [r7, #0]
 8008118:	4649      	mov	r1, r9
 800811a:	414b      	adcs	r3, r1
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800812a:	4659      	mov	r1, fp
 800812c:	00cb      	lsls	r3, r1, #3
 800812e:	4651      	mov	r1, sl
 8008130:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008134:	4651      	mov	r1, sl
 8008136:	00ca      	lsls	r2, r1, #3
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	4603      	mov	r3, r0
 800813e:	4642      	mov	r2, r8
 8008140:	189b      	adds	r3, r3, r2
 8008142:	66bb      	str	r3, [r7, #104]	; 0x68
 8008144:	464b      	mov	r3, r9
 8008146:	460a      	mov	r2, r1
 8008148:	eb42 0303 	adc.w	r3, r2, r3
 800814c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800814e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	663b      	str	r3, [r7, #96]	; 0x60
 8008158:	667a      	str	r2, [r7, #100]	; 0x64
 800815a:	f04f 0200 	mov.w	r2, #0
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008166:	4649      	mov	r1, r9
 8008168:	008b      	lsls	r3, r1, #2
 800816a:	4641      	mov	r1, r8
 800816c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008170:	4641      	mov	r1, r8
 8008172:	008a      	lsls	r2, r1, #2
 8008174:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008178:	f7f8 f82a 	bl	80001d0 <__aeabi_uldivmod>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <UART_SetConfig+0x4e4>)
 8008182:	fba3 1302 	umull	r1, r3, r3, r2
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	2164      	movs	r1, #100	; 0x64
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	3332      	adds	r3, #50	; 0x32
 8008194:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <UART_SetConfig+0x4e4>)
 8008196:	fba2 2303 	umull	r2, r3, r2, r3
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f003 020f 	and.w	r2, r3, #15
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4422      	add	r2, r4
 80081a8:	609a      	str	r2, [r3, #8]
}
 80081aa:	bf00      	nop
 80081ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081b0:	46bd      	mov	sp, r7
 80081b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081b6:	bf00      	nop
 80081b8:	51eb851f 	.word	0x51eb851f

080081bc <__NVIC_SetPriority>:
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	db0a      	blt.n	80081e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	490c      	ldr	r1, [pc, #48]	; (8008208 <__NVIC_SetPriority+0x4c>)
 80081d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081da:	0112      	lsls	r2, r2, #4
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	440b      	add	r3, r1
 80081e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081e4:	e00a      	b.n	80081fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	4908      	ldr	r1, [pc, #32]	; (800820c <__NVIC_SetPriority+0x50>)
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	3b04      	subs	r3, #4
 80081f4:	0112      	lsls	r2, r2, #4
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	440b      	add	r3, r1
 80081fa:	761a      	strb	r2, [r3, #24]
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	e000e100 	.word	0xe000e100
 800820c:	e000ed00 	.word	0xe000ed00

08008210 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <SysTick_Handler+0x1c>)
 8008216:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008218:	f001 fcfe 	bl	8009c18 <xTaskGetSchedulerState>
 800821c:	4603      	mov	r3, r0
 800821e:	2b01      	cmp	r3, #1
 8008220:	d001      	beq.n	8008226 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008222:	f002 fae9 	bl	800a7f8 <xPortSysTickHandler>
  }
}
 8008226:	bf00      	nop
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	e000e010 	.word	0xe000e010

08008230 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008234:	2100      	movs	r1, #0
 8008236:	f06f 0004 	mvn.w	r0, #4
 800823a:	f7ff ffbf 	bl	80081bc <__NVIC_SetPriority>
#endif
}
 800823e:	bf00      	nop
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824a:	f3ef 8305 	mrs	r3, IPSR
 800824e:	603b      	str	r3, [r7, #0]
  return(result);
 8008250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008256:	f06f 0305 	mvn.w	r3, #5
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	e00c      	b.n	8008278 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <osKernelInitialize+0x44>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d105      	bne.n	8008272 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008266:	4b08      	ldr	r3, [pc, #32]	; (8008288 <osKernelInitialize+0x44>)
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800826c:	2300      	movs	r3, #0
 800826e:	607b      	str	r3, [r7, #4]
 8008270:	e002      	b.n	8008278 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008278:	687b      	ldr	r3, [r7, #4]
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20001fb4 	.word	0x20001fb4

0800828c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008292:	f3ef 8305 	mrs	r3, IPSR
 8008296:	603b      	str	r3, [r7, #0]
  return(result);
 8008298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800829e:	f06f 0305 	mvn.w	r3, #5
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e010      	b.n	80082c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082a6:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <osKernelStart+0x48>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d109      	bne.n	80082c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082ae:	f7ff ffbf 	bl	8008230 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <osKernelStart+0x48>)
 80082b4:	2202      	movs	r2, #2
 80082b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082b8:	f001 f866 	bl	8009388 <vTaskStartScheduler>
      stat = osOK;
 80082bc:	2300      	movs	r3, #0
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e002      	b.n	80082c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295
 80082c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082c8:	687b      	ldr	r3, [r7, #4]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20001fb4 	.word	0x20001fb4

080082d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	; 0x38
 80082dc:	af04      	add	r7, sp, #16
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e8:	f3ef 8305 	mrs	r3, IPSR
 80082ec:	617b      	str	r3, [r7, #20]
  return(result);
 80082ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d17e      	bne.n	80083f2 <osThreadNew+0x11a>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d07b      	beq.n	80083f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082fe:	2318      	movs	r3, #24
 8008300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d045      	beq.n	800839e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <osThreadNew+0x48>
        name = attr->name;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <osThreadNew+0x6e>
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	2b38      	cmp	r3, #56	; 0x38
 8008338:	d805      	bhi.n	8008346 <osThreadNew+0x6e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <osThreadNew+0x72>
        return (NULL);
 8008346:	2300      	movs	r3, #0
 8008348:	e054      	b.n	80083f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	089b      	lsrs	r3, r3, #2
 8008358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00e      	beq.n	8008380 <osThreadNew+0xa8>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	2b5b      	cmp	r3, #91	; 0x5b
 8008368:	d90a      	bls.n	8008380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800836e:	2b00      	cmp	r3, #0
 8008370:	d006      	beq.n	8008380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <osThreadNew+0xa8>
        mem = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e010      	b.n	80083a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <osThreadNew+0xca>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d108      	bne.n	80083a2 <osThreadNew+0xca>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <osThreadNew+0xca>
          mem = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	e001      	b.n	80083a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d110      	bne.n	80083ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083b0:	9202      	str	r2, [sp, #8]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fe0c 	bl	8008fdc <xTaskCreateStatic>
 80083c4:	4603      	mov	r3, r0
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e013      	b.n	80083f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d110      	bne.n	80083f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fe57 	bl	8009096 <xTaskCreate>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <osThreadNew+0x11a>
            hTask = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083f2:	693b      	ldr	r3, [r7, #16]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3728      	adds	r7, #40	; 0x28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008404:	f3ef 8305 	mrs	r3, IPSR
 8008408:	60bb      	str	r3, [r7, #8]
  return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <osDelay+0x1c>
    stat = osErrorISR;
 8008410:	f06f 0305 	mvn.w	r3, #5
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e007      	b.n	8008428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 ff7c 	bl	8009320 <vTaskDelay>
    }
  }

  return (stat);
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4a07      	ldr	r2, [pc, #28]	; (8008460 <vApplicationGetIdleTaskMemory+0x2c>)
 8008444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4a06      	ldr	r2, [pc, #24]	; (8008464 <vApplicationGetIdleTaskMemory+0x30>)
 800844a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2280      	movs	r2, #128	; 0x80
 8008450:	601a      	str	r2, [r3, #0]
}
 8008452:	bf00      	nop
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20001fb8 	.word	0x20001fb8
 8008464:	20002014 	.word	0x20002014

08008468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4a07      	ldr	r2, [pc, #28]	; (8008494 <vApplicationGetTimerTaskMemory+0x2c>)
 8008478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4a06      	ldr	r2, [pc, #24]	; (8008498 <vApplicationGetTimerTaskMemory+0x30>)
 800847e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008486:	601a      	str	r2, [r3, #0]
}
 8008488:	bf00      	nop
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20002214 	.word	0x20002214
 8008498:	20002270 	.word	0x20002270

0800849c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f103 0208 	add.w	r2, r3, #8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295
 80084b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f103 0208 	add.w	r2, r3, #8
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0208 	add.w	r2, r3, #8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	601a      	str	r2, [r3, #0]
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d103      	bne.n	800855e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	e00c      	b.n	8008578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3308      	adds	r3, #8
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	e002      	b.n	800856c <vListInsert+0x2e>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	d2f6      	bcs.n	8008566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6892      	ldr	r2, [r2, #8]
 80085c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6852      	ldr	r2, [r2, #4]
 80085d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d103      	bne.n	80085e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1e5a      	subs	r2, r3, #1
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800862e:	f002 f851 	bl	800a6d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800863e:	fb01 f303 	mul.w	r3, r1, r3
 8008642:	441a      	add	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	3b01      	subs	r3, #1
 8008660:	68f9      	ldr	r1, [r7, #12]
 8008662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008664:	fb01 f303 	mul.w	r3, r1, r3
 8008668:	441a      	add	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	22ff      	movs	r2, #255	; 0xff
 8008672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	22ff      	movs	r2, #255	; 0xff
 800867a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d114      	bne.n	80086ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01a      	beq.n	80086c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3310      	adds	r3, #16
 8008690:	4618      	mov	r0, r3
 8008692:	f001 f903 	bl	800989c <xTaskRemoveFromEventList>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d012      	beq.n	80086c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800869c:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <xQueueGenericReset+0xcc>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	e009      	b.n	80086c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3310      	adds	r3, #16
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fef2 	bl	800849c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3324      	adds	r3, #36	; 0x24
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff feed 	bl	800849c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086c2:	f002 f837 	bl	800a734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086c6:	2301      	movs	r3, #1
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	e000ed04 	.word	0xe000ed04

080086d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08e      	sub	sp, #56	; 0x38
 80086d8:	af02      	add	r7, sp, #8
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <xQueueGenericCreateStatic+0x52>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <xQueueGenericCreateStatic+0x56>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueGenericCreateStatic+0x58>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	623b      	str	r3, [r7, #32]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <xQueueGenericCreateStatic+0x7e>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <xQueueGenericCreateStatic+0x82>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueGenericCreateStatic+0x84>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61fb      	str	r3, [r7, #28]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008772:	2350      	movs	r3, #80	; 0x50
 8008774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b50      	cmp	r3, #80	; 0x50
 800877a:	d00a      	beq.n	8008792 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	61bb      	str	r3, [r7, #24]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008792:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00d      	beq.n	80087ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	4613      	mov	r3, r2
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 f805 	bl	80087c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087bc:	4618      	mov	r0, r3
 80087be:	3730      	adds	r7, #48	; 0x30
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	e002      	b.n	80087e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087f2:	2101      	movs	r1, #1
 80087f4:	69b8      	ldr	r0, [r7, #24]
 80087f6:	f7ff ff05 	bl	8008604 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	78fa      	ldrb	r2, [r7, #3]
 80087fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	; 0x38
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800881a:	2300      	movs	r3, #0
 800881c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xQueueGenericSend+0x32>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d103      	bne.n	800884c <xQueueGenericSend+0x40>
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <xQueueGenericSend+0x44>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <xQueueGenericSend+0x46>
 8008850:	2300      	movs	r3, #0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <xQueueGenericSend+0x60>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d103      	bne.n	800887a <xQueueGenericSend+0x6e>
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008876:	2b01      	cmp	r3, #1
 8008878:	d101      	bne.n	800887e <xQueueGenericSend+0x72>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <xQueueGenericSend+0x74>
 800887e:	2300      	movs	r3, #0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10a      	bne.n	800889a <xQueueGenericSend+0x8e>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	623b      	str	r3, [r7, #32]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800889a:	f001 f9bd 	bl	8009c18 <xTaskGetSchedulerState>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <xQueueGenericSend+0x9e>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <xQueueGenericSend+0xa2>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e000      	b.n	80088b0 <xQueueGenericSend+0xa4>
 80088ae:	2300      	movs	r3, #0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <xQueueGenericSend+0xbe>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	61fb      	str	r3, [r7, #28]
}
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088ca:	f001 ff03 	bl	800a6d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d302      	bcc.n	80088e0 <xQueueGenericSend+0xd4>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d129      	bne.n	8008934 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088e6:	f000 fa0b 	bl	8008d00 <prvCopyDataToQueue>
 80088ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	3324      	adds	r3, #36	; 0x24
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 ffcf 	bl	800989c <xTaskRemoveFromEventList>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d013      	beq.n	800892c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008904:	4b3f      	ldr	r3, [pc, #252]	; (8008a04 <xQueueGenericSend+0x1f8>)
 8008906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	e00a      	b.n	800892c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800891c:	4b39      	ldr	r3, [pc, #228]	; (8008a04 <xQueueGenericSend+0x1f8>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800892c:	f001 ff02 	bl	800a734 <vPortExitCritical>
				return pdPASS;
 8008930:	2301      	movs	r3, #1
 8008932:	e063      	b.n	80089fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800893a:	f001 fefb 	bl	800a734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800893e:	2300      	movs	r3, #0
 8008940:	e05c      	b.n	80089fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008948:	f107 0314 	add.w	r3, r7, #20
 800894c:	4618      	mov	r0, r3
 800894e:	f001 f809 	bl	8009964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008956:	f001 feed 	bl	800a734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800895a:	f000 fd7b 	bl	8009454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800895e:	f001 feb9 	bl	800a6d4 <vPortEnterCritical>
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008968:	b25b      	sxtb	r3, r3
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896e:	d103      	bne.n	8008978 <xQueueGenericSend+0x16c>
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800897e:	b25b      	sxtb	r3, r3
 8008980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008984:	d103      	bne.n	800898e <xQueueGenericSend+0x182>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800898e:	f001 fed1 	bl	800a734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008992:	1d3a      	adds	r2, r7, #4
 8008994:	f107 0314 	add.w	r3, r7, #20
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fff8 	bl	8009990 <xTaskCheckForTimeOut>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d124      	bne.n	80089f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a8:	f000 faa2 	bl	8008ef0 <prvIsQueueFull>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d018      	beq.n	80089e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	3310      	adds	r3, #16
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 ff1e 	bl	80097fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c2:	f000 fa2d 	bl	8008e20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089c6:	f000 fd53 	bl	8009470 <xTaskResumeAll>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f47f af7c 	bne.w	80088ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089d2:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <xQueueGenericSend+0x1f8>)
 80089d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	e772      	b.n	80088ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e6:	f000 fa1b 	bl	8008e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089ea:	f000 fd41 	bl	8009470 <xTaskResumeAll>
 80089ee:	e76c      	b.n	80088ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089f2:	f000 fa15 	bl	8008e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089f6:	f000 fd3b 	bl	8009470 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3738      	adds	r7, #56	; 0x38
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b090      	sub	sp, #64	; 0x40
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d103      	bne.n	8008a44 <xQueueGenericSendFromISR+0x3c>
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <xQueueGenericSendFromISR+0x40>
 8008a44:	2301      	movs	r3, #1
 8008a46:	e000      	b.n	8008a4a <xQueueGenericSendFromISR+0x42>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a60:	bf00      	nop
 8008a62:	e7fe      	b.n	8008a62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d103      	bne.n	8008a72 <xQueueGenericSendFromISR+0x6a>
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <xQueueGenericSendFromISR+0x6e>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <xQueueGenericSendFromISR+0x70>
 8008a76:	2300      	movs	r3, #0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	623b      	str	r3, [r7, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a92:	f001 ff01 	bl	800a898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a96:	f3ef 8211 	mrs	r2, BASEPRI
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	61fa      	str	r2, [r7, #28]
 8008aac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008aae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d302      	bcc.n	8008ac4 <xQueueGenericSendFromISR+0xbc>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d12f      	bne.n	8008b24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ada:	f000 f911 	bl	8008d00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ade:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d112      	bne.n	8008b0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d016      	beq.n	8008b1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	3324      	adds	r3, #36	; 0x24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fed1 	bl	800989c <xTaskRemoveFromEventList>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00b      	beq.n	8008b1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e007      	b.n	8008b1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b12:	3301      	adds	r3, #1
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	b25a      	sxtb	r2, r3
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b22:	e001      	b.n	8008b28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3740      	adds	r7, #64	; 0x40
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08c      	sub	sp, #48	; 0x30
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <xQueueReceive+0x30>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	623b      	str	r3, [r7, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d103      	bne.n	8008b7e <xQueueReceive+0x3e>
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <xQueueReceive+0x42>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <xQueueReceive+0x44>
 8008b82:	2300      	movs	r3, #0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10a      	bne.n	8008b9e <xQueueReceive+0x5e>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	61fb      	str	r3, [r7, #28]
}
 8008b9a:	bf00      	nop
 8008b9c:	e7fe      	b.n	8008b9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b9e:	f001 f83b 	bl	8009c18 <xTaskGetSchedulerState>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <xQueueReceive+0x6e>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <xQueueReceive+0x72>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <xQueueReceive+0x74>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <xQueueReceive+0x8e>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	61bb      	str	r3, [r7, #24]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bce:	f001 fd81 	bl	800a6d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01f      	beq.n	8008c1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be2:	f000 f8f7 	bl	8008dd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	1e5a      	subs	r2, r3, #1
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00f      	beq.n	8008c16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	3310      	adds	r3, #16
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fe4e 	bl	800989c <xTaskRemoveFromEventList>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c06:	4b3d      	ldr	r3, [pc, #244]	; (8008cfc <xQueueReceive+0x1bc>)
 8008c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c16:	f001 fd8d 	bl	800a734 <vPortExitCritical>
				return pdPASS;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e069      	b.n	8008cf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d103      	bne.n	8008c2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c24:	f001 fd86 	bl	800a734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e062      	b.n	8008cf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c32:	f107 0310 	add.w	r3, r7, #16
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fe94 	bl	8009964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c40:	f001 fd78 	bl	800a734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c44:	f000 fc06 	bl	8009454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c48:	f001 fd44 	bl	800a6d4 <vPortEnterCritical>
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c52:	b25b      	sxtb	r3, r3
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d103      	bne.n	8008c62 <xQueueReceive+0x122>
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6e:	d103      	bne.n	8008c78 <xQueueReceive+0x138>
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c78:	f001 fd5c 	bl	800a734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c7c:	1d3a      	adds	r2, r7, #4
 8008c7e:	f107 0310 	add.w	r3, r7, #16
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fe83 	bl	8009990 <xTaskCheckForTimeOut>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d123      	bne.n	8008cd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c92:	f000 f917 	bl	8008ec4 <prvIsQueueEmpty>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d017      	beq.n	8008ccc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	3324      	adds	r3, #36	; 0x24
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 fda9 	bl	80097fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cac:	f000 f8b8 	bl	8008e20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cb0:	f000 fbde 	bl	8009470 <xTaskResumeAll>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d189      	bne.n	8008bce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008cba:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <xQueueReceive+0x1bc>)
 8008cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	e780      	b.n	8008bce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cce:	f000 f8a7 	bl	8008e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cd2:	f000 fbcd 	bl	8009470 <xTaskResumeAll>
 8008cd6:	e77a      	b.n	8008bce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cda:	f000 f8a1 	bl	8008e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cde:	f000 fbc7 	bl	8009470 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce4:	f000 f8ee 	bl	8008ec4 <prvIsQueueEmpty>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f43f af6f 	beq.w	8008bce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3730      	adds	r7, #48	; 0x30
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10d      	bne.n	8008d3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d14d      	bne.n	8008dc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 ff92 	bl	8009c54 <xTaskPriorityDisinherit>
 8008d30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	609a      	str	r2, [r3, #8]
 8008d38:	e043      	b.n	8008dc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d119      	bne.n	8008d74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6858      	ldr	r0, [r3, #4]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	461a      	mov	r2, r3
 8008d4a:	68b9      	ldr	r1, [r7, #8]
 8008d4c:	f001 fff2 	bl	800ad34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d58:	441a      	add	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d32b      	bcc.n	8008dc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	e026      	b.n	8008dc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68d8      	ldr	r0, [r3, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	f001 ffd8 	bl	800ad34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	425b      	negs	r3, r3
 8008d8e:	441a      	add	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	68da      	ldr	r2, [r3, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d207      	bcs.n	8008db0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	425b      	negs	r3, r3
 8008daa:	441a      	add	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d105      	bne.n	8008dc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008dca:	697b      	ldr	r3, [r7, #20]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d018      	beq.n	8008e18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	441a      	add	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d303      	bcc.n	8008e08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68d9      	ldr	r1, [r3, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	461a      	mov	r2, r3
 8008e12:	6838      	ldr	r0, [r7, #0]
 8008e14:	f001 ff8e 	bl	800ad34 <memcpy>
	}
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e28:	f001 fc54 	bl	800a6d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e34:	e011      	b.n	8008e5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d012      	beq.n	8008e64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3324      	adds	r3, #36	; 0x24
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fd2a 	bl	800989c <xTaskRemoveFromEventList>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e4e:	f000 fe01 	bl	8009a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dce9      	bgt.n	8008e36 <prvUnlockQueue+0x16>
 8008e62:	e000      	b.n	8008e66 <prvUnlockQueue+0x46>
					break;
 8008e64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	22ff      	movs	r2, #255	; 0xff
 8008e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e6e:	f001 fc61 	bl	800a734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e72:	f001 fc2f 	bl	800a6d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e7e:	e011      	b.n	8008ea4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d012      	beq.n	8008eae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3310      	adds	r3, #16
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fd05 	bl	800989c <xTaskRemoveFromEventList>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e98:	f000 fddc 	bl	8009a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dce9      	bgt.n	8008e80 <prvUnlockQueue+0x60>
 8008eac:	e000      	b.n	8008eb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008eae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	22ff      	movs	r2, #255	; 0xff
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008eb8:	f001 fc3c 	bl	800a734 <vPortExitCritical>
}
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ecc:	f001 fc02 	bl	800a6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	e001      	b.n	8008ee2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ee2:	f001 fc27 	bl	800a734 <vPortExitCritical>

	return xReturn;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ef8:	f001 fbec 	bl	800a6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d102      	bne.n	8008f0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	e001      	b.n	8008f12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f12:	f001 fc0f 	bl	800a734 <vPortExitCritical>

	return xReturn;
 8008f16:	68fb      	ldr	r3, [r7, #12]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	e014      	b.n	8008f5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f30:	4a0f      	ldr	r2, [pc, #60]	; (8008f70 <vQueueAddToRegistry+0x50>)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10b      	bne.n	8008f54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f3c:	490c      	ldr	r1, [pc, #48]	; (8008f70 <vQueueAddToRegistry+0x50>)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f46:	4a0a      	ldr	r2, [pc, #40]	; (8008f70 <vQueueAddToRegistry+0x50>)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f52:	e006      	b.n	8008f62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b07      	cmp	r3, #7
 8008f5e:	d9e7      	bls.n	8008f30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20002670 	.word	0x20002670

08008f74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f84:	f001 fba6 	bl	800a6d4 <vPortEnterCritical>
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f8e:	b25b      	sxtb	r3, r3
 8008f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f94:	d103      	bne.n	8008f9e <vQueueWaitForMessageRestricted+0x2a>
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fa4:	b25b      	sxtb	r3, r3
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d103      	bne.n	8008fb4 <vQueueWaitForMessageRestricted+0x40>
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fb4:	f001 fbbe 	bl	800a734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d106      	bne.n	8008fce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3324      	adds	r3, #36	; 0x24
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fc3b 	bl	8009844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fce:	6978      	ldr	r0, [r7, #20]
 8008fd0:	f7ff ff26 	bl	8008e20 <prvUnlockQueue>
	}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08e      	sub	sp, #56	; 0x38
 8008fe0:	af04      	add	r7, sp, #16
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	623b      	str	r3, [r7, #32]
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <xTaskCreateStatic+0x46>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	61fb      	str	r3, [r7, #28]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009022:	235c      	movs	r3, #92	; 0x5c
 8009024:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b5c      	cmp	r3, #92	; 0x5c
 800902a:	d00a      	beq.n	8009042 <xTaskCreateStatic+0x66>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	61bb      	str	r3, [r7, #24]
}
 800903e:	bf00      	nop
 8009040:	e7fe      	b.n	8009040 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009042:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01e      	beq.n	8009088 <xTaskCreateStatic+0xac>
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01b      	beq.n	8009088 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009058:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	2202      	movs	r2, #2
 800905e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009062:	2300      	movs	r3, #0
 8009064:	9303      	str	r3, [sp, #12]
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	9302      	str	r3, [sp, #8]
 800906a:	f107 0314 	add.w	r3, r7, #20
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	68b9      	ldr	r1, [r7, #8]
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f850 	bl	8009120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009082:	f000 f8dd 	bl	8009240 <prvAddNewTaskToReadyList>
 8009086:	e001      	b.n	800908c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009088:	2300      	movs	r3, #0
 800908a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800908c:	697b      	ldr	r3, [r7, #20]
	}
 800908e:	4618      	mov	r0, r3
 8009090:	3728      	adds	r7, #40	; 0x28
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009096:	b580      	push	{r7, lr}
 8009098:	b08c      	sub	sp, #48	; 0x30
 800909a:	af04      	add	r7, sp, #16
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	4613      	mov	r3, r2
 80090a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 fc34 	bl	800a918 <pvPortMalloc>
 80090b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00e      	beq.n	80090d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090b8:	205c      	movs	r0, #92	; 0x5c
 80090ba:	f001 fc2d 	bl	800a918 <pvPortMalloc>
 80090be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	631a      	str	r2, [r3, #48]	; 0x30
 80090cc:	e005      	b.n	80090da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090ce:	6978      	ldr	r0, [r7, #20]
 80090d0:	f001 fcee 	bl	800aab0 <vPortFree>
 80090d4:	e001      	b.n	80090da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d017      	beq.n	8009110 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090e8:	88fa      	ldrh	r2, [r7, #6]
 80090ea:	2300      	movs	r3, #0
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f80e 	bl	8009120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009104:	69f8      	ldr	r0, [r7, #28]
 8009106:	f000 f89b 	bl	8009240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800910a:	2301      	movs	r3, #1
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	e002      	b.n	8009116 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009110:	f04f 33ff 	mov.w	r3, #4294967295
 8009114:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009116:	69bb      	ldr	r3, [r7, #24]
	}
 8009118:	4618      	mov	r0, r3
 800911a:	3720      	adds	r7, #32
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	461a      	mov	r2, r3
 8009138:	21a5      	movs	r1, #165	; 0xa5
 800913a:	f001 fe09 	bl	800ad50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009148:	3b01      	subs	r3, #1
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	f023 0307 	bic.w	r3, r3, #7
 8009156:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	617b      	str	r3, [r7, #20]
}
 8009174:	bf00      	nop
 8009176:	e7fe      	b.n	8009176 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d01f      	beq.n	80091be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800917e:	2300      	movs	r3, #0
 8009180:	61fb      	str	r3, [r7, #28]
 8009182:	e012      	b.n	80091aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	7819      	ldrb	r1, [r3, #0]
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	3334      	adds	r3, #52	; 0x34
 8009194:	460a      	mov	r2, r1
 8009196:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	4413      	add	r3, r2
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d006      	beq.n	80091b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	3301      	adds	r3, #1
 80091a8:	61fb      	str	r3, [r7, #28]
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	2b0f      	cmp	r3, #15
 80091ae:	d9e9      	bls.n	8009184 <prvInitialiseNewTask+0x64>
 80091b0:	e000      	b.n	80091b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80091b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091bc:	e003      	b.n	80091c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	2b37      	cmp	r3, #55	; 0x37
 80091ca:	d901      	bls.n	80091d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091cc:	2337      	movs	r3, #55	; 0x37
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	2200      	movs	r2, #0
 80091e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	3304      	adds	r3, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff f978 	bl	80084dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	3318      	adds	r3, #24
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff f973 	bl	80084dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800920a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	2200      	movs	r2, #0
 8009210:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	68f9      	ldr	r1, [r7, #12]
 800921e:	69b8      	ldr	r0, [r7, #24]
 8009220:	f001 f928 	bl	800a474 <pxPortInitialiseStack>
 8009224:	4602      	mov	r2, r0
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009236:	bf00      	nop
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009248:	f001 fa44 	bl	800a6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800924c:	4b2d      	ldr	r3, [pc, #180]	; (8009304 <prvAddNewTaskToReadyList+0xc4>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	4a2c      	ldr	r2, [pc, #176]	; (8009304 <prvAddNewTaskToReadyList+0xc4>)
 8009254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009256:	4b2c      	ldr	r3, [pc, #176]	; (8009308 <prvAddNewTaskToReadyList+0xc8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800925e:	4a2a      	ldr	r2, [pc, #168]	; (8009308 <prvAddNewTaskToReadyList+0xc8>)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009264:	4b27      	ldr	r3, [pc, #156]	; (8009304 <prvAddNewTaskToReadyList+0xc4>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d110      	bne.n	800928e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800926c:	f000 fc16 	bl	8009a9c <prvInitialiseTaskLists>
 8009270:	e00d      	b.n	800928e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009272:	4b26      	ldr	r3, [pc, #152]	; (800930c <prvAddNewTaskToReadyList+0xcc>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d109      	bne.n	800928e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800927a:	4b23      	ldr	r3, [pc, #140]	; (8009308 <prvAddNewTaskToReadyList+0xc8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	429a      	cmp	r2, r3
 8009286:	d802      	bhi.n	800928e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009288:	4a1f      	ldr	r2, [pc, #124]	; (8009308 <prvAddNewTaskToReadyList+0xc8>)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800928e:	4b20      	ldr	r3, [pc, #128]	; (8009310 <prvAddNewTaskToReadyList+0xd0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <prvAddNewTaskToReadyList+0xd0>)
 8009296:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009298:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <prvAddNewTaskToReadyList+0xd0>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a4:	4b1b      	ldr	r3, [pc, #108]	; (8009314 <prvAddNewTaskToReadyList+0xd4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d903      	bls.n	80092b4 <prvAddNewTaskToReadyList+0x74>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	4a18      	ldr	r2, [pc, #96]	; (8009314 <prvAddNewTaskToReadyList+0xd4>)
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4a15      	ldr	r2, [pc, #84]	; (8009318 <prvAddNewTaskToReadyList+0xd8>)
 80092c2:	441a      	add	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4619      	mov	r1, r3
 80092ca:	4610      	mov	r0, r2
 80092cc:	f7ff f913 	bl	80084f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092d0:	f001 fa30 	bl	800a734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092d4:	4b0d      	ldr	r3, [pc, #52]	; (800930c <prvAddNewTaskToReadyList+0xcc>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <prvAddNewTaskToReadyList+0xc8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d207      	bcs.n	80092fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092ea:	4b0c      	ldr	r3, [pc, #48]	; (800931c <prvAddNewTaskToReadyList+0xdc>)
 80092ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20002b84 	.word	0x20002b84
 8009308:	200026b0 	.word	0x200026b0
 800930c:	20002b90 	.word	0x20002b90
 8009310:	20002ba0 	.word	0x20002ba0
 8009314:	20002b8c 	.word	0x20002b8c
 8009318:	200026b4 	.word	0x200026b4
 800931c:	e000ed04 	.word	0xe000ed04

08009320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d017      	beq.n	8009362 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009332:	4b13      	ldr	r3, [pc, #76]	; (8009380 <vTaskDelay+0x60>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <vTaskDelay+0x30>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	60bb      	str	r3, [r7, #8]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009350:	f000 f880 	bl	8009454 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009354:	2100      	movs	r1, #0
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fcea 	bl	8009d30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800935c:	f000 f888 	bl	8009470 <xTaskResumeAll>
 8009360:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d107      	bne.n	8009378 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <vTaskDelay+0x64>)
 800936a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20002bac 	.word	0x20002bac
 8009384:	e000ed04 	.word	0xe000ed04

08009388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	; 0x28
 800938c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009392:	2300      	movs	r3, #0
 8009394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009396:	463a      	mov	r2, r7
 8009398:	1d39      	adds	r1, r7, #4
 800939a:	f107 0308 	add.w	r3, r7, #8
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff f848 	bl	8008434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	9202      	str	r2, [sp, #8]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	2300      	movs	r3, #0
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	460a      	mov	r2, r1
 80093b6:	4921      	ldr	r1, [pc, #132]	; (800943c <vTaskStartScheduler+0xb4>)
 80093b8:	4821      	ldr	r0, [pc, #132]	; (8009440 <vTaskStartScheduler+0xb8>)
 80093ba:	f7ff fe0f 	bl	8008fdc <xTaskCreateStatic>
 80093be:	4603      	mov	r3, r0
 80093c0:	4a20      	ldr	r2, [pc, #128]	; (8009444 <vTaskStartScheduler+0xbc>)
 80093c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093c4:	4b1f      	ldr	r3, [pc, #124]	; (8009444 <vTaskStartScheduler+0xbc>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093cc:	2301      	movs	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	e001      	b.n	80093d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d102      	bne.n	80093e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093dc:	f000 fcfc 	bl	8009dd8 <xTimerCreateTimerTask>
 80093e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d116      	bne.n	8009416 <vTaskStartScheduler+0x8e>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	613b      	str	r3, [r7, #16]
}
 80093fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093fc:	4b12      	ldr	r3, [pc, #72]	; (8009448 <vTaskStartScheduler+0xc0>)
 80093fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009402:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009404:	4b11      	ldr	r3, [pc, #68]	; (800944c <vTaskStartScheduler+0xc4>)
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800940a:	4b11      	ldr	r3, [pc, #68]	; (8009450 <vTaskStartScheduler+0xc8>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009410:	f001 f8be 	bl	800a590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009414:	e00e      	b.n	8009434 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941c:	d10a      	bne.n	8009434 <vTaskStartScheduler+0xac>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	60fb      	str	r3, [r7, #12]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <vTaskStartScheduler+0xaa>
}
 8009434:	bf00      	nop
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	0800ade8 	.word	0x0800ade8
 8009440:	08009a6d 	.word	0x08009a6d
 8009444:	20002ba8 	.word	0x20002ba8
 8009448:	20002ba4 	.word	0x20002ba4
 800944c:	20002b90 	.word	0x20002b90
 8009450:	20002b88 	.word	0x20002b88

08009454 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009458:	4b04      	ldr	r3, [pc, #16]	; (800946c <vTaskSuspendAll+0x18>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	4a03      	ldr	r2, [pc, #12]	; (800946c <vTaskSuspendAll+0x18>)
 8009460:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009462:	bf00      	nop
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	20002bac 	.word	0x20002bac

08009470 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800947e:	4b42      	ldr	r3, [pc, #264]	; (8009588 <xTaskResumeAll+0x118>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <xTaskResumeAll+0x2c>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	603b      	str	r3, [r7, #0]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800949c:	f001 f91a 	bl	800a6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094a0:	4b39      	ldr	r3, [pc, #228]	; (8009588 <xTaskResumeAll+0x118>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	4a38      	ldr	r2, [pc, #224]	; (8009588 <xTaskResumeAll+0x118>)
 80094a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094aa:	4b37      	ldr	r3, [pc, #220]	; (8009588 <xTaskResumeAll+0x118>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d162      	bne.n	8009578 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094b2:	4b36      	ldr	r3, [pc, #216]	; (800958c <xTaskResumeAll+0x11c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d05e      	beq.n	8009578 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094ba:	e02f      	b.n	800951c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094bc:	4b34      	ldr	r3, [pc, #208]	; (8009590 <xTaskResumeAll+0x120>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3318      	adds	r3, #24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff f871 	bl	80085b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff f86c 	bl	80085b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	4b2d      	ldr	r3, [pc, #180]	; (8009594 <xTaskResumeAll+0x124>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d903      	bls.n	80094ec <xTaskResumeAll+0x7c>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	4a2a      	ldr	r2, [pc, #168]	; (8009594 <xTaskResumeAll+0x124>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a27      	ldr	r2, [pc, #156]	; (8009598 <xTaskResumeAll+0x128>)
 80094fa:	441a      	add	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe fff7 	bl	80084f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	4b23      	ldr	r3, [pc, #140]	; (800959c <xTaskResumeAll+0x12c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	429a      	cmp	r2, r3
 8009514:	d302      	bcc.n	800951c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009516:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <xTaskResumeAll+0x130>)
 8009518:	2201      	movs	r2, #1
 800951a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800951c:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <xTaskResumeAll+0x120>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1cb      	bne.n	80094bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800952a:	f000 fb55 	bl	8009bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800952e:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <xTaskResumeAll+0x134>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d010      	beq.n	800955c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800953a:	f000 f847 	bl	80095cc <xTaskIncrementTick>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009544:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <xTaskResumeAll+0x130>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3b01      	subs	r3, #1
 800954e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1f1      	bne.n	800953a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <xTaskResumeAll+0x134>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800955c:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <xTaskResumeAll+0x130>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d009      	beq.n	8009578 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009568:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <xTaskResumeAll+0x138>)
 800956a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009578:	f001 f8dc 	bl	800a734 <vPortExitCritical>

	return xAlreadyYielded;
 800957c:	68bb      	ldr	r3, [r7, #8]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20002bac 	.word	0x20002bac
 800958c:	20002b84 	.word	0x20002b84
 8009590:	20002b44 	.word	0x20002b44
 8009594:	20002b8c 	.word	0x20002b8c
 8009598:	200026b4 	.word	0x200026b4
 800959c:	200026b0 	.word	0x200026b0
 80095a0:	20002b98 	.word	0x20002b98
 80095a4:	20002b94 	.word	0x20002b94
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <xTaskGetTickCount+0x1c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095b8:	687b      	ldr	r3, [r7, #4]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	20002b88 	.word	0x20002b88

080095cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095d6:	4b4f      	ldr	r3, [pc, #316]	; (8009714 <xTaskIncrementTick+0x148>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 808f 	bne.w	80096fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095e0:	4b4d      	ldr	r3, [pc, #308]	; (8009718 <xTaskIncrementTick+0x14c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095e8:	4a4b      	ldr	r2, [pc, #300]	; (8009718 <xTaskIncrementTick+0x14c>)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d120      	bne.n	8009636 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095f4:	4b49      	ldr	r3, [pc, #292]	; (800971c <xTaskIncrementTick+0x150>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00a      	beq.n	8009614 <xTaskIncrementTick+0x48>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	603b      	str	r3, [r7, #0]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <xTaskIncrementTick+0x46>
 8009614:	4b41      	ldr	r3, [pc, #260]	; (800971c <xTaskIncrementTick+0x150>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	4b41      	ldr	r3, [pc, #260]	; (8009720 <xTaskIncrementTick+0x154>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a3f      	ldr	r2, [pc, #252]	; (800971c <xTaskIncrementTick+0x150>)
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	4a3f      	ldr	r2, [pc, #252]	; (8009720 <xTaskIncrementTick+0x154>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	4b3e      	ldr	r3, [pc, #248]	; (8009724 <xTaskIncrementTick+0x158>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3301      	adds	r3, #1
 800962e:	4a3d      	ldr	r2, [pc, #244]	; (8009724 <xTaskIncrementTick+0x158>)
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	f000 fad1 	bl	8009bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009636:	4b3c      	ldr	r3, [pc, #240]	; (8009728 <xTaskIncrementTick+0x15c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	429a      	cmp	r2, r3
 800963e:	d349      	bcc.n	80096d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009640:	4b36      	ldr	r3, [pc, #216]	; (800971c <xTaskIncrementTick+0x150>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d104      	bne.n	8009654 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800964a:	4b37      	ldr	r3, [pc, #220]	; (8009728 <xTaskIncrementTick+0x15c>)
 800964c:	f04f 32ff 	mov.w	r2, #4294967295
 8009650:	601a      	str	r2, [r3, #0]
					break;
 8009652:	e03f      	b.n	80096d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009654:	4b31      	ldr	r3, [pc, #196]	; (800971c <xTaskIncrementTick+0x150>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	429a      	cmp	r2, r3
 800966a:	d203      	bcs.n	8009674 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800966c:	4a2e      	ldr	r2, [pc, #184]	; (8009728 <xTaskIncrementTick+0x15c>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009672:	e02f      	b.n	80096d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	3304      	adds	r3, #4
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe ff99 	bl	80085b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	3318      	adds	r3, #24
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe ff90 	bl	80085b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	4b25      	ldr	r3, [pc, #148]	; (800972c <xTaskIncrementTick+0x160>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d903      	bls.n	80096a4 <xTaskIncrementTick+0xd8>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a22      	ldr	r2, [pc, #136]	; (800972c <xTaskIncrementTick+0x160>)
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4a1f      	ldr	r2, [pc, #124]	; (8009730 <xTaskIncrementTick+0x164>)
 80096b2:	441a      	add	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe ff1b 	bl	80084f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c4:	4b1b      	ldr	r3, [pc, #108]	; (8009734 <xTaskIncrementTick+0x168>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3b8      	bcc.n	8009640 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80096ce:	2301      	movs	r3, #1
 80096d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096d2:	e7b5      	b.n	8009640 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096d4:	4b17      	ldr	r3, [pc, #92]	; (8009734 <xTaskIncrementTick+0x168>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	4915      	ldr	r1, [pc, #84]	; (8009730 <xTaskIncrementTick+0x164>)
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d901      	bls.n	80096f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096f0:	4b11      	ldr	r3, [pc, #68]	; (8009738 <xTaskIncrementTick+0x16c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096f8:	2301      	movs	r3, #1
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e004      	b.n	8009708 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <xTaskIncrementTick+0x170>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a0d      	ldr	r2, [pc, #52]	; (800973c <xTaskIncrementTick+0x170>)
 8009706:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009708:	697b      	ldr	r3, [r7, #20]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20002bac 	.word	0x20002bac
 8009718:	20002b88 	.word	0x20002b88
 800971c:	20002b3c 	.word	0x20002b3c
 8009720:	20002b40 	.word	0x20002b40
 8009724:	20002b9c 	.word	0x20002b9c
 8009728:	20002ba4 	.word	0x20002ba4
 800972c:	20002b8c 	.word	0x20002b8c
 8009730:	200026b4 	.word	0x200026b4
 8009734:	200026b0 	.word	0x200026b0
 8009738:	20002b98 	.word	0x20002b98
 800973c:	20002b94 	.word	0x20002b94

08009740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009746:	4b28      	ldr	r3, [pc, #160]	; (80097e8 <vTaskSwitchContext+0xa8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800974e:	4b27      	ldr	r3, [pc, #156]	; (80097ec <vTaskSwitchContext+0xac>)
 8009750:	2201      	movs	r2, #1
 8009752:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009754:	e041      	b.n	80097da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009756:	4b25      	ldr	r3, [pc, #148]	; (80097ec <vTaskSwitchContext+0xac>)
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975c:	4b24      	ldr	r3, [pc, #144]	; (80097f0 <vTaskSwitchContext+0xb0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e010      	b.n	8009786 <vTaskSwitchContext+0x46>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <vTaskSwitchContext+0x40>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	607b      	str	r3, [r7, #4]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <vTaskSwitchContext+0x3e>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3b01      	subs	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	491b      	ldr	r1, [pc, #108]	; (80097f4 <vTaskSwitchContext+0xb4>)
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0e4      	beq.n	8009764 <vTaskSwitchContext+0x24>
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4a13      	ldr	r2, [pc, #76]	; (80097f4 <vTaskSwitchContext+0xb4>)
 80097a6:	4413      	add	r3, r2
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	3308      	adds	r3, #8
 80097bc:	429a      	cmp	r2, r3
 80097be:	d104      	bne.n	80097ca <vTaskSwitchContext+0x8a>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	605a      	str	r2, [r3, #4]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	4a09      	ldr	r2, [pc, #36]	; (80097f8 <vTaskSwitchContext+0xb8>)
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	4a06      	ldr	r2, [pc, #24]	; (80097f0 <vTaskSwitchContext+0xb0>)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6013      	str	r3, [r2, #0]
}
 80097da:	bf00      	nop
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	20002bac 	.word	0x20002bac
 80097ec:	20002b98 	.word	0x20002b98
 80097f0:	20002b8c 	.word	0x20002b8c
 80097f4:	200026b4 	.word	0x200026b4
 80097f8:	200026b0 	.word	0x200026b0

080097fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	60fb      	str	r3, [r7, #12]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009822:	4b07      	ldr	r3, [pc, #28]	; (8009840 <vTaskPlaceOnEventList+0x44>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3318      	adds	r3, #24
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fe fe87 	bl	800853e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009830:	2101      	movs	r1, #1
 8009832:	6838      	ldr	r0, [r7, #0]
 8009834:	f000 fa7c 	bl	8009d30 <prvAddCurrentTaskToDelayedList>
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200026b0 	.word	0x200026b0

08009844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	617b      	str	r3, [r7, #20]
}
 8009868:	bf00      	nop
 800986a:	e7fe      	b.n	800986a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <vTaskPlaceOnEventListRestricted+0x54>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3318      	adds	r3, #24
 8009872:	4619      	mov	r1, r3
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f7fe fe3e 	bl	80084f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009886:	6879      	ldr	r1, [r7, #4]
 8009888:	68b8      	ldr	r0, [r7, #8]
 800988a:	f000 fa51 	bl	8009d30 <prvAddCurrentTaskToDelayedList>
	}
 800988e:	bf00      	nop
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	200026b0 	.word	0x200026b0

0800989c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	60fb      	str	r3, [r7, #12]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	3318      	adds	r3, #24
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fe6f 	bl	80085b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098d2:	4b1e      	ldr	r3, [pc, #120]	; (800994c <xTaskRemoveFromEventList+0xb0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d11d      	bne.n	8009916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	3304      	adds	r3, #4
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fe66 	bl	80085b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	4b19      	ldr	r3, [pc, #100]	; (8009950 <xTaskRemoveFromEventList+0xb4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d903      	bls.n	80098f8 <xTaskRemoveFromEventList+0x5c>
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	4a16      	ldr	r2, [pc, #88]	; (8009950 <xTaskRemoveFromEventList+0xb4>)
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4a13      	ldr	r2, [pc, #76]	; (8009954 <xTaskRemoveFromEventList+0xb8>)
 8009906:	441a      	add	r2, r3
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	3304      	adds	r3, #4
 800990c:	4619      	mov	r1, r3
 800990e:	4610      	mov	r0, r2
 8009910:	f7fe fdf1 	bl	80084f6 <vListInsertEnd>
 8009914:	e005      	b.n	8009922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3318      	adds	r3, #24
 800991a:	4619      	mov	r1, r3
 800991c:	480e      	ldr	r0, [pc, #56]	; (8009958 <xTaskRemoveFromEventList+0xbc>)
 800991e:	f7fe fdea 	bl	80084f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <xTaskRemoveFromEventList+0xc0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992c:	429a      	cmp	r2, r3
 800992e:	d905      	bls.n	800993c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009934:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <xTaskRemoveFromEventList+0xc4>)
 8009936:	2201      	movs	r2, #1
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	e001      	b.n	8009940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009940:	697b      	ldr	r3, [r7, #20]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20002bac 	.word	0x20002bac
 8009950:	20002b8c 	.word	0x20002b8c
 8009954:	200026b4 	.word	0x200026b4
 8009958:	20002b44 	.word	0x20002b44
 800995c:	200026b0 	.word	0x200026b0
 8009960:	20002b98 	.word	0x20002b98

08009964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <vTaskInternalSetTimeOutState+0x24>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <vTaskInternalSetTimeOutState+0x28>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	605a      	str	r2, [r3, #4]
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	20002b9c 	.word	0x20002b9c
 800998c:	20002b88 	.word	0x20002b88

08009990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	613b      	str	r3, [r7, #16]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10a      	bne.n	80099d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	60fb      	str	r3, [r7, #12]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099d2:	f000 fe7f 	bl	800a6d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099d6:	4b1d      	ldr	r3, [pc, #116]	; (8009a4c <xTaskCheckForTimeOut+0xbc>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d102      	bne.n	80099f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099f0:	2300      	movs	r3, #0
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	e023      	b.n	8009a3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <xTaskCheckForTimeOut+0xc0>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d007      	beq.n	8009a12 <xTaskCheckForTimeOut+0x82>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d302      	bcc.n	8009a12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e015      	b.n	8009a3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d20b      	bcs.n	8009a34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ff9b 	bl	8009964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	e004      	b.n	8009a3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a3e:	f000 fe79 	bl	800a734 <vPortExitCritical>

	return xReturn;
 8009a42:	69fb      	ldr	r3, [r7, #28]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3720      	adds	r7, #32
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20002b88 	.word	0x20002b88
 8009a50:	20002b9c 	.word	0x20002b9c

08009a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a58:	4b03      	ldr	r3, [pc, #12]	; (8009a68 <vTaskMissedYield+0x14>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	20002b98 	.word	0x20002b98

08009a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a74:	f000 f852 	bl	8009b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a78:	4b06      	ldr	r3, [pc, #24]	; (8009a94 <prvIdleTask+0x28>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d9f9      	bls.n	8009a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a80:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <prvIdleTask+0x2c>)
 8009a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a90:	e7f0      	b.n	8009a74 <prvIdleTask+0x8>
 8009a92:	bf00      	nop
 8009a94:	200026b4 	.word	0x200026b4
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	e00c      	b.n	8009ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4a12      	ldr	r2, [pc, #72]	; (8009afc <prvInitialiseTaskLists+0x60>)
 8009ab4:	4413      	add	r3, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fcf0 	bl	800849c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	607b      	str	r3, [r7, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b37      	cmp	r3, #55	; 0x37
 8009ac6:	d9ef      	bls.n	8009aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ac8:	480d      	ldr	r0, [pc, #52]	; (8009b00 <prvInitialiseTaskLists+0x64>)
 8009aca:	f7fe fce7 	bl	800849c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ace:	480d      	ldr	r0, [pc, #52]	; (8009b04 <prvInitialiseTaskLists+0x68>)
 8009ad0:	f7fe fce4 	bl	800849c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ad4:	480c      	ldr	r0, [pc, #48]	; (8009b08 <prvInitialiseTaskLists+0x6c>)
 8009ad6:	f7fe fce1 	bl	800849c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ada:	480c      	ldr	r0, [pc, #48]	; (8009b0c <prvInitialiseTaskLists+0x70>)
 8009adc:	f7fe fcde 	bl	800849c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ae0:	480b      	ldr	r0, [pc, #44]	; (8009b10 <prvInitialiseTaskLists+0x74>)
 8009ae2:	f7fe fcdb 	bl	800849c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <prvInitialiseTaskLists+0x78>)
 8009ae8:	4a05      	ldr	r2, [pc, #20]	; (8009b00 <prvInitialiseTaskLists+0x64>)
 8009aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <prvInitialiseTaskLists+0x7c>)
 8009aee:	4a05      	ldr	r2, [pc, #20]	; (8009b04 <prvInitialiseTaskLists+0x68>)
 8009af0:	601a      	str	r2, [r3, #0]
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200026b4 	.word	0x200026b4
 8009b00:	20002b14 	.word	0x20002b14
 8009b04:	20002b28 	.word	0x20002b28
 8009b08:	20002b44 	.word	0x20002b44
 8009b0c:	20002b58 	.word	0x20002b58
 8009b10:	20002b70 	.word	0x20002b70
 8009b14:	20002b3c 	.word	0x20002b3c
 8009b18:	20002b40 	.word	0x20002b40

08009b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b22:	e019      	b.n	8009b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b24:	f000 fdd6 	bl	800a6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b28:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <prvCheckTasksWaitingTermination+0x50>)
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe fd3b 	bl	80085b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	; (8009b70 <prvCheckTasksWaitingTermination+0x54>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	4a0b      	ldr	r2, [pc, #44]	; (8009b70 <prvCheckTasksWaitingTermination+0x54>)
 8009b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b44:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <prvCheckTasksWaitingTermination+0x58>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	4a0a      	ldr	r2, [pc, #40]	; (8009b74 <prvCheckTasksWaitingTermination+0x58>)
 8009b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b4e:	f000 fdf1 	bl	800a734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f810 	bl	8009b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b58:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <prvCheckTasksWaitingTermination+0x58>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e1      	bne.n	8009b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20002b58 	.word	0x20002b58
 8009b70:	20002b84 	.word	0x20002b84
 8009b74:	20002b6c 	.word	0x20002b6c

08009b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d108      	bne.n	8009b9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 ff8e 	bl	800aab0 <vPortFree>
				vPortFree( pxTCB );
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 ff8b 	bl	800aab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b9a:	e018      	b.n	8009bce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d103      	bne.n	8009bae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 ff82 	bl	800aab0 <vPortFree>
	}
 8009bac:	e00f      	b.n	8009bce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d00a      	beq.n	8009bce <prvDeleteTCB+0x56>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	60fb      	str	r3, [r7, #12]
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <prvDeleteTCB+0x54>
	}
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bde:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <prvResetNextTaskUnblockTime+0x38>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009be8:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <prvResetNextTaskUnblockTime+0x3c>)
 8009bea:	f04f 32ff 	mov.w	r2, #4294967295
 8009bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bf0:	e008      	b.n	8009c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf2:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <prvResetNextTaskUnblockTime+0x38>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a04      	ldr	r2, [pc, #16]	; (8009c14 <prvResetNextTaskUnblockTime+0x3c>)
 8009c02:	6013      	str	r3, [r2, #0]
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	20002b3c 	.word	0x20002b3c
 8009c14:	20002ba4 	.word	0x20002ba4

08009c18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <xTaskGetSchedulerState+0x34>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d102      	bne.n	8009c2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c26:	2301      	movs	r3, #1
 8009c28:	607b      	str	r3, [r7, #4]
 8009c2a:	e008      	b.n	8009c3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c2c:	4b08      	ldr	r3, [pc, #32]	; (8009c50 <xTaskGetSchedulerState+0x38>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d102      	bne.n	8009c3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c34:	2302      	movs	r3, #2
 8009c36:	607b      	str	r3, [r7, #4]
 8009c38:	e001      	b.n	8009c3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c3e:	687b      	ldr	r3, [r7, #4]
	}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	20002b90 	.word	0x20002b90
 8009c50:	20002bac 	.word	0x20002bac

08009c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d056      	beq.n	8009d18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c6a:	4b2e      	ldr	r3, [pc, #184]	; (8009d24 <xTaskPriorityDisinherit+0xd0>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d00a      	beq.n	8009c8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60fb      	str	r3, [r7, #12]
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60bb      	str	r3, [r7, #8]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cac:	1e5a      	subs	r2, r3, #1
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d02c      	beq.n	8009d18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d128      	bne.n	8009d18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fc70 	bl	80085b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <xTaskPriorityDisinherit+0xd4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d903      	bls.n	8009cf8 <xTaskPriorityDisinherit+0xa4>
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	4a0c      	ldr	r2, [pc, #48]	; (8009d28 <xTaskPriorityDisinherit+0xd4>)
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <xTaskPriorityDisinherit+0xd8>)
 8009d06:	441a      	add	r2, r3
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7fe fbf1 	bl	80084f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d14:	2301      	movs	r3, #1
 8009d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d18:	697b      	ldr	r3, [r7, #20]
	}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200026b0 	.word	0x200026b0
 8009d28:	20002b8c 	.word	0x20002b8c
 8009d2c:	200026b4 	.word	0x200026b4

08009d30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d3a:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d40:	4b20      	ldr	r3, [pc, #128]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fc32 	bl	80085b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d52:	d10a      	bne.n	8009d6a <prvAddCurrentTaskToDelayedList+0x3a>
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d5a:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4619      	mov	r1, r3
 8009d62:	4819      	ldr	r0, [pc, #100]	; (8009dc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d64:	f7fe fbc7 	bl	80084f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d68:	e026      	b.n	8009db8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4413      	add	r3, r2
 8009d70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d72:	4b14      	ldr	r3, [pc, #80]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d209      	bcs.n	8009d96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d82:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7fe fbd5 	bl	800853e <vListInsert>
}
 8009d94:	e010      	b.n	8009db8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d96:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f7fe fbcb 	bl	800853e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009da8:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d202      	bcs.n	8009db8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009db2:	4a08      	ldr	r2, [pc, #32]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	6013      	str	r3, [r2, #0]
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20002b88 	.word	0x20002b88
 8009dc4:	200026b0 	.word	0x200026b0
 8009dc8:	20002b70 	.word	0x20002b70
 8009dcc:	20002b40 	.word	0x20002b40
 8009dd0:	20002b3c 	.word	0x20002b3c
 8009dd4:	20002ba4 	.word	0x20002ba4

08009dd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08a      	sub	sp, #40	; 0x28
 8009ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009de2:	f000 fb07 	bl	800a3f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009de6:	4b1c      	ldr	r3, [pc, #112]	; (8009e58 <xTimerCreateTimerTask+0x80>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d021      	beq.n	8009e32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009df6:	1d3a      	adds	r2, r7, #4
 8009df8:	f107 0108 	add.w	r1, r7, #8
 8009dfc:	f107 030c 	add.w	r3, r7, #12
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fb31 	bl	8008468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	9202      	str	r2, [sp, #8]
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	2302      	movs	r3, #2
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	2300      	movs	r3, #0
 8009e16:	460a      	mov	r2, r1
 8009e18:	4910      	ldr	r1, [pc, #64]	; (8009e5c <xTimerCreateTimerTask+0x84>)
 8009e1a:	4811      	ldr	r0, [pc, #68]	; (8009e60 <xTimerCreateTimerTask+0x88>)
 8009e1c:	f7ff f8de 	bl	8008fdc <xTaskCreateStatic>
 8009e20:	4603      	mov	r3, r0
 8009e22:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <xTimerCreateTimerTask+0x8c>)
 8009e24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e26:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <xTimerCreateTimerTask+0x8c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	613b      	str	r3, [r7, #16]
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e4e:	697b      	ldr	r3, [r7, #20]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3718      	adds	r7, #24
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20002be0 	.word	0x20002be0
 8009e5c:	0800adf0 	.word	0x0800adf0
 8009e60:	08009f9d 	.word	0x08009f9d
 8009e64:	20002be4 	.word	0x20002be4

08009e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08a      	sub	sp, #40	; 0x28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10a      	bne.n	8009e96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	623b      	str	r3, [r7, #32]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e96:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d02a      	beq.n	8009ef4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	dc18      	bgt.n	8009ee2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eb0:	f7ff feb2 	bl	8009c18 <xTaskGetSchedulerState>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d109      	bne.n	8009ece <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009eba:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009ebc:	6818      	ldr	r0, [r3, #0]
 8009ebe:	f107 0110 	add.w	r1, r7, #16
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec6:	f7fe fca1 	bl	800880c <xQueueGenericSend>
 8009eca:	6278      	str	r0, [r7, #36]	; 0x24
 8009ecc:	e012      	b.n	8009ef4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ece:	4b0c      	ldr	r3, [pc, #48]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	f107 0110 	add.w	r1, r7, #16
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f7fe fc97 	bl	800880c <xQueueGenericSend>
 8009ede:	6278      	str	r0, [r7, #36]	; 0x24
 8009ee0:	e008      	b.n	8009ef4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ee2:	4b07      	ldr	r3, [pc, #28]	; (8009f00 <xTimerGenericCommand+0x98>)
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	f107 0110 	add.w	r1, r7, #16
 8009eea:	2300      	movs	r3, #0
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	f7fe fd8b 	bl	8008a08 <xQueueGenericSendFromISR>
 8009ef2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3728      	adds	r7, #40	; 0x28
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20002be0 	.word	0x20002be0

08009f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0e:	4b22      	ldr	r3, [pc, #136]	; (8009f98 <prvProcessExpiredTimer+0x94>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fb47 	bl	80085b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d022      	beq.n	8009f76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	18d1      	adds	r1, r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	6978      	ldr	r0, [r7, #20]
 8009f3e:	f000 f8d1 	bl	800a0e4 <prvInsertTimerInActiveList>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01f      	beq.n	8009f88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	2100      	movs	r1, #0
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff ff88 	bl	8009e68 <xTimerGenericCommand>
 8009f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d113      	bne.n	8009f88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	60fb      	str	r3, [r7, #12]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7c:	f023 0301 	bic.w	r3, r3, #1
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	6978      	ldr	r0, [r7, #20]
 8009f8e:	4798      	blx	r3
}
 8009f90:	bf00      	nop
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20002bd8 	.word	0x20002bd8

08009f9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fa4:	f107 0308 	add.w	r3, r7, #8
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 f857 	bl	800a05c <prvGetNextExpireTime>
 8009fae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f803 	bl	8009fc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fba:	f000 f8d5 	bl	800a168 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fbe:	e7f1      	b.n	8009fa4 <prvTimerTask+0x8>

08009fc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fca:	f7ff fa43 	bl	8009454 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fce:	f107 0308 	add.w	r3, r7, #8
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 f866 	bl	800a0a4 <prvSampleTimeNow>
 8009fd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d130      	bne.n	800a042 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10a      	bne.n	8009ffc <prvProcessTimerOrBlockTask+0x3c>
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d806      	bhi.n	8009ffc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009fee:	f7ff fa3f 	bl	8009470 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ff2:	68f9      	ldr	r1, [r7, #12]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff ff85 	bl	8009f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ffa:	e024      	b.n	800a046 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d008      	beq.n	800a014 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a002:	4b13      	ldr	r3, [pc, #76]	; (800a050 <prvProcessTimerOrBlockTask+0x90>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <prvProcessTimerOrBlockTask+0x50>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <prvProcessTimerOrBlockTask+0x52>
 800a010:	2300      	movs	r3, #0
 800a012:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a014:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <prvProcessTimerOrBlockTask+0x94>)
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	4619      	mov	r1, r3
 800a022:	f7fe ffa7 	bl	8008f74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a026:	f7ff fa23 	bl	8009470 <xTaskResumeAll>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a030:	4b09      	ldr	r3, [pc, #36]	; (800a058 <prvProcessTimerOrBlockTask+0x98>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
}
 800a040:	e001      	b.n	800a046 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a042:	f7ff fa15 	bl	8009470 <xTaskResumeAll>
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20002bdc 	.word	0x20002bdc
 800a054:	20002be0 	.word	0x20002be0
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <prvGetNextExpireTime+0x44>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <prvGetNextExpireTime+0x16>
 800a06e:	2201      	movs	r2, #1
 800a070:	e000      	b.n	800a074 <prvGetNextExpireTime+0x18>
 800a072:	2200      	movs	r2, #0
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d105      	bne.n	800a08c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <prvGetNextExpireTime+0x44>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	e001      	b.n	800a090 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a08c:	2300      	movs	r3, #0
 800a08e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a090:	68fb      	ldr	r3, [r7, #12]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	20002bd8 	.word	0x20002bd8

0800a0a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0ac:	f7ff fa7e 	bl	80095ac <xTaskGetTickCount>
 800a0b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <prvSampleTimeNow+0x3c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d205      	bcs.n	800a0c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0bc:	f000 f936 	bl	800a32c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	e002      	b.n	800a0ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0ce:	4a04      	ldr	r2, [pc, #16]	; (800a0e0 <prvSampleTimeNow+0x3c>)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20002be8 	.word	0x20002be8

0800a0e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d812      	bhi.n	800a130 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	429a      	cmp	r2, r3
 800a116:	d302      	bcc.n	800a11e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	e01b      	b.n	800a156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a11e:	4b10      	ldr	r3, [pc, #64]	; (800a160 <prvInsertTimerInActiveList+0x7c>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3304      	adds	r3, #4
 800a126:	4619      	mov	r1, r3
 800a128:	4610      	mov	r0, r2
 800a12a:	f7fe fa08 	bl	800853e <vListInsert>
 800a12e:	e012      	b.n	800a156 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	d206      	bcs.n	800a146 <prvInsertTimerInActiveList+0x62>
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d302      	bcc.n	800a146 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a140:	2301      	movs	r3, #1
 800a142:	617b      	str	r3, [r7, #20]
 800a144:	e007      	b.n	800a156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <prvInsertTimerInActiveList+0x80>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3304      	adds	r3, #4
 800a14e:	4619      	mov	r1, r3
 800a150:	4610      	mov	r0, r2
 800a152:	f7fe f9f4 	bl	800853e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a156:	697b      	ldr	r3, [r7, #20]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20002bdc 	.word	0x20002bdc
 800a164:	20002bd8 	.word	0x20002bd8

0800a168 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08e      	sub	sp, #56	; 0x38
 800a16c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a16e:	e0ca      	b.n	800a306 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	da18      	bge.n	800a1a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a176:	1d3b      	adds	r3, r7, #4
 800a178:	3304      	adds	r3, #4
 800a17a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	61fb      	str	r3, [r7, #28]
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19e:	6850      	ldr	r0, [r2, #4]
 800a1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a2:	6892      	ldr	r2, [r2, #8]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f2c0 80aa 	blt.w	800a304 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d004      	beq.n	800a1c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	3304      	adds	r3, #4
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe f9f5 	bl	80085b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff ff6b 	bl	800a0a4 <prvSampleTimeNow>
 800a1ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	f200 8097 	bhi.w	800a306 <prvProcessReceivedCommands+0x19e>
 800a1d8:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <prvProcessReceivedCommands+0x78>)
 800a1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1de:	bf00      	nop
 800a1e0:	0800a209 	.word	0x0800a209
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a209 	.word	0x0800a209
 800a1ec:	0800a27d 	.word	0x0800a27d
 800a1f0:	0800a291 	.word	0x0800a291
 800a1f4:	0800a2db 	.word	0x0800a2db
 800a1f8:	0800a209 	.word	0x0800a209
 800a1fc:	0800a209 	.word	0x0800a209
 800a200:	0800a27d 	.word	0x0800a27d
 800a204:	0800a291 	.word	0x0800a291
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a20e:	f043 0301 	orr.w	r3, r3, #1
 800a212:	b2da      	uxtb	r2, r3
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	18d1      	adds	r1, r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a228:	f7ff ff5c 	bl	800a0e4 <prvInsertTimerInActiveList>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d069      	beq.n	800a306 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a238:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d05e      	beq.n	800a306 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	441a      	add	r2, r3
 800a250:	2300      	movs	r3, #0
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	2300      	movs	r3, #0
 800a256:	2100      	movs	r1, #0
 800a258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a25a:	f7ff fe05 	bl	8009e68 <xTimerGenericCommand>
 800a25e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d14f      	bne.n	800a306 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	61bb      	str	r3, [r7, #24]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a282:	f023 0301 	bic.w	r3, r3, #1
 800a286:	b2da      	uxtb	r2, r3
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a28e:	e03a      	b.n	800a306 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a296:	f043 0301 	orr.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10a      	bne.n	800a2c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	617b      	str	r3, [r7, #20]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	699a      	ldr	r2, [r3, #24]
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	18d1      	adds	r1, r2, r3
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d4:	f7ff ff06 	bl	800a0e4 <prvInsertTimerInActiveList>
					break;
 800a2d8:	e015      	b.n	800a306 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d103      	bne.n	800a2f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ea:	f000 fbe1 	bl	800aab0 <vPortFree>
 800a2ee:	e00a      	b.n	800a306 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2f6:	f023 0301 	bic.w	r3, r3, #1
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a302:	e000      	b.n	800a306 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a304:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a306:	4b08      	ldr	r3, [pc, #32]	; (800a328 <prvProcessReceivedCommands+0x1c0>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	1d39      	adds	r1, r7, #4
 800a30c:	2200      	movs	r2, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fc16 	bl	8008b40 <xQueueReceive>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	f47f af2a 	bne.w	800a170 <prvProcessReceivedCommands+0x8>
	}
}
 800a31c:	bf00      	nop
 800a31e:	bf00      	nop
 800a320:	3730      	adds	r7, #48	; 0x30
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20002be0 	.word	0x20002be0

0800a32c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a332:	e048      	b.n	800a3c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a334:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <prvSwitchTimerLists+0xc0>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a33e:	4b2b      	ldr	r3, [pc, #172]	; (800a3ec <prvSwitchTimerLists+0xc0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3304      	adds	r3, #4
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe f92f 	bl	80085b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d02e      	beq.n	800a3c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4413      	add	r3, r2
 800a370:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	429a      	cmp	r2, r3
 800a378:	d90e      	bls.n	800a398 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a386:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <prvSwitchTimerLists+0xc0>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4619      	mov	r1, r3
 800a390:	4610      	mov	r0, r2
 800a392:	f7fe f8d4 	bl	800853e <vListInsert>
 800a396:	e016      	b.n	800a3c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a398:	2300      	movs	r3, #0
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	2300      	movs	r3, #0
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff fd60 	bl	8009e68 <xTimerGenericCommand>
 800a3a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	603b      	str	r3, [r7, #0]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3c6:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <prvSwitchTimerLists+0xc0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1b1      	bne.n	800a334 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3d0:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <prvSwitchTimerLists+0xc0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3d6:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <prvSwitchTimerLists+0xc4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a04      	ldr	r2, [pc, #16]	; (800a3ec <prvSwitchTimerLists+0xc0>)
 800a3dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3de:	4a04      	ldr	r2, [pc, #16]	; (800a3f0 <prvSwitchTimerLists+0xc4>)
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6013      	str	r3, [r2, #0]
}
 800a3e4:	bf00      	nop
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20002bd8 	.word	0x20002bd8
 800a3f0:	20002bdc 	.word	0x20002bdc

0800a3f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3fa:	f000 f96b 	bl	800a6d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3fe:	4b15      	ldr	r3, [pc, #84]	; (800a454 <prvCheckForValidListAndQueue+0x60>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d120      	bne.n	800a448 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a406:	4814      	ldr	r0, [pc, #80]	; (800a458 <prvCheckForValidListAndQueue+0x64>)
 800a408:	f7fe f848 	bl	800849c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a40c:	4813      	ldr	r0, [pc, #76]	; (800a45c <prvCheckForValidListAndQueue+0x68>)
 800a40e:	f7fe f845 	bl	800849c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a412:	4b13      	ldr	r3, [pc, #76]	; (800a460 <prvCheckForValidListAndQueue+0x6c>)
 800a414:	4a10      	ldr	r2, [pc, #64]	; (800a458 <prvCheckForValidListAndQueue+0x64>)
 800a416:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <prvCheckForValidListAndQueue+0x70>)
 800a41a:	4a10      	ldr	r2, [pc, #64]	; (800a45c <prvCheckForValidListAndQueue+0x68>)
 800a41c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a41e:	2300      	movs	r3, #0
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <prvCheckForValidListAndQueue+0x74>)
 800a424:	4a11      	ldr	r2, [pc, #68]	; (800a46c <prvCheckForValidListAndQueue+0x78>)
 800a426:	2110      	movs	r1, #16
 800a428:	200a      	movs	r0, #10
 800a42a:	f7fe f953 	bl	80086d4 <xQueueGenericCreateStatic>
 800a42e:	4603      	mov	r3, r0
 800a430:	4a08      	ldr	r2, [pc, #32]	; (800a454 <prvCheckForValidListAndQueue+0x60>)
 800a432:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a434:	4b07      	ldr	r3, [pc, #28]	; (800a454 <prvCheckForValidListAndQueue+0x60>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d005      	beq.n	800a448 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a43c:	4b05      	ldr	r3, [pc, #20]	; (800a454 <prvCheckForValidListAndQueue+0x60>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	490b      	ldr	r1, [pc, #44]	; (800a470 <prvCheckForValidListAndQueue+0x7c>)
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fd6c 	bl	8008f20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a448:	f000 f974 	bl	800a734 <vPortExitCritical>
}
 800a44c:	bf00      	nop
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20002be0 	.word	0x20002be0
 800a458:	20002bb0 	.word	0x20002bb0
 800a45c:	20002bc4 	.word	0x20002bc4
 800a460:	20002bd8 	.word	0x20002bd8
 800a464:	20002bdc 	.word	0x20002bdc
 800a468:	20002c8c 	.word	0x20002c8c
 800a46c:	20002bec 	.word	0x20002bec
 800a470:	0800adf8 	.word	0x0800adf8

0800a474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3b04      	subs	r3, #4
 800a484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3b04      	subs	r3, #4
 800a492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f023 0201 	bic.w	r2, r3, #1
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3b04      	subs	r3, #4
 800a4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4a4:	4a0c      	ldr	r2, [pc, #48]	; (800a4d8 <pxPortInitialiseStack+0x64>)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3b14      	subs	r3, #20
 800a4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3b04      	subs	r3, #4
 800a4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f06f 0202 	mvn.w	r2, #2
 800a4c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3b20      	subs	r3, #32
 800a4c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	0800a4dd 	.word	0x0800a4dd

0800a4dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4e6:	4b12      	ldr	r3, [pc, #72]	; (800a530 <prvTaskExitError+0x54>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	d00a      	beq.n	800a506 <prvTaskExitError+0x2a>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	60fb      	str	r3, [r7, #12]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <prvTaskExitError+0x28>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60bb      	str	r3, [r7, #8]
}
 800a518:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a51a:	bf00      	nop
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0fc      	beq.n	800a51c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a522:	bf00      	nop
 800a524:	bf00      	nop
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	2000002c 	.word	0x2000002c
	...

0800a540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <pxCurrentTCBConst2>)
 800a542:	6819      	ldr	r1, [r3, #0]
 800a544:	6808      	ldr	r0, [r1, #0]
 800a546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54a:	f380 8809 	msr	PSP, r0
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f04f 0000 	mov.w	r0, #0
 800a556:	f380 8811 	msr	BASEPRI, r0
 800a55a:	4770      	bx	lr
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst2>:
 800a560:	200026b0 	.word	0x200026b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a568:	4808      	ldr	r0, [pc, #32]	; (800a58c <prvPortStartFirstTask+0x24>)
 800a56a:	6800      	ldr	r0, [r0, #0]
 800a56c:	6800      	ldr	r0, [r0, #0]
 800a56e:	f380 8808 	msr	MSP, r0
 800a572:	f04f 0000 	mov.w	r0, #0
 800a576:	f380 8814 	msr	CONTROL, r0
 800a57a:	b662      	cpsie	i
 800a57c:	b661      	cpsie	f
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	df00      	svc	0
 800a588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a58a:	bf00      	nop
 800a58c:	e000ed08 	.word	0xe000ed08

0800a590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a596:	4b46      	ldr	r3, [pc, #280]	; (800a6b0 <xPortStartScheduler+0x120>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a46      	ldr	r2, [pc, #280]	; (800a6b4 <xPortStartScheduler+0x124>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d10a      	bne.n	800a5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	613b      	str	r3, [r7, #16]
}
 800a5b2:	bf00      	nop
 800a5b4:	e7fe      	b.n	800a5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5b6:	4b3e      	ldr	r3, [pc, #248]	; (800a6b0 <xPortStartScheduler+0x120>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a3f      	ldr	r2, [pc, #252]	; (800a6b8 <xPortStartScheduler+0x128>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d10a      	bne.n	800a5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	60fb      	str	r3, [r7, #12]
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5d6:	4b39      	ldr	r3, [pc, #228]	; (800a6bc <xPortStartScheduler+0x12c>)
 800a5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	22ff      	movs	r2, #255	; 0xff
 800a5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	4b31      	ldr	r3, [pc, #196]	; (800a6c0 <xPortStartScheduler+0x130>)
 800a5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5fe:	4b31      	ldr	r3, [pc, #196]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a600:	2207      	movs	r2, #7
 800a602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a604:	e009      	b.n	800a61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a606:	4b2f      	ldr	r3, [pc, #188]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	4a2d      	ldr	r2, [pc, #180]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	b2db      	uxtb	r3, r3
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	b2db      	uxtb	r3, r3
 800a618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a622:	2b80      	cmp	r3, #128	; 0x80
 800a624:	d0ef      	beq.n	800a606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a626:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f1c3 0307 	rsb	r3, r3, #7
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d00a      	beq.n	800a648 <xPortStartScheduler+0xb8>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60bb      	str	r3, [r7, #8]
}
 800a644:	bf00      	nop
 800a646:	e7fe      	b.n	800a646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a648:	4b1e      	ldr	r3, [pc, #120]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	021b      	lsls	r3, r3, #8
 800a64e:	4a1d      	ldr	r2, [pc, #116]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a652:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a65a:	4a1a      	ldr	r2, [pc, #104]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	b2da      	uxtb	r2, r3
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a666:	4b18      	ldr	r3, [pc, #96]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a17      	ldr	r2, [pc, #92]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a14      	ldr	r2, [pc, #80]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a67e:	f000 f8dd 	bl	800a83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a682:	4b12      	ldr	r3, [pc, #72]	; (800a6cc <xPortStartScheduler+0x13c>)
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a688:	f000 f8fc 	bl	800a884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a68c:	4b10      	ldr	r3, [pc, #64]	; (800a6d0 <xPortStartScheduler+0x140>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a0f      	ldr	r2, [pc, #60]	; (800a6d0 <xPortStartScheduler+0x140>)
 800a692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a698:	f7ff ff66 	bl	800a568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a69c:	f7ff f850 	bl	8009740 <vTaskSwitchContext>
	prvTaskExitError();
 800a6a0:	f7ff ff1c 	bl	800a4dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	e000ed00 	.word	0xe000ed00
 800a6b4:	410fc271 	.word	0x410fc271
 800a6b8:	410fc270 	.word	0x410fc270
 800a6bc:	e000e400 	.word	0xe000e400
 800a6c0:	20002cdc 	.word	0x20002cdc
 800a6c4:	20002ce0 	.word	0x20002ce0
 800a6c8:	e000ed20 	.word	0xe000ed20
 800a6cc:	2000002c 	.word	0x2000002c
 800a6d0:	e000ef34 	.word	0xe000ef34

0800a6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	607b      	str	r3, [r7, #4]
}
 800a6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <vPortEnterCritical+0x58>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	4a0d      	ldr	r2, [pc, #52]	; (800a72c <vPortEnterCritical+0x58>)
 800a6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6f8:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <vPortEnterCritical+0x58>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d10f      	bne.n	800a720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <vPortEnterCritical+0x5c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <vPortEnterCritical+0x4c>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	603b      	str	r3, [r7, #0]
}
 800a71c:	bf00      	nop
 800a71e:	e7fe      	b.n	800a71e <vPortEnterCritical+0x4a>
	}
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	2000002c 	.word	0x2000002c
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <vPortExitCritical+0x50>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <vPortExitCritical+0x24>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	607b      	str	r3, [r7, #4]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <vPortExitCritical+0x50>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4a09      	ldr	r2, [pc, #36]	; (800a784 <vPortExitCritical+0x50>)
 800a760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <vPortExitCritical+0x50>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d105      	bne.n	800a776 <vPortExitCritical+0x42>
 800a76a:	2300      	movs	r3, #0
 800a76c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	f383 8811 	msr	BASEPRI, r3
}
 800a774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	2000002c 	.word	0x2000002c
	...

0800a790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a790:	f3ef 8009 	mrs	r0, PSP
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <pxCurrentTCBConst>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	f01e 0f10 	tst.w	lr, #16
 800a7a0:	bf08      	it	eq
 800a7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	6010      	str	r0, [r2, #0]
 800a7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7b4:	f380 8811 	msr	BASEPRI, r0
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f7fe ffbe 	bl	8009740 <vTaskSwitchContext>
 800a7c4:	f04f 0000 	mov.w	r0, #0
 800a7c8:	f380 8811 	msr	BASEPRI, r0
 800a7cc:	bc09      	pop	{r0, r3}
 800a7ce:	6819      	ldr	r1, [r3, #0]
 800a7d0:	6808      	ldr	r0, [r1, #0]
 800a7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d6:	f01e 0f10 	tst.w	lr, #16
 800a7da:	bf08      	it	eq
 800a7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7e0:	f380 8809 	msr	PSP, r0
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	f3af 8000 	nop.w

0800a7f0 <pxCurrentTCBConst>:
 800a7f0:	200026b0 	.word	0x200026b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop

0800a7f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	607b      	str	r3, [r7, #4]
}
 800a810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a812:	f7fe fedb 	bl	80095cc <xTaskIncrementTick>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <xPortSysTickHandler+0x40>)
 800a81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	2300      	movs	r3, #0
 800a826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f383 8811 	msr	BASEPRI, r3
}
 800a82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	e000ed04 	.word	0xe000ed04

0800a83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a840:	4b0b      	ldr	r3, [pc, #44]	; (800a870 <vPortSetupTimerInterrupt+0x34>)
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a846:	4b0b      	ldr	r3, [pc, #44]	; (800a874 <vPortSetupTimerInterrupt+0x38>)
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a84c:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <vPortSetupTimerInterrupt+0x3c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <vPortSetupTimerInterrupt+0x40>)
 800a852:	fba2 2303 	umull	r2, r3, r2, r3
 800a856:	099b      	lsrs	r3, r3, #6
 800a858:	4a09      	ldr	r2, [pc, #36]	; (800a880 <vPortSetupTimerInterrupt+0x44>)
 800a85a:	3b01      	subs	r3, #1
 800a85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a85e:	4b04      	ldr	r3, [pc, #16]	; (800a870 <vPortSetupTimerInterrupt+0x34>)
 800a860:	2207      	movs	r2, #7
 800a862:	601a      	str	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	e000e010 	.word	0xe000e010
 800a874:	e000e018 	.word	0xe000e018
 800a878:	20000000 	.word	0x20000000
 800a87c:	10624dd3 	.word	0x10624dd3
 800a880:	e000e014 	.word	0xe000e014

0800a884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a894 <vPortEnableVFP+0x10>
 800a888:	6801      	ldr	r1, [r0, #0]
 800a88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a88e:	6001      	str	r1, [r0, #0]
 800a890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a892:	bf00      	nop
 800a894:	e000ed88 	.word	0xe000ed88

0800a898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a89e:	f3ef 8305 	mrs	r3, IPSR
 800a8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b0f      	cmp	r3, #15
 800a8a8:	d914      	bls.n	800a8d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8aa:	4a17      	ldr	r2, [pc, #92]	; (800a908 <vPortValidateInterruptPriority+0x70>)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8b4:	4b15      	ldr	r3, [pc, #84]	; (800a90c <vPortValidateInterruptPriority+0x74>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	7afa      	ldrb	r2, [r7, #11]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d20a      	bcs.n	800a8d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	607b      	str	r3, [r7, #4]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8d4:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <vPortValidateInterruptPriority+0x78>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8dc:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <vPortValidateInterruptPriority+0x7c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d90a      	bls.n	800a8fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	603b      	str	r3, [r7, #0]
}
 800a8f6:	bf00      	nop
 800a8f8:	e7fe      	b.n	800a8f8 <vPortValidateInterruptPriority+0x60>
	}
 800a8fa:	bf00      	nop
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	e000e3f0 	.word	0xe000e3f0
 800a90c:	20002cdc 	.word	0x20002cdc
 800a910:	e000ed0c 	.word	0xe000ed0c
 800a914:	20002ce0 	.word	0x20002ce0

0800a918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a920:	2300      	movs	r3, #0
 800a922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a924:	f7fe fd96 	bl	8009454 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a928:	4b5b      	ldr	r3, [pc, #364]	; (800aa98 <pvPortMalloc+0x180>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a930:	f000 f920 	bl	800ab74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a934:	4b59      	ldr	r3, [pc, #356]	; (800aa9c <pvPortMalloc+0x184>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4013      	ands	r3, r2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f040 8093 	bne.w	800aa68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01d      	beq.n	800a984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a948:	2208      	movs	r2, #8
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4413      	add	r3, r2
 800a94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	2b00      	cmp	r3, #0
 800a958:	d014      	beq.n	800a984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f023 0307 	bic.w	r3, r3, #7
 800a960:	3308      	adds	r3, #8
 800a962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <pvPortMalloc+0x6c>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	617b      	str	r3, [r7, #20]
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d06e      	beq.n	800aa68 <pvPortMalloc+0x150>
 800a98a:	4b45      	ldr	r3, [pc, #276]	; (800aaa0 <pvPortMalloc+0x188>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	d869      	bhi.n	800aa68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a994:	4b43      	ldr	r3, [pc, #268]	; (800aaa4 <pvPortMalloc+0x18c>)
 800a996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a998:	4b42      	ldr	r3, [pc, #264]	; (800aaa4 <pvPortMalloc+0x18c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a99e:	e004      	b.n	800a9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d903      	bls.n	800a9bc <pvPortMalloc+0xa4>
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1f1      	bne.n	800a9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9bc:	4b36      	ldr	r3, [pc, #216]	; (800aa98 <pvPortMalloc+0x180>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d050      	beq.n	800aa68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2208      	movs	r2, #8
 800a9cc:	4413      	add	r3, r2
 800a9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	1ad2      	subs	r2, r2, r3
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d91f      	bls.n	800aa28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	f003 0307 	and.w	r3, r3, #7
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <pvPortMalloc+0xf8>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	613b      	str	r3, [r7, #16]
}
 800aa0c:	bf00      	nop
 800aa0e:	e7fe      	b.n	800aa0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	1ad2      	subs	r2, r2, r3
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa22:	69b8      	ldr	r0, [r7, #24]
 800aa24:	f000 f908 	bl	800ac38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa28:	4b1d      	ldr	r3, [pc, #116]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	4a1b      	ldr	r2, [pc, #108]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa36:	4b1a      	ldr	r3, [pc, #104]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	4b1b      	ldr	r3, [pc, #108]	; (800aaa8 <pvPortMalloc+0x190>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d203      	bcs.n	800aa4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa42:	4b17      	ldr	r3, [pc, #92]	; (800aaa0 <pvPortMalloc+0x188>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a18      	ldr	r2, [pc, #96]	; (800aaa8 <pvPortMalloc+0x190>)
 800aa48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <pvPortMalloc+0x184>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	431a      	orrs	r2, r3
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa5e:	4b13      	ldr	r3, [pc, #76]	; (800aaac <pvPortMalloc+0x194>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3301      	adds	r3, #1
 800aa64:	4a11      	ldr	r2, [pc, #68]	; (800aaac <pvPortMalloc+0x194>)
 800aa66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa68:	f7fe fd02 	bl	8009470 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	f003 0307 	and.w	r3, r3, #7
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <pvPortMalloc+0x174>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	60fb      	str	r3, [r7, #12]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <pvPortMalloc+0x172>
	return pvReturn;
 800aa8c:	69fb      	ldr	r3, [r7, #28]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3728      	adds	r7, #40	; 0x28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	200068ec 	.word	0x200068ec
 800aa9c:	20006900 	.word	0x20006900
 800aaa0:	200068f0 	.word	0x200068f0
 800aaa4:	200068e4 	.word	0x200068e4
 800aaa8:	200068f4 	.word	0x200068f4
 800aaac:	200068f8 	.word	0x200068f8

0800aab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d04d      	beq.n	800ab5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aac2:	2308      	movs	r3, #8
 800aac4:	425b      	negs	r3, r3
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4413      	add	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	4b24      	ldr	r3, [pc, #144]	; (800ab68 <vPortFree+0xb8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4013      	ands	r3, r2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <vPortFree+0x44>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <vPortFree+0x62>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	60bb      	str	r3, [r7, #8]
}
 800ab0e:	bf00      	nop
 800ab10:	e7fe      	b.n	800ab10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	685a      	ldr	r2, [r3, #4]
 800ab16:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <vPortFree+0xb8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d01e      	beq.n	800ab5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11a      	bne.n	800ab5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <vPortFree+0xb8>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	43db      	mvns	r3, r3
 800ab32:	401a      	ands	r2, r3
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab38:	f7fe fc8c 	bl	8009454 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <vPortFree+0xbc>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4413      	add	r3, r2
 800ab46:	4a09      	ldr	r2, [pc, #36]	; (800ab6c <vPortFree+0xbc>)
 800ab48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab4a:	6938      	ldr	r0, [r7, #16]
 800ab4c:	f000 f874 	bl	800ac38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <vPortFree+0xc0>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3301      	adds	r3, #1
 800ab56:	4a06      	ldr	r2, [pc, #24]	; (800ab70 <vPortFree+0xc0>)
 800ab58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab5a:	f7fe fc89 	bl	8009470 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab5e:	bf00      	nop
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20006900 	.word	0x20006900
 800ab6c:	200068f0 	.word	0x200068f0
 800ab70:	200068fc 	.word	0x200068fc

0800ab74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab80:	4b27      	ldr	r3, [pc, #156]	; (800ac20 <prvHeapInit+0xac>)
 800ab82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00c      	beq.n	800aba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3307      	adds	r3, #7
 800ab92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f023 0307 	bic.w	r3, r3, #7
 800ab9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	4a1f      	ldr	r2, [pc, #124]	; (800ac20 <prvHeapInit+0xac>)
 800aba4:	4413      	add	r3, r2
 800aba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abac:	4a1d      	ldr	r2, [pc, #116]	; (800ac24 <prvHeapInit+0xb0>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abb2:	4b1c      	ldr	r3, [pc, #112]	; (800ac24 <prvHeapInit+0xb0>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4413      	add	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abc0:	2208      	movs	r2, #8
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0307 	bic.w	r3, r3, #7
 800abce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a15      	ldr	r2, [pc, #84]	; (800ac28 <prvHeapInit+0xb4>)
 800abd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <prvHeapInit+0xb4>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2200      	movs	r2, #0
 800abdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abde:	4b12      	ldr	r3, [pc, #72]	; (800ac28 <prvHeapInit+0xb4>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	1ad2      	subs	r2, r2, r3
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abf4:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <prvHeapInit+0xb4>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4a0a      	ldr	r2, [pc, #40]	; (800ac2c <prvHeapInit+0xb8>)
 800ac02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <prvHeapInit+0xbc>)
 800ac0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac0c:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <prvHeapInit+0xc0>)
 800ac0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac12:	601a      	str	r2, [r3, #0]
}
 800ac14:	bf00      	nop
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	20002ce4 	.word	0x20002ce4
 800ac24:	200068e4 	.word	0x200068e4
 800ac28:	200068ec 	.word	0x200068ec
 800ac2c:	200068f4 	.word	0x200068f4
 800ac30:	200068f0 	.word	0x200068f0
 800ac34:	20006900 	.word	0x20006900

0800ac38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac40:	4b28      	ldr	r3, [pc, #160]	; (800ace4 <prvInsertBlockIntoFreeList+0xac>)
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	e002      	b.n	800ac4c <prvInsertBlockIntoFreeList+0x14>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d8f7      	bhi.n	800ac46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	4413      	add	r3, r2
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d108      	bne.n	800ac7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	441a      	add	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	441a      	add	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d118      	bne.n	800acc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b15      	ldr	r3, [pc, #84]	; (800ace8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d00d      	beq.n	800acb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	441a      	add	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	e008      	b.n	800acc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acb6:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <prvInsertBlockIntoFreeList+0xb0>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	e003      	b.n	800acc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	429a      	cmp	r2, r3
 800acce:	d002      	beq.n	800acd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acd6:	bf00      	nop
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	200068e4 	.word	0x200068e4
 800ace8:	200068ec 	.word	0x200068ec

0800acec <__libc_init_array>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	4d0d      	ldr	r5, [pc, #52]	; (800ad24 <__libc_init_array+0x38>)
 800acf0:	4c0d      	ldr	r4, [pc, #52]	; (800ad28 <__libc_init_array+0x3c>)
 800acf2:	1b64      	subs	r4, r4, r5
 800acf4:	10a4      	asrs	r4, r4, #2
 800acf6:	2600      	movs	r6, #0
 800acf8:	42a6      	cmp	r6, r4
 800acfa:	d109      	bne.n	800ad10 <__libc_init_array+0x24>
 800acfc:	4d0b      	ldr	r5, [pc, #44]	; (800ad2c <__libc_init_array+0x40>)
 800acfe:	4c0c      	ldr	r4, [pc, #48]	; (800ad30 <__libc_init_array+0x44>)
 800ad00:	f000 f82e 	bl	800ad60 <_init>
 800ad04:	1b64      	subs	r4, r4, r5
 800ad06:	10a4      	asrs	r4, r4, #2
 800ad08:	2600      	movs	r6, #0
 800ad0a:	42a6      	cmp	r6, r4
 800ad0c:	d105      	bne.n	800ad1a <__libc_init_array+0x2e>
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad14:	4798      	blx	r3
 800ad16:	3601      	adds	r6, #1
 800ad18:	e7ee      	b.n	800acf8 <__libc_init_array+0xc>
 800ad1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad1e:	4798      	blx	r3
 800ad20:	3601      	adds	r6, #1
 800ad22:	e7f2      	b.n	800ad0a <__libc_init_array+0x1e>
 800ad24:	0800af78 	.word	0x0800af78
 800ad28:	0800af78 	.word	0x0800af78
 800ad2c:	0800af78 	.word	0x0800af78
 800ad30:	0800af84 	.word	0x0800af84

0800ad34 <memcpy>:
 800ad34:	440a      	add	r2, r1
 800ad36:	4291      	cmp	r1, r2
 800ad38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad3c:	d100      	bne.n	800ad40 <memcpy+0xc>
 800ad3e:	4770      	bx	lr
 800ad40:	b510      	push	{r4, lr}
 800ad42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad4a:	4291      	cmp	r1, r2
 800ad4c:	d1f9      	bne.n	800ad42 <memcpy+0xe>
 800ad4e:	bd10      	pop	{r4, pc}

0800ad50 <memset>:
 800ad50:	4402      	add	r2, r0
 800ad52:	4603      	mov	r3, r0
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d100      	bne.n	800ad5a <memset+0xa>
 800ad58:	4770      	bx	lr
 800ad5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad5e:	e7f9      	b.n	800ad54 <memset+0x4>

0800ad60 <_init>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	bf00      	nop
 800ad64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad66:	bc08      	pop	{r3}
 800ad68:	469e      	mov	lr, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_fini>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr
